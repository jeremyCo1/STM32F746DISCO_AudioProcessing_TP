
F746disco-audio-processing-RTOS-TP-SIA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001b3ec  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002568  0801b5c0  0801b5c0  0002b5c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801db28  0801db28  0003022c  2**0
                  CONTENTS
  4 .ARM          00000008  0801db28  0801db28  0002db28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801db30  0801db30  0003022c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801db30  0801db30  0002db30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801db34  0801db34  0002db34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000022c  20000000  0801db38  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0004a500  20000230  0801dd64  00030230  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  2004a730  0801dd64  0003a730  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003022c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004cb94  00000000  00000000  0003025c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00009dbc  00000000  00000000  0007cdf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00003578  00000000  00000000  00086bb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00003148  00000000  00000000  0008a128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00039a0a  00000000  00000000  0008d270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000478c8  00000000  00000000  000c6c7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00128579  00000000  00000000  0010e542  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00236abb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000f278  00000000  00000000  00236b10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000230 	.word	0x20000230
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801b5a4 	.word	0x0801b5a4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000234 	.word	0x20000234
 800020c:	0801b5a4 	.word	0x0801b5a4

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b96e 	b.w	8000edc <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468c      	mov	ip, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	f040 8083 	bne.w	8000d2e <__udivmoddi4+0x116>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4617      	mov	r7, r2
 8000c2c:	d947      	bls.n	8000cbe <__udivmoddi4+0xa6>
 8000c2e:	fab2 f282 	clz	r2, r2
 8000c32:	b142      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c34:	f1c2 0020 	rsb	r0, r2, #32
 8000c38:	fa24 f000 	lsr.w	r0, r4, r0
 8000c3c:	4091      	lsls	r1, r2
 8000c3e:	4097      	lsls	r7, r2
 8000c40:	ea40 0c01 	orr.w	ip, r0, r1
 8000c44:	4094      	lsls	r4, r2
 8000c46:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c4a:	0c23      	lsrs	r3, r4, #16
 8000c4c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c50:	fa1f fe87 	uxth.w	lr, r7
 8000c54:	fb08 c116 	mls	r1, r8, r6, ip
 8000c58:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c60:	4299      	cmp	r1, r3
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x60>
 8000c64:	18fb      	adds	r3, r7, r3
 8000c66:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6a:	f080 8119 	bcs.w	8000ea0 <__udivmoddi4+0x288>
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	f240 8116 	bls.w	8000ea0 <__udivmoddi4+0x288>
 8000c74:	3e02      	subs	r6, #2
 8000c76:	443b      	add	r3, r7
 8000c78:	1a5b      	subs	r3, r3, r1
 8000c7a:	b2a4      	uxth	r4, r4
 8000c7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c80:	fb08 3310 	mls	r3, r8, r0, r3
 8000c84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c88:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c8c:	45a6      	cmp	lr, r4
 8000c8e:	d909      	bls.n	8000ca4 <__udivmoddi4+0x8c>
 8000c90:	193c      	adds	r4, r7, r4
 8000c92:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c96:	f080 8105 	bcs.w	8000ea4 <__udivmoddi4+0x28c>
 8000c9a:	45a6      	cmp	lr, r4
 8000c9c:	f240 8102 	bls.w	8000ea4 <__udivmoddi4+0x28c>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	443c      	add	r4, r7
 8000ca4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ca8:	eba4 040e 	sub.w	r4, r4, lr
 8000cac:	2600      	movs	r6, #0
 8000cae:	b11d      	cbz	r5, 8000cb8 <__udivmoddi4+0xa0>
 8000cb0:	40d4      	lsrs	r4, r2
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cb8:	4631      	mov	r1, r6
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	b902      	cbnz	r2, 8000cc2 <__udivmoddi4+0xaa>
 8000cc0:	deff      	udf	#255	; 0xff
 8000cc2:	fab2 f282 	clz	r2, r2
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	d150      	bne.n	8000d6c <__udivmoddi4+0x154>
 8000cca:	1bcb      	subs	r3, r1, r7
 8000ccc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cd0:	fa1f f887 	uxth.w	r8, r7
 8000cd4:	2601      	movs	r6, #1
 8000cd6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cda:	0c21      	lsrs	r1, r4, #16
 8000cdc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ce0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ce4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ce8:	428b      	cmp	r3, r1
 8000cea:	d907      	bls.n	8000cfc <__udivmoddi4+0xe4>
 8000cec:	1879      	adds	r1, r7, r1
 8000cee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0xe2>
 8000cf4:	428b      	cmp	r3, r1
 8000cf6:	f200 80e9 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000cfa:	4684      	mov	ip, r0
 8000cfc:	1ac9      	subs	r1, r1, r3
 8000cfe:	b2a3      	uxth	r3, r4
 8000d00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d04:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d08:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d0c:	fb08 f800 	mul.w	r8, r8, r0
 8000d10:	45a0      	cmp	r8, r4
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x10c>
 8000d14:	193c      	adds	r4, r7, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x10a>
 8000d1c:	45a0      	cmp	r8, r4
 8000d1e:	f200 80d9 	bhi.w	8000ed4 <__udivmoddi4+0x2bc>
 8000d22:	4618      	mov	r0, r3
 8000d24:	eba4 0408 	sub.w	r4, r4, r8
 8000d28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d2c:	e7bf      	b.n	8000cae <__udivmoddi4+0x96>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0x12e>
 8000d32:	2d00      	cmp	r5, #0
 8000d34:	f000 80b1 	beq.w	8000e9a <__udivmoddi4+0x282>
 8000d38:	2600      	movs	r6, #0
 8000d3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3e:	4630      	mov	r0, r6
 8000d40:	4631      	mov	r1, r6
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	fab3 f683 	clz	r6, r3
 8000d4a:	2e00      	cmp	r6, #0
 8000d4c:	d14a      	bne.n	8000de4 <__udivmoddi4+0x1cc>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d302      	bcc.n	8000d58 <__udivmoddi4+0x140>
 8000d52:	4282      	cmp	r2, r0
 8000d54:	f200 80b8 	bhi.w	8000ec8 <__udivmoddi4+0x2b0>
 8000d58:	1a84      	subs	r4, r0, r2
 8000d5a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d5e:	2001      	movs	r0, #1
 8000d60:	468c      	mov	ip, r1
 8000d62:	2d00      	cmp	r5, #0
 8000d64:	d0a8      	beq.n	8000cb8 <__udivmoddi4+0xa0>
 8000d66:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d6a:	e7a5      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000d6c:	f1c2 0320 	rsb	r3, r2, #32
 8000d70:	fa20 f603 	lsr.w	r6, r0, r3
 8000d74:	4097      	lsls	r7, r2
 8000d76:	fa01 f002 	lsl.w	r0, r1, r2
 8000d7a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d7e:	40d9      	lsrs	r1, r3
 8000d80:	4330      	orrs	r0, r6
 8000d82:	0c03      	lsrs	r3, r0, #16
 8000d84:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d88:	fa1f f887 	uxth.w	r8, r7
 8000d8c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d94:	fb06 f108 	mul.w	r1, r6, r8
 8000d98:	4299      	cmp	r1, r3
 8000d9a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d9e:	d909      	bls.n	8000db4 <__udivmoddi4+0x19c>
 8000da0:	18fb      	adds	r3, r7, r3
 8000da2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000da6:	f080 808d 	bcs.w	8000ec4 <__udivmoddi4+0x2ac>
 8000daa:	4299      	cmp	r1, r3
 8000dac:	f240 808a 	bls.w	8000ec4 <__udivmoddi4+0x2ac>
 8000db0:	3e02      	subs	r6, #2
 8000db2:	443b      	add	r3, r7
 8000db4:	1a5b      	subs	r3, r3, r1
 8000db6:	b281      	uxth	r1, r0
 8000db8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dbc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dc4:	fb00 f308 	mul.w	r3, r0, r8
 8000dc8:	428b      	cmp	r3, r1
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x1c4>
 8000dcc:	1879      	adds	r1, r7, r1
 8000dce:	f100 3cff 	add.w	ip, r0, #4294967295
 8000dd2:	d273      	bcs.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd4:	428b      	cmp	r3, r1
 8000dd6:	d971      	bls.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd8:	3802      	subs	r0, #2
 8000dda:	4439      	add	r1, r7
 8000ddc:	1acb      	subs	r3, r1, r3
 8000dde:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000de2:	e778      	b.n	8000cd6 <__udivmoddi4+0xbe>
 8000de4:	f1c6 0c20 	rsb	ip, r6, #32
 8000de8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dec:	fa22 f30c 	lsr.w	r3, r2, ip
 8000df0:	431c      	orrs	r4, r3
 8000df2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000df6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dfe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e02:	431f      	orrs	r7, r3
 8000e04:	0c3b      	lsrs	r3, r7, #16
 8000e06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e0a:	fa1f f884 	uxth.w	r8, r4
 8000e0e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e12:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e16:	fb09 fa08 	mul.w	sl, r9, r8
 8000e1a:	458a      	cmp	sl, r1
 8000e1c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e20:	fa00 f306 	lsl.w	r3, r0, r6
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x220>
 8000e26:	1861      	adds	r1, r4, r1
 8000e28:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e2c:	d248      	bcs.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e2e:	458a      	cmp	sl, r1
 8000e30:	d946      	bls.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e32:	f1a9 0902 	sub.w	r9, r9, #2
 8000e36:	4421      	add	r1, r4
 8000e38:	eba1 010a 	sub.w	r1, r1, sl
 8000e3c:	b2bf      	uxth	r7, r7
 8000e3e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e42:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e46:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e4a:	fb00 f808 	mul.w	r8, r0, r8
 8000e4e:	45b8      	cmp	r8, r7
 8000e50:	d907      	bls.n	8000e62 <__udivmoddi4+0x24a>
 8000e52:	19e7      	adds	r7, r4, r7
 8000e54:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e58:	d22e      	bcs.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5a:	45b8      	cmp	r8, r7
 8000e5c:	d92c      	bls.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5e:	3802      	subs	r0, #2
 8000e60:	4427      	add	r7, r4
 8000e62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e66:	eba7 0708 	sub.w	r7, r7, r8
 8000e6a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e6e:	454f      	cmp	r7, r9
 8000e70:	46c6      	mov	lr, r8
 8000e72:	4649      	mov	r1, r9
 8000e74:	d31a      	bcc.n	8000eac <__udivmoddi4+0x294>
 8000e76:	d017      	beq.n	8000ea8 <__udivmoddi4+0x290>
 8000e78:	b15d      	cbz	r5, 8000e92 <__udivmoddi4+0x27a>
 8000e7a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e7e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e82:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e86:	40f2      	lsrs	r2, r6
 8000e88:	ea4c 0202 	orr.w	r2, ip, r2
 8000e8c:	40f7      	lsrs	r7, r6
 8000e8e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e92:	2600      	movs	r6, #0
 8000e94:	4631      	mov	r1, r6
 8000e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e70b      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e9      	b.n	8000c78 <__udivmoddi4+0x60>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6fd      	b.n	8000ca4 <__udivmoddi4+0x8c>
 8000ea8:	4543      	cmp	r3, r8
 8000eaa:	d2e5      	bcs.n	8000e78 <__udivmoddi4+0x260>
 8000eac:	ebb8 0e02 	subs.w	lr, r8, r2
 8000eb0:	eb69 0104 	sbc.w	r1, r9, r4
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7df      	b.n	8000e78 <__udivmoddi4+0x260>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	e7d2      	b.n	8000e62 <__udivmoddi4+0x24a>
 8000ebc:	4660      	mov	r0, ip
 8000ebe:	e78d      	b.n	8000ddc <__udivmoddi4+0x1c4>
 8000ec0:	4681      	mov	r9, r0
 8000ec2:	e7b9      	b.n	8000e38 <__udivmoddi4+0x220>
 8000ec4:	4666      	mov	r6, ip
 8000ec6:	e775      	b.n	8000db4 <__udivmoddi4+0x19c>
 8000ec8:	4630      	mov	r0, r6
 8000eca:	e74a      	b.n	8000d62 <__udivmoddi4+0x14a>
 8000ecc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ed0:	4439      	add	r1, r7
 8000ed2:	e713      	b.n	8000cfc <__udivmoddi4+0xe4>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	443c      	add	r4, r7
 8000ed8:	e724      	b.n	8000d24 <__udivmoddi4+0x10c>
 8000eda:	bf00      	nop

08000edc <__aeabi_idiv0>:
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <audioLoop>:
 * This is the main audio loop (aka infinite while loop) which is responsible for real time audio processing tasks:
 * - transferring recorded audio from the DMA buffer to buf_input[]
 * - processing audio samples and writing them to buf_output[]
 * - transferring processed samples back to the DMA buffer
 */
void audioLoop() {
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0

	uiDisplayBasic();
 8000ee4:	f003 f8c0 	bl	8004068 <uiDisplayBasic>

	/* Initialize SDRAM buffers */
	memset((int16_t*) AUDIO_SCRATCH_ADDR, 0, AUDIO_SCRATCH_SIZE * 2); // note that the size argument here always refers to bytes whatever the data type
 8000ee8:	4a3d      	ldr	r2, [pc, #244]	; (8000fe0 <audioLoop+0x100>)
 8000eea:	2100      	movs	r1, #0
 8000eec:	483d      	ldr	r0, [pc, #244]	; (8000fe4 <audioLoop+0x104>)
 8000eee:	f017 f951 	bl	8018194 <memset>

	audio_rec_buffer_state = BUFFER_OFFSET_NONE;
 8000ef2:	4b3d      	ldr	r3, [pc, #244]	; (8000fe8 <audioLoop+0x108>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	601a      	str	r2, [r3, #0]

	// start SAI (audio) DMA transfers:
	startAudioDMA(buf_output, buf_input, AUDIO_DMA_BUF_SIZE);
 8000ef8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000efc:	493b      	ldr	r1, [pc, #236]	; (8000fec <audioLoop+0x10c>)
 8000efe:	483c      	ldr	r0, [pc, #240]	; (8000ff0 <audioLoop+0x110>)
 8000f00:	f003 fecc 	bl	8004c9c <startAudioDMA>

	/* main audio loop */
	while (1) {
		/* calculate average input level over 20 audio frames */
		accumulateInputLevels();
 8000f04:	f000 f880 	bl	8001008 <accumulateInputLevels>
		count++;
 8000f08:	4b3a      	ldr	r3, [pc, #232]	; (8000ff4 <audioLoop+0x114>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	3301      	adds	r3, #1
 8000f0e:	4a39      	ldr	r2, [pc, #228]	; (8000ff4 <audioLoop+0x114>)
 8000f10:	6013      	str	r3, [r2, #0]
		if (count >= 20) {
 8000f12:	4b38      	ldr	r3, [pc, #224]	; (8000ff4 <audioLoop+0x114>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	2b13      	cmp	r3, #19
 8000f18:	dd3c      	ble.n	8000f94 <audioLoop+0xb4>
			count = 0;
 8000f1a:	4b36      	ldr	r3, [pc, #216]	; (8000ff4 <audioLoop+0x114>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]
			inputLevelL *= 0.05;
 8000f20:	4b35      	ldr	r3, [pc, #212]	; (8000ff8 <audioLoop+0x118>)
 8000f22:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f26:	a32c      	add	r3, pc, #176	; (adr r3, 8000fd8 <audioLoop+0xf8>)
 8000f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f2c:	f7ff fb84 	bl	8000638 <__aeabi_dmul>
 8000f30:	4602      	mov	r2, r0
 8000f32:	460b      	mov	r3, r1
 8000f34:	4930      	ldr	r1, [pc, #192]	; (8000ff8 <audioLoop+0x118>)
 8000f36:	e9c1 2300 	strd	r2, r3, [r1]
			inputLevelR *= 0.05;
 8000f3a:	4b30      	ldr	r3, [pc, #192]	; (8000ffc <audioLoop+0x11c>)
 8000f3c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f40:	a325      	add	r3, pc, #148	; (adr r3, 8000fd8 <audioLoop+0xf8>)
 8000f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f46:	f7ff fb77 	bl	8000638 <__aeabi_dmul>
 8000f4a:	4602      	mov	r2, r0
 8000f4c:	460b      	mov	r3, r1
 8000f4e:	492b      	ldr	r1, [pc, #172]	; (8000ffc <audioLoop+0x11c>)
 8000f50:	e9c1 2300 	strd	r2, r3, [r1]
			uiDisplayInputLevel(inputLevelL, inputLevelR);
 8000f54:	4b28      	ldr	r3, [pc, #160]	; (8000ff8 <audioLoop+0x118>)
 8000f56:	ed93 7b00 	vldr	d7, [r3]
 8000f5a:	4b28      	ldr	r3, [pc, #160]	; (8000ffc <audioLoop+0x11c>)
 8000f5c:	ed93 6b00 	vldr	d6, [r3]
 8000f60:	eeb0 1a46 	vmov.f32	s2, s12
 8000f64:	eef0 1a66 	vmov.f32	s3, s13
 8000f68:	eeb0 0a47 	vmov.f32	s0, s14
 8000f6c:	eef0 0a67 	vmov.f32	s1, s15
 8000f70:	f003 f8b4 	bl	80040dc <uiDisplayInputLevel>
			inputLevelL = 0.;
 8000f74:	4920      	ldr	r1, [pc, #128]	; (8000ff8 <audioLoop+0x118>)
 8000f76:	f04f 0200 	mov.w	r2, #0
 8000f7a:	f04f 0300 	mov.w	r3, #0
 8000f7e:	e9c1 2300 	strd	r2, r3, [r1]
			inputLevelR = 0.;
 8000f82:	491e      	ldr	r1, [pc, #120]	; (8000ffc <audioLoop+0x11c>)
 8000f84:	f04f 0200 	mov.w	r2, #0
 8000f88:	f04f 0300 	mov.w	r3, #0
 8000f8c:	e9c1 2300 	strd	r2, r3, [r1]
		}

		/* Wait until first half block has been recorded */
		while (audio_rec_buffer_state != BUFFER_OFFSET_HALF) {
 8000f90:	e000      	b.n	8000f94 <audioLoop+0xb4>
			asm("NOP");
 8000f92:	bf00      	nop
		while (audio_rec_buffer_state != BUFFER_OFFSET_HALF) {
 8000f94:	4b14      	ldr	r3, [pc, #80]	; (8000fe8 <audioLoop+0x108>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	2b01      	cmp	r3, #1
 8000f9a:	d1fa      	bne.n	8000f92 <audioLoop+0xb2>
		}
		audio_rec_buffer_state = BUFFER_OFFSET_NONE;
 8000f9c:	4b12      	ldr	r3, [pc, #72]	; (8000fe8 <audioLoop+0x108>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	601a      	str	r2, [r3, #0]
		/* Copy recorded 1st half block */
		storeInSDRAM(buf_input);
 8000fa2:	4812      	ldr	r0, [pc, #72]	; (8000fec <audioLoop+0x10c>)
 8000fa4:	f000 fa0e 	bl	80013c4 <storeInSDRAM>
		//processAudioSDRAM(buf_output, buf_input);
		processAudioSDRAM_Delay(buf_output);
 8000fa8:	4811      	ldr	r0, [pc, #68]	; (8000ff0 <audioLoop+0x110>)
 8000faa:	f000 f90b 	bl	80011c4 <processAudioSDRAM_Delay>

		/* Wait until second half block has been recorded */
		while (audio_rec_buffer_state != BUFFER_OFFSET_FULL) {
 8000fae:	e000      	b.n	8000fb2 <audioLoop+0xd2>
			asm("NOP");
 8000fb0:	bf00      	nop
		while (audio_rec_buffer_state != BUFFER_OFFSET_FULL) {
 8000fb2:	4b0d      	ldr	r3, [pc, #52]	; (8000fe8 <audioLoop+0x108>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	2b02      	cmp	r3, #2
 8000fb8:	d1fa      	bne.n	8000fb0 <audioLoop+0xd0>
		}
		audio_rec_buffer_state = BUFFER_OFFSET_NONE;
 8000fba:	4b0b      	ldr	r3, [pc, #44]	; (8000fe8 <audioLoop+0x108>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
		/* Copy recorded 2nd half block */
		storeInSDRAM(buf_input_half);
 8000fc0:	4b0f      	ldr	r3, [pc, #60]	; (8001000 <audioLoop+0x120>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f000 f9fd 	bl	80013c4 <storeInSDRAM>
		//processAudioSDRAM(buf_output_half, buf_input_half);
		processAudioSDRAM_Delay(buf_output_half);
 8000fca:	4b0e      	ldr	r3, [pc, #56]	; (8001004 <audioLoop+0x124>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f000 f8f8 	bl	80011c4 <processAudioSDRAM_Delay>
		accumulateInputLevels();
 8000fd4:	e796      	b.n	8000f04 <audioLoop+0x24>
 8000fd6:	bf00      	nop
 8000fd8:	9999999a 	.word	0x9999999a
 8000fdc:	3fa99999 	.word	0x3fa99999
 8000fe0:	0076a000 	.word	0x0076a000
 8000fe4:	c0096000 	.word	0xc0096000
 8000fe8:	2000966c 	.word	0x2000966c
 8000fec:	2000866c 	.word	0x2000866c
 8000ff0:	20008e6c 	.word	0x20008e6c
 8000ff4:	2000024c 	.word	0x2000024c
 8000ff8:	20000250 	.word	0x20000250
 8000ffc:	20000258 	.word	0x20000258
 8001000:	20000000 	.word	0x20000000
 8001004:	20000004 	.word	0x20000004

08001008 <accumulateInputLevels>:
 * Update input levels from the last audio frame (see global variable inputLevelL and inputLevelR).
 * Reminder: audio samples are actually interleaved L/R samples,
 * with left channel samples at even positions,
 * and right channel samples at odd positions.
 */
static void accumulateInputLevels() {
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af00      	add	r7, sp, #0

	// Left channel:
	uint32_t lvl = 0;
 800100e:	2300      	movs	r3, #0
 8001010:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < AUDIO_DMA_BUF_SIZE; i += 2) {
 8001012:	2300      	movs	r3, #0
 8001014:	60bb      	str	r3, [r7, #8]
 8001016:	e016      	b.n	8001046 <accumulateInputLevels+0x3e>
		int16_t v = (int16_t) buf_input[i];
 8001018:	4a3e      	ldr	r2, [pc, #248]	; (8001114 <accumulateInputLevels+0x10c>)
 800101a:	68bb      	ldr	r3, [r7, #8]
 800101c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001020:	803b      	strh	r3, [r7, #0]
		if (v > 0)
 8001022:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001026:	2b00      	cmp	r3, #0
 8001028:	dd05      	ble.n	8001036 <accumulateInputLevels+0x2e>
			lvl += v;
 800102a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800102e:	68fa      	ldr	r2, [r7, #12]
 8001030:	4413      	add	r3, r2
 8001032:	60fb      	str	r3, [r7, #12]
 8001034:	e004      	b.n	8001040 <accumulateInputLevels+0x38>
		else
			lvl -= v;
 8001036:	f9b7 3000 	ldrsh.w	r3, [r7]
 800103a:	68fa      	ldr	r2, [r7, #12]
 800103c:	1ad3      	subs	r3, r2, r3
 800103e:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < AUDIO_DMA_BUF_SIZE; i += 2) {
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	3302      	adds	r3, #2
 8001044:	60bb      	str	r3, [r7, #8]
 8001046:	68bb      	ldr	r3, [r7, #8]
 8001048:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800104c:	d3e4      	bcc.n	8001018 <accumulateInputLevels+0x10>
	}
	inputLevelL += (double) lvl / AUDIO_DMA_BUF_SIZE / (1 << 15);
 800104e:	68f8      	ldr	r0, [r7, #12]
 8001050:	f7ff fa78 	bl	8000544 <__aeabi_ui2d>
 8001054:	f04f 0200 	mov.w	r2, #0
 8001058:	4b2f      	ldr	r3, [pc, #188]	; (8001118 <accumulateInputLevels+0x110>)
 800105a:	f7ff fc17 	bl	800088c <__aeabi_ddiv>
 800105e:	4602      	mov	r2, r0
 8001060:	460b      	mov	r3, r1
 8001062:	4610      	mov	r0, r2
 8001064:	4619      	mov	r1, r3
 8001066:	f04f 0200 	mov.w	r2, #0
 800106a:	4b2c      	ldr	r3, [pc, #176]	; (800111c <accumulateInputLevels+0x114>)
 800106c:	f7ff fc0e 	bl	800088c <__aeabi_ddiv>
 8001070:	4602      	mov	r2, r0
 8001072:	460b      	mov	r3, r1
 8001074:	4610      	mov	r0, r2
 8001076:	4619      	mov	r1, r3
 8001078:	4b29      	ldr	r3, [pc, #164]	; (8001120 <accumulateInputLevels+0x118>)
 800107a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800107e:	f7ff f925 	bl	80002cc <__adddf3>
 8001082:	4602      	mov	r2, r0
 8001084:	460b      	mov	r3, r1
 8001086:	4926      	ldr	r1, [pc, #152]	; (8001120 <accumulateInputLevels+0x118>)
 8001088:	e9c1 2300 	strd	r2, r3, [r1]

	// Right channel:
	lvl = 0;
 800108c:	2300      	movs	r3, #0
 800108e:	60fb      	str	r3, [r7, #12]
	for (int i = 1; i < AUDIO_DMA_BUF_SIZE; i += 2) {
 8001090:	2301      	movs	r3, #1
 8001092:	607b      	str	r3, [r7, #4]
 8001094:	e016      	b.n	80010c4 <accumulateInputLevels+0xbc>
		int16_t v = (int16_t) buf_input[i];
 8001096:	4a1f      	ldr	r2, [pc, #124]	; (8001114 <accumulateInputLevels+0x10c>)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800109e:	807b      	strh	r3, [r7, #2]
		if (v > 0)
 80010a0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	dd05      	ble.n	80010b4 <accumulateInputLevels+0xac>
			lvl += v;
 80010a8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80010ac:	68fa      	ldr	r2, [r7, #12]
 80010ae:	4413      	add	r3, r2
 80010b0:	60fb      	str	r3, [r7, #12]
 80010b2:	e004      	b.n	80010be <accumulateInputLevels+0xb6>
		else
			lvl -= v;
 80010b4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80010b8:	68fa      	ldr	r2, [r7, #12]
 80010ba:	1ad3      	subs	r3, r2, r3
 80010bc:	60fb      	str	r3, [r7, #12]
	for (int i = 1; i < AUDIO_DMA_BUF_SIZE; i += 2) {
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	3302      	adds	r3, #2
 80010c2:	607b      	str	r3, [r7, #4]
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010ca:	d3e4      	bcc.n	8001096 <accumulateInputLevels+0x8e>
	}
	inputLevelR += (double) lvl / AUDIO_DMA_BUF_SIZE / (1 << 15);
 80010cc:	68f8      	ldr	r0, [r7, #12]
 80010ce:	f7ff fa39 	bl	8000544 <__aeabi_ui2d>
 80010d2:	f04f 0200 	mov.w	r2, #0
 80010d6:	4b10      	ldr	r3, [pc, #64]	; (8001118 <accumulateInputLevels+0x110>)
 80010d8:	f7ff fbd8 	bl	800088c <__aeabi_ddiv>
 80010dc:	4602      	mov	r2, r0
 80010de:	460b      	mov	r3, r1
 80010e0:	4610      	mov	r0, r2
 80010e2:	4619      	mov	r1, r3
 80010e4:	f04f 0200 	mov.w	r2, #0
 80010e8:	4b0c      	ldr	r3, [pc, #48]	; (800111c <accumulateInputLevels+0x114>)
 80010ea:	f7ff fbcf 	bl	800088c <__aeabi_ddiv>
 80010ee:	4602      	mov	r2, r0
 80010f0:	460b      	mov	r3, r1
 80010f2:	4610      	mov	r0, r2
 80010f4:	4619      	mov	r1, r3
 80010f6:	4b0b      	ldr	r3, [pc, #44]	; (8001124 <accumulateInputLevels+0x11c>)
 80010f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010fc:	f7ff f8e6 	bl	80002cc <__adddf3>
 8001100:	4602      	mov	r2, r0
 8001102:	460b      	mov	r3, r1
 8001104:	4907      	ldr	r1, [pc, #28]	; (8001124 <accumulateInputLevels+0x11c>)
 8001106:	e9c1 2300 	strd	r2, r3, [r1]
	;
}
 800110a:	bf00      	nop
 800110c:	3710      	adds	r7, #16
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	2000866c 	.word	0x2000866c
 8001118:	40900000 	.word	0x40900000
 800111c:	40e00000 	.word	0x40e00000
 8001120:	20000250 	.word	0x20000250
 8001124:	20000258 	.word	0x20000258

08001128 <HAL_SAI_RxCpltCallback>:
// --------------------------- Callbacks implementation ---------------------------

/**
 * Audio IN DMA Transfer complete interrupt.
 */
void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai) {
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
	audio_rec_buffer_state = BUFFER_OFFSET_FULL;
 8001130:	4b04      	ldr	r3, [pc, #16]	; (8001144 <HAL_SAI_RxCpltCallback+0x1c>)
 8001132:	2202      	movs	r2, #2
 8001134:	601a      	str	r2, [r3, #0]
	return;
 8001136:	bf00      	nop
}
 8001138:	370c      	adds	r7, #12
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	2000966c 	.word	0x2000966c

08001148 <HAL_SAI_RxHalfCpltCallback>:

/**
 * Audio IN DMA Half Transfer complete interrupt.
 */
void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai) {
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
	audio_rec_buffer_state = BUFFER_OFFSET_HALF;
 8001150:	4b04      	ldr	r3, [pc, #16]	; (8001164 <HAL_SAI_RxHalfCpltCallback+0x1c>)
 8001152:	2201      	movs	r2, #1
 8001154:	601a      	str	r2, [r3, #0]
	return;
 8001156:	bf00      	nop
}
 8001158:	370c      	adds	r7, #12
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	2000966c 	.word	0x2000966c

08001168 <readInt16FromSDRAM>:
}

/**
 * Read a 16 bit integer from SDRAM at position "pos"
 */
static int16_t readInt16FromSDRAM(int pos) {
 8001168:	b480      	push	{r7}
 800116a:	b085      	sub	sp, #20
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]

	__IO int16_t *pSdramAddress = (int16_t*) AUDIO_SCRATCH_ADDR;
 8001170:	4b07      	ldr	r3, [pc, #28]	; (8001190 <readInt16FromSDRAM+0x28>)
 8001172:	60fb      	str	r3, [r7, #12]
	pSdramAddress += pos;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	005b      	lsls	r3, r3, #1
 8001178:	68fa      	ldr	r2, [r7, #12]
 800117a:	4413      	add	r3, r2
 800117c:	60fb      	str	r3, [r7, #12]
	//return *(__IO int16_t*) pSdramAddress;
	return *pSdramAddress;
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	881b      	ldrh	r3, [r3, #0]
 8001182:	b21b      	sxth	r3, r3

}
 8001184:	4618      	mov	r0, r3
 8001186:	3714      	adds	r7, #20
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr
 8001190:	c0096000 	.word	0xc0096000

08001194 <writeInt16ToSDRAM>:

/**
 * Write the given 16 bit integer to the SDRAM at position "pos"
 */
static void writeInt16ToSDRAM(int16_t val, int pos) {
 8001194:	b480      	push	{r7}
 8001196:	b085      	sub	sp, #20
 8001198:	af00      	add	r7, sp, #0
 800119a:	4603      	mov	r3, r0
 800119c:	6039      	str	r1, [r7, #0]
 800119e:	80fb      	strh	r3, [r7, #6]

	__IO int16_t *pSdramAddress = (int16_t*) AUDIO_SCRATCH_ADDR;
 80011a0:	4b07      	ldr	r3, [pc, #28]	; (80011c0 <writeInt16ToSDRAM+0x2c>)
 80011a2:	60fb      	str	r3, [r7, #12]
	pSdramAddress += pos;
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	005b      	lsls	r3, r3, #1
 80011a8:	68fa      	ldr	r2, [r7, #12]
 80011aa:	4413      	add	r3, r2
 80011ac:	60fb      	str	r3, [r7, #12]
	//*(__IO int16_t*) pSdramAddress = val;
	*pSdramAddress = val;
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	88fa      	ldrh	r2, [r7, #6]
 80011b2:	801a      	strh	r2, [r3, #0]

}
 80011b4:	bf00      	nop
 80011b6:	3714      	adds	r7, #20
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr
 80011c0:	c0096000 	.word	0xc0096000

080011c4 <processAudioSDRAM_Delay>:
/*
 * 1 échantillon = 10.42 us
 * 1 delay de 0.5s -> 42985
 * Si N impair -> mélange audio gauche et droite
 */
static void processAudioSDRAM_Delay(int16_t *out) {
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b088      	sub	sp, #32
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
	int N = 47984;
 80011cc:	f64b 3370 	movw	r3, #47984	; 0xbb70
 80011d0:	61bb      	str	r3, [r7, #24]
	float fb = 0.60;
 80011d2:	4b76      	ldr	r3, [pc, #472]	; (80013ac <processAudioSDRAM_Delay+0x1e8>)
 80011d4:	617b      	str	r3, [r7, #20]
	float D = 0.75;
 80011d6:	f04f 537d 	mov.w	r3, #1061158912	; 0x3f400000
 80011da:	613b      	str	r3, [r7, #16]
	float W = 0.25;
 80011dc:	f04f 537a 	mov.w	r3, #1048576000	; 0x3e800000
 80011e0:	60fb      	str	r3, [r7, #12]

	for (int n = 0; n < AUDIO_BUF_SIZE; n++){
 80011e2:	2300      	movs	r3, #0
 80011e4:	61fb      	str	r3, [r7, #28]
 80011e6:	e0d7      	b.n	8001398 <processAudioSDRAM_Delay+0x1d4>
		if((i_readSDRAM-N) < 0){
 80011e8:	4b71      	ldr	r3, [pc, #452]	; (80013b0 <processAudioSDRAM_Delay+0x1ec>)
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	69bb      	ldr	r3, [r7, #24]
 80011ee:	1ad3      	subs	r3, r2, r3
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	da11      	bge.n	8001218 <processAudioSDRAM_Delay+0x54>
			i_readDelaySDRAM = ((i_readSDRAM-N)*(-1))%AUDIO_SDRAM_SIZE;
 80011f4:	4b6e      	ldr	r3, [pc, #440]	; (80013b0 <processAudioSDRAM_Delay+0x1ec>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	69ba      	ldr	r2, [r7, #24]
 80011fa:	1ad3      	subs	r3, r2, r3
 80011fc:	461a      	mov	r2, r3
 80011fe:	4b6d      	ldr	r3, [pc, #436]	; (80013b4 <processAudioSDRAM_Delay+0x1f0>)
 8001200:	fba3 1302 	umull	r1, r3, r3, r2
 8001204:	0c1b      	lsrs	r3, r3, #16
 8001206:	f44f 217a 	mov.w	r1, #1024000	; 0xfa000
 800120a:	fb01 f303 	mul.w	r3, r1, r3
 800120e:	1ad3      	subs	r3, r2, r3
 8001210:	461a      	mov	r2, r3
 8001212:	4b69      	ldr	r3, [pc, #420]	; (80013b8 <processAudioSDRAM_Delay+0x1f4>)
 8001214:	601a      	str	r2, [r3, #0]
 8001216:	e005      	b.n	8001224 <processAudioSDRAM_Delay+0x60>
		}else{
			i_readDelaySDRAM = (i_readSDRAM-N);
 8001218:	4b65      	ldr	r3, [pc, #404]	; (80013b0 <processAudioSDRAM_Delay+0x1ec>)
 800121a:	681a      	ldr	r2, [r3, #0]
 800121c:	69bb      	ldr	r3, [r7, #24]
 800121e:	1ad3      	subs	r3, r2, r3
 8001220:	4a65      	ldr	r2, [pc, #404]	; (80013b8 <processAudioSDRAM_Delay+0x1f4>)
 8001222:	6013      	str	r3, [r2, #0]
		}

		if((i_readWriteSDRAM_Out - N) < AUDIO_SDRAM_SIZE){
 8001224:	4b65      	ldr	r3, [pc, #404]	; (80013bc <processAudioSDRAM_Delay+0x1f8>)
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	69bb      	ldr	r3, [r7, #24]
 800122a:	1ad3      	subs	r3, r2, r3
 800122c:	f5b3 2f7a 	cmp.w	r3, #1024000	; 0xfa000
 8001230:	d207      	bcs.n	8001242 <processAudioSDRAM_Delay+0x7e>
			i_readDelaySDRAM_Out = i_readWriteSDRAM_Out + AUDIO_SDRAM_SIZE;
 8001232:	4b62      	ldr	r3, [pc, #392]	; (80013bc <processAudioSDRAM_Delay+0x1f8>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f503 237a 	add.w	r3, r3, #1024000	; 0xfa000
 800123a:	461a      	mov	r2, r3
 800123c:	4b60      	ldr	r3, [pc, #384]	; (80013c0 <processAudioSDRAM_Delay+0x1fc>)
 800123e:	601a      	str	r2, [r3, #0]
 8001240:	e005      	b.n	800124e <processAudioSDRAM_Delay+0x8a>
		}else{
			i_readDelaySDRAM_Out = (i_readWriteSDRAM_Out-N);
 8001242:	4b5e      	ldr	r3, [pc, #376]	; (80013bc <processAudioSDRAM_Delay+0x1f8>)
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	69bb      	ldr	r3, [r7, #24]
 8001248:	1ad3      	subs	r3, r2, r3
 800124a:	4a5d      	ldr	r2, [pc, #372]	; (80013c0 <processAudioSDRAM_Delay+0x1fc>)
 800124c:	6013      	str	r3, [r2, #0]
		}

		out[n] = readInt16FromSDRAM(i_readDelaySDRAM_Out) * fb;
 800124e:	4b5c      	ldr	r3, [pc, #368]	; (80013c0 <processAudioSDRAM_Delay+0x1fc>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4618      	mov	r0, r3
 8001254:	f7ff ff88 	bl	8001168 <readInt16FromSDRAM>
 8001258:	4603      	mov	r3, r0
 800125a:	ee07 3a90 	vmov	s15, r3
 800125e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001262:	edd7 7a05 	vldr	s15, [r7, #20]
 8001266:	ee67 7a27 	vmul.f32	s15, s14, s15
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	005b      	lsls	r3, r3, #1
 800126e:	687a      	ldr	r2, [r7, #4]
 8001270:	4413      	add	r3, r2
 8001272:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001276:	ee17 2a90 	vmov	r2, s15
 800127a:	b212      	sxth	r2, r2
 800127c:	801a      	strh	r2, [r3, #0]
		out[n] += readInt16FromSDRAM(i_readSDRAM);
 800127e:	4b4c      	ldr	r3, [pc, #304]	; (80013b0 <processAudioSDRAM_Delay+0x1ec>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4618      	mov	r0, r3
 8001284:	f7ff ff70 	bl	8001168 <readInt16FromSDRAM>
 8001288:	4603      	mov	r3, r0
 800128a:	4619      	mov	r1, r3
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	005b      	lsls	r3, r3, #1
 8001290:	687a      	ldr	r2, [r7, #4]
 8001292:	4413      	add	r3, r2
 8001294:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001298:	b29a      	uxth	r2, r3
 800129a:	b28b      	uxth	r3, r1
 800129c:	4413      	add	r3, r2
 800129e:	b299      	uxth	r1, r3
 80012a0:	69fb      	ldr	r3, [r7, #28]
 80012a2:	005b      	lsls	r3, r3, #1
 80012a4:	687a      	ldr	r2, [r7, #4]
 80012a6:	4413      	add	r3, r2
 80012a8:	b20a      	sxth	r2, r1
 80012aa:	801a      	strh	r2, [r3, #0]
		out[n] -= readInt16FromSDRAM(i_readDelaySDRAM) * D * fb;
 80012ac:	4b42      	ldr	r3, [pc, #264]	; (80013b8 <processAudioSDRAM_Delay+0x1f4>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4618      	mov	r0, r3
 80012b2:	f7ff ff59 	bl	8001168 <readInt16FromSDRAM>
 80012b6:	4603      	mov	r3, r0
 80012b8:	ee07 3a90 	vmov	s15, r3
 80012bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012c0:	edd7 7a04 	vldr	s15, [r7, #16]
 80012c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012c8:	edd7 7a05 	vldr	s15, [r7, #20]
 80012cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012d0:	69fb      	ldr	r3, [r7, #28]
 80012d2:	005b      	lsls	r3, r3, #1
 80012d4:	687a      	ldr	r2, [r7, #4]
 80012d6:	4413      	add	r3, r2
 80012d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012dc:	ee07 3a10 	vmov	s14, r3
 80012e0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80012e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012e8:	69fb      	ldr	r3, [r7, #28]
 80012ea:	005b      	lsls	r3, r3, #1
 80012ec:	687a      	ldr	r2, [r7, #4]
 80012ee:	4413      	add	r3, r2
 80012f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012f4:	ee17 2a90 	vmov	r2, s15
 80012f8:	b212      	sxth	r2, r2
 80012fa:	801a      	strh	r2, [r3, #0]
		out[n] += readInt16FromSDRAM(i_readDelaySDRAM) * W;
 80012fc:	4b2e      	ldr	r3, [pc, #184]	; (80013b8 <processAudioSDRAM_Delay+0x1f4>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4618      	mov	r0, r3
 8001302:	f7ff ff31 	bl	8001168 <readInt16FromSDRAM>
 8001306:	4603      	mov	r3, r0
 8001308:	ee07 3a90 	vmov	s15, r3
 800130c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001310:	edd7 7a03 	vldr	s15, [r7, #12]
 8001314:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001318:	69fb      	ldr	r3, [r7, #28]
 800131a:	005b      	lsls	r3, r3, #1
 800131c:	687a      	ldr	r2, [r7, #4]
 800131e:	4413      	add	r3, r2
 8001320:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001324:	ee07 3a90 	vmov	s15, r3
 8001328:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800132c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	005b      	lsls	r3, r3, #1
 8001334:	687a      	ldr	r2, [r7, #4]
 8001336:	4413      	add	r3, r2
 8001338:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800133c:	ee17 2a90 	vmov	r2, s15
 8001340:	b212      	sxth	r2, r2
 8001342:	801a      	strh	r2, [r3, #0]

		writeInt16ToSDRAM(out[n], i_readWriteSDRAM_Out);
 8001344:	69fb      	ldr	r3, [r7, #28]
 8001346:	005b      	lsls	r3, r3, #1
 8001348:	687a      	ldr	r2, [r7, #4]
 800134a:	4413      	add	r3, r2
 800134c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001350:	4a1a      	ldr	r2, [pc, #104]	; (80013bc <processAudioSDRAM_Delay+0x1f8>)
 8001352:	6812      	ldr	r2, [r2, #0]
 8001354:	4611      	mov	r1, r2
 8001356:	4618      	mov	r0, r3
 8001358:	f7ff ff1c 	bl	8001194 <writeInt16ToSDRAM>

		i_readSDRAM++;
 800135c:	4b14      	ldr	r3, [pc, #80]	; (80013b0 <processAudioSDRAM_Delay+0x1ec>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	3301      	adds	r3, #1
 8001362:	4a13      	ldr	r2, [pc, #76]	; (80013b0 <processAudioSDRAM_Delay+0x1ec>)
 8001364:	6013      	str	r3, [r2, #0]
		i_readWriteSDRAM_Out++;
 8001366:	4b15      	ldr	r3, [pc, #84]	; (80013bc <processAudioSDRAM_Delay+0x1f8>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	3301      	adds	r3, #1
 800136c:	4a13      	ldr	r2, [pc, #76]	; (80013bc <processAudioSDRAM_Delay+0x1f8>)
 800136e:	6013      	str	r3, [r2, #0]
		if(i_readSDRAM >= AUDIO_SDRAM_SIZE){
 8001370:	4b0f      	ldr	r3, [pc, #60]	; (80013b0 <processAudioSDRAM_Delay+0x1ec>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f5b3 2f7a 	cmp.w	r3, #1024000	; 0xfa000
 8001378:	d302      	bcc.n	8001380 <processAudioSDRAM_Delay+0x1bc>
			i_readSDRAM = 0;
 800137a:	4b0d      	ldr	r3, [pc, #52]	; (80013b0 <processAudioSDRAM_Delay+0x1ec>)
 800137c:	2200      	movs	r2, #0
 800137e:	601a      	str	r2, [r3, #0]
		}
		if(i_readWriteSDRAM_Out >= (AUDIO_SDRAM_SIZE + AUDIO_SDRAM_SIZE)){
 8001380:	4b0e      	ldr	r3, [pc, #56]	; (80013bc <processAudioSDRAM_Delay+0x1f8>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f5b3 1ffa 	cmp.w	r3, #2048000	; 0x1f4000
 8001388:	d303      	bcc.n	8001392 <processAudioSDRAM_Delay+0x1ce>
			i_readWriteSDRAM_Out = AUDIO_SDRAM_SIZE;
 800138a:	4b0c      	ldr	r3, [pc, #48]	; (80013bc <processAudioSDRAM_Delay+0x1f8>)
 800138c:	f44f 227a 	mov.w	r2, #1024000	; 0xfa000
 8001390:	601a      	str	r2, [r3, #0]
	for (int n = 0; n < AUDIO_BUF_SIZE; n++){
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	3301      	adds	r3, #1
 8001396:	61fb      	str	r3, [r7, #28]
 8001398:	69fb      	ldr	r3, [r7, #28]
 800139a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800139e:	f4ff af23 	bcc.w	80011e8 <processAudioSDRAM_Delay+0x24>
		}

	}
}
 80013a2:	bf00      	nop
 80013a4:	bf00      	nop
 80013a6:	3720      	adds	r7, #32
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	3f19999a 	.word	0x3f19999a
 80013b0:	20000264 	.word	0x20000264
 80013b4:	10624dd3 	.word	0x10624dd3
 80013b8:	20000268 	.word	0x20000268
 80013bc:	20000008 	.word	0x20000008
 80013c0:	2000000c 	.word	0x2000000c

080013c4 <storeInSDRAM>:

static void storeInSDRAM(int16_t *in){
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b084      	sub	sp, #16
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
	for (int n = 0; n < AUDIO_BUF_SIZE; n++){
 80013cc:	2300      	movs	r3, #0
 80013ce:	60fb      	str	r3, [r7, #12]
 80013d0:	e01b      	b.n	800140a <storeInSDRAM+0x46>
		writeInt16ToSDRAM(in[n], i_writeSDRAM);
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	005b      	lsls	r3, r3, #1
 80013d6:	687a      	ldr	r2, [r7, #4]
 80013d8:	4413      	add	r3, r2
 80013da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013de:	4a0f      	ldr	r2, [pc, #60]	; (800141c <storeInSDRAM+0x58>)
 80013e0:	6812      	ldr	r2, [r2, #0]
 80013e2:	4611      	mov	r1, r2
 80013e4:	4618      	mov	r0, r3
 80013e6:	f7ff fed5 	bl	8001194 <writeInt16ToSDRAM>
		i_writeSDRAM++;
 80013ea:	4b0c      	ldr	r3, [pc, #48]	; (800141c <storeInSDRAM+0x58>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	3301      	adds	r3, #1
 80013f0:	4a0a      	ldr	r2, [pc, #40]	; (800141c <storeInSDRAM+0x58>)
 80013f2:	6013      	str	r3, [r2, #0]
		if(i_writeSDRAM >= AUDIO_SDRAM_SIZE){
 80013f4:	4b09      	ldr	r3, [pc, #36]	; (800141c <storeInSDRAM+0x58>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f5b3 2f7a 	cmp.w	r3, #1024000	; 0xfa000
 80013fc:	d302      	bcc.n	8001404 <storeInSDRAM+0x40>
			i_writeSDRAM = 0;
 80013fe:	4b07      	ldr	r3, [pc, #28]	; (800141c <storeInSDRAM+0x58>)
 8001400:	2200      	movs	r2, #0
 8001402:	601a      	str	r2, [r3, #0]
	for (int n = 0; n < AUDIO_BUF_SIZE; n++){
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	3301      	adds	r3, #1
 8001408:	60fb      	str	r3, [r7, #12]
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001410:	d3df      	bcc.n	80013d2 <storeInSDRAM+0xe>
		}
	}
}
 8001412:	bf00      	nop
 8001414:	bf00      	nop
 8001416:	3710      	adds	r7, #16
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	20000260 	.word	0x20000260

08001420 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8001424:	bf00      	nop
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr

0800142e <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 800142e:	b480      	push	{r7}
 8001430:	b083      	sub	sp, #12
 8001432:	af00      	add	r7, sp, #0
 8001434:	6078      	str	r0, [r7, #4]
 8001436:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8001438:	bf00      	nop
 800143a:	370c      	adds	r7, #12
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr

08001444 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8001448:	bf00      	nop
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
	...

08001454 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001454:	b480      	push	{r7}
 8001456:	b085      	sub	sp, #20
 8001458:	af00      	add	r7, sp, #0
 800145a:	60f8      	str	r0, [r7, #12]
 800145c:	60b9      	str	r1, [r7, #8]
 800145e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	4a07      	ldr	r2, [pc, #28]	; (8001480 <vApplicationGetIdleTaskMemory+0x2c>)
 8001464:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001466:	68bb      	ldr	r3, [r7, #8]
 8001468:	4a06      	ldr	r2, [pc, #24]	; (8001484 <vApplicationGetIdleTaskMemory+0x30>)
 800146a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2280      	movs	r2, #128	; 0x80
 8001470:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001472:	bf00      	nop
 8001474:	3714      	adds	r7, #20
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	2000026c 	.word	0x2000026c
 8001484:	200002c4 	.word	0x200002c4

08001488 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800148c:	f3bf 8f4f 	dsb	sy
}
 8001490:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001492:	f3bf 8f6f 	isb	sy
}
 8001496:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001498:	4b0d      	ldr	r3, [pc, #52]	; (80014d0 <SCB_EnableICache+0x48>)
 800149a:	2200      	movs	r2, #0
 800149c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80014a0:	f3bf 8f4f 	dsb	sy
}
 80014a4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80014a6:	f3bf 8f6f 	isb	sy
}
 80014aa:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80014ac:	4b08      	ldr	r3, [pc, #32]	; (80014d0 <SCB_EnableICache+0x48>)
 80014ae:	695b      	ldr	r3, [r3, #20]
 80014b0:	4a07      	ldr	r2, [pc, #28]	; (80014d0 <SCB_EnableICache+0x48>)
 80014b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014b6:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80014b8:	f3bf 8f4f 	dsb	sy
}
 80014bc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80014be:	f3bf 8f6f 	isb	sy
}
 80014c2:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 80014c4:	bf00      	nop
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	e000ed00 	.word	0xe000ed00

080014d4 <SCB_InvalidateICache>:
/**
  \brief   Invalidate I-Cache
  \details Invalidates I-Cache
  */
__STATIC_INLINE void SCB_InvalidateICache (void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80014d8:	f3bf 8f4f 	dsb	sy
}
 80014dc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80014de:	f3bf 8f6f 	isb	sy
}
 80014e2:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;
 80014e4:	4b07      	ldr	r3, [pc, #28]	; (8001504 <SCB_InvalidateICache+0x30>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80014ec:	f3bf 8f4f 	dsb	sy
}
 80014f0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80014f2:	f3bf 8f6f 	isb	sy
}
 80014f6:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 80014f8:	bf00      	nop
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	e000ed00 	.word	0xe000ed00

08001508 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8001508:	b480      	push	{r7}
 800150a:	b085      	sub	sp, #20
 800150c:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800150e:	4b1f      	ldr	r3, [pc, #124]	; (800158c <SCB_EnableDCache+0x84>)
 8001510:	2200      	movs	r2, #0
 8001512:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001516:	f3bf 8f4f 	dsb	sy
}
 800151a:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800151c:	4b1b      	ldr	r3, [pc, #108]	; (800158c <SCB_EnableDCache+0x84>)
 800151e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001522:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	0b5b      	lsrs	r3, r3, #13
 8001528:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800152c:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	08db      	lsrs	r3, r3, #3
 8001532:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001536:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	015a      	lsls	r2, r3, #5
 800153c:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8001540:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8001542:	68ba      	ldr	r2, [r7, #8]
 8001544:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001546:	4911      	ldr	r1, [pc, #68]	; (800158c <SCB_EnableDCache+0x84>)
 8001548:	4313      	orrs	r3, r2
 800154a:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800154e:	68bb      	ldr	r3, [r7, #8]
 8001550:	1e5a      	subs	r2, r3, #1
 8001552:	60ba      	str	r2, [r7, #8]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d1ef      	bne.n	8001538 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	1e5a      	subs	r2, r3, #1
 800155c:	60fa      	str	r2, [r7, #12]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d1e5      	bne.n	800152e <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8001562:	f3bf 8f4f 	dsb	sy
}
 8001566:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001568:	4b08      	ldr	r3, [pc, #32]	; (800158c <SCB_EnableDCache+0x84>)
 800156a:	695b      	ldr	r3, [r3, #20]
 800156c:	4a07      	ldr	r2, [pc, #28]	; (800158c <SCB_EnableDCache+0x84>)
 800156e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001572:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001574:	f3bf 8f4f 	dsb	sy
}
 8001578:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800157a:	f3bf 8f6f 	isb	sy
}
 800157e:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8001580:	bf00      	nop
 8001582:	3714      	adds	r7, #20
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr
 800158c:	e000ed00 	.word	0xe000ed00

08001590 <SCB_InvalidateDCache>:
/**
  \brief   Invalidate D-Cache
  \details Invalidates D-Cache
  */
__STATIC_INLINE void SCB_InvalidateDCache (void)
{
 8001590:	b480      	push	{r7}
 8001592:	b085      	sub	sp, #20
 8001594:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8001596:	4b1b      	ldr	r3, [pc, #108]	; (8001604 <SCB_InvalidateDCache+0x74>)
 8001598:	2200      	movs	r2, #0
 800159a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800159e:	f3bf 8f4f 	dsb	sy
}
 80015a2:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80015a4:	4b17      	ldr	r3, [pc, #92]	; (8001604 <SCB_InvalidateDCache+0x74>)
 80015a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80015aa:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	0b5b      	lsrs	r3, r3, #13
 80015b0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80015b4:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	08db      	lsrs	r3, r3, #3
 80015ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80015be:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	015a      	lsls	r2, r3, #5
 80015c4:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80015c8:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80015ca:	68ba      	ldr	r2, [r7, #8]
 80015cc:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80015ce:	490d      	ldr	r1, [pc, #52]	; (8001604 <SCB_InvalidateDCache+0x74>)
 80015d0:	4313      	orrs	r3, r2
 80015d2:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80015d6:	68bb      	ldr	r3, [r7, #8]
 80015d8:	1e5a      	subs	r2, r3, #1
 80015da:	60ba      	str	r2, [r7, #8]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d1ef      	bne.n	80015c0 <SCB_InvalidateDCache+0x30>
    } while(sets-- != 0U);
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	1e5a      	subs	r2, r3, #1
 80015e4:	60fa      	str	r2, [r7, #12]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d1e5      	bne.n	80015b6 <SCB_InvalidateDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 80015ea:	f3bf 8f4f 	dsb	sy
}
 80015ee:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80015f0:	f3bf 8f6f 	isb	sy
}
 80015f4:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 80015f6:	bf00      	nop
 80015f8:	3714      	adds	r7, #20
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop
 8001604:	e000ed00 	.word	0xe000ed00

08001608 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001608:	b5b0      	push	{r4, r5, r7, lr}
 800160a:	b08e      	sub	sp, #56	; 0x38
 800160c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	SCB_InvalidateDCache();
 800160e:	f7ff ffbf 	bl	8001590 <SCB_InvalidateDCache>
	SCB_InvalidateICache();
 8001612:	f7ff ff5f 	bl	80014d4 <SCB_InvalidateICache>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001616:	f004 fb50 	bl	8005cba <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800161a:	f000 f879 	bl	8001710 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800161e:	f001 f8d7 	bl	80027d0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001622:	f001 f813 	bl	800264c <MX_DMA_Init>
  MX_ADC3_Init();
 8001626:	f000 f933 	bl	8001890 <MX_ADC3_Init>
  MX_CRC_Init();
 800162a:	f000 f983 	bl	8001934 <MX_CRC_Init>
  MX_DCMI_Init();
 800162e:	f000 f9a3 	bl	8001978 <MX_DCMI_Init>
  MX_DMA2D_Init();
 8001632:	f000 f9d5 	bl	80019e0 <MX_DMA2D_Init>
  MX_FMC_Init();
 8001636:	f001 f877 	bl	8002728 <MX_FMC_Init>
  MX_I2C1_Init();
 800163a:	f000 fa03 	bl	8001a44 <MX_I2C1_Init>
  MX_I2C3_Init();
 800163e:	f000 fa41 	bl	8001ac4 <MX_I2C3_Init>
  MX_LTDC_Init();
 8001642:	f000 fa7f 	bl	8001b44 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 8001646:	f000 fb01 	bl	8001c4c <MX_QUADSPI_Init>
  MX_RTC_Init();
 800164a:	f000 fb41 	bl	8001cd0 <MX_RTC_Init>
  MX_SAI2_Init();
 800164e:	f000 fbe5 	bl	8001e1c <MX_SAI2_Init>
  MX_SDMMC1_SD_Init();
 8001652:	f000 fc9f 	bl	8001f94 <MX_SDMMC1_SD_Init>
  MX_SPDIFRX_Init();
 8001656:	f000 fcbd 	bl	8001fd4 <MX_SPDIFRX_Init>
  MX_TIM1_Init();
 800165a:	f000 fceb 	bl	8002034 <MX_TIM1_Init>
  MX_TIM2_Init();
 800165e:	f000 fd95 	bl	800218c <MX_TIM2_Init>
  MX_TIM3_Init();
 8001662:	f000 fe09 	bl	8002278 <MX_TIM3_Init>
  MX_TIM5_Init();
 8001666:	f000 fe7f 	bl	8002368 <MX_TIM5_Init>
  MX_TIM8_Init();
 800166a:	f000 fef5 	bl	8002458 <MX_TIM8_Init>
  MX_TIM12_Init();
 800166e:	f000 ff47 	bl	8002500 <MX_TIM12_Init>
  MX_USART1_UART_Init();
 8001672:	f000 ff8b 	bl	800258c <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8001676:	f000 ffb9 	bl	80025ec <MX_USART6_UART_Init>
  MX_FATFS_Init();
 800167a:	f011 f8ad 	bl	80127d8 <MX_FATFS_Init>
  MX_LIBJPEG_Init();
 800167e:	f011 fafb 	bl	8012c78 <MX_LIBJPEG_Init>

	//MPU_Init(); // uncomment in case of weird behaviors with SDRAM or LCD, see comment at mpu.c:74

	/* post-init SDRAM */
	// Deactivate speculative/cache access to first FMC Bank to save FMC bandwidth
	FMC_Bank1->BTCR[0] = 0x000030D2;
 8001682:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8001686:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800168a:	601a      	str	r2, [r3, #0]

	/* post-init touchscreen */
	TS_Init();
 800168c:	f003 fbfa 	bl	8004e84 <TS_Init>
	printf("Touchscreen Init: OK\n");
 8001690:	4819      	ldr	r0, [pc, #100]	; (80016f8 <main+0xf0>)
 8001692:	f017 fb37 	bl	8018d04 <puts>

	SCB_EnableICache(); // comment out if in step debugging to avoid weird behaviours
 8001696:	f7ff fef7 	bl	8001488 <SCB_EnableICache>
	SCB_EnableDCache();
 800169a:	f7ff ff35 	bl	8001508 <SCB_EnableDCache>
	printf("Cache enabled\n");
 800169e:	4817      	ldr	r0, [pc, #92]	; (80016fc <main+0xf4>)
 80016a0:	f017 fb30 	bl	8018d04 <puts>

	//test();
	audioLoop(); // comment to use RTOS (see below)
 80016a4:	f7ff fc1c 	bl	8000ee0 <audioLoop>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1024);
 80016a8:	4b15      	ldr	r3, [pc, #84]	; (8001700 <main+0xf8>)
 80016aa:	f107 041c 	add.w	r4, r7, #28
 80016ae:	461d      	mov	r5, r3
 80016b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016b4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80016b8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80016bc:	f107 031c 	add.w	r3, r7, #28
 80016c0:	2100      	movs	r1, #0
 80016c2:	4618      	mov	r0, r3
 80016c4:	f013 fcda 	bl	801507c <osThreadCreate>
 80016c8:	4603      	mov	r3, r0
 80016ca:	4a0e      	ldr	r2, [pc, #56]	; (8001704 <main+0xfc>)
 80016cc:	6013      	str	r3, [r2, #0]

  /* definition and creation of uiTask */
  osThreadDef(uiTask, startUITask, osPriorityLow, 0, 2048);
 80016ce:	4b0e      	ldr	r3, [pc, #56]	; (8001708 <main+0x100>)
 80016d0:	463c      	mov	r4, r7
 80016d2:	461d      	mov	r5, r3
 80016d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016d8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80016dc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  uiTaskHandle = osThreadCreate(osThread(uiTask), NULL);
 80016e0:	463b      	mov	r3, r7
 80016e2:	2100      	movs	r1, #0
 80016e4:	4618      	mov	r0, r3
 80016e6:	f013 fcc9 	bl	801507c <osThreadCreate>
 80016ea:	4603      	mov	r3, r0
 80016ec:	4a07      	ldr	r2, [pc, #28]	; (800170c <main+0x104>)
 80016ee:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80016f0:	f013 fca1 	bl	8015036 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 80016f4:	e7fe      	b.n	80016f4 <main+0xec>
 80016f6:	bf00      	nop
 80016f8:	0801b5d4 	.word	0x0801b5d4
 80016fc:	0801b5ec 	.word	0x0801b5ec
 8001700:	0801b5fc 	.word	0x0801b5fc
 8001704:	200096f4 	.word	0x200096f4
 8001708:	0801b618 	.word	0x0801b618
 800170c:	20009ac0 	.word	0x20009ac0

08001710 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b0b4      	sub	sp, #208	; 0xd0
 8001714:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001716:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800171a:	2230      	movs	r2, #48	; 0x30
 800171c:	2100      	movs	r1, #0
 800171e:	4618      	mov	r0, r3
 8001720:	f016 fd38 	bl	8018194 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001724:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001728:	2200      	movs	r2, #0
 800172a:	601a      	str	r2, [r3, #0]
 800172c:	605a      	str	r2, [r3, #4]
 800172e:	609a      	str	r2, [r3, #8]
 8001730:	60da      	str	r2, [r3, #12]
 8001732:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001734:	f107 0308 	add.w	r3, r7, #8
 8001738:	2284      	movs	r2, #132	; 0x84
 800173a:	2100      	movs	r1, #0
 800173c:	4618      	mov	r0, r3
 800173e:	f016 fd29 	bl	8018194 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001742:	f009 f999 	bl	800aa78 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001746:	4b4f      	ldr	r3, [pc, #316]	; (8001884 <SystemClock_Config+0x174>)
 8001748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174a:	4a4e      	ldr	r2, [pc, #312]	; (8001884 <SystemClock_Config+0x174>)
 800174c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001750:	6413      	str	r3, [r2, #64]	; 0x40
 8001752:	4b4c      	ldr	r3, [pc, #304]	; (8001884 <SystemClock_Config+0x174>)
 8001754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001756:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800175a:	607b      	str	r3, [r7, #4]
 800175c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800175e:	4b4a      	ldr	r3, [pc, #296]	; (8001888 <SystemClock_Config+0x178>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a49      	ldr	r2, [pc, #292]	; (8001888 <SystemClock_Config+0x178>)
 8001764:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001768:	6013      	str	r3, [r2, #0]
 800176a:	4b47      	ldr	r3, [pc, #284]	; (8001888 <SystemClock_Config+0x178>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001772:	603b      	str	r3, [r7, #0]
 8001774:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001776:	2309      	movs	r3, #9
 8001778:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800177c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001780:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001784:	2301      	movs	r3, #1
 8001786:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800178a:	2302      	movs	r3, #2
 800178c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001790:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001794:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001798:	2319      	movs	r3, #25
 800179a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 800179e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80017a2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017a6:	2302      	movs	r3, #2
 80017a8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80017ac:	2309      	movs	r3, #9
 80017ae:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017b2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80017b6:	4618      	mov	r0, r3
 80017b8:	f00a f982 	bl	800bac0 <HAL_RCC_OscConfig>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d001      	beq.n	80017c6 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80017c2:	f001 fa87 	bl	8002cd4 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80017c6:	f009 f967 	bl	800aa98 <HAL_PWREx_EnableOverDrive>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80017d0:	f001 fa80 	bl	8002cd4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017d4:	230f      	movs	r3, #15
 80017d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017da:	2302      	movs	r3, #2
 80017dc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017e0:	2300      	movs	r3, #0
 80017e2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80017e6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80017ea:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80017ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017f2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80017f6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80017fa:	2106      	movs	r1, #6
 80017fc:	4618      	mov	r0, r3
 80017fe:	f00a fc03 	bl	800c008 <HAL_RCC_ClockConfig>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d001      	beq.n	800180c <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8001808:	f001 fa64 	bl	8002cd4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX|RCC_PERIPHCLK_LTDC
 800180c:	4b1f      	ldr	r3, [pc, #124]	; (800188c <SystemClock_Config+0x17c>)
 800180e:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_SAI2
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C3
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 8001810:	2364      	movs	r3, #100	; 0x64
 8001812:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8001814:	2302      	movs	r3, #2
 8001816:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001818:	2302      	movs	r3, #2
 800181a:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 800181c:	2302      	movs	r3, #2
 800181e:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8001820:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001824:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8001826:	2305      	movs	r3, #5
 8001828:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 8;
 800182a:	2308      	movs	r3, #8
 800182c:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 800182e:	2303      	movs	r3, #3
 8001830:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 8001832:	2301      	movs	r3, #1
 8001834:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8001836:	2301      	movs	r3, #1
 8001838:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 800183a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800183e:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001840:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001844:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 8001846:	2300      	movs	r3, #0
 8001848:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800184a:	2300      	movs	r3, #0
 800184c:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 800184e:	2300      	movs	r3, #0
 8001850:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001852:	2300      	movs	r3, #0
 8001854:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001856:	2300      	movs	r3, #0
 8001858:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 800185a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800185e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8001862:	2300      	movs	r3, #0
 8001864:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001868:	f107 0308 	add.w	r3, r7, #8
 800186c:	4618      	mov	r0, r3
 800186e:	f00a fdd3 	bl	800c418 <HAL_RCCEx_PeriphCLKConfig>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d001      	beq.n	800187c <SystemClock_Config+0x16c>
  {
    Error_Handler();
 8001878:	f001 fa2c 	bl	8002cd4 <Error_Handler>
  }
}
 800187c:	bf00      	nop
 800187e:	37d0      	adds	r7, #208	; 0xd0
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	40023800 	.word	0x40023800
 8001888:	40007000 	.word	0x40007000
 800188c:	01b14868 	.word	0x01b14868

08001890 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b084      	sub	sp, #16
 8001894:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001896:	463b      	mov	r3, r7
 8001898:	2200      	movs	r2, #0
 800189a:	601a      	str	r2, [r3, #0]
 800189c:	605a      	str	r2, [r3, #4]
 800189e:	609a      	str	r2, [r3, #8]
 80018a0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80018a2:	4b21      	ldr	r3, [pc, #132]	; (8001928 <MX_ADC3_Init+0x98>)
 80018a4:	4a21      	ldr	r2, [pc, #132]	; (800192c <MX_ADC3_Init+0x9c>)
 80018a6:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80018a8:	4b1f      	ldr	r3, [pc, #124]	; (8001928 <MX_ADC3_Init+0x98>)
 80018aa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80018ae:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80018b0:	4b1d      	ldr	r3, [pc, #116]	; (8001928 <MX_ADC3_Init+0x98>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80018b6:	4b1c      	ldr	r3, [pc, #112]	; (8001928 <MX_ADC3_Init+0x98>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80018bc:	4b1a      	ldr	r3, [pc, #104]	; (8001928 <MX_ADC3_Init+0x98>)
 80018be:	2200      	movs	r2, #0
 80018c0:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80018c2:	4b19      	ldr	r3, [pc, #100]	; (8001928 <MX_ADC3_Init+0x98>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80018ca:	4b17      	ldr	r3, [pc, #92]	; (8001928 <MX_ADC3_Init+0x98>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80018d0:	4b15      	ldr	r3, [pc, #84]	; (8001928 <MX_ADC3_Init+0x98>)
 80018d2:	4a17      	ldr	r2, [pc, #92]	; (8001930 <MX_ADC3_Init+0xa0>)
 80018d4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80018d6:	4b14      	ldr	r3, [pc, #80]	; (8001928 <MX_ADC3_Init+0x98>)
 80018d8:	2200      	movs	r2, #0
 80018da:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80018dc:	4b12      	ldr	r3, [pc, #72]	; (8001928 <MX_ADC3_Init+0x98>)
 80018de:	2201      	movs	r2, #1
 80018e0:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80018e2:	4b11      	ldr	r3, [pc, #68]	; (8001928 <MX_ADC3_Init+0x98>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80018ea:	4b0f      	ldr	r3, [pc, #60]	; (8001928 <MX_ADC3_Init+0x98>)
 80018ec:	2201      	movs	r2, #1
 80018ee:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80018f0:	480d      	ldr	r0, [pc, #52]	; (8001928 <MX_ADC3_Init+0x98>)
 80018f2:	f004 fa33 	bl	8005d5c <HAL_ADC_Init>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d001      	beq.n	8001900 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 80018fc:	f001 f9ea 	bl	8002cd4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001900:	2304      	movs	r3, #4
 8001902:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001904:	2301      	movs	r3, #1
 8001906:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001908:	2300      	movs	r3, #0
 800190a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800190c:	463b      	mov	r3, r7
 800190e:	4619      	mov	r1, r3
 8001910:	4805      	ldr	r0, [pc, #20]	; (8001928 <MX_ADC3_Init+0x98>)
 8001912:	f004 fa67 	bl	8005de4 <HAL_ADC_ConfigChannel>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d001      	beq.n	8001920 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 800191c:	f001 f9da 	bl	8002cd4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001920:	bf00      	nop
 8001922:	3710      	adds	r7, #16
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	20009bb8 	.word	0x20009bb8
 800192c:	40012200 	.word	0x40012200
 8001930:	0f000001 	.word	0x0f000001

08001934 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001938:	4b0d      	ldr	r3, [pc, #52]	; (8001970 <MX_CRC_Init+0x3c>)
 800193a:	4a0e      	ldr	r2, [pc, #56]	; (8001974 <MX_CRC_Init+0x40>)
 800193c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800193e:	4b0c      	ldr	r3, [pc, #48]	; (8001970 <MX_CRC_Init+0x3c>)
 8001940:	2200      	movs	r2, #0
 8001942:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001944:	4b0a      	ldr	r3, [pc, #40]	; (8001970 <MX_CRC_Init+0x3c>)
 8001946:	2200      	movs	r2, #0
 8001948:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800194a:	4b09      	ldr	r3, [pc, #36]	; (8001970 <MX_CRC_Init+0x3c>)
 800194c:	2200      	movs	r2, #0
 800194e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001950:	4b07      	ldr	r3, [pc, #28]	; (8001970 <MX_CRC_Init+0x3c>)
 8001952:	2200      	movs	r2, #0
 8001954:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001956:	4b06      	ldr	r3, [pc, #24]	; (8001970 <MX_CRC_Init+0x3c>)
 8001958:	2201      	movs	r2, #1
 800195a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800195c:	4804      	ldr	r0, [pc, #16]	; (8001970 <MX_CRC_Init+0x3c>)
 800195e:	f004 fd99 	bl	8006494 <HAL_CRC_Init>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d001      	beq.n	800196c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8001968:	f001 f9b4 	bl	8002cd4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800196c:	bf00      	nop
 800196e:	bd80      	pop	{r7, pc}
 8001970:	2000996c 	.word	0x2000996c
 8001974:	40023000 	.word	0x40023000

08001978 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 800197c:	4b16      	ldr	r3, [pc, #88]	; (80019d8 <MX_DCMI_Init+0x60>)
 800197e:	4a17      	ldr	r2, [pc, #92]	; (80019dc <MX_DCMI_Init+0x64>)
 8001980:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8001982:	4b15      	ldr	r3, [pc, #84]	; (80019d8 <MX_DCMI_Init+0x60>)
 8001984:	2200      	movs	r2, #0
 8001986:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8001988:	4b13      	ldr	r3, [pc, #76]	; (80019d8 <MX_DCMI_Init+0x60>)
 800198a:	2200      	movs	r2, #0
 800198c:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 800198e:	4b12      	ldr	r3, [pc, #72]	; (80019d8 <MX_DCMI_Init+0x60>)
 8001990:	2200      	movs	r2, #0
 8001992:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8001994:	4b10      	ldr	r3, [pc, #64]	; (80019d8 <MX_DCMI_Init+0x60>)
 8001996:	2200      	movs	r2, #0
 8001998:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 800199a:	4b0f      	ldr	r3, [pc, #60]	; (80019d8 <MX_DCMI_Init+0x60>)
 800199c:	2200      	movs	r2, #0
 800199e:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 80019a0:	4b0d      	ldr	r3, [pc, #52]	; (80019d8 <MX_DCMI_Init+0x60>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 80019a6:	4b0c      	ldr	r3, [pc, #48]	; (80019d8 <MX_DCMI_Init+0x60>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 80019ac:	4b0a      	ldr	r3, [pc, #40]	; (80019d8 <MX_DCMI_Init+0x60>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 80019b2:	4b09      	ldr	r3, [pc, #36]	; (80019d8 <MX_DCMI_Init+0x60>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 80019b8:	4b07      	ldr	r3, [pc, #28]	; (80019d8 <MX_DCMI_Init+0x60>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 80019be:	4b06      	ldr	r3, [pc, #24]	; (80019d8 <MX_DCMI_Init+0x60>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 80019c4:	4804      	ldr	r0, [pc, #16]	; (80019d8 <MX_DCMI_Init+0x60>)
 80019c6:	f004 fe4f 	bl	8006668 <HAL_DCMI_Init>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d001      	beq.n	80019d4 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 80019d0:	f001 f980 	bl	8002cd4 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 80019d4:	bf00      	nop
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	20009c00 	.word	0x20009c00
 80019dc:	50050000 	.word	0x50050000

080019e0 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80019e4:	4b15      	ldr	r3, [pc, #84]	; (8001a3c <MX_DMA2D_Init+0x5c>)
 80019e6:	4a16      	ldr	r2, [pc, #88]	; (8001a40 <MX_DMA2D_Init+0x60>)
 80019e8:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80019ea:	4b14      	ldr	r3, [pc, #80]	; (8001a3c <MX_DMA2D_Init+0x5c>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80019f0:	4b12      	ldr	r3, [pc, #72]	; (8001a3c <MX_DMA2D_Init+0x5c>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80019f6:	4b11      	ldr	r3, [pc, #68]	; (8001a3c <MX_DMA2D_Init+0x5c>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80019fc:	4b0f      	ldr	r3, [pc, #60]	; (8001a3c <MX_DMA2D_Init+0x5c>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8001a02:	4b0e      	ldr	r3, [pc, #56]	; (8001a3c <MX_DMA2D_Init+0x5c>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001a08:	4b0c      	ldr	r3, [pc, #48]	; (8001a3c <MX_DMA2D_Init+0x5c>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8001a0e:	4b0b      	ldr	r3, [pc, #44]	; (8001a3c <MX_DMA2D_Init+0x5c>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001a14:	4809      	ldr	r0, [pc, #36]	; (8001a3c <MX_DMA2D_Init+0x5c>)
 8001a16:	f005 fb87 	bl	8007128 <HAL_DMA2D_Init>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d001      	beq.n	8001a24 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8001a20:	f001 f958 	bl	8002cd4 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001a24:	2101      	movs	r1, #1
 8001a26:	4805      	ldr	r0, [pc, #20]	; (8001a3c <MX_DMA2D_Init+0x5c>)
 8001a28:	f005 fdec 	bl	8007604 <HAL_DMA2D_ConfigLayer>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8001a32:	f001 f94f 	bl	8002cd4 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8001a36:	bf00      	nop
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	20009e24 	.word	0x20009e24
 8001a40:	4002b000 	.word	0x4002b000

08001a44 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a48:	4b1b      	ldr	r3, [pc, #108]	; (8001ab8 <MX_I2C1_Init+0x74>)
 8001a4a:	4a1c      	ldr	r2, [pc, #112]	; (8001abc <MX_I2C1_Init+0x78>)
 8001a4c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8001a4e:	4b1a      	ldr	r3, [pc, #104]	; (8001ab8 <MX_I2C1_Init+0x74>)
 8001a50:	4a1b      	ldr	r2, [pc, #108]	; (8001ac0 <MX_I2C1_Init+0x7c>)
 8001a52:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001a54:	4b18      	ldr	r3, [pc, #96]	; (8001ab8 <MX_I2C1_Init+0x74>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a5a:	4b17      	ldr	r3, [pc, #92]	; (8001ab8 <MX_I2C1_Init+0x74>)
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a60:	4b15      	ldr	r3, [pc, #84]	; (8001ab8 <MX_I2C1_Init+0x74>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001a66:	4b14      	ldr	r3, [pc, #80]	; (8001ab8 <MX_I2C1_Init+0x74>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001a6c:	4b12      	ldr	r3, [pc, #72]	; (8001ab8 <MX_I2C1_Init+0x74>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a72:	4b11      	ldr	r3, [pc, #68]	; (8001ab8 <MX_I2C1_Init+0x74>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a78:	4b0f      	ldr	r3, [pc, #60]	; (8001ab8 <MX_I2C1_Init+0x74>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a7e:	480e      	ldr	r0, [pc, #56]	; (8001ab8 <MX_I2C1_Init+0x74>)
 8001a80:	f007 ff7a 	bl	8009978 <HAL_I2C_Init>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d001      	beq.n	8001a8e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001a8a:	f001 f923 	bl	8002cd4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001a8e:	2100      	movs	r1, #0
 8001a90:	4809      	ldr	r0, [pc, #36]	; (8001ab8 <MX_I2C1_Init+0x74>)
 8001a92:	f008 fc7b 	bl	800a38c <HAL_I2CEx_ConfigAnalogFilter>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d001      	beq.n	8001aa0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001a9c:	f001 f91a 	bl	8002cd4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001aa0:	2100      	movs	r1, #0
 8001aa2:	4805      	ldr	r0, [pc, #20]	; (8001ab8 <MX_I2C1_Init+0x74>)
 8001aa4:	f008 fcbd 	bl	800a422 <HAL_I2CEx_ConfigDigitalFilter>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001aae:	f001 f911 	bl	8002cd4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001ab2:	bf00      	nop
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	20009920 	.word	0x20009920
 8001abc:	40005400 	.word	0x40005400
 8001ac0:	00c0eaff 	.word	0x00c0eaff

08001ac4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001ac8:	4b1b      	ldr	r3, [pc, #108]	; (8001b38 <MX_I2C3_Init+0x74>)
 8001aca:	4a1c      	ldr	r2, [pc, #112]	; (8001b3c <MX_I2C3_Init+0x78>)
 8001acc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 8001ace:	4b1a      	ldr	r3, [pc, #104]	; (8001b38 <MX_I2C3_Init+0x74>)
 8001ad0:	4a1b      	ldr	r2, [pc, #108]	; (8001b40 <MX_I2C3_Init+0x7c>)
 8001ad2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001ad4:	4b18      	ldr	r3, [pc, #96]	; (8001b38 <MX_I2C3_Init+0x74>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ada:	4b17      	ldr	r3, [pc, #92]	; (8001b38 <MX_I2C3_Init+0x74>)
 8001adc:	2201      	movs	r2, #1
 8001ade:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ae0:	4b15      	ldr	r3, [pc, #84]	; (8001b38 <MX_I2C3_Init+0x74>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001ae6:	4b14      	ldr	r3, [pc, #80]	; (8001b38 <MX_I2C3_Init+0x74>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001aec:	4b12      	ldr	r3, [pc, #72]	; (8001b38 <MX_I2C3_Init+0x74>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001af2:	4b11      	ldr	r3, [pc, #68]	; (8001b38 <MX_I2C3_Init+0x74>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001af8:	4b0f      	ldr	r3, [pc, #60]	; (8001b38 <MX_I2C3_Init+0x74>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001afe:	480e      	ldr	r0, [pc, #56]	; (8001b38 <MX_I2C3_Init+0x74>)
 8001b00:	f007 ff3a 	bl	8009978 <HAL_I2C_Init>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d001      	beq.n	8001b0e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001b0a:	f001 f8e3 	bl	8002cd4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001b0e:	2100      	movs	r1, #0
 8001b10:	4809      	ldr	r0, [pc, #36]	; (8001b38 <MX_I2C3_Init+0x74>)
 8001b12:	f008 fc3b 	bl	800a38c <HAL_I2CEx_ConfigAnalogFilter>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d001      	beq.n	8001b20 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001b1c:	f001 f8da 	bl	8002cd4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001b20:	2100      	movs	r1, #0
 8001b22:	4805      	ldr	r0, [pc, #20]	; (8001b38 <MX_I2C3_Init+0x74>)
 8001b24:	f008 fc7d 	bl	800a422 <HAL_I2CEx_ConfigDigitalFilter>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d001      	beq.n	8001b32 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001b2e:	f001 f8d1 	bl	8002cd4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001b32:	bf00      	nop
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	200096f8 	.word	0x200096f8
 8001b3c:	40005c00 	.word	0x40005c00
 8001b40:	00c0eaff 	.word	0x00c0eaff

08001b44 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b08e      	sub	sp, #56	; 0x38
 8001b48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001b4a:	1d3b      	adds	r3, r7, #4
 8001b4c:	2234      	movs	r2, #52	; 0x34
 8001b4e:	2100      	movs	r1, #0
 8001b50:	4618      	mov	r0, r3
 8001b52:	f016 fb1f 	bl	8018194 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001b56:	4b3b      	ldr	r3, [pc, #236]	; (8001c44 <MX_LTDC_Init+0x100>)
 8001b58:	4a3b      	ldr	r2, [pc, #236]	; (8001c48 <MX_LTDC_Init+0x104>)
 8001b5a:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001b5c:	4b39      	ldr	r3, [pc, #228]	; (8001c44 <MX_LTDC_Init+0x100>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001b62:	4b38      	ldr	r3, [pc, #224]	; (8001c44 <MX_LTDC_Init+0x100>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001b68:	4b36      	ldr	r3, [pc, #216]	; (8001c44 <MX_LTDC_Init+0x100>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001b6e:	4b35      	ldr	r3, [pc, #212]	; (8001c44 <MX_LTDC_Init+0x100>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8001b74:	4b33      	ldr	r3, [pc, #204]	; (8001c44 <MX_LTDC_Init+0x100>)
 8001b76:	2228      	movs	r2, #40	; 0x28
 8001b78:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8001b7a:	4b32      	ldr	r3, [pc, #200]	; (8001c44 <MX_LTDC_Init+0x100>)
 8001b7c:	2209      	movs	r2, #9
 8001b7e:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8001b80:	4b30      	ldr	r3, [pc, #192]	; (8001c44 <MX_LTDC_Init+0x100>)
 8001b82:	2235      	movs	r2, #53	; 0x35
 8001b84:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8001b86:	4b2f      	ldr	r3, [pc, #188]	; (8001c44 <MX_LTDC_Init+0x100>)
 8001b88:	220b      	movs	r2, #11
 8001b8a:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8001b8c:	4b2d      	ldr	r3, [pc, #180]	; (8001c44 <MX_LTDC_Init+0x100>)
 8001b8e:	f240 2215 	movw	r2, #533	; 0x215
 8001b92:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8001b94:	4b2b      	ldr	r3, [pc, #172]	; (8001c44 <MX_LTDC_Init+0x100>)
 8001b96:	f240 121b 	movw	r2, #283	; 0x11b
 8001b9a:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8001b9c:	4b29      	ldr	r3, [pc, #164]	; (8001c44 <MX_LTDC_Init+0x100>)
 8001b9e:	f240 2235 	movw	r2, #565	; 0x235
 8001ba2:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8001ba4:	4b27      	ldr	r3, [pc, #156]	; (8001c44 <MX_LTDC_Init+0x100>)
 8001ba6:	f240 121d 	movw	r2, #285	; 0x11d
 8001baa:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001bac:	4b25      	ldr	r3, [pc, #148]	; (8001c44 <MX_LTDC_Init+0x100>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001bb4:	4b23      	ldr	r3, [pc, #140]	; (8001c44 <MX_LTDC_Init+0x100>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001bbc:	4b21      	ldr	r3, [pc, #132]	; (8001c44 <MX_LTDC_Init+0x100>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001bc4:	481f      	ldr	r0, [pc, #124]	; (8001c44 <MX_LTDC_Init+0x100>)
 8001bc6:	f008 fc79 	bl	800a4bc <HAL_LTDC_Init>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d001      	beq.n	8001bd4 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8001bd0:	f001 f880 	bl	8002cd4 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8001bd8:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001bdc:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8001bde:	2300      	movs	r3, #0
 8001be0:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8001be2:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001be6:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001be8:	2302      	movs	r3, #2
 8001bea:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8001bec:	23ff      	movs	r3, #255	; 0xff
 8001bee:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001bf4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001bf8:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001bfa:	2307      	movs	r3, #7
 8001bfc:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8001bfe:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8001c02:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8001c04:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001c08:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 8001c0a:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001c0e:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001c10:	2300      	movs	r3, #0
 8001c12:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8001c16:	2300      	movs	r3, #0
 8001c18:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001c22:	1d3b      	adds	r3, r7, #4
 8001c24:	2200      	movs	r2, #0
 8001c26:	4619      	mov	r1, r3
 8001c28:	4806      	ldr	r0, [pc, #24]	; (8001c44 <MX_LTDC_Init+0x100>)
 8001c2a:	f008 fd17 	bl	800a65c <HAL_LTDC_ConfigLayer>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8001c34:	f001 f84e 	bl	8002cd4 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

	LCD_Init();
 8001c38:	f002 fc16 	bl	8004468 <LCD_Init>

  /* USER CODE END LTDC_Init 2 */

}
 8001c3c:	bf00      	nop
 8001c3e:	3738      	adds	r7, #56	; 0x38
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	20009b10 	.word	0x20009b10
 8001c48:	40016800 	.word	0x40016800

08001c4c <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8001c50:	4b1d      	ldr	r3, [pc, #116]	; (8001cc8 <MX_QUADSPI_Init+0x7c>)
 8001c52:	4a1e      	ldr	r2, [pc, #120]	; (8001ccc <MX_QUADSPI_Init+0x80>)
 8001c54:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 8001c56:	4b1c      	ldr	r3, [pc, #112]	; (8001cc8 <MX_QUADSPI_Init+0x7c>)
 8001c58:	2201      	movs	r2, #1
 8001c5a:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8001c5c:	4b1a      	ldr	r3, [pc, #104]	; (8001cc8 <MX_QUADSPI_Init+0x7c>)
 8001c5e:	2204      	movs	r2, #4
 8001c60:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8001c62:	4b19      	ldr	r3, [pc, #100]	; (8001cc8 <MX_QUADSPI_Init+0x7c>)
 8001c64:	2210      	movs	r2, #16
 8001c66:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 8001c68:	4b17      	ldr	r3, [pc, #92]	; (8001cc8 <MX_QUADSPI_Init+0x7c>)
 8001c6a:	2218      	movs	r2, #24
 8001c6c:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 8001c6e:	4b16      	ldr	r3, [pc, #88]	; (8001cc8 <MX_QUADSPI_Init+0x7c>)
 8001c70:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8001c74:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001c76:	4b14      	ldr	r3, [pc, #80]	; (8001cc8 <MX_QUADSPI_Init+0x7c>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8001c7c:	4b12      	ldr	r3, [pc, #72]	; (8001cc8 <MX_QUADSPI_Init+0x7c>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8001c82:	4b11      	ldr	r3, [pc, #68]	; (8001cc8 <MX_QUADSPI_Init+0x7c>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001c88:	480f      	ldr	r0, [pc, #60]	; (8001cc8 <MX_QUADSPI_Init+0x7c>)
 8001c8a:	f008 ff55 	bl	800ab38 <HAL_QSPI_Init>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d001      	beq.n	8001c98 <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 8001c94:	f001 f81e 	bl	8002cd4 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

	// + memory reset + config dummy cycles on QSPI memory side, see disco_qspi.c
	/* QSPI memory reset */
	if (DISCO_QSPI_ResetMemory(&hqspi) != HAL_OK) Error_Handler();
 8001c98:	480b      	ldr	r0, [pc, #44]	; (8001cc8 <MX_QUADSPI_Init+0x7c>)
 8001c9a:	f002 fec7 	bl	8004a2c <DISCO_QSPI_ResetMemory>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d001      	beq.n	8001ca8 <MX_QUADSPI_Init+0x5c>
 8001ca4:	f001 f816 	bl	8002cd4 <Error_Handler>
	/* Configuration of the dummy cycles on QSPI memory side */
	if (DISCO_QSPI_DummyCyclesCfg(&hqspi) != HAL_OK) Error_Handler();
 8001ca8:	4807      	ldr	r0, [pc, #28]	; (8001cc8 <MX_QUADSPI_Init+0x7c>)
 8001caa:	f002 ff01 	bl	8004ab0 <DISCO_QSPI_DummyCyclesCfg>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d001      	beq.n	8001cb8 <MX_QUADSPI_Init+0x6c>
 8001cb4:	f001 f80e 	bl	8002cd4 <Error_Handler>

	DISCO_QSPI_EnableMemoryMappedMode();
 8001cb8:	f002 fe86 	bl	80049c8 <DISCO_QSPI_EnableMemoryMappedMode>
	HAL_NVIC_DisableIRQ(QUADSPI_IRQn);
 8001cbc:	205c      	movs	r0, #92	; 0x5c
 8001cbe:	f004 fbdb 	bl	8006478 <HAL_NVIC_DisableIRQ>


  /* USER CODE END QUADSPI_Init 2 */

}
 8001cc2:	bf00      	nop
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	20009f30 	.word	0x20009f30
 8001ccc:	a0001000 	.word	0xa0001000

08001cd0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b092      	sub	sp, #72	; 0x48
 8001cd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001cd6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001cda:	2200      	movs	r2, #0
 8001cdc:	601a      	str	r2, [r3, #0]
 8001cde:	605a      	str	r2, [r3, #4]
 8001ce0:	609a      	str	r2, [r3, #8]
 8001ce2:	60da      	str	r2, [r3, #12]
 8001ce4:	611a      	str	r2, [r3, #16]
 8001ce6:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 8001ce8:	2300      	movs	r3, #0
 8001cea:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 8001cec:	463b      	mov	r3, r7
 8001cee:	222c      	movs	r2, #44	; 0x2c
 8001cf0:	2100      	movs	r1, #0
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f016 fa4e 	bl	8018194 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001cf8:	4b46      	ldr	r3, [pc, #280]	; (8001e14 <MX_RTC_Init+0x144>)
 8001cfa:	4a47      	ldr	r2, [pc, #284]	; (8001e18 <MX_RTC_Init+0x148>)
 8001cfc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001cfe:	4b45      	ldr	r3, [pc, #276]	; (8001e14 <MX_RTC_Init+0x144>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001d04:	4b43      	ldr	r3, [pc, #268]	; (8001e14 <MX_RTC_Init+0x144>)
 8001d06:	227f      	movs	r2, #127	; 0x7f
 8001d08:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001d0a:	4b42      	ldr	r3, [pc, #264]	; (8001e14 <MX_RTC_Init+0x144>)
 8001d0c:	22ff      	movs	r2, #255	; 0xff
 8001d0e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001d10:	4b40      	ldr	r3, [pc, #256]	; (8001e14 <MX_RTC_Init+0x144>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001d16:	4b3f      	ldr	r3, [pc, #252]	; (8001e14 <MX_RTC_Init+0x144>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001d1c:	4b3d      	ldr	r3, [pc, #244]	; (8001e14 <MX_RTC_Init+0x144>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001d22:	483c      	ldr	r0, [pc, #240]	; (8001e14 <MX_RTC_Init+0x144>)
 8001d24:	f00b f8ac 	bl	800ce80 <HAL_RTC_Init>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d001      	beq.n	8001d32 <MX_RTC_Init+0x62>
  {
    Error_Handler();
 8001d2e:	f000 ffd1 	bl	8002cd4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001d32:	2300      	movs	r3, #0
 8001d34:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001d44:	2300      	movs	r3, #0
 8001d46:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001d4c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001d50:	2201      	movs	r2, #1
 8001d52:	4619      	mov	r1, r3
 8001d54:	482f      	ldr	r0, [pc, #188]	; (8001e14 <MX_RTC_Init+0x144>)
 8001d56:	f00b f925 	bl	800cfa4 <HAL_RTC_SetTime>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d001      	beq.n	8001d64 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8001d60:	f000 ffb8 	bl	8002cd4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001d64:	2301      	movs	r3, #1
 8001d66:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 8001d70:	2301      	movs	r3, #1
 8001d72:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 8001d76:	2300      	movs	r3, #0
 8001d78:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001d7c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d80:	2201      	movs	r2, #1
 8001d82:	4619      	mov	r1, r3
 8001d84:	4823      	ldr	r0, [pc, #140]	; (8001e14 <MX_RTC_Init+0x144>)
 8001d86:	f00b f9cb 	bl	800d120 <HAL_RTC_SetDate>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d001      	beq.n	8001d94 <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 8001d90:	f000 ffa0 	bl	8002cd4 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8001d94:	2300      	movs	r3, #0
 8001d96:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001da0:	2300      	movs	r3, #0
 8001da2:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001da4:	2300      	movs	r3, #0
 8001da6:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001da8:	2300      	movs	r3, #0
 8001daa:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001dac:	2300      	movs	r3, #0
 8001dae:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001db0:	2300      	movs	r3, #0
 8001db2:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001db4:	2300      	movs	r3, #0
 8001db6:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001db8:	2301      	movs	r3, #1
 8001dba:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 8001dbe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001dc2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001dc4:	463b      	mov	r3, r7
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	4619      	mov	r1, r3
 8001dca:	4812      	ldr	r0, [pc, #72]	; (8001e14 <MX_RTC_Init+0x144>)
 8001dcc:	f00b fa50 	bl	800d270 <HAL_RTC_SetAlarm>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d001      	beq.n	8001dda <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 8001dd6:	f000 ff7d 	bl	8002cd4 <Error_Handler>
  }
  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 8001dda:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001dde:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001de0:	463b      	mov	r3, r7
 8001de2:	2201      	movs	r2, #1
 8001de4:	4619      	mov	r1, r3
 8001de6:	480b      	ldr	r0, [pc, #44]	; (8001e14 <MX_RTC_Init+0x144>)
 8001de8:	f00b fa42 	bl	800d270 <HAL_RTC_SetAlarm>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d001      	beq.n	8001df6 <MX_RTC_Init+0x126>
  {
    Error_Handler();
 8001df2:	f000 ff6f 	bl	8002cd4 <Error_Handler>
  }
  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8001df6:	2202      	movs	r2, #2
 8001df8:	2100      	movs	r1, #0
 8001dfa:	4806      	ldr	r0, [pc, #24]	; (8001e14 <MX_RTC_Init+0x144>)
 8001dfc:	f00b fbc2 	bl	800d584 <HAL_RTCEx_SetTimeStamp>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d001      	beq.n	8001e0a <MX_RTC_Init+0x13a>
  {
    Error_Handler();
 8001e06:	f000 ff65 	bl	8002cd4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001e0a:	bf00      	nop
 8001e0c:	3748      	adds	r7, #72	; 0x48
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	20009cd4 	.word	0x20009cd4
 8001e18:	40002800 	.word	0x40002800

08001e1c <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8001e20:	4b58      	ldr	r3, [pc, #352]	; (8001f84 <MX_SAI2_Init+0x168>)
 8001e22:	4a59      	ldr	r2, [pc, #356]	; (8001f88 <MX_SAI2_Init+0x16c>)
 8001e24:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001e26:	4b57      	ldr	r3, [pc, #348]	; (8001f84 <MX_SAI2_Init+0x168>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8001e2c:	4b55      	ldr	r3, [pc, #340]	; (8001f84 <MX_SAI2_Init+0x168>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_16;
 8001e32:	4b54      	ldr	r3, [pc, #336]	; (8001f84 <MX_SAI2_Init+0x168>)
 8001e34:	2280      	movs	r2, #128	; 0x80
 8001e36:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001e38:	4b52      	ldr	r3, [pc, #328]	; (8001f84 <MX_SAI2_Init+0x168>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8001e3e:	4b51      	ldr	r3, [pc, #324]	; (8001f84 <MX_SAI2_Init+0x168>)
 8001e40:	2201      	movs	r2, #1
 8001e42:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8001e44:	4b4f      	ldr	r3, [pc, #316]	; (8001f84 <MX_SAI2_Init+0x168>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLE;
 8001e4a:	4b4e      	ldr	r3, [pc, #312]	; (8001f84 <MX_SAI2_Init+0x168>)
 8001e4c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e50:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001e52:	4b4c      	ldr	r3, [pc, #304]	; (8001f84 <MX_SAI2_Init+0x168>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8001e58:	4b4a      	ldr	r3, [pc, #296]	; (8001f84 <MX_SAI2_Init+0x168>)
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8001e5e:	4b49      	ldr	r3, [pc, #292]	; (8001f84 <MX_SAI2_Init+0x168>)
 8001e60:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8001e64:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001e66:	4b47      	ldr	r3, [pc, #284]	; (8001f84 <MX_SAI2_Init+0x168>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001e6c:	4b45      	ldr	r3, [pc, #276]	; (8001f84 <MX_SAI2_Init+0x168>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001e72:	4b44      	ldr	r3, [pc, #272]	; (8001f84 <MX_SAI2_Init+0x168>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001e78:	4b42      	ldr	r3, [pc, #264]	; (8001f84 <MX_SAI2_Init+0x168>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 64;
 8001e7e:	4b41      	ldr	r3, [pc, #260]	; (8001f84 <MX_SAI2_Init+0x168>)
 8001e80:	2240      	movs	r2, #64	; 0x40
 8001e82:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 32;
 8001e84:	4b3f      	ldr	r3, [pc, #252]	; (8001f84 <MX_SAI2_Init+0x168>)
 8001e86:	2220      	movs	r2, #32
 8001e88:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8001e8a:	4b3e      	ldr	r3, [pc, #248]	; (8001f84 <MX_SAI2_Init+0x168>)
 8001e8c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001e90:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001e92:	4b3c      	ldr	r3, [pc, #240]	; (8001f84 <MX_SAI2_Init+0x168>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8001e98:	4b3a      	ldr	r3, [pc, #232]	; (8001f84 <MX_SAI2_Init+0x168>)
 8001e9a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001e9e:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8001ea0:	4b38      	ldr	r3, [pc, #224]	; (8001f84 <MX_SAI2_Init+0x168>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001ea6:	4b37      	ldr	r3, [pc, #220]	; (8001f84 <MX_SAI2_Init+0x168>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 4;
 8001eac:	4b35      	ldr	r3, [pc, #212]	; (8001f84 <MX_SAI2_Init+0x168>)
 8001eae:	2204      	movs	r2, #4
 8001eb0:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000005;
 8001eb2:	4b34      	ldr	r3, [pc, #208]	; (8001f84 <MX_SAI2_Init+0x168>)
 8001eb4:	2205      	movs	r2, #5
 8001eb6:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8001eb8:	4832      	ldr	r0, [pc, #200]	; (8001f84 <MX_SAI2_Init+0x168>)
 8001eba:	f00b fbb9 	bl	800d630 <HAL_SAI_Init>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d001      	beq.n	8001ec8 <MX_SAI2_Init+0xac>
  {
    Error_Handler();
 8001ec4:	f000 ff06 	bl	8002cd4 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8001ec8:	4b30      	ldr	r3, [pc, #192]	; (8001f8c <MX_SAI2_Init+0x170>)
 8001eca:	4a31      	ldr	r2, [pc, #196]	; (8001f90 <MX_SAI2_Init+0x174>)
 8001ecc:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001ece:	4b2f      	ldr	r3, [pc, #188]	; (8001f8c <MX_SAI2_Init+0x170>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8001ed4:	4b2d      	ldr	r3, [pc, #180]	; (8001f8c <MX_SAI2_Init+0x170>)
 8001ed6:	2203      	movs	r2, #3
 8001ed8:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_16;
 8001eda:	4b2c      	ldr	r3, [pc, #176]	; (8001f8c <MX_SAI2_Init+0x170>)
 8001edc:	2280      	movs	r2, #128	; 0x80
 8001ede:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001ee0:	4b2a      	ldr	r3, [pc, #168]	; (8001f8c <MX_SAI2_Init+0x170>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8001ee6:	4b29      	ldr	r3, [pc, #164]	; (8001f8c <MX_SAI2_Init+0x170>)
 8001ee8:	2201      	movs	r2, #1
 8001eea:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8001eec:	4b27      	ldr	r3, [pc, #156]	; (8001f8c <MX_SAI2_Init+0x170>)
 8001eee:	2201      	movs	r2, #1
 8001ef0:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001ef2:	4b26      	ldr	r3, [pc, #152]	; (8001f8c <MX_SAI2_Init+0x170>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8001ef8:	4b24      	ldr	r3, [pc, #144]	; (8001f8c <MX_SAI2_Init+0x170>)
 8001efa:	2201      	movs	r2, #1
 8001efc:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001efe:	4b23      	ldr	r3, [pc, #140]	; (8001f8c <MX_SAI2_Init+0x170>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001f04:	4b21      	ldr	r3, [pc, #132]	; (8001f8c <MX_SAI2_Init+0x170>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001f0a:	4b20      	ldr	r3, [pc, #128]	; (8001f8c <MX_SAI2_Init+0x170>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001f10:	4b1e      	ldr	r3, [pc, #120]	; (8001f8c <MX_SAI2_Init+0x170>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 64;
 8001f16:	4b1d      	ldr	r3, [pc, #116]	; (8001f8c <MX_SAI2_Init+0x170>)
 8001f18:	2240      	movs	r2, #64	; 0x40
 8001f1a:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 32;
 8001f1c:	4b1b      	ldr	r3, [pc, #108]	; (8001f8c <MX_SAI2_Init+0x170>)
 8001f1e:	2220      	movs	r2, #32
 8001f20:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8001f22:	4b1a      	ldr	r3, [pc, #104]	; (8001f8c <MX_SAI2_Init+0x170>)
 8001f24:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001f28:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001f2a:	4b18      	ldr	r3, [pc, #96]	; (8001f8c <MX_SAI2_Init+0x170>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8001f30:	4b16      	ldr	r3, [pc, #88]	; (8001f8c <MX_SAI2_Init+0x170>)
 8001f32:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001f36:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8001f38:	4b14      	ldr	r3, [pc, #80]	; (8001f8c <MX_SAI2_Init+0x170>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001f3e:	4b13      	ldr	r3, [pc, #76]	; (8001f8c <MX_SAI2_Init+0x170>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 4;
 8001f44:	4b11      	ldr	r3, [pc, #68]	; (8001f8c <MX_SAI2_Init+0x170>)
 8001f46:	2204      	movs	r2, #4
 8001f48:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x0000000A;
 8001f4a:	4b10      	ldr	r3, [pc, #64]	; (8001f8c <MX_SAI2_Init+0x170>)
 8001f4c:	220a      	movs	r2, #10
 8001f4e:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8001f50:	480e      	ldr	r0, [pc, #56]	; (8001f8c <MX_SAI2_Init+0x170>)
 8001f52:	f00b fb6d 	bl	800d630 <HAL_SAI_Init>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d001      	beq.n	8001f60 <MX_SAI2_Init+0x144>
  {
    Error_Handler();
 8001f5c:	f000 feba 	bl	8002cd4 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

	// bug fix:
	__HAL_SAI_ENABLE(&hsai_BlockA2);
 8001f60:	4b08      	ldr	r3, [pc, #32]	; (8001f84 <MX_SAI2_Init+0x168>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	4b07      	ldr	r3, [pc, #28]	; (8001f84 <MX_SAI2_Init+0x168>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001f6e:	601a      	str	r2, [r3, #0]
	__HAL_SAI_ENABLE(&hsai_BlockB2);
 8001f70:	4b06      	ldr	r3, [pc, #24]	; (8001f8c <MX_SAI2_Init+0x170>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	4b05      	ldr	r3, [pc, #20]	; (8001f8c <MX_SAI2_Init+0x170>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001f7e:	601a      	str	r2, [r3, #0]

  /* USER CODE END SAI2_Init 2 */

}
 8001f80:	bf00      	nop
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	2000989c 	.word	0x2000989c
 8001f88:	40015c04 	.word	0x40015c04
 8001f8c:	20009670 	.word	0x20009670
 8001f90:	40015c24 	.word	0x40015c24

08001f94 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001f98:	4b0c      	ldr	r3, [pc, #48]	; (8001fcc <MX_SDMMC1_SD_Init+0x38>)
 8001f9a:	4a0d      	ldr	r2, [pc, #52]	; (8001fd0 <MX_SDMMC1_SD_Init+0x3c>)
 8001f9c:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001f9e:	4b0b      	ldr	r3, [pc, #44]	; (8001fcc <MX_SDMMC1_SD_Init+0x38>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8001fa4:	4b09      	ldr	r3, [pc, #36]	; (8001fcc <MX_SDMMC1_SD_Init+0x38>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001faa:	4b08      	ldr	r3, [pc, #32]	; (8001fcc <MX_SDMMC1_SD_Init+0x38>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8001fb0:	4b06      	ldr	r3, [pc, #24]	; (8001fcc <MX_SDMMC1_SD_Init+0x38>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001fb6:	4b05      	ldr	r3, [pc, #20]	; (8001fcc <MX_SDMMC1_SD_Init+0x38>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8001fbc:	4b03      	ldr	r3, [pc, #12]	; (8001fcc <MX_SDMMC1_SD_Init+0x38>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8001fc2:	bf00      	nop
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr
 8001fcc:	200099f0 	.word	0x200099f0
 8001fd0:	40012c00 	.word	0x40012c00

08001fd4 <MX_SPDIFRX_Init>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 8001fd8:	4b15      	ldr	r3, [pc, #84]	; (8002030 <MX_SPDIFRX_Init+0x5c>)
 8001fda:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001fde:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8001fe0:	4b13      	ldr	r3, [pc, #76]	; (8002030 <MX_SPDIFRX_Init+0x5c>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8001fe6:	4b12      	ldr	r3, [pc, #72]	; (8002030 <MX_SPDIFRX_Init+0x5c>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8001fec:	4b10      	ldr	r3, [pc, #64]	; (8002030 <MX_SPDIFRX_Init+0x5c>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8001ff2:	4b0f      	ldr	r3, [pc, #60]	; (8002030 <MX_SPDIFRX_Init+0x5c>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8001ff8:	4b0d      	ldr	r3, [pc, #52]	; (8002030 <MX_SPDIFRX_Init+0x5c>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 8001ffe:	4b0c      	ldr	r3, [pc, #48]	; (8002030 <MX_SPDIFRX_Init+0x5c>)
 8002000:	2200      	movs	r2, #0
 8002002:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8002004:	4b0a      	ldr	r3, [pc, #40]	; (8002030 <MX_SPDIFRX_Init+0x5c>)
 8002006:	2200      	movs	r2, #0
 8002008:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 800200a:	4b09      	ldr	r3, [pc, #36]	; (8002030 <MX_SPDIFRX_Init+0x5c>)
 800200c:	2200      	movs	r2, #0
 800200e:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8002010:	4b07      	ldr	r3, [pc, #28]	; (8002030 <MX_SPDIFRX_Init+0x5c>)
 8002012:	2200      	movs	r2, #0
 8002014:	625a      	str	r2, [r3, #36]	; 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8002016:	4b06      	ldr	r3, [pc, #24]	; (8002030 <MX_SPDIFRX_Init+0x5c>)
 8002018:	2200      	movs	r2, #0
 800201a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 800201c:	4804      	ldr	r0, [pc, #16]	; (8002030 <MX_SPDIFRX_Init+0x5c>)
 800201e:	f00c fffd 	bl	800f01c <HAL_SPDIFRX_Init>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d001      	beq.n	800202c <MX_SPDIFRX_Init+0x58>
  {
    Error_Handler();
 8002028:	f000 fe54 	bl	8002cd4 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 800202c:	bf00      	nop
 800202e:	bd80      	pop	{r7, pc}
 8002030:	20009850 	.word	0x20009850

08002034 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b09a      	sub	sp, #104	; 0x68
 8002038:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800203a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800203e:	2200      	movs	r2, #0
 8002040:	601a      	str	r2, [r3, #0]
 8002042:	605a      	str	r2, [r3, #4]
 8002044:	609a      	str	r2, [r3, #8]
 8002046:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002048:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800204c:	2200      	movs	r2, #0
 800204e:	601a      	str	r2, [r3, #0]
 8002050:	605a      	str	r2, [r3, #4]
 8002052:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002054:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002058:	2200      	movs	r2, #0
 800205a:	601a      	str	r2, [r3, #0]
 800205c:	605a      	str	r2, [r3, #4]
 800205e:	609a      	str	r2, [r3, #8]
 8002060:	60da      	str	r2, [r3, #12]
 8002062:	611a      	str	r2, [r3, #16]
 8002064:	615a      	str	r2, [r3, #20]
 8002066:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002068:	1d3b      	adds	r3, r7, #4
 800206a:	222c      	movs	r2, #44	; 0x2c
 800206c:	2100      	movs	r1, #0
 800206e:	4618      	mov	r0, r3
 8002070:	f016 f890 	bl	8018194 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002074:	4b43      	ldr	r3, [pc, #268]	; (8002184 <MX_TIM1_Init+0x150>)
 8002076:	4a44      	ldr	r2, [pc, #272]	; (8002188 <MX_TIM1_Init+0x154>)
 8002078:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800207a:	4b42      	ldr	r3, [pc, #264]	; (8002184 <MX_TIM1_Init+0x150>)
 800207c:	2200      	movs	r2, #0
 800207e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002080:	4b40      	ldr	r3, [pc, #256]	; (8002184 <MX_TIM1_Init+0x150>)
 8002082:	2200      	movs	r2, #0
 8002084:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002086:	4b3f      	ldr	r3, [pc, #252]	; (8002184 <MX_TIM1_Init+0x150>)
 8002088:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800208c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800208e:	4b3d      	ldr	r3, [pc, #244]	; (8002184 <MX_TIM1_Init+0x150>)
 8002090:	2200      	movs	r2, #0
 8002092:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002094:	4b3b      	ldr	r3, [pc, #236]	; (8002184 <MX_TIM1_Init+0x150>)
 8002096:	2200      	movs	r2, #0
 8002098:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800209a:	4b3a      	ldr	r3, [pc, #232]	; (8002184 <MX_TIM1_Init+0x150>)
 800209c:	2200      	movs	r2, #0
 800209e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80020a0:	4838      	ldr	r0, [pc, #224]	; (8002184 <MX_TIM1_Init+0x150>)
 80020a2:	f00d f817 	bl	800f0d4 <HAL_TIM_Base_Init>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d001      	beq.n	80020b0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80020ac:	f000 fe12 	bl	8002cd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020b4:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80020b6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80020ba:	4619      	mov	r1, r3
 80020bc:	4831      	ldr	r0, [pc, #196]	; (8002184 <MX_TIM1_Init+0x150>)
 80020be:	f00d fb5f 	bl	800f780 <HAL_TIM_ConfigClockSource>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d001      	beq.n	80020cc <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80020c8:	f000 fe04 	bl	8002cd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80020cc:	482d      	ldr	r0, [pc, #180]	; (8002184 <MX_TIM1_Init+0x150>)
 80020ce:	f00d f8d1 	bl	800f274 <HAL_TIM_PWM_Init>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d001      	beq.n	80020dc <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80020d8:	f000 fdfc 	bl	8002cd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020dc:	2300      	movs	r3, #0
 80020de:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80020e0:	2300      	movs	r3, #0
 80020e2:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020e4:	2300      	movs	r3, #0
 80020e6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80020e8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80020ec:	4619      	mov	r1, r3
 80020ee:	4825      	ldr	r0, [pc, #148]	; (8002184 <MX_TIM1_Init+0x150>)
 80020f0:	f00d ffcc 	bl	801008c <HAL_TIMEx_MasterConfigSynchronization>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d001      	beq.n	80020fe <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80020fa:	f000 fdeb 	bl	8002cd4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020fe:	2360      	movs	r3, #96	; 0x60
 8002100:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8002102:	2300      	movs	r3, #0
 8002104:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002106:	2300      	movs	r3, #0
 8002108:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800210a:	2300      	movs	r3, #0
 800210c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800210e:	2300      	movs	r3, #0
 8002110:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002112:	2300      	movs	r3, #0
 8002114:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002116:	2300      	movs	r3, #0
 8002118:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800211a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800211e:	2200      	movs	r2, #0
 8002120:	4619      	mov	r1, r3
 8002122:	4818      	ldr	r0, [pc, #96]	; (8002184 <MX_TIM1_Init+0x150>)
 8002124:	f00d fa1c 	bl	800f560 <HAL_TIM_PWM_ConfigChannel>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d001      	beq.n	8002132 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800212e:	f000 fdd1 	bl	8002cd4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002132:	2300      	movs	r3, #0
 8002134:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002136:	2300      	movs	r3, #0
 8002138:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800213a:	2300      	movs	r3, #0
 800213c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800213e:	2300      	movs	r3, #0
 8002140:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002142:	2300      	movs	r3, #0
 8002144:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002146:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800214a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800214c:	2300      	movs	r3, #0
 800214e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002150:	2300      	movs	r3, #0
 8002152:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002154:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002158:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800215a:	2300      	movs	r3, #0
 800215c:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800215e:	2300      	movs	r3, #0
 8002160:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002162:	1d3b      	adds	r3, r7, #4
 8002164:	4619      	mov	r1, r3
 8002166:	4807      	ldr	r0, [pc, #28]	; (8002184 <MX_TIM1_Init+0x150>)
 8002168:	f00e f81e 	bl	80101a8 <HAL_TIMEx_ConfigBreakDeadTime>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d001      	beq.n	8002176 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8002172:	f000 fdaf 	bl	8002cd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002176:	4803      	ldr	r0, [pc, #12]	; (8002184 <MX_TIM1_Init+0x150>)
 8002178:	f001 face 	bl	8003718 <HAL_TIM_MspPostInit>

}
 800217c:	bf00      	nop
 800217e:	3768      	adds	r7, #104	; 0x68
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	20009cf4 	.word	0x20009cf4
 8002188:	40010000 	.word	0x40010000

0800218c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b08e      	sub	sp, #56	; 0x38
 8002190:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002192:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002196:	2200      	movs	r2, #0
 8002198:	601a      	str	r2, [r3, #0]
 800219a:	605a      	str	r2, [r3, #4]
 800219c:	609a      	str	r2, [r3, #8]
 800219e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021a0:	f107 031c 	add.w	r3, r7, #28
 80021a4:	2200      	movs	r2, #0
 80021a6:	601a      	str	r2, [r3, #0]
 80021a8:	605a      	str	r2, [r3, #4]
 80021aa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021ac:	463b      	mov	r3, r7
 80021ae:	2200      	movs	r2, #0
 80021b0:	601a      	str	r2, [r3, #0]
 80021b2:	605a      	str	r2, [r3, #4]
 80021b4:	609a      	str	r2, [r3, #8]
 80021b6:	60da      	str	r2, [r3, #12]
 80021b8:	611a      	str	r2, [r3, #16]
 80021ba:	615a      	str	r2, [r3, #20]
 80021bc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80021be:	4b2d      	ldr	r3, [pc, #180]	; (8002274 <MX_TIM2_Init+0xe8>)
 80021c0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80021c4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80021c6:	4b2b      	ldr	r3, [pc, #172]	; (8002274 <MX_TIM2_Init+0xe8>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021cc:	4b29      	ldr	r3, [pc, #164]	; (8002274 <MX_TIM2_Init+0xe8>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80021d2:	4b28      	ldr	r3, [pc, #160]	; (8002274 <MX_TIM2_Init+0xe8>)
 80021d4:	f04f 32ff 	mov.w	r2, #4294967295
 80021d8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021da:	4b26      	ldr	r3, [pc, #152]	; (8002274 <MX_TIM2_Init+0xe8>)
 80021dc:	2200      	movs	r2, #0
 80021de:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021e0:	4b24      	ldr	r3, [pc, #144]	; (8002274 <MX_TIM2_Init+0xe8>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80021e6:	4823      	ldr	r0, [pc, #140]	; (8002274 <MX_TIM2_Init+0xe8>)
 80021e8:	f00c ff74 	bl	800f0d4 <HAL_TIM_Base_Init>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d001      	beq.n	80021f6 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80021f2:	f000 fd6f 	bl	8002cd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021fa:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80021fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002200:	4619      	mov	r1, r3
 8002202:	481c      	ldr	r0, [pc, #112]	; (8002274 <MX_TIM2_Init+0xe8>)
 8002204:	f00d fabc 	bl	800f780 <HAL_TIM_ConfigClockSource>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d001      	beq.n	8002212 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800220e:	f000 fd61 	bl	8002cd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002212:	4818      	ldr	r0, [pc, #96]	; (8002274 <MX_TIM2_Init+0xe8>)
 8002214:	f00d f82e 	bl	800f274 <HAL_TIM_PWM_Init>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d001      	beq.n	8002222 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800221e:	f000 fd59 	bl	8002cd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002222:	2300      	movs	r3, #0
 8002224:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002226:	2300      	movs	r3, #0
 8002228:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800222a:	f107 031c 	add.w	r3, r7, #28
 800222e:	4619      	mov	r1, r3
 8002230:	4810      	ldr	r0, [pc, #64]	; (8002274 <MX_TIM2_Init+0xe8>)
 8002232:	f00d ff2b 	bl	801008c <HAL_TIMEx_MasterConfigSynchronization>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d001      	beq.n	8002240 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800223c:	f000 fd4a 	bl	8002cd4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002240:	2360      	movs	r3, #96	; 0x60
 8002242:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002244:	2300      	movs	r3, #0
 8002246:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002248:	2300      	movs	r3, #0
 800224a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800224c:	2300      	movs	r3, #0
 800224e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002250:	463b      	mov	r3, r7
 8002252:	2200      	movs	r2, #0
 8002254:	4619      	mov	r1, r3
 8002256:	4807      	ldr	r0, [pc, #28]	; (8002274 <MX_TIM2_Init+0xe8>)
 8002258:	f00d f982 	bl	800f560 <HAL_TIM_PWM_ConfigChannel>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d001      	beq.n	8002266 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8002262:	f000 fd37 	bl	8002cd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002266:	4803      	ldr	r0, [pc, #12]	; (8002274 <MX_TIM2_Init+0xe8>)
 8002268:	f001 fa56 	bl	8003718 <HAL_TIM_MspPostInit>

}
 800226c:	bf00      	nop
 800226e:	3738      	adds	r7, #56	; 0x38
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}
 8002274:	20009e64 	.word	0x20009e64

08002278 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b08e      	sub	sp, #56	; 0x38
 800227c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800227e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002282:	2200      	movs	r2, #0
 8002284:	601a      	str	r2, [r3, #0]
 8002286:	605a      	str	r2, [r3, #4]
 8002288:	609a      	str	r2, [r3, #8]
 800228a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800228c:	f107 031c 	add.w	r3, r7, #28
 8002290:	2200      	movs	r2, #0
 8002292:	601a      	str	r2, [r3, #0]
 8002294:	605a      	str	r2, [r3, #4]
 8002296:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002298:	463b      	mov	r3, r7
 800229a:	2200      	movs	r2, #0
 800229c:	601a      	str	r2, [r3, #0]
 800229e:	605a      	str	r2, [r3, #4]
 80022a0:	609a      	str	r2, [r3, #8]
 80022a2:	60da      	str	r2, [r3, #12]
 80022a4:	611a      	str	r2, [r3, #16]
 80022a6:	615a      	str	r2, [r3, #20]
 80022a8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80022aa:	4b2d      	ldr	r3, [pc, #180]	; (8002360 <MX_TIM3_Init+0xe8>)
 80022ac:	4a2d      	ldr	r2, [pc, #180]	; (8002364 <MX_TIM3_Init+0xec>)
 80022ae:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80022b0:	4b2b      	ldr	r3, [pc, #172]	; (8002360 <MX_TIM3_Init+0xe8>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022b6:	4b2a      	ldr	r3, [pc, #168]	; (8002360 <MX_TIM3_Init+0xe8>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80022bc:	4b28      	ldr	r3, [pc, #160]	; (8002360 <MX_TIM3_Init+0xe8>)
 80022be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022c2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022c4:	4b26      	ldr	r3, [pc, #152]	; (8002360 <MX_TIM3_Init+0xe8>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022ca:	4b25      	ldr	r3, [pc, #148]	; (8002360 <MX_TIM3_Init+0xe8>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80022d0:	4823      	ldr	r0, [pc, #140]	; (8002360 <MX_TIM3_Init+0xe8>)
 80022d2:	f00c feff 	bl	800f0d4 <HAL_TIM_Base_Init>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d001      	beq.n	80022e0 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80022dc:	f000 fcfa 	bl	8002cd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022e4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80022e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022ea:	4619      	mov	r1, r3
 80022ec:	481c      	ldr	r0, [pc, #112]	; (8002360 <MX_TIM3_Init+0xe8>)
 80022ee:	f00d fa47 	bl	800f780 <HAL_TIM_ConfigClockSource>
 80022f2:	4603      	mov	r3, r0
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d001      	beq.n	80022fc <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80022f8:	f000 fcec 	bl	8002cd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80022fc:	4818      	ldr	r0, [pc, #96]	; (8002360 <MX_TIM3_Init+0xe8>)
 80022fe:	f00c ffb9 	bl	800f274 <HAL_TIM_PWM_Init>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d001      	beq.n	800230c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8002308:	f000 fce4 	bl	8002cd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800230c:	2300      	movs	r3, #0
 800230e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002310:	2300      	movs	r3, #0
 8002312:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002314:	f107 031c 	add.w	r3, r7, #28
 8002318:	4619      	mov	r1, r3
 800231a:	4811      	ldr	r0, [pc, #68]	; (8002360 <MX_TIM3_Init+0xe8>)
 800231c:	f00d feb6 	bl	801008c <HAL_TIMEx_MasterConfigSynchronization>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d001      	beq.n	800232a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8002326:	f000 fcd5 	bl	8002cd4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800232a:	2360      	movs	r3, #96	; 0x60
 800232c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800232e:	2300      	movs	r3, #0
 8002330:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002332:	2300      	movs	r3, #0
 8002334:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002336:	2300      	movs	r3, #0
 8002338:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800233a:	463b      	mov	r3, r7
 800233c:	2200      	movs	r2, #0
 800233e:	4619      	mov	r1, r3
 8002340:	4807      	ldr	r0, [pc, #28]	; (8002360 <MX_TIM3_Init+0xe8>)
 8002342:	f00d f90d 	bl	800f560 <HAL_TIM_PWM_ConfigChannel>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d001      	beq.n	8002350 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 800234c:	f000 fcc2 	bl	8002cd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002350:	4803      	ldr	r0, [pc, #12]	; (8002360 <MX_TIM3_Init+0xe8>)
 8002352:	f001 f9e1 	bl	8003718 <HAL_TIM_MspPostInit>

}
 8002356:	bf00      	nop
 8002358:	3738      	adds	r7, #56	; 0x38
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	20009ac4 	.word	0x20009ac4
 8002364:	40000400 	.word	0x40000400

08002368 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b08e      	sub	sp, #56	; 0x38
 800236c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800236e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002372:	2200      	movs	r2, #0
 8002374:	601a      	str	r2, [r3, #0]
 8002376:	605a      	str	r2, [r3, #4]
 8002378:	609a      	str	r2, [r3, #8]
 800237a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800237c:	f107 031c 	add.w	r3, r7, #28
 8002380:	2200      	movs	r2, #0
 8002382:	601a      	str	r2, [r3, #0]
 8002384:	605a      	str	r2, [r3, #4]
 8002386:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002388:	463b      	mov	r3, r7
 800238a:	2200      	movs	r2, #0
 800238c:	601a      	str	r2, [r3, #0]
 800238e:	605a      	str	r2, [r3, #4]
 8002390:	609a      	str	r2, [r3, #8]
 8002392:	60da      	str	r2, [r3, #12]
 8002394:	611a      	str	r2, [r3, #16]
 8002396:	615a      	str	r2, [r3, #20]
 8002398:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800239a:	4b2d      	ldr	r3, [pc, #180]	; (8002450 <MX_TIM5_Init+0xe8>)
 800239c:	4a2d      	ldr	r2, [pc, #180]	; (8002454 <MX_TIM5_Init+0xec>)
 800239e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80023a0:	4b2b      	ldr	r3, [pc, #172]	; (8002450 <MX_TIM5_Init+0xe8>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023a6:	4b2a      	ldr	r3, [pc, #168]	; (8002450 <MX_TIM5_Init+0xe8>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80023ac:	4b28      	ldr	r3, [pc, #160]	; (8002450 <MX_TIM5_Init+0xe8>)
 80023ae:	f04f 32ff 	mov.w	r2, #4294967295
 80023b2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023b4:	4b26      	ldr	r3, [pc, #152]	; (8002450 <MX_TIM5_Init+0xe8>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023ba:	4b25      	ldr	r3, [pc, #148]	; (8002450 <MX_TIM5_Init+0xe8>)
 80023bc:	2200      	movs	r2, #0
 80023be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80023c0:	4823      	ldr	r0, [pc, #140]	; (8002450 <MX_TIM5_Init+0xe8>)
 80023c2:	f00c fe87 	bl	800f0d4 <HAL_TIM_Base_Init>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d001      	beq.n	80023d0 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 80023cc:	f000 fc82 	bl	8002cd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023d4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80023d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80023da:	4619      	mov	r1, r3
 80023dc:	481c      	ldr	r0, [pc, #112]	; (8002450 <MX_TIM5_Init+0xe8>)
 80023de:	f00d f9cf 	bl	800f780 <HAL_TIM_ConfigClockSource>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d001      	beq.n	80023ec <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 80023e8:	f000 fc74 	bl	8002cd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80023ec:	4818      	ldr	r0, [pc, #96]	; (8002450 <MX_TIM5_Init+0xe8>)
 80023ee:	f00c ff41 	bl	800f274 <HAL_TIM_PWM_Init>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d001      	beq.n	80023fc <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 80023f8:	f000 fc6c 	bl	8002cd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023fc:	2300      	movs	r3, #0
 80023fe:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002400:	2300      	movs	r3, #0
 8002402:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002404:	f107 031c 	add.w	r3, r7, #28
 8002408:	4619      	mov	r1, r3
 800240a:	4811      	ldr	r0, [pc, #68]	; (8002450 <MX_TIM5_Init+0xe8>)
 800240c:	f00d fe3e 	bl	801008c <HAL_TIMEx_MasterConfigSynchronization>
 8002410:	4603      	mov	r3, r0
 8002412:	2b00      	cmp	r3, #0
 8002414:	d001      	beq.n	800241a <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8002416:	f000 fc5d 	bl	8002cd4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800241a:	2360      	movs	r3, #96	; 0x60
 800241c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800241e:	2300      	movs	r3, #0
 8002420:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002422:	2300      	movs	r3, #0
 8002424:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002426:	2300      	movs	r3, #0
 8002428:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800242a:	463b      	mov	r3, r7
 800242c:	220c      	movs	r2, #12
 800242e:	4619      	mov	r1, r3
 8002430:	4807      	ldr	r0, [pc, #28]	; (8002450 <MX_TIM5_Init+0xe8>)
 8002432:	f00d f895 	bl	800f560 <HAL_TIM_PWM_ConfigChannel>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d001      	beq.n	8002440 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 800243c:	f000 fc4a 	bl	8002cd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8002440:	4803      	ldr	r0, [pc, #12]	; (8002450 <MX_TIM5_Init+0xe8>)
 8002442:	f001 f969 	bl	8003718 <HAL_TIM_MspPostInit>

}
 8002446:	bf00      	nop
 8002448:	3738      	adds	r7, #56	; 0x38
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	20009a74 	.word	0x20009a74
 8002454:	40000c00 	.word	0x40000c00

08002458 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b088      	sub	sp, #32
 800245c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800245e:	f107 0310 	add.w	r3, r7, #16
 8002462:	2200      	movs	r2, #0
 8002464:	601a      	str	r2, [r3, #0]
 8002466:	605a      	str	r2, [r3, #4]
 8002468:	609a      	str	r2, [r3, #8]
 800246a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800246c:	1d3b      	adds	r3, r7, #4
 800246e:	2200      	movs	r2, #0
 8002470:	601a      	str	r2, [r3, #0]
 8002472:	605a      	str	r2, [r3, #4]
 8002474:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002476:	4b20      	ldr	r3, [pc, #128]	; (80024f8 <MX_TIM8_Init+0xa0>)
 8002478:	4a20      	ldr	r2, [pc, #128]	; (80024fc <MX_TIM8_Init+0xa4>)
 800247a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800247c:	4b1e      	ldr	r3, [pc, #120]	; (80024f8 <MX_TIM8_Init+0xa0>)
 800247e:	2200      	movs	r2, #0
 8002480:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002482:	4b1d      	ldr	r3, [pc, #116]	; (80024f8 <MX_TIM8_Init+0xa0>)
 8002484:	2200      	movs	r2, #0
 8002486:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8002488:	4b1b      	ldr	r3, [pc, #108]	; (80024f8 <MX_TIM8_Init+0xa0>)
 800248a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800248e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002490:	4b19      	ldr	r3, [pc, #100]	; (80024f8 <MX_TIM8_Init+0xa0>)
 8002492:	2200      	movs	r2, #0
 8002494:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002496:	4b18      	ldr	r3, [pc, #96]	; (80024f8 <MX_TIM8_Init+0xa0>)
 8002498:	2200      	movs	r2, #0
 800249a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800249c:	4b16      	ldr	r3, [pc, #88]	; (80024f8 <MX_TIM8_Init+0xa0>)
 800249e:	2200      	movs	r2, #0
 80024a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80024a2:	4815      	ldr	r0, [pc, #84]	; (80024f8 <MX_TIM8_Init+0xa0>)
 80024a4:	f00c fe16 	bl	800f0d4 <HAL_TIM_Base_Init>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d001      	beq.n	80024b2 <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 80024ae:	f000 fc11 	bl	8002cd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024b6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80024b8:	f107 0310 	add.w	r3, r7, #16
 80024bc:	4619      	mov	r1, r3
 80024be:	480e      	ldr	r0, [pc, #56]	; (80024f8 <MX_TIM8_Init+0xa0>)
 80024c0:	f00d f95e 	bl	800f780 <HAL_TIM_ConfigClockSource>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d001      	beq.n	80024ce <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 80024ca:	f000 fc03 	bl	8002cd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024ce:	2300      	movs	r3, #0
 80024d0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80024d2:	2300      	movs	r3, #0
 80024d4:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024d6:	2300      	movs	r3, #0
 80024d8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80024da:	1d3b      	adds	r3, r7, #4
 80024dc:	4619      	mov	r1, r3
 80024de:	4806      	ldr	r0, [pc, #24]	; (80024f8 <MX_TIM8_Init+0xa0>)
 80024e0:	f00d fdd4 	bl	801008c <HAL_TIMEx_MasterConfigSynchronization>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d001      	beq.n	80024ee <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80024ea:	f000 fbf3 	bl	8002cd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80024ee:	bf00      	nop
 80024f0:	3720      	adds	r7, #32
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	200097a4 	.word	0x200097a4
 80024fc:	40010400 	.word	0x40010400

08002500 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b088      	sub	sp, #32
 8002504:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002506:	1d3b      	adds	r3, r7, #4
 8002508:	2200      	movs	r2, #0
 800250a:	601a      	str	r2, [r3, #0]
 800250c:	605a      	str	r2, [r3, #4]
 800250e:	609a      	str	r2, [r3, #8]
 8002510:	60da      	str	r2, [r3, #12]
 8002512:	611a      	str	r2, [r3, #16]
 8002514:	615a      	str	r2, [r3, #20]
 8002516:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8002518:	4b1a      	ldr	r3, [pc, #104]	; (8002584 <MX_TIM12_Init+0x84>)
 800251a:	4a1b      	ldr	r2, [pc, #108]	; (8002588 <MX_TIM12_Init+0x88>)
 800251c:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 800251e:	4b19      	ldr	r3, [pc, #100]	; (8002584 <MX_TIM12_Init+0x84>)
 8002520:	2200      	movs	r2, #0
 8002522:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002524:	4b17      	ldr	r3, [pc, #92]	; (8002584 <MX_TIM12_Init+0x84>)
 8002526:	2200      	movs	r2, #0
 8002528:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 800252a:	4b16      	ldr	r3, [pc, #88]	; (8002584 <MX_TIM12_Init+0x84>)
 800252c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002530:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002532:	4b14      	ldr	r3, [pc, #80]	; (8002584 <MX_TIM12_Init+0x84>)
 8002534:	2200      	movs	r2, #0
 8002536:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002538:	4b12      	ldr	r3, [pc, #72]	; (8002584 <MX_TIM12_Init+0x84>)
 800253a:	2200      	movs	r2, #0
 800253c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 800253e:	4811      	ldr	r0, [pc, #68]	; (8002584 <MX_TIM12_Init+0x84>)
 8002540:	f00c fe98 	bl	800f274 <HAL_TIM_PWM_Init>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d001      	beq.n	800254e <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 800254a:	f000 fbc3 	bl	8002cd4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800254e:	2360      	movs	r3, #96	; 0x60
 8002550:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002552:	2300      	movs	r3, #0
 8002554:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002556:	2300      	movs	r3, #0
 8002558:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800255a:	2300      	movs	r3, #0
 800255c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800255e:	1d3b      	adds	r3, r7, #4
 8002560:	2200      	movs	r2, #0
 8002562:	4619      	mov	r1, r3
 8002564:	4807      	ldr	r0, [pc, #28]	; (8002584 <MX_TIM12_Init+0x84>)
 8002566:	f00c fffb 	bl	800f560 <HAL_TIM_PWM_ConfigChannel>
 800256a:	4603      	mov	r3, r0
 800256c:	2b00      	cmp	r3, #0
 800256e:	d001      	beq.n	8002574 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8002570:	f000 fbb0 	bl	8002cd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8002574:	4803      	ldr	r0, [pc, #12]	; (8002584 <MX_TIM12_Init+0x84>)
 8002576:	f001 f8cf 	bl	8003718 <HAL_TIM_MspPostInit>

}
 800257a:	bf00      	nop
 800257c:	3720      	adds	r7, #32
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	20009eb0 	.word	0x20009eb0
 8002588:	40001800 	.word	0x40001800

0800258c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002590:	4b14      	ldr	r3, [pc, #80]	; (80025e4 <MX_USART1_UART_Init+0x58>)
 8002592:	4a15      	ldr	r2, [pc, #84]	; (80025e8 <MX_USART1_UART_Init+0x5c>)
 8002594:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002596:	4b13      	ldr	r3, [pc, #76]	; (80025e4 <MX_USART1_UART_Init+0x58>)
 8002598:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800259c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800259e:	4b11      	ldr	r3, [pc, #68]	; (80025e4 <MX_USART1_UART_Init+0x58>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80025a4:	4b0f      	ldr	r3, [pc, #60]	; (80025e4 <MX_USART1_UART_Init+0x58>)
 80025a6:	2200      	movs	r2, #0
 80025a8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80025aa:	4b0e      	ldr	r3, [pc, #56]	; (80025e4 <MX_USART1_UART_Init+0x58>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80025b0:	4b0c      	ldr	r3, [pc, #48]	; (80025e4 <MX_USART1_UART_Init+0x58>)
 80025b2:	220c      	movs	r2, #12
 80025b4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025b6:	4b0b      	ldr	r3, [pc, #44]	; (80025e4 <MX_USART1_UART_Init+0x58>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80025bc:	4b09      	ldr	r3, [pc, #36]	; (80025e4 <MX_USART1_UART_Init+0x58>)
 80025be:	2200      	movs	r2, #0
 80025c0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80025c2:	4b08      	ldr	r3, [pc, #32]	; (80025e4 <MX_USART1_UART_Init+0x58>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80025c8:	4b06      	ldr	r3, [pc, #24]	; (80025e4 <MX_USART1_UART_Init+0x58>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80025ce:	4805      	ldr	r0, [pc, #20]	; (80025e4 <MX_USART1_UART_Init+0x58>)
 80025d0:	f00d fe86 	bl	80102e0 <HAL_UART_Init>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d001      	beq.n	80025de <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80025da:	f000 fb7b 	bl	8002cd4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80025de:	bf00      	nop
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	20009c50 	.word	0x20009c50
 80025e8:	40011000 	.word	0x40011000

080025ec <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80025f0:	4b14      	ldr	r3, [pc, #80]	; (8002644 <MX_USART6_UART_Init+0x58>)
 80025f2:	4a15      	ldr	r2, [pc, #84]	; (8002648 <MX_USART6_UART_Init+0x5c>)
 80025f4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80025f6:	4b13      	ldr	r3, [pc, #76]	; (8002644 <MX_USART6_UART_Init+0x58>)
 80025f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80025fc:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80025fe:	4b11      	ldr	r3, [pc, #68]	; (8002644 <MX_USART6_UART_Init+0x58>)
 8002600:	2200      	movs	r2, #0
 8002602:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002604:	4b0f      	ldr	r3, [pc, #60]	; (8002644 <MX_USART6_UART_Init+0x58>)
 8002606:	2200      	movs	r2, #0
 8002608:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800260a:	4b0e      	ldr	r3, [pc, #56]	; (8002644 <MX_USART6_UART_Init+0x58>)
 800260c:	2200      	movs	r2, #0
 800260e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002610:	4b0c      	ldr	r3, [pc, #48]	; (8002644 <MX_USART6_UART_Init+0x58>)
 8002612:	220c      	movs	r2, #12
 8002614:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002616:	4b0b      	ldr	r3, [pc, #44]	; (8002644 <MX_USART6_UART_Init+0x58>)
 8002618:	2200      	movs	r2, #0
 800261a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800261c:	4b09      	ldr	r3, [pc, #36]	; (8002644 <MX_USART6_UART_Init+0x58>)
 800261e:	2200      	movs	r2, #0
 8002620:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002622:	4b08      	ldr	r3, [pc, #32]	; (8002644 <MX_USART6_UART_Init+0x58>)
 8002624:	2200      	movs	r2, #0
 8002626:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002628:	4b06      	ldr	r3, [pc, #24]	; (8002644 <MX_USART6_UART_Init+0x58>)
 800262a:	2200      	movs	r2, #0
 800262c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800262e:	4805      	ldr	r0, [pc, #20]	; (8002644 <MX_USART6_UART_Init+0x58>)
 8002630:	f00d fe56 	bl	80102e0 <HAL_UART_Init>
 8002634:	4603      	mov	r3, r0
 8002636:	2b00      	cmp	r3, #0
 8002638:	d001      	beq.n	800263e <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 800263a:	f000 fb4b 	bl	8002cd4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800263e:	bf00      	nop
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	20009da0 	.word	0x20009da0
 8002648:	40011400 	.word	0x40011400

0800264c <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma2_stream0
  */
static void MX_DMA_Init(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002652:	4b32      	ldr	r3, [pc, #200]	; (800271c <MX_DMA_Init+0xd0>)
 8002654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002656:	4a31      	ldr	r2, [pc, #196]	; (800271c <MX_DMA_Init+0xd0>)
 8002658:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800265c:	6313      	str	r3, [r2, #48]	; 0x30
 800265e:	4b2f      	ldr	r3, [pc, #188]	; (800271c <MX_DMA_Init+0xd0>)
 8002660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002662:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002666:	607b      	str	r3, [r7, #4]
 8002668:	687b      	ldr	r3, [r7, #4]

  /* Configure DMA request hdma_memtomem_dma2_stream0 on DMA2_Stream0 */
  hdma_memtomem_dma2_stream0.Instance = DMA2_Stream0;
 800266a:	4b2d      	ldr	r3, [pc, #180]	; (8002720 <MX_DMA_Init+0xd4>)
 800266c:	4a2d      	ldr	r2, [pc, #180]	; (8002724 <MX_DMA_Init+0xd8>)
 800266e:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream0.Init.Channel = DMA_CHANNEL_0;
 8002670:	4b2b      	ldr	r3, [pc, #172]	; (8002720 <MX_DMA_Init+0xd4>)
 8002672:	2200      	movs	r2, #0
 8002674:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream0.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8002676:	4b2a      	ldr	r3, [pc, #168]	; (8002720 <MX_DMA_Init+0xd4>)
 8002678:	2280      	movs	r2, #128	; 0x80
 800267a:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream0.Init.PeriphInc = DMA_PINC_ENABLE;
 800267c:	4b28      	ldr	r3, [pc, #160]	; (8002720 <MX_DMA_Init+0xd4>)
 800267e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002682:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream0.Init.MemInc = DMA_MINC_ENABLE;
 8002684:	4b26      	ldr	r3, [pc, #152]	; (8002720 <MX_DMA_Init+0xd4>)
 8002686:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800268a:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800268c:	4b24      	ldr	r3, [pc, #144]	; (8002720 <MX_DMA_Init+0xd4>)
 800268e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002692:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002694:	4b22      	ldr	r3, [pc, #136]	; (8002720 <MX_DMA_Init+0xd4>)
 8002696:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800269a:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream0.Init.Mode = DMA_NORMAL;
 800269c:	4b20      	ldr	r3, [pc, #128]	; (8002720 <MX_DMA_Init+0xd4>)
 800269e:	2200      	movs	r2, #0
 80026a0:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream0.Init.Priority = DMA_PRIORITY_HIGH;
 80026a2:	4b1f      	ldr	r3, [pc, #124]	; (8002720 <MX_DMA_Init+0xd4>)
 80026a4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80026a8:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream0.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80026aa:	4b1d      	ldr	r3, [pc, #116]	; (8002720 <MX_DMA_Init+0xd4>)
 80026ac:	2204      	movs	r2, #4
 80026ae:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream0.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80026b0:	4b1b      	ldr	r3, [pc, #108]	; (8002720 <MX_DMA_Init+0xd4>)
 80026b2:	2203      	movs	r2, #3
 80026b4:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream0.Init.MemBurst = DMA_MBURST_SINGLE;
 80026b6:	4b1a      	ldr	r3, [pc, #104]	; (8002720 <MX_DMA_Init+0xd4>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream0.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80026bc:	4b18      	ldr	r3, [pc, #96]	; (8002720 <MX_DMA_Init+0xd4>)
 80026be:	2200      	movs	r2, #0
 80026c0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream0) != HAL_OK)
 80026c2:	4817      	ldr	r0, [pc, #92]	; (8002720 <MX_DMA_Init+0xd4>)
 80026c4:	f004 f91a 	bl	80068fc <HAL_DMA_Init>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d001      	beq.n	80026d2 <MX_DMA_Init+0x86>
  {
    Error_Handler( );
 80026ce:	f000 fb01 	bl	8002cd4 <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80026d2:	2200      	movs	r2, #0
 80026d4:	2105      	movs	r1, #5
 80026d6:	2038      	movs	r0, #56	; 0x38
 80026d8:	f003 fea4 	bl	8006424 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80026dc:	2038      	movs	r0, #56	; 0x38
 80026de:	f003 febd 	bl	800645c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 80026e2:	2200      	movs	r2, #0
 80026e4:	2105      	movs	r1, #5
 80026e6:	2039      	movs	r0, #57	; 0x39
 80026e8:	f003 fe9c 	bl	8006424 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80026ec:	2039      	movs	r0, #57	; 0x39
 80026ee:	f003 feb5 	bl	800645c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 80026f2:	2200      	movs	r2, #0
 80026f4:	2105      	movs	r1, #5
 80026f6:	203c      	movs	r0, #60	; 0x3c
 80026f8:	f003 fe94 	bl	8006424 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 80026fc:	203c      	movs	r0, #60	; 0x3c
 80026fe:	f003 fead 	bl	800645c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8002702:	2200      	movs	r2, #0
 8002704:	2105      	movs	r1, #5
 8002706:	2046      	movs	r0, #70	; 0x46
 8002708:	f003 fe8c 	bl	8006424 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 800270c:	2046      	movs	r0, #70	; 0x46
 800270e:	f003 fea5 	bl	800645c <HAL_NVIC_EnableIRQ>

}
 8002712:	bf00      	nop
 8002714:	3708      	adds	r7, #8
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	40023800 	.word	0x40023800
 8002720:	20009744 	.word	0x20009744
 8002724:	40026410 	.word	0x40026410

08002728 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b088      	sub	sp, #32
 800272c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800272e:	1d3b      	adds	r3, r7, #4
 8002730:	2200      	movs	r2, #0
 8002732:	601a      	str	r2, [r3, #0]
 8002734:	605a      	str	r2, [r3, #4]
 8002736:	609a      	str	r2, [r3, #8]
 8002738:	60da      	str	r2, [r3, #12]
 800273a:	611a      	str	r2, [r3, #16]
 800273c:	615a      	str	r2, [r3, #20]
 800273e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8002740:	4b21      	ldr	r3, [pc, #132]	; (80027c8 <MX_FMC_Init+0xa0>)
 8002742:	4a22      	ldr	r2, [pc, #136]	; (80027cc <MX_FMC_Init+0xa4>)
 8002744:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8002746:	4b20      	ldr	r3, [pc, #128]	; (80027c8 <MX_FMC_Init+0xa0>)
 8002748:	2200      	movs	r2, #0
 800274a:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800274c:	4b1e      	ldr	r3, [pc, #120]	; (80027c8 <MX_FMC_Init+0xa0>)
 800274e:	2200      	movs	r2, #0
 8002750:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8002752:	4b1d      	ldr	r3, [pc, #116]	; (80027c8 <MX_FMC_Init+0xa0>)
 8002754:	2204      	movs	r2, #4
 8002756:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8002758:	4b1b      	ldr	r3, [pc, #108]	; (80027c8 <MX_FMC_Init+0xa0>)
 800275a:	2210      	movs	r2, #16
 800275c:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800275e:	4b1a      	ldr	r3, [pc, #104]	; (80027c8 <MX_FMC_Init+0xa0>)
 8002760:	2240      	movs	r2, #64	; 0x40
 8002762:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8002764:	4b18      	ldr	r3, [pc, #96]	; (80027c8 <MX_FMC_Init+0xa0>)
 8002766:	f44f 7280 	mov.w	r2, #256	; 0x100
 800276a:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800276c:	4b16      	ldr	r3, [pc, #88]	; (80027c8 <MX_FMC_Init+0xa0>)
 800276e:	2200      	movs	r2, #0
 8002770:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8002772:	4b15      	ldr	r3, [pc, #84]	; (80027c8 <MX_FMC_Init+0xa0>)
 8002774:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002778:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800277a:	4b13      	ldr	r3, [pc, #76]	; (80027c8 <MX_FMC_Init+0xa0>)
 800277c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002780:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8002782:	4b11      	ldr	r3, [pc, #68]	; (80027c8 <MX_FMC_Init+0xa0>)
 8002784:	2200      	movs	r2, #0
 8002786:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8002788:	2302      	movs	r3, #2
 800278a:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 800278c:	2307      	movs	r3, #7
 800278e:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8002790:	2304      	movs	r3, #4
 8002792:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8002794:	2307      	movs	r3, #7
 8002796:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8002798:	2303      	movs	r3, #3
 800279a:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 800279c:	2302      	movs	r3, #2
 800279e:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80027a0:	2302      	movs	r3, #2
 80027a2:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80027a4:	1d3b      	adds	r3, r7, #4
 80027a6:	4619      	mov	r1, r3
 80027a8:	4807      	ldr	r0, [pc, #28]	; (80027c8 <MX_FMC_Init+0xa0>)
 80027aa:	f00c fbb8 	bl	800ef1e <HAL_SDRAM_Init>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d001      	beq.n	80027b8 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 80027b4:	f000 fa8e 	bl	8002cd4 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

	DISCO_SDRAM_Initialization_sequence(REFRESH_COUNT);
 80027b8:	f240 6003 	movw	r0, #1539	; 0x603
 80027bc:	f002 fb02 	bl	8004dc4 <DISCO_SDRAM_Initialization_sequence>

  /* USER CODE END FMC_Init 2 */
}
 80027c0:	bf00      	nop
 80027c2:	3720      	adds	r7, #32
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	20009efc 	.word	0x20009efc
 80027cc:	a0000140 	.word	0xa0000140

080027d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b090      	sub	sp, #64	; 0x40
 80027d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80027da:	2200      	movs	r2, #0
 80027dc:	601a      	str	r2, [r3, #0]
 80027de:	605a      	str	r2, [r3, #4]
 80027e0:	609a      	str	r2, [r3, #8]
 80027e2:	60da      	str	r2, [r3, #12]
 80027e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80027e6:	4baf      	ldr	r3, [pc, #700]	; (8002aa4 <MX_GPIO_Init+0x2d4>)
 80027e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ea:	4aae      	ldr	r2, [pc, #696]	; (8002aa4 <MX_GPIO_Init+0x2d4>)
 80027ec:	f043 0310 	orr.w	r3, r3, #16
 80027f0:	6313      	str	r3, [r2, #48]	; 0x30
 80027f2:	4bac      	ldr	r3, [pc, #688]	; (8002aa4 <MX_GPIO_Init+0x2d4>)
 80027f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f6:	f003 0310 	and.w	r3, r3, #16
 80027fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80027fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80027fe:	4ba9      	ldr	r3, [pc, #676]	; (8002aa4 <MX_GPIO_Init+0x2d4>)
 8002800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002802:	4aa8      	ldr	r2, [pc, #672]	; (8002aa4 <MX_GPIO_Init+0x2d4>)
 8002804:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002808:	6313      	str	r3, [r2, #48]	; 0x30
 800280a:	4ba6      	ldr	r3, [pc, #664]	; (8002aa4 <MX_GPIO_Init+0x2d4>)
 800280c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002812:	627b      	str	r3, [r7, #36]	; 0x24
 8002814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002816:	4ba3      	ldr	r3, [pc, #652]	; (8002aa4 <MX_GPIO_Init+0x2d4>)
 8002818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281a:	4aa2      	ldr	r2, [pc, #648]	; (8002aa4 <MX_GPIO_Init+0x2d4>)
 800281c:	f043 0302 	orr.w	r3, r3, #2
 8002820:	6313      	str	r3, [r2, #48]	; 0x30
 8002822:	4ba0      	ldr	r3, [pc, #640]	; (8002aa4 <MX_GPIO_Init+0x2d4>)
 8002824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002826:	f003 0302 	and.w	r3, r3, #2
 800282a:	623b      	str	r3, [r7, #32]
 800282c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800282e:	4b9d      	ldr	r3, [pc, #628]	; (8002aa4 <MX_GPIO_Init+0x2d4>)
 8002830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002832:	4a9c      	ldr	r2, [pc, #624]	; (8002aa4 <MX_GPIO_Init+0x2d4>)
 8002834:	f043 0308 	orr.w	r3, r3, #8
 8002838:	6313      	str	r3, [r2, #48]	; 0x30
 800283a:	4b9a      	ldr	r3, [pc, #616]	; (8002aa4 <MX_GPIO_Init+0x2d4>)
 800283c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283e:	f003 0308 	and.w	r3, r3, #8
 8002842:	61fb      	str	r3, [r7, #28]
 8002844:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002846:	4b97      	ldr	r3, [pc, #604]	; (8002aa4 <MX_GPIO_Init+0x2d4>)
 8002848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284a:	4a96      	ldr	r2, [pc, #600]	; (8002aa4 <MX_GPIO_Init+0x2d4>)
 800284c:	f043 0304 	orr.w	r3, r3, #4
 8002850:	6313      	str	r3, [r2, #48]	; 0x30
 8002852:	4b94      	ldr	r3, [pc, #592]	; (8002aa4 <MX_GPIO_Init+0x2d4>)
 8002854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002856:	f003 0304 	and.w	r3, r3, #4
 800285a:	61bb      	str	r3, [r7, #24]
 800285c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800285e:	4b91      	ldr	r3, [pc, #580]	; (8002aa4 <MX_GPIO_Init+0x2d4>)
 8002860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002862:	4a90      	ldr	r2, [pc, #576]	; (8002aa4 <MX_GPIO_Init+0x2d4>)
 8002864:	f043 0301 	orr.w	r3, r3, #1
 8002868:	6313      	str	r3, [r2, #48]	; 0x30
 800286a:	4b8e      	ldr	r3, [pc, #568]	; (8002aa4 <MX_GPIO_Init+0x2d4>)
 800286c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286e:	f003 0301 	and.w	r3, r3, #1
 8002872:	617b      	str	r3, [r7, #20]
 8002874:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002876:	4b8b      	ldr	r3, [pc, #556]	; (8002aa4 <MX_GPIO_Init+0x2d4>)
 8002878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287a:	4a8a      	ldr	r2, [pc, #552]	; (8002aa4 <MX_GPIO_Init+0x2d4>)
 800287c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002880:	6313      	str	r3, [r2, #48]	; 0x30
 8002882:	4b88      	ldr	r3, [pc, #544]	; (8002aa4 <MX_GPIO_Init+0x2d4>)
 8002884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002886:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800288a:	613b      	str	r3, [r7, #16]
 800288c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800288e:	4b85      	ldr	r3, [pc, #532]	; (8002aa4 <MX_GPIO_Init+0x2d4>)
 8002890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002892:	4a84      	ldr	r2, [pc, #528]	; (8002aa4 <MX_GPIO_Init+0x2d4>)
 8002894:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002898:	6313      	str	r3, [r2, #48]	; 0x30
 800289a:	4b82      	ldr	r3, [pc, #520]	; (8002aa4 <MX_GPIO_Init+0x2d4>)
 800289c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028a2:	60fb      	str	r3, [r7, #12]
 80028a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80028a6:	4b7f      	ldr	r3, [pc, #508]	; (8002aa4 <MX_GPIO_Init+0x2d4>)
 80028a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028aa:	4a7e      	ldr	r2, [pc, #504]	; (8002aa4 <MX_GPIO_Init+0x2d4>)
 80028ac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80028b0:	6313      	str	r3, [r2, #48]	; 0x30
 80028b2:	4b7c      	ldr	r3, [pc, #496]	; (8002aa4 <MX_GPIO_Init+0x2d4>)
 80028b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028ba:	60bb      	str	r3, [r7, #8]
 80028bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80028be:	4b79      	ldr	r3, [pc, #484]	; (8002aa4 <MX_GPIO_Init+0x2d4>)
 80028c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c2:	4a78      	ldr	r2, [pc, #480]	; (8002aa4 <MX_GPIO_Init+0x2d4>)
 80028c4:	f043 0320 	orr.w	r3, r3, #32
 80028c8:	6313      	str	r3, [r2, #48]	; 0x30
 80028ca:	4b76      	ldr	r3, [pc, #472]	; (8002aa4 <MX_GPIO_Init+0x2d4>)
 80028cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ce:	f003 0320 	and.w	r3, r3, #32
 80028d2:	607b      	str	r3, [r7, #4]
 80028d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80028d6:	4b73      	ldr	r3, [pc, #460]	; (8002aa4 <MX_GPIO_Init+0x2d4>)
 80028d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028da:	4a72      	ldr	r2, [pc, #456]	; (8002aa4 <MX_GPIO_Init+0x2d4>)
 80028dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028e0:	6313      	str	r3, [r2, #48]	; 0x30
 80028e2:	4b70      	ldr	r3, [pc, #448]	; (8002aa4 <MX_GPIO_Init+0x2d4>)
 80028e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028ea:	603b      	str	r3, [r7, #0]
 80028ec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80028ee:	2201      	movs	r2, #1
 80028f0:	2120      	movs	r1, #32
 80028f2:	486d      	ldr	r0, [pc, #436]	; (8002aa8 <MX_GPIO_Init+0x2d8>)
 80028f4:	f005 fa84 	bl	8007e00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|LD_GREEN_Pin, GPIO_PIN_RESET);
 80028f8:	2200      	movs	r2, #0
 80028fa:	210e      	movs	r1, #14
 80028fc:	486b      	ldr	r0, [pc, #428]	; (8002aac <MX_GPIO_Init+0x2dc>)
 80028fe:	f005 fa7f 	bl	8007e00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8002902:	2201      	movs	r2, #1
 8002904:	2108      	movs	r1, #8
 8002906:	486a      	ldr	r0, [pc, #424]	; (8002ab0 <MX_GPIO_Init+0x2e0>)
 8002908:	f005 fa7a 	bl	8007e00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 800290c:	2201      	movs	r2, #1
 800290e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002912:	4866      	ldr	r0, [pc, #408]	; (8002aac <MX_GPIO_Init+0x2dc>)
 8002914:	f005 fa74 	bl	8007e00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8002918:	2200      	movs	r2, #0
 800291a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800291e:	4865      	ldr	r0, [pc, #404]	; (8002ab4 <MX_GPIO_Init+0x2e4>)
 8002920:	f005 fa6e 	bl	8007e00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8002924:	2200      	movs	r2, #0
 8002926:	21c8      	movs	r1, #200	; 0xc8
 8002928:	4863      	ldr	r0, [pc, #396]	; (8002ab8 <MX_GPIO_Init+0x2e8>)
 800292a:	f005 fa69 	bl	8007e00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 800292e:	2308      	movs	r3, #8
 8002930:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002932:	2300      	movs	r3, #0
 8002934:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002936:	2300      	movs	r3, #0
 8002938:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800293a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800293e:	4619      	mov	r1, r3
 8002940:	485e      	ldr	r0, [pc, #376]	; (8002abc <MX_GPIO_Init+0x2ec>)
 8002942:	f004 ff8d 	bl	8007860 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8002946:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 800294a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800294c:	2302      	movs	r3, #2
 800294e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002950:	2300      	movs	r3, #0
 8002952:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002954:	2303      	movs	r3, #3
 8002956:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002958:	230b      	movs	r3, #11
 800295a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800295c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002960:	4619      	mov	r1, r3
 8002962:	4855      	ldr	r0, [pc, #340]	; (8002ab8 <MX_GPIO_Init+0x2e8>)
 8002964:	f004 ff7c 	bl	8007860 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8002968:	f643 4323 	movw	r3, #15395	; 0x3c23
 800296c:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800296e:	2302      	movs	r3, #2
 8002970:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002972:	2300      	movs	r3, #0
 8002974:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002976:	2303      	movs	r3, #3
 8002978:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800297a:	230a      	movs	r3, #10
 800297c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800297e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002982:	4619      	mov	r1, r3
 8002984:	484e      	ldr	r0, [pc, #312]	; (8002ac0 <MX_GPIO_Init+0x2f0>)
 8002986:	f004 ff6b 	bl	8007860 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 800298a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800298e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002990:	2300      	movs	r3, #0
 8002992:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002994:	2300      	movs	r3, #0
 8002996:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002998:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800299c:	4619      	mov	r1, r3
 800299e:	4849      	ldr	r0, [pc, #292]	; (8002ac4 <MX_GPIO_Init+0x2f4>)
 80029a0:	f004 ff5e 	bl	8007860 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 80029a4:	2340      	movs	r3, #64	; 0x40
 80029a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80029a8:	4b47      	ldr	r3, [pc, #284]	; (8002ac8 <MX_GPIO_Init+0x2f8>)
 80029aa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ac:	2300      	movs	r3, #0
 80029ae:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 80029b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80029b4:	4619      	mov	r1, r3
 80029b6:	483c      	ldr	r0, [pc, #240]	; (8002aa8 <MX_GPIO_Init+0x2d8>)
 80029b8:	f004 ff52 	bl	8007860 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80029bc:	2320      	movs	r3, #32
 80029be:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029c0:	2301      	movs	r3, #1
 80029c2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c4:	2300      	movs	r3, #0
 80029c6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029c8:	2300      	movs	r3, #0
 80029ca:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80029cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80029d0:	4619      	mov	r1, r3
 80029d2:	4835      	ldr	r0, [pc, #212]	; (8002aa8 <MX_GPIO_Init+0x2d8>)
 80029d4:	f004 ff44 	bl	8007860 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LD_GREEN_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LD_GREEN_Pin|LCD_DISP_Pin;
 80029d8:	f241 030e 	movw	r3, #4110	; 0x100e
 80029dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029de:	2301      	movs	r3, #1
 80029e0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e2:	2300      	movs	r3, #0
 80029e4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029e6:	2300      	movs	r3, #0
 80029e8:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80029ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80029ee:	4619      	mov	r1, r3
 80029f0:	482e      	ldr	r0, [pc, #184]	; (8002aac <MX_GPIO_Init+0x2dc>)
 80029f2:	f004 ff35 	bl	8007860 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 80029f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80029fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029fc:	2300      	movs	r3, #0
 80029fe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a00:	2300      	movs	r3, #0
 8002a02:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8002a04:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a08:	4619      	mov	r1, r3
 8002a0a:	4830      	ldr	r0, [pc, #192]	; (8002acc <MX_GPIO_Init+0x2fc>)
 8002a0c:	f004 ff28 	bl	8007860 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8002a10:	2308      	movs	r3, #8
 8002a12:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a14:	2301      	movs	r3, #1
 8002a16:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8002a20:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a24:	4619      	mov	r1, r3
 8002a26:	4822      	ldr	r0, [pc, #136]	; (8002ab0 <MX_GPIO_Init+0x2e0>)
 8002a28:	f004 ff1a 	bl	8007860 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8002a2c:	2310      	movs	r3, #16
 8002a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a30:	2300      	movs	r3, #0
 8002a32:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a34:	2300      	movs	r3, #0
 8002a36:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002a38:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	481a      	ldr	r0, [pc, #104]	; (8002aa8 <MX_GPIO_Init+0x2d8>)
 8002a40:	f004 ff0e 	bl	8007860 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8002a44:	f248 0304 	movw	r3, #32772	; 0x8004
 8002a48:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002a52:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a56:	4619      	mov	r1, r3
 8002a58:	4816      	ldr	r0, [pc, #88]	; (8002ab4 <MX_GPIO_Init+0x2e4>)
 8002a5a:	f004 ff01 	bl	8007860 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8002a5e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a62:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a64:	2301      	movs	r3, #1
 8002a66:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8002a70:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a74:	4619      	mov	r1, r3
 8002a76:	480f      	ldr	r0, [pc, #60]	; (8002ab4 <MX_GPIO_Init+0x2e4>)
 8002a78:	f004 fef2 	bl	8007860 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLUE_BTN_Pin */
  GPIO_InitStruct.Pin = BLUE_BTN_Pin;
 8002a7c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002a80:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a82:	2300      	movs	r3, #0
 8002a84:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a86:	2300      	movs	r3, #0
 8002a88:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(BLUE_BTN_GPIO_Port, &GPIO_InitStruct);
 8002a8a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a8e:	4619      	mov	r1, r3
 8002a90:	4806      	ldr	r0, [pc, #24]	; (8002aac <MX_GPIO_Init+0x2dc>)
 8002a92:	f004 fee5 	bl	8007860 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8002a96:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002a9c:	4b0c      	ldr	r3, [pc, #48]	; (8002ad0 <MX_GPIO_Init+0x300>)
 8002a9e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	e017      	b.n	8002ad4 <MX_GPIO_Init+0x304>
 8002aa4:	40023800 	.word	0x40023800
 8002aa8:	40020c00 	.word	0x40020c00
 8002aac:	40022000 	.word	0x40022000
 8002ab0:	40022800 	.word	0x40022800
 8002ab4:	40021c00 	.word	0x40021c00
 8002ab8:	40021800 	.word	0x40021800
 8002abc:	40021000 	.word	0x40021000
 8002ac0:	40020400 	.word	0x40020400
 8002ac4:	40022400 	.word	0x40022400
 8002ac8:	10120000 	.word	0x10120000
 8002acc:	40020800 	.word	0x40020800
 8002ad0:	10110000 	.word	0x10110000
 8002ad4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8002ad6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ada:	4619      	mov	r1, r3
 8002adc:	4844      	ldr	r0, [pc, #272]	; (8002bf0 <MX_GPIO_Init+0x420>)
 8002ade:	f004 febf 	bl	8007860 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8002ae2:	2310      	movs	r3, #16
 8002ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ae6:	2302      	movs	r3, #2
 8002ae8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aea:	2300      	movs	r3, #0
 8002aec:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002aee:	2303      	movs	r3, #3
 8002af0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002af2:	230a      	movs	r3, #10
 8002af4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8002af6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002afa:	4619      	mov	r1, r3
 8002afc:	483d      	ldr	r0, [pc, #244]	; (8002bf4 <MX_GPIO_Init+0x424>)
 8002afe:	f004 feaf 	bl	8007860 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8002b02:	23c8      	movs	r3, #200	; 0xc8
 8002b04:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b06:	2301      	movs	r3, #1
 8002b08:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002b12:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b16:	4619      	mov	r1, r3
 8002b18:	4837      	ldr	r0, [pc, #220]	; (8002bf8 <MX_GPIO_Init+0x428>)
 8002b1a:	f004 fea1 	bl	8007860 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8002b1e:	2305      	movs	r3, #5
 8002b20:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b22:	2302      	movs	r3, #2
 8002b24:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b26:	2300      	movs	r3, #0
 8002b28:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002b2e:	230a      	movs	r3, #10
 8002b30:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b32:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b36:	4619      	mov	r1, r3
 8002b38:	4830      	ldr	r0, [pc, #192]	; (8002bfc <MX_GPIO_Init+0x42c>)
 8002b3a:	f004 fe91 	bl	8007860 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002b3e:	2332      	movs	r3, #50	; 0x32
 8002b40:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b42:	2302      	movs	r3, #2
 8002b44:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b46:	2300      	movs	r3, #0
 8002b48:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002b4e:	230b      	movs	r3, #11
 8002b50:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b52:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b56:	4619      	mov	r1, r3
 8002b58:	4828      	ldr	r0, [pc, #160]	; (8002bfc <MX_GPIO_Init+0x42c>)
 8002b5a:	f004 fe81 	bl	8007860 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8002b5e:	2304      	movs	r3, #4
 8002b60:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b62:	2300      	movs	r3, #0
 8002b64:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b66:	2300      	movs	r3, #0
 8002b68:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8002b6a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b6e:	4619      	mov	r1, r3
 8002b70:	4821      	ldr	r0, [pc, #132]	; (8002bf8 <MX_GPIO_Init+0x428>)
 8002b72:	f004 fe75 	bl	8007860 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002b76:	2386      	movs	r3, #134	; 0x86
 8002b78:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b7a:	2302      	movs	r3, #2
 8002b7c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b82:	2303      	movs	r3, #3
 8002b84:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002b86:	230b      	movs	r3, #11
 8002b88:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b8a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b8e:	4619      	mov	r1, r3
 8002b90:	481b      	ldr	r0, [pc, #108]	; (8002c00 <MX_GPIO_Init+0x430>)
 8002b92:	f004 fe65 	bl	8007860 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8002b96:	2328      	movs	r3, #40	; 0x28
 8002b98:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b9a:	2302      	movs	r3, #2
 8002b9c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002ba6:	230a      	movs	r3, #10
 8002ba8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002baa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002bae:	4619      	mov	r1, r3
 8002bb0:	4813      	ldr	r0, [pc, #76]	; (8002c00 <MX_GPIO_Init+0x430>)
 8002bb2:	f004 fe55 	bl	8007860 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8002bb6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002bba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bbc:	2302      	movs	r3, #2
 8002bbe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002bc8:	2305      	movs	r3, #5
 8002bca:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bcc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002bd0:	4619      	mov	r1, r3
 8002bd2:	480c      	ldr	r0, [pc, #48]	; (8002c04 <MX_GPIO_Init+0x434>)
 8002bd4:	f004 fe44 	bl	8007860 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8002bd8:	2200      	movs	r2, #0
 8002bda:	2105      	movs	r1, #5
 8002bdc:	2028      	movs	r0, #40	; 0x28
 8002bde:	f003 fc21 	bl	8006424 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002be2:	2028      	movs	r0, #40	; 0x28
 8002be4:	f003 fc3a 	bl	800645c <HAL_NVIC_EnableIRQ>

}
 8002be8:	bf00      	nop
 8002bea:	3740      	adds	r7, #64	; 0x40
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}
 8002bf0:	40022000 	.word	0x40022000
 8002bf4:	40021c00 	.word	0x40021c00
 8002bf8:	40021800 	.word	0x40021800
 8002bfc:	40020800 	.word	0x40020800
 8002c00:	40020000 	.word	0x40020000
 8002c04:	40020400 	.word	0x40020400

08002c08 <Error>:

/* USER CODE BEGIN 4 */

void Error(char* msg)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b082      	sub	sp, #8
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
	printf(msg);
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f015 ffdb 	bl	8018bcc <iprintf>
	printf("\n");
 8002c16:	200a      	movs	r0, #10
 8002c18:	f015 fff0 	bl	8018bfc <putchar>
	Error_Handler();
 8002c1c:	f000 f85a 	bl	8002cd4 <Error_Handler>
}
 8002c20:	bf00      	nop
 8002c22:	3708      	adds	r7, #8
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}

08002c28 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b088      	sub	sp, #32
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6178      	str	r0, [r7, #20]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8002c30:	f014 ff72 	bl	8017b18 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */

	printf("StartDefaultTask\n");
 8002c34:	480b      	ldr	r0, [pc, #44]	; (8002c64 <StartDefaultTask+0x3c>)
 8002c36:	f016 f865 	bl	8018d04 <puts>

	//uint32_t PreviousWakeTime = osKernelSysTick();
	/* Infinite loop */
	int i=0;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	61fb      	str	r3, [r7, #28]
	for(;;)
	{
		//osDelay(1000);
		//osDelayUntil (&PreviousWakeTime, 500);
		printf("thread alive : %d\n", i++);
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	1c5a      	adds	r2, r3, #1
 8002c42:	61fa      	str	r2, [r7, #28]
 8002c44:	4619      	mov	r1, r3
 8002c46:	4808      	ldr	r0, [pc, #32]	; (8002c68 <StartDefaultTask+0x40>)
 8002c48:	f015 ffc0 	bl	8018bcc <iprintf>
		printf("waiting for signal...\n");
 8002c4c:	4807      	ldr	r0, [pc, #28]	; (8002c6c <StartDefaultTask+0x44>)
 8002c4e:	f016 f859 	bl	8018d04 <puts>
		osSignalWait (0x0001, osWaitForever);
 8002c52:	463b      	mov	r3, r7
 8002c54:	f04f 32ff 	mov.w	r2, #4294967295
 8002c58:	2101      	movs	r1, #1
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f012 faae 	bl	80151bc <osSignalWait>
		printf("thread alive : %d\n", i++);
 8002c60:	e7ed      	b.n	8002c3e <StartDefaultTask+0x16>
 8002c62:	bf00      	nop
 8002c64:	0801b634 	.word	0x0801b634
 8002c68:	0801b648 	.word	0x0801b648
 8002c6c:	0801b65c 	.word	0x0801b65c

08002c70 <startUITask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_startUITask */
void startUITask(void const * argument)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b082      	sub	sp, #8
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startUITask */

	osDelay(200);
 8002c78:	20c8      	movs	r0, #200	; 0xc8
 8002c7a:	f012 fa4b 	bl	8015114 <osDelay>
	printf("StartLedTask\n");
 8002c7e:	480a      	ldr	r0, [pc, #40]	; (8002ca8 <startUITask+0x38>)
 8002c80:	f016 f840 	bl	8018d04 <puts>
	// PB_GetState() = GPIO_PIN_SET ou GPIO_PIN_RESET

	/* Infinite loop */
	for(;;)
	{
		osDelay(900);
 8002c84:	f44f 7061 	mov.w	r0, #900	; 0x384
 8002c88:	f012 fa44 	bl	8015114 <osDelay>
		LED_Toggle();
 8002c8c:	f001 fab2 	bl	80041f4 <LED_Toggle>
		if (PB_GetState() == GPIO_PIN_SET ) osSignalSet(defaultTaskHandle, 0x0001);
 8002c90:	f001 faba 	bl	8004208 <PB_GetState>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d1f4      	bne.n	8002c84 <startUITask+0x14>
 8002c9a:	4b04      	ldr	r3, [pc, #16]	; (8002cac <startUITask+0x3c>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	2101      	movs	r1, #1
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f012 fa4b 	bl	801513c <osSignalSet>
		osDelay(900);
 8002ca6:	e7ed      	b.n	8002c84 <startUITask+0x14>
 8002ca8:	0801b674 	.word	0x0801b674
 8002cac:	200096f4 	.word	0x200096f4

08002cb0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b082      	sub	sp, #8
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a04      	ldr	r2, [pc, #16]	; (8002cd0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d101      	bne.n	8002cc6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002cc2:	f003 f807 	bl	8005cd4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002cc6:	bf00      	nop
 8002cc8:	3708      	adds	r7, #8
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	40001000 	.word	0x40001000

08002cd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	//__disable_irq();
	while (1)
	{
		LED_Toggle();
 8002cd8:	f001 fa8c 	bl	80041f4 <LED_Toggle>
		HAL_Delay(100);
 8002cdc:	2064      	movs	r0, #100	; 0x64
 8002cde:	f003 f819 	bl	8005d14 <HAL_Delay>
		LED_Toggle();
 8002ce2:	e7f9      	b.n	8002cd8 <Error_Handler+0x4>

08002ce4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b082      	sub	sp, #8
 8002ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002cea:	4b11      	ldr	r3, [pc, #68]	; (8002d30 <HAL_MspInit+0x4c>)
 8002cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cee:	4a10      	ldr	r2, [pc, #64]	; (8002d30 <HAL_MspInit+0x4c>)
 8002cf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cf4:	6413      	str	r3, [r2, #64]	; 0x40
 8002cf6:	4b0e      	ldr	r3, [pc, #56]	; (8002d30 <HAL_MspInit+0x4c>)
 8002cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cfe:	607b      	str	r3, [r7, #4]
 8002d00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d02:	4b0b      	ldr	r3, [pc, #44]	; (8002d30 <HAL_MspInit+0x4c>)
 8002d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d06:	4a0a      	ldr	r2, [pc, #40]	; (8002d30 <HAL_MspInit+0x4c>)
 8002d08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d0c:	6453      	str	r3, [r2, #68]	; 0x44
 8002d0e:	4b08      	ldr	r3, [pc, #32]	; (8002d30 <HAL_MspInit+0x4c>)
 8002d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d16:	603b      	str	r3, [r7, #0]
 8002d18:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	210f      	movs	r1, #15
 8002d1e:	f06f 0001 	mvn.w	r0, #1
 8002d22:	f003 fb7f 	bl	8006424 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d26:	bf00      	nop
 8002d28:	3708      	adds	r7, #8
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	bf00      	nop
 8002d30:	40023800 	.word	0x40023800

08002d34 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b08a      	sub	sp, #40	; 0x28
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d3c:	f107 0314 	add.w	r3, r7, #20
 8002d40:	2200      	movs	r2, #0
 8002d42:	601a      	str	r2, [r3, #0]
 8002d44:	605a      	str	r2, [r3, #4]
 8002d46:	609a      	str	r2, [r3, #8]
 8002d48:	60da      	str	r2, [r3, #12]
 8002d4a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a21      	ldr	r2, [pc, #132]	; (8002dd8 <HAL_ADC_MspInit+0xa4>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d13c      	bne.n	8002dd0 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002d56:	4b21      	ldr	r3, [pc, #132]	; (8002ddc <HAL_ADC_MspInit+0xa8>)
 8002d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d5a:	4a20      	ldr	r2, [pc, #128]	; (8002ddc <HAL_ADC_MspInit+0xa8>)
 8002d5c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d60:	6453      	str	r3, [r2, #68]	; 0x44
 8002d62:	4b1e      	ldr	r3, [pc, #120]	; (8002ddc <HAL_ADC_MspInit+0xa8>)
 8002d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d6a:	613b      	str	r3, [r7, #16]
 8002d6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002d6e:	4b1b      	ldr	r3, [pc, #108]	; (8002ddc <HAL_ADC_MspInit+0xa8>)
 8002d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d72:	4a1a      	ldr	r2, [pc, #104]	; (8002ddc <HAL_ADC_MspInit+0xa8>)
 8002d74:	f043 0320 	orr.w	r3, r3, #32
 8002d78:	6313      	str	r3, [r2, #48]	; 0x30
 8002d7a:	4b18      	ldr	r3, [pc, #96]	; (8002ddc <HAL_ADC_MspInit+0xa8>)
 8002d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d7e:	f003 0320 	and.w	r3, r3, #32
 8002d82:	60fb      	str	r3, [r7, #12]
 8002d84:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d86:	4b15      	ldr	r3, [pc, #84]	; (8002ddc <HAL_ADC_MspInit+0xa8>)
 8002d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d8a:	4a14      	ldr	r2, [pc, #80]	; (8002ddc <HAL_ADC_MspInit+0xa8>)
 8002d8c:	f043 0301 	orr.w	r3, r3, #1
 8002d90:	6313      	str	r3, [r2, #48]	; 0x30
 8002d92:	4b12      	ldr	r3, [pc, #72]	; (8002ddc <HAL_ADC_MspInit+0xa8>)
 8002d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d96:	f003 0301 	and.w	r3, r3, #1
 8002d9a:	60bb      	str	r3, [r7, #8]
 8002d9c:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8002d9e:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8002da2:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002da4:	2303      	movs	r3, #3
 8002da6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002da8:	2300      	movs	r3, #0
 8002daa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002dac:	f107 0314 	add.w	r3, r7, #20
 8002db0:	4619      	mov	r1, r3
 8002db2:	480b      	ldr	r0, [pc, #44]	; (8002de0 <HAL_ADC_MspInit+0xac>)
 8002db4:	f004 fd54 	bl	8007860 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8002db8:	2301      	movs	r3, #1
 8002dba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002dbc:	2303      	movs	r3, #3
 8002dbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8002dc4:	f107 0314 	add.w	r3, r7, #20
 8002dc8:	4619      	mov	r1, r3
 8002dca:	4806      	ldr	r0, [pc, #24]	; (8002de4 <HAL_ADC_MspInit+0xb0>)
 8002dcc:	f004 fd48 	bl	8007860 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002dd0:	bf00      	nop
 8002dd2:	3728      	adds	r7, #40	; 0x28
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}
 8002dd8:	40012200 	.word	0x40012200
 8002ddc:	40023800 	.word	0x40023800
 8002de0:	40021400 	.word	0x40021400
 8002de4:	40020000 	.word	0x40020000

08002de8 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b085      	sub	sp, #20
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a0a      	ldr	r2, [pc, #40]	; (8002e20 <HAL_CRC_MspInit+0x38>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d10b      	bne.n	8002e12 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002dfa:	4b0a      	ldr	r3, [pc, #40]	; (8002e24 <HAL_CRC_MspInit+0x3c>)
 8002dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dfe:	4a09      	ldr	r2, [pc, #36]	; (8002e24 <HAL_CRC_MspInit+0x3c>)
 8002e00:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002e04:	6313      	str	r3, [r2, #48]	; 0x30
 8002e06:	4b07      	ldr	r3, [pc, #28]	; (8002e24 <HAL_CRC_MspInit+0x3c>)
 8002e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e0a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e0e:	60fb      	str	r3, [r7, #12]
 8002e10:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8002e12:	bf00      	nop
 8002e14:	3714      	adds	r7, #20
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr
 8002e1e:	bf00      	nop
 8002e20:	40023000 	.word	0x40023000
 8002e24:	40023800 	.word	0x40023800

08002e28 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b08e      	sub	sp, #56	; 0x38
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e34:	2200      	movs	r2, #0
 8002e36:	601a      	str	r2, [r3, #0]
 8002e38:	605a      	str	r2, [r3, #4]
 8002e3a:	609a      	str	r2, [r3, #8]
 8002e3c:	60da      	str	r2, [r3, #12]
 8002e3e:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a6c      	ldr	r2, [pc, #432]	; (8002ff8 <HAL_DCMI_MspInit+0x1d0>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	f040 80d2 	bne.w	8002ff0 <HAL_DCMI_MspInit+0x1c8>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8002e4c:	4b6b      	ldr	r3, [pc, #428]	; (8002ffc <HAL_DCMI_MspInit+0x1d4>)
 8002e4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e50:	4a6a      	ldr	r2, [pc, #424]	; (8002ffc <HAL_DCMI_MspInit+0x1d4>)
 8002e52:	f043 0301 	orr.w	r3, r3, #1
 8002e56:	6353      	str	r3, [r2, #52]	; 0x34
 8002e58:	4b68      	ldr	r3, [pc, #416]	; (8002ffc <HAL_DCMI_MspInit+0x1d4>)
 8002e5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e5c:	f003 0301 	and.w	r3, r3, #1
 8002e60:	623b      	str	r3, [r7, #32]
 8002e62:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002e64:	4b65      	ldr	r3, [pc, #404]	; (8002ffc <HAL_DCMI_MspInit+0x1d4>)
 8002e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e68:	4a64      	ldr	r2, [pc, #400]	; (8002ffc <HAL_DCMI_MspInit+0x1d4>)
 8002e6a:	f043 0310 	orr.w	r3, r3, #16
 8002e6e:	6313      	str	r3, [r2, #48]	; 0x30
 8002e70:	4b62      	ldr	r3, [pc, #392]	; (8002ffc <HAL_DCMI_MspInit+0x1d4>)
 8002e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e74:	f003 0310 	and.w	r3, r3, #16
 8002e78:	61fb      	str	r3, [r7, #28]
 8002e7a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e7c:	4b5f      	ldr	r3, [pc, #380]	; (8002ffc <HAL_DCMI_MspInit+0x1d4>)
 8002e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e80:	4a5e      	ldr	r2, [pc, #376]	; (8002ffc <HAL_DCMI_MspInit+0x1d4>)
 8002e82:	f043 0308 	orr.w	r3, r3, #8
 8002e86:	6313      	str	r3, [r2, #48]	; 0x30
 8002e88:	4b5c      	ldr	r3, [pc, #368]	; (8002ffc <HAL_DCMI_MspInit+0x1d4>)
 8002e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8c:	f003 0308 	and.w	r3, r3, #8
 8002e90:	61bb      	str	r3, [r7, #24]
 8002e92:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002e94:	4b59      	ldr	r3, [pc, #356]	; (8002ffc <HAL_DCMI_MspInit+0x1d4>)
 8002e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e98:	4a58      	ldr	r2, [pc, #352]	; (8002ffc <HAL_DCMI_MspInit+0x1d4>)
 8002e9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e9e:	6313      	str	r3, [r2, #48]	; 0x30
 8002ea0:	4b56      	ldr	r3, [pc, #344]	; (8002ffc <HAL_DCMI_MspInit+0x1d4>)
 8002ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ea8:	617b      	str	r3, [r7, #20]
 8002eaa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002eac:	4b53      	ldr	r3, [pc, #332]	; (8002ffc <HAL_DCMI_MspInit+0x1d4>)
 8002eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb0:	4a52      	ldr	r2, [pc, #328]	; (8002ffc <HAL_DCMI_MspInit+0x1d4>)
 8002eb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002eb6:	6313      	str	r3, [r2, #48]	; 0x30
 8002eb8:	4b50      	ldr	r3, [pc, #320]	; (8002ffc <HAL_DCMI_MspInit+0x1d4>)
 8002eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ebc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ec0:	613b      	str	r3, [r7, #16]
 8002ec2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ec4:	4b4d      	ldr	r3, [pc, #308]	; (8002ffc <HAL_DCMI_MspInit+0x1d4>)
 8002ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec8:	4a4c      	ldr	r2, [pc, #304]	; (8002ffc <HAL_DCMI_MspInit+0x1d4>)
 8002eca:	f043 0301 	orr.w	r3, r3, #1
 8002ece:	6313      	str	r3, [r2, #48]	; 0x30
 8002ed0:	4b4a      	ldr	r3, [pc, #296]	; (8002ffc <HAL_DCMI_MspInit+0x1d4>)
 8002ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed4:	f003 0301 	and.w	r3, r3, #1
 8002ed8:	60fb      	str	r3, [r7, #12]
 8002eda:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8002edc:	2360      	movs	r3, #96	; 0x60
 8002ede:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ee0:	2302      	movs	r3, #2
 8002ee2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002eec:	230d      	movs	r3, #13
 8002eee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002ef0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ef4:	4619      	mov	r1, r3
 8002ef6:	4842      	ldr	r0, [pc, #264]	; (8003000 <HAL_DCMI_MspInit+0x1d8>)
 8002ef8:	f004 fcb2 	bl	8007860 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8002efc:	2308      	movs	r3, #8
 8002efe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f00:	2302      	movs	r3, #2
 8002f02:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f04:	2300      	movs	r3, #0
 8002f06:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002f0c:	230d      	movs	r3, #13
 8002f0e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8002f10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f14:	4619      	mov	r1, r3
 8002f16:	483b      	ldr	r0, [pc, #236]	; (8003004 <HAL_DCMI_MspInit+0x1dc>)
 8002f18:	f004 fca2 	bl	8007860 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8002f1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f20:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f22:	2302      	movs	r3, #2
 8002f24:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f26:	2300      	movs	r3, #0
 8002f28:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002f2e:	230d      	movs	r3, #13
 8002f30:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8002f32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f36:	4619      	mov	r1, r3
 8002f38:	4833      	ldr	r0, [pc, #204]	; (8003008 <HAL_DCMI_MspInit+0x1e0>)
 8002f3a:	f004 fc91 	bl	8007860 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8002f3e:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8002f42:	627b      	str	r3, [r7, #36]	; 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f44:	2302      	movs	r3, #2
 8002f46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002f50:	230d      	movs	r3, #13
 8002f52:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002f54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f58:	4619      	mov	r1, r3
 8002f5a:	482c      	ldr	r0, [pc, #176]	; (800300c <HAL_DCMI_MspInit+0x1e4>)
 8002f5c:	f004 fc80 	bl	8007860 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8002f60:	2350      	movs	r3, #80	; 0x50
 8002f62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f64:	2302      	movs	r3, #2
 8002f66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002f70:	230d      	movs	r3, #13
 8002f72:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f78:	4619      	mov	r1, r3
 8002f7a:	4825      	ldr	r0, [pc, #148]	; (8003010 <HAL_DCMI_MspInit+0x1e8>)
 8002f7c:	f004 fc70 	bl	8007860 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA2_Stream1;
 8002f80:	4b24      	ldr	r3, [pc, #144]	; (8003014 <HAL_DCMI_MspInit+0x1ec>)
 8002f82:	4a25      	ldr	r2, [pc, #148]	; (8003018 <HAL_DCMI_MspInit+0x1f0>)
 8002f84:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Channel = DMA_CHANNEL_1;
 8002f86:	4b23      	ldr	r3, [pc, #140]	; (8003014 <HAL_DCMI_MspInit+0x1ec>)
 8002f88:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f8c:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002f8e:	4b21      	ldr	r3, [pc, #132]	; (8003014 <HAL_DCMI_MspInit+0x1ec>)
 8002f90:	2200      	movs	r2, #0
 8002f92:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f94:	4b1f      	ldr	r3, [pc, #124]	; (8003014 <HAL_DCMI_MspInit+0x1ec>)
 8002f96:	2200      	movs	r2, #0
 8002f98:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 8002f9a:	4b1e      	ldr	r3, [pc, #120]	; (8003014 <HAL_DCMI_MspInit+0x1ec>)
 8002f9c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002fa0:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002fa2:	4b1c      	ldr	r3, [pc, #112]	; (8003014 <HAL_DCMI_MspInit+0x1ec>)
 8002fa4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002fa8:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002faa:	4b1a      	ldr	r3, [pc, #104]	; (8003014 <HAL_DCMI_MspInit+0x1ec>)
 8002fac:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002fb0:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_NORMAL;
 8002fb2:	4b18      	ldr	r3, [pc, #96]	; (8003014 <HAL_DCMI_MspInit+0x1ec>)
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_LOW;
 8002fb8:	4b16      	ldr	r3, [pc, #88]	; (8003014 <HAL_DCMI_MspInit+0x1ec>)
 8002fba:	2200      	movs	r2, #0
 8002fbc:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002fbe:	4b15      	ldr	r3, [pc, #84]	; (8003014 <HAL_DCMI_MspInit+0x1ec>)
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 8002fc4:	4813      	ldr	r0, [pc, #76]	; (8003014 <HAL_DCMI_MspInit+0x1ec>)
 8002fc6:	f003 fc99 	bl	80068fc <HAL_DMA_Init>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d001      	beq.n	8002fd4 <HAL_DCMI_MspInit+0x1ac>
    {
      Error_Handler();
 8002fd0:	f7ff fe80 	bl	8002cd4 <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	4a0f      	ldr	r2, [pc, #60]	; (8003014 <HAL_DCMI_MspInit+0x1ec>)
 8002fd8:	649a      	str	r2, [r3, #72]	; 0x48
 8002fda:	4a0e      	ldr	r2, [pc, #56]	; (8003014 <HAL_DCMI_MspInit+0x1ec>)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6393      	str	r3, [r2, #56]	; 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 5, 0);
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	2105      	movs	r1, #5
 8002fe4:	204e      	movs	r0, #78	; 0x4e
 8002fe6:	f003 fa1d 	bl	8006424 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 8002fea:	204e      	movs	r0, #78	; 0x4e
 8002fec:	f003 fa36 	bl	800645c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8002ff0:	bf00      	nop
 8002ff2:	3738      	adds	r7, #56	; 0x38
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}
 8002ff8:	50050000 	.word	0x50050000
 8002ffc:	40023800 	.word	0x40023800
 8003000:	40021000 	.word	0x40021000
 8003004:	40020c00 	.word	0x40020c00
 8003008:	40021800 	.word	0x40021800
 800300c:	40021c00 	.word	0x40021c00
 8003010:	40020000 	.word	0x40020000
 8003014:	20009990 	.word	0x20009990
 8003018:	40026428 	.word	0x40026428

0800301c <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b084      	sub	sp, #16
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a0d      	ldr	r2, [pc, #52]	; (8003060 <HAL_DMA2D_MspInit+0x44>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d113      	bne.n	8003056 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800302e:	4b0d      	ldr	r3, [pc, #52]	; (8003064 <HAL_DMA2D_MspInit+0x48>)
 8003030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003032:	4a0c      	ldr	r2, [pc, #48]	; (8003064 <HAL_DMA2D_MspInit+0x48>)
 8003034:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003038:	6313      	str	r3, [r2, #48]	; 0x30
 800303a:	4b0a      	ldr	r3, [pc, #40]	; (8003064 <HAL_DMA2D_MspInit+0x48>)
 800303c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800303e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003042:	60fb      	str	r3, [r7, #12]
 8003044:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8003046:	2200      	movs	r2, #0
 8003048:	2105      	movs	r1, #5
 800304a:	205a      	movs	r0, #90	; 0x5a
 800304c:	f003 f9ea 	bl	8006424 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8003050:	205a      	movs	r0, #90	; 0x5a
 8003052:	f003 fa03 	bl	800645c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8003056:	bf00      	nop
 8003058:	3710      	adds	r7, #16
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	4002b000 	.word	0x4002b000
 8003064:	40023800 	.word	0x40023800

08003068 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b08c      	sub	sp, #48	; 0x30
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003070:	f107 031c 	add.w	r3, r7, #28
 8003074:	2200      	movs	r2, #0
 8003076:	601a      	str	r2, [r3, #0]
 8003078:	605a      	str	r2, [r3, #4]
 800307a:	609a      	str	r2, [r3, #8]
 800307c:	60da      	str	r2, [r3, #12]
 800307e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a2f      	ldr	r2, [pc, #188]	; (8003144 <HAL_I2C_MspInit+0xdc>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d129      	bne.n	80030de <HAL_I2C_MspInit+0x76>
	//    gpio_init_structure.Speed = GPIO_SPEED_FAST;


  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800308a:	4b2f      	ldr	r3, [pc, #188]	; (8003148 <HAL_I2C_MspInit+0xe0>)
 800308c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800308e:	4a2e      	ldr	r2, [pc, #184]	; (8003148 <HAL_I2C_MspInit+0xe0>)
 8003090:	f043 0302 	orr.w	r3, r3, #2
 8003094:	6313      	str	r3, [r2, #48]	; 0x30
 8003096:	4b2c      	ldr	r3, [pc, #176]	; (8003148 <HAL_I2C_MspInit+0xe0>)
 8003098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800309a:	f003 0302 	and.w	r3, r3, #2
 800309e:	61bb      	str	r3, [r7, #24]
 80030a0:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 80030a2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80030a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80030a8:	2312      	movs	r3, #18
 80030aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80030ac:	2301      	movs	r3, #1
 80030ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030b0:	2300      	movs	r3, #0
 80030b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80030b4:	2304      	movs	r3, #4
 80030b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030b8:	f107 031c 	add.w	r3, r7, #28
 80030bc:	4619      	mov	r1, r3
 80030be:	4823      	ldr	r0, [pc, #140]	; (800314c <HAL_I2C_MspInit+0xe4>)
 80030c0:	f004 fbce 	bl	8007860 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80030c4:	4b20      	ldr	r3, [pc, #128]	; (8003148 <HAL_I2C_MspInit+0xe0>)
 80030c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c8:	4a1f      	ldr	r2, [pc, #124]	; (8003148 <HAL_I2C_MspInit+0xe0>)
 80030ca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80030ce:	6413      	str	r3, [r2, #64]	; 0x40
 80030d0:	4b1d      	ldr	r3, [pc, #116]	; (8003148 <HAL_I2C_MspInit+0xe0>)
 80030d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030d8:	617b      	str	r3, [r7, #20]
 80030da:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80030dc:	e02d      	b.n	800313a <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C3)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a1b      	ldr	r2, [pc, #108]	; (8003150 <HAL_I2C_MspInit+0xe8>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d128      	bne.n	800313a <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80030e8:	4b17      	ldr	r3, [pc, #92]	; (8003148 <HAL_I2C_MspInit+0xe0>)
 80030ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ec:	4a16      	ldr	r2, [pc, #88]	; (8003148 <HAL_I2C_MspInit+0xe0>)
 80030ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030f2:	6313      	str	r3, [r2, #48]	; 0x30
 80030f4:	4b14      	ldr	r3, [pc, #80]	; (8003148 <HAL_I2C_MspInit+0xe0>)
 80030f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030fc:	613b      	str	r3, [r7, #16]
 80030fe:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8003100:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8003104:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003106:	2312      	movs	r3, #18
 8003108:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800310a:	2301      	movs	r3, #1
 800310c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800310e:	2303      	movs	r3, #3
 8003110:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003112:	2304      	movs	r3, #4
 8003114:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003116:	f107 031c 	add.w	r3, r7, #28
 800311a:	4619      	mov	r1, r3
 800311c:	480d      	ldr	r0, [pc, #52]	; (8003154 <HAL_I2C_MspInit+0xec>)
 800311e:	f004 fb9f 	bl	8007860 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003122:	4b09      	ldr	r3, [pc, #36]	; (8003148 <HAL_I2C_MspInit+0xe0>)
 8003124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003126:	4a08      	ldr	r2, [pc, #32]	; (8003148 <HAL_I2C_MspInit+0xe0>)
 8003128:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800312c:	6413      	str	r3, [r2, #64]	; 0x40
 800312e:	4b06      	ldr	r3, [pc, #24]	; (8003148 <HAL_I2C_MspInit+0xe0>)
 8003130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003132:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003136:	60fb      	str	r3, [r7, #12]
 8003138:	68fb      	ldr	r3, [r7, #12]
}
 800313a:	bf00      	nop
 800313c:	3730      	adds	r7, #48	; 0x30
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}
 8003142:	bf00      	nop
 8003144:	40005400 	.word	0x40005400
 8003148:	40023800 	.word	0x40023800
 800314c:	40020400 	.word	0x40020400
 8003150:	40005c00 	.word	0x40005c00
 8003154:	40021c00 	.word	0x40021c00

08003158 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b082      	sub	sp, #8
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a15      	ldr	r2, [pc, #84]	; (80031bc <HAL_I2C_MspDeInit+0x64>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d110      	bne.n	800318c <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800316a:	4b15      	ldr	r3, [pc, #84]	; (80031c0 <HAL_I2C_MspDeInit+0x68>)
 800316c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316e:	4a14      	ldr	r2, [pc, #80]	; (80031c0 <HAL_I2C_MspDeInit+0x68>)
 8003170:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003174:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(ARDUINO_SCL_D15_GPIO_Port, ARDUINO_SCL_D15_Pin);
 8003176:	f44f 7180 	mov.w	r1, #256	; 0x100
 800317a:	4812      	ldr	r0, [pc, #72]	; (80031c4 <HAL_I2C_MspDeInit+0x6c>)
 800317c:	f004 fd1c 	bl	8007bb8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(ARDUINO_SDA_D14_GPIO_Port, ARDUINO_SDA_D14_Pin);
 8003180:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003184:	480f      	ldr	r0, [pc, #60]	; (80031c4 <HAL_I2C_MspDeInit+0x6c>)
 8003186:	f004 fd17 	bl	8007bb8 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 800318a:	e013      	b.n	80031b4 <HAL_I2C_MspDeInit+0x5c>
  else if(hi2c->Instance==I2C3)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a0d      	ldr	r2, [pc, #52]	; (80031c8 <HAL_I2C_MspDeInit+0x70>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d10e      	bne.n	80031b4 <HAL_I2C_MspDeInit+0x5c>
    __HAL_RCC_I2C3_CLK_DISABLE();
 8003196:	4b0a      	ldr	r3, [pc, #40]	; (80031c0 <HAL_I2C_MspDeInit+0x68>)
 8003198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319a:	4a09      	ldr	r2, [pc, #36]	; (80031c0 <HAL_I2C_MspDeInit+0x68>)
 800319c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80031a0:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(LCD_SCL_GPIO_Port, LCD_SCL_Pin);
 80031a2:	2180      	movs	r1, #128	; 0x80
 80031a4:	4809      	ldr	r0, [pc, #36]	; (80031cc <HAL_I2C_MspDeInit+0x74>)
 80031a6:	f004 fd07 	bl	8007bb8 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(LCD_SDA_GPIO_Port, LCD_SDA_Pin);
 80031aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80031ae:	4807      	ldr	r0, [pc, #28]	; (80031cc <HAL_I2C_MspDeInit+0x74>)
 80031b0:	f004 fd02 	bl	8007bb8 <HAL_GPIO_DeInit>
}
 80031b4:	bf00      	nop
 80031b6:	3708      	adds	r7, #8
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}
 80031bc:	40005400 	.word	0x40005400
 80031c0:	40023800 	.word	0x40023800
 80031c4:	40020400 	.word	0x40020400
 80031c8:	40005c00 	.word	0x40005c00
 80031cc:	40021c00 	.word	0x40021c00

080031d0 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b08e      	sub	sp, #56	; 0x38
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031dc:	2200      	movs	r2, #0
 80031de:	601a      	str	r2, [r3, #0]
 80031e0:	605a      	str	r2, [r3, #4]
 80031e2:	609a      	str	r2, [r3, #8]
 80031e4:	60da      	str	r2, [r3, #12]
 80031e6:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a51      	ldr	r2, [pc, #324]	; (8003334 <HAL_LTDC_MspInit+0x164>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	f040 809b 	bne.w	800332a <HAL_LTDC_MspInit+0x15a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80031f4:	4b50      	ldr	r3, [pc, #320]	; (8003338 <HAL_LTDC_MspInit+0x168>)
 80031f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031f8:	4a4f      	ldr	r2, [pc, #316]	; (8003338 <HAL_LTDC_MspInit+0x168>)
 80031fa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80031fe:	6453      	str	r3, [r2, #68]	; 0x44
 8003200:	4b4d      	ldr	r3, [pc, #308]	; (8003338 <HAL_LTDC_MspInit+0x168>)
 8003202:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003204:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003208:	623b      	str	r3, [r7, #32]
 800320a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800320c:	4b4a      	ldr	r3, [pc, #296]	; (8003338 <HAL_LTDC_MspInit+0x168>)
 800320e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003210:	4a49      	ldr	r2, [pc, #292]	; (8003338 <HAL_LTDC_MspInit+0x168>)
 8003212:	f043 0310 	orr.w	r3, r3, #16
 8003216:	6313      	str	r3, [r2, #48]	; 0x30
 8003218:	4b47      	ldr	r3, [pc, #284]	; (8003338 <HAL_LTDC_MspInit+0x168>)
 800321a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800321c:	f003 0310 	and.w	r3, r3, #16
 8003220:	61fb      	str	r3, [r7, #28]
 8003222:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8003224:	4b44      	ldr	r3, [pc, #272]	; (8003338 <HAL_LTDC_MspInit+0x168>)
 8003226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003228:	4a43      	ldr	r2, [pc, #268]	; (8003338 <HAL_LTDC_MspInit+0x168>)
 800322a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800322e:	6313      	str	r3, [r2, #48]	; 0x30
 8003230:	4b41      	ldr	r3, [pc, #260]	; (8003338 <HAL_LTDC_MspInit+0x168>)
 8003232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003234:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003238:	61bb      	str	r3, [r7, #24]
 800323a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 800323c:	4b3e      	ldr	r3, [pc, #248]	; (8003338 <HAL_LTDC_MspInit+0x168>)
 800323e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003240:	4a3d      	ldr	r2, [pc, #244]	; (8003338 <HAL_LTDC_MspInit+0x168>)
 8003242:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003246:	6313      	str	r3, [r2, #48]	; 0x30
 8003248:	4b3b      	ldr	r3, [pc, #236]	; (8003338 <HAL_LTDC_MspInit+0x168>)
 800324a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800324c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003250:	617b      	str	r3, [r7, #20]
 8003252:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003254:	4b38      	ldr	r3, [pc, #224]	; (8003338 <HAL_LTDC_MspInit+0x168>)
 8003256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003258:	4a37      	ldr	r2, [pc, #220]	; (8003338 <HAL_LTDC_MspInit+0x168>)
 800325a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800325e:	6313      	str	r3, [r2, #48]	; 0x30
 8003260:	4b35      	ldr	r3, [pc, #212]	; (8003338 <HAL_LTDC_MspInit+0x168>)
 8003262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003264:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003268:	613b      	str	r3, [r7, #16]
 800326a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800326c:	4b32      	ldr	r3, [pc, #200]	; (8003338 <HAL_LTDC_MspInit+0x168>)
 800326e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003270:	4a31      	ldr	r2, [pc, #196]	; (8003338 <HAL_LTDC_MspInit+0x168>)
 8003272:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003276:	6313      	str	r3, [r2, #48]	; 0x30
 8003278:	4b2f      	ldr	r3, [pc, #188]	; (8003338 <HAL_LTDC_MspInit+0x168>)
 800327a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800327c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003280:	60fb      	str	r3, [r7, #12]
 8003282:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8003284:	2310      	movs	r3, #16
 8003286:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003288:	2302      	movs	r3, #2
 800328a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800328c:	2300      	movs	r3, #0
 800328e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003290:	2300      	movs	r3, #0
 8003292:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003294:	230e      	movs	r3, #14
 8003296:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8003298:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800329c:	4619      	mov	r1, r3
 800329e:	4827      	ldr	r0, [pc, #156]	; (800333c <HAL_LTDC_MspInit+0x16c>)
 80032a0:	f004 fade 	bl	8007860 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 80032a4:	f64e 73ff 	movw	r3, #61439	; 0xefff
 80032a8:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032aa:	2302      	movs	r3, #2
 80032ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032ae:	2300      	movs	r3, #0
 80032b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032b2:	2300      	movs	r3, #0
 80032b4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80032b6:	230e      	movs	r3, #14
 80032b8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80032ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032be:	4619      	mov	r1, r3
 80032c0:	481f      	ldr	r0, [pc, #124]	; (8003340 <HAL_LTDC_MspInit+0x170>)
 80032c2:	f004 facd 	bl	8007860 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 80032c6:	23f7      	movs	r3, #247	; 0xf7
 80032c8:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032ca:	2302      	movs	r3, #2
 80032cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032ce:	2300      	movs	r3, #0
 80032d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032d2:	2300      	movs	r3, #0
 80032d4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80032d6:	230e      	movs	r3, #14
 80032d8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80032da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032de:	4619      	mov	r1, r3
 80032e0:	4818      	ldr	r0, [pc, #96]	; (8003344 <HAL_LTDC_MspInit+0x174>)
 80032e2:	f004 fabd 	bl	8007860 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 80032e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80032ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032ec:	2302      	movs	r3, #2
 80032ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032f0:	2300      	movs	r3, #0
 80032f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032f4:	2300      	movs	r3, #0
 80032f6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80032f8:	2309      	movs	r3, #9
 80032fa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 80032fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003300:	4619      	mov	r1, r3
 8003302:	4811      	ldr	r0, [pc, #68]	; (8003348 <HAL_LTDC_MspInit+0x178>)
 8003304:	f004 faac 	bl	8007860 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8003308:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 800330c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800330e:	2302      	movs	r3, #2
 8003310:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003312:	2300      	movs	r3, #0
 8003314:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003316:	2300      	movs	r3, #0
 8003318:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800331a:	230e      	movs	r3, #14
 800331c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800331e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003322:	4619      	mov	r1, r3
 8003324:	4809      	ldr	r0, [pc, #36]	; (800334c <HAL_LTDC_MspInit+0x17c>)
 8003326:	f004 fa9b 	bl	8007860 <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800332a:	bf00      	nop
 800332c:	3738      	adds	r7, #56	; 0x38
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}
 8003332:	bf00      	nop
 8003334:	40016800 	.word	0x40016800
 8003338:	40023800 	.word	0x40023800
 800333c:	40021000 	.word	0x40021000
 8003340:	40022400 	.word	0x40022400
 8003344:	40022800 	.word	0x40022800
 8003348:	40021800 	.word	0x40021800
 800334c:	40022000 	.word	0x40022000

08003350 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b08c      	sub	sp, #48	; 0x30
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003358:	f107 031c 	add.w	r3, r7, #28
 800335c:	2200      	movs	r2, #0
 800335e:	601a      	str	r2, [r3, #0]
 8003360:	605a      	str	r2, [r3, #4]
 8003362:	609a      	str	r2, [r3, #8]
 8003364:	60da      	str	r2, [r3, #12]
 8003366:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a3f      	ldr	r2, [pc, #252]	; (800346c <HAL_QSPI_MspInit+0x11c>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d178      	bne.n	8003464 <HAL_QSPI_MspInit+0x114>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8003372:	4b3f      	ldr	r3, [pc, #252]	; (8003470 <HAL_QSPI_MspInit+0x120>)
 8003374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003376:	4a3e      	ldr	r2, [pc, #248]	; (8003470 <HAL_QSPI_MspInit+0x120>)
 8003378:	f043 0302 	orr.w	r3, r3, #2
 800337c:	6393      	str	r3, [r2, #56]	; 0x38
 800337e:	4b3c      	ldr	r3, [pc, #240]	; (8003470 <HAL_QSPI_MspInit+0x120>)
 8003380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003382:	f003 0302 	and.w	r3, r3, #2
 8003386:	61bb      	str	r3, [r7, #24]
 8003388:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800338a:	4b39      	ldr	r3, [pc, #228]	; (8003470 <HAL_QSPI_MspInit+0x120>)
 800338c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800338e:	4a38      	ldr	r2, [pc, #224]	; (8003470 <HAL_QSPI_MspInit+0x120>)
 8003390:	f043 0310 	orr.w	r3, r3, #16
 8003394:	6313      	str	r3, [r2, #48]	; 0x30
 8003396:	4b36      	ldr	r3, [pc, #216]	; (8003470 <HAL_QSPI_MspInit+0x120>)
 8003398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800339a:	f003 0310 	and.w	r3, r3, #16
 800339e:	617b      	str	r3, [r7, #20]
 80033a0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033a2:	4b33      	ldr	r3, [pc, #204]	; (8003470 <HAL_QSPI_MspInit+0x120>)
 80033a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a6:	4a32      	ldr	r2, [pc, #200]	; (8003470 <HAL_QSPI_MspInit+0x120>)
 80033a8:	f043 0302 	orr.w	r3, r3, #2
 80033ac:	6313      	str	r3, [r2, #48]	; 0x30
 80033ae:	4b30      	ldr	r3, [pc, #192]	; (8003470 <HAL_QSPI_MspInit+0x120>)
 80033b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b2:	f003 0302 	and.w	r3, r3, #2
 80033b6:	613b      	str	r3, [r7, #16]
 80033b8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80033ba:	4b2d      	ldr	r3, [pc, #180]	; (8003470 <HAL_QSPI_MspInit+0x120>)
 80033bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033be:	4a2c      	ldr	r2, [pc, #176]	; (8003470 <HAL_QSPI_MspInit+0x120>)
 80033c0:	f043 0308 	orr.w	r3, r3, #8
 80033c4:	6313      	str	r3, [r2, #48]	; 0x30
 80033c6:	4b2a      	ldr	r3, [pc, #168]	; (8003470 <HAL_QSPI_MspInit+0x120>)
 80033c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ca:	f003 0308 	and.w	r3, r3, #8
 80033ce:	60fb      	str	r3, [r7, #12]
 80033d0:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 80033d2:	2304      	movs	r3, #4
 80033d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033d6:	2302      	movs	r3, #2
 80033d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033da:	2300      	movs	r3, #0
 80033dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033de:	2303      	movs	r3, #3
 80033e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80033e2:	2309      	movs	r3, #9
 80033e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 80033e6:	f107 031c 	add.w	r3, r7, #28
 80033ea:	4619      	mov	r1, r3
 80033ec:	4821      	ldr	r0, [pc, #132]	; (8003474 <HAL_QSPI_MspInit+0x124>)
 80033ee:	f004 fa37 	bl	8007860 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 80033f2:	2340      	movs	r3, #64	; 0x40
 80033f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033f6:	2302      	movs	r3, #2
 80033f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033fa:	2300      	movs	r3, #0
 80033fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033fe:	2303      	movs	r3, #3
 8003400:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8003402:	230a      	movs	r3, #10
 8003404:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8003406:	f107 031c 	add.w	r3, r7, #28
 800340a:	4619      	mov	r1, r3
 800340c:	481a      	ldr	r0, [pc, #104]	; (8003478 <HAL_QSPI_MspInit+0x128>)
 800340e:	f004 fa27 	bl	8007860 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003412:	2304      	movs	r3, #4
 8003414:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003416:	2302      	movs	r3, #2
 8003418:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800341a:	2300      	movs	r3, #0
 800341c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800341e:	2303      	movs	r3, #3
 8003420:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8003422:	2309      	movs	r3, #9
 8003424:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003426:	f107 031c 	add.w	r3, r7, #28
 800342a:	4619      	mov	r1, r3
 800342c:	4812      	ldr	r0, [pc, #72]	; (8003478 <HAL_QSPI_MspInit+0x128>)
 800342e:	f004 fa17 	bl	8007860 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8003432:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003436:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003438:	2302      	movs	r3, #2
 800343a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800343c:	2300      	movs	r3, #0
 800343e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003440:	2303      	movs	r3, #3
 8003442:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8003444:	2309      	movs	r3, #9
 8003446:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003448:	f107 031c 	add.w	r3, r7, #28
 800344c:	4619      	mov	r1, r3
 800344e:	480b      	ldr	r0, [pc, #44]	; (800347c <HAL_QSPI_MspInit+0x12c>)
 8003450:	f004 fa06 	bl	8007860 <HAL_GPIO_Init>

    /* QUADSPI interrupt Init */
    HAL_NVIC_SetPriority(QUADSPI_IRQn, 5, 0);
 8003454:	2200      	movs	r2, #0
 8003456:	2105      	movs	r1, #5
 8003458:	205c      	movs	r0, #92	; 0x5c
 800345a:	f002 ffe3 	bl	8006424 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 800345e:	205c      	movs	r0, #92	; 0x5c
 8003460:	f002 fffc 	bl	800645c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8003464:	bf00      	nop
 8003466:	3730      	adds	r7, #48	; 0x30
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}
 800346c:	a0001000 	.word	0xa0001000
 8003470:	40023800 	.word	0x40023800
 8003474:	40021000 	.word	0x40021000
 8003478:	40020400 	.word	0x40020400
 800347c:	40020c00 	.word	0x40020c00

08003480 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003480:	b480      	push	{r7}
 8003482:	b083      	sub	sp, #12
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a07      	ldr	r2, [pc, #28]	; (80034ac <HAL_RTC_MspInit+0x2c>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d105      	bne.n	800349e <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003492:	4b07      	ldr	r3, [pc, #28]	; (80034b0 <HAL_RTC_MspInit+0x30>)
 8003494:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003496:	4a06      	ldr	r2, [pc, #24]	; (80034b0 <HAL_RTC_MspInit+0x30>)
 8003498:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800349c:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800349e:	bf00      	nop
 80034a0:	370c      	adds	r7, #12
 80034a2:	46bd      	mov	sp, r7
 80034a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a8:	4770      	bx	lr
 80034aa:	bf00      	nop
 80034ac:	40002800 	.word	0x40002800
 80034b0:	40023800 	.word	0x40023800

080034b4 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b08a      	sub	sp, #40	; 0x28
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034bc:	f107 0314 	add.w	r3, r7, #20
 80034c0:	2200      	movs	r2, #0
 80034c2:	601a      	str	r2, [r3, #0]
 80034c4:	605a      	str	r2, [r3, #4]
 80034c6:	609a      	str	r2, [r3, #8]
 80034c8:	60da      	str	r2, [r3, #12]
 80034ca:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a25      	ldr	r2, [pc, #148]	; (8003568 <HAL_SD_MspInit+0xb4>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d144      	bne.n	8003560 <HAL_SD_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80034d6:	4b25      	ldr	r3, [pc, #148]	; (800356c <HAL_SD_MspInit+0xb8>)
 80034d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034da:	4a24      	ldr	r2, [pc, #144]	; (800356c <HAL_SD_MspInit+0xb8>)
 80034dc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80034e0:	6453      	str	r3, [r2, #68]	; 0x44
 80034e2:	4b22      	ldr	r3, [pc, #136]	; (800356c <HAL_SD_MspInit+0xb8>)
 80034e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034ea:	613b      	str	r3, [r7, #16]
 80034ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80034ee:	4b1f      	ldr	r3, [pc, #124]	; (800356c <HAL_SD_MspInit+0xb8>)
 80034f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f2:	4a1e      	ldr	r2, [pc, #120]	; (800356c <HAL_SD_MspInit+0xb8>)
 80034f4:	f043 0304 	orr.w	r3, r3, #4
 80034f8:	6313      	str	r3, [r2, #48]	; 0x30
 80034fa:	4b1c      	ldr	r3, [pc, #112]	; (800356c <HAL_SD_MspInit+0xb8>)
 80034fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034fe:	f003 0304 	and.w	r3, r3, #4
 8003502:	60fb      	str	r3, [r7, #12]
 8003504:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003506:	4b19      	ldr	r3, [pc, #100]	; (800356c <HAL_SD_MspInit+0xb8>)
 8003508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800350a:	4a18      	ldr	r2, [pc, #96]	; (800356c <HAL_SD_MspInit+0xb8>)
 800350c:	f043 0308 	orr.w	r3, r3, #8
 8003510:	6313      	str	r3, [r2, #48]	; 0x30
 8003512:	4b16      	ldr	r3, [pc, #88]	; (800356c <HAL_SD_MspInit+0xb8>)
 8003514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003516:	f003 0308 	and.w	r3, r3, #8
 800351a:	60bb      	str	r3, [r7, #8]
 800351c:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 800351e:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8003522:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003524:	2302      	movs	r3, #2
 8003526:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003528:	2300      	movs	r3, #0
 800352a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800352c:	2303      	movs	r3, #3
 800352e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8003530:	230c      	movs	r3, #12
 8003532:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003534:	f107 0314 	add.w	r3, r7, #20
 8003538:	4619      	mov	r1, r3
 800353a:	480d      	ldr	r0, [pc, #52]	; (8003570 <HAL_SD_MspInit+0xbc>)
 800353c:	f004 f990 	bl	8007860 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8003540:	2304      	movs	r3, #4
 8003542:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003544:	2302      	movs	r3, #2
 8003546:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003548:	2300      	movs	r3, #0
 800354a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800354c:	2303      	movs	r3, #3
 800354e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8003550:	230c      	movs	r3, #12
 8003552:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8003554:	f107 0314 	add.w	r3, r7, #20
 8003558:	4619      	mov	r1, r3
 800355a:	4806      	ldr	r0, [pc, #24]	; (8003574 <HAL_SD_MspInit+0xc0>)
 800355c:	f004 f980 	bl	8007860 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8003560:	bf00      	nop
 8003562:	3728      	adds	r7, #40	; 0x28
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}
 8003568:	40012c00 	.word	0x40012c00
 800356c:	40023800 	.word	0x40023800
 8003570:	40020800 	.word	0x40020800
 8003574:	40020c00 	.word	0x40020c00

08003578 <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b08a      	sub	sp, #40	; 0x28
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003580:	f107 0314 	add.w	r3, r7, #20
 8003584:	2200      	movs	r2, #0
 8003586:	601a      	str	r2, [r3, #0]
 8003588:	605a      	str	r2, [r3, #4]
 800358a:	609a      	str	r2, [r3, #8]
 800358c:	60da      	str	r2, [r3, #12]
 800358e:	611a      	str	r2, [r3, #16]
  if(hspdifrx->Instance==SPDIFRX)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 8003598:	d127      	bne.n	80035ea <HAL_SPDIFRX_MspInit+0x72>
  {
  /* USER CODE BEGIN SPDIFRX_MspInit 0 */

  /* USER CODE END SPDIFRX_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 800359a:	4b16      	ldr	r3, [pc, #88]	; (80035f4 <HAL_SPDIFRX_MspInit+0x7c>)
 800359c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800359e:	4a15      	ldr	r2, [pc, #84]	; (80035f4 <HAL_SPDIFRX_MspInit+0x7c>)
 80035a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035a4:	6413      	str	r3, [r2, #64]	; 0x40
 80035a6:	4b13      	ldr	r3, [pc, #76]	; (80035f4 <HAL_SPDIFRX_MspInit+0x7c>)
 80035a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035ae:	613b      	str	r3, [r7, #16]
 80035b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80035b2:	4b10      	ldr	r3, [pc, #64]	; (80035f4 <HAL_SPDIFRX_MspInit+0x7c>)
 80035b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b6:	4a0f      	ldr	r2, [pc, #60]	; (80035f4 <HAL_SPDIFRX_MspInit+0x7c>)
 80035b8:	f043 0308 	orr.w	r3, r3, #8
 80035bc:	6313      	str	r3, [r2, #48]	; 0x30
 80035be:	4b0d      	ldr	r3, [pc, #52]	; (80035f4 <HAL_SPDIFRX_MspInit+0x7c>)
 80035c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c2:	f003 0308 	and.w	r3, r3, #8
 80035c6:	60fb      	str	r3, [r7, #12]
 80035c8:	68fb      	ldr	r3, [r7, #12]
    /**SPDIFRX GPIO Configuration
    PD7     ------> SPDIFRX_IN0
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 80035ca:	2380      	movs	r3, #128	; 0x80
 80035cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035ce:	2302      	movs	r3, #2
 80035d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035d2:	2300      	movs	r3, #0
 80035d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035d6:	2300      	movs	r3, #0
 80035d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 80035da:	2308      	movs	r3, #8
 80035dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 80035de:	f107 0314 	add.w	r3, r7, #20
 80035e2:	4619      	mov	r1, r3
 80035e4:	4804      	ldr	r0, [pc, #16]	; (80035f8 <HAL_SPDIFRX_MspInit+0x80>)
 80035e6:	f004 f93b 	bl	8007860 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 80035ea:	bf00      	nop
 80035ec:	3728      	adds	r7, #40	; 0x28
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	bf00      	nop
 80035f4:	40023800 	.word	0x40023800
 80035f8:	40020c00 	.word	0x40020c00

080035fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b089      	sub	sp, #36	; 0x24
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a2e      	ldr	r2, [pc, #184]	; (80036c4 <HAL_TIM_Base_MspInit+0xc8>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d10c      	bne.n	8003628 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800360e:	4b2e      	ldr	r3, [pc, #184]	; (80036c8 <HAL_TIM_Base_MspInit+0xcc>)
 8003610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003612:	4a2d      	ldr	r2, [pc, #180]	; (80036c8 <HAL_TIM_Base_MspInit+0xcc>)
 8003614:	f043 0301 	orr.w	r3, r3, #1
 8003618:	6453      	str	r3, [r2, #68]	; 0x44
 800361a:	4b2b      	ldr	r3, [pc, #172]	; (80036c8 <HAL_TIM_Base_MspInit+0xcc>)
 800361c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800361e:	f003 0301 	and.w	r3, r3, #1
 8003622:	61fb      	str	r3, [r7, #28]
 8003624:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8003626:	e046      	b.n	80036b6 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003630:	d10c      	bne.n	800364c <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003632:	4b25      	ldr	r3, [pc, #148]	; (80036c8 <HAL_TIM_Base_MspInit+0xcc>)
 8003634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003636:	4a24      	ldr	r2, [pc, #144]	; (80036c8 <HAL_TIM_Base_MspInit+0xcc>)
 8003638:	f043 0301 	orr.w	r3, r3, #1
 800363c:	6413      	str	r3, [r2, #64]	; 0x40
 800363e:	4b22      	ldr	r3, [pc, #136]	; (80036c8 <HAL_TIM_Base_MspInit+0xcc>)
 8003640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003642:	f003 0301 	and.w	r3, r3, #1
 8003646:	61bb      	str	r3, [r7, #24]
 8003648:	69bb      	ldr	r3, [r7, #24]
}
 800364a:	e034      	b.n	80036b6 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a1e      	ldr	r2, [pc, #120]	; (80036cc <HAL_TIM_Base_MspInit+0xd0>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d10c      	bne.n	8003670 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003656:	4b1c      	ldr	r3, [pc, #112]	; (80036c8 <HAL_TIM_Base_MspInit+0xcc>)
 8003658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800365a:	4a1b      	ldr	r2, [pc, #108]	; (80036c8 <HAL_TIM_Base_MspInit+0xcc>)
 800365c:	f043 0302 	orr.w	r3, r3, #2
 8003660:	6413      	str	r3, [r2, #64]	; 0x40
 8003662:	4b19      	ldr	r3, [pc, #100]	; (80036c8 <HAL_TIM_Base_MspInit+0xcc>)
 8003664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003666:	f003 0302 	and.w	r3, r3, #2
 800366a:	617b      	str	r3, [r7, #20]
 800366c:	697b      	ldr	r3, [r7, #20]
}
 800366e:	e022      	b.n	80036b6 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a16      	ldr	r2, [pc, #88]	; (80036d0 <HAL_TIM_Base_MspInit+0xd4>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d10c      	bne.n	8003694 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800367a:	4b13      	ldr	r3, [pc, #76]	; (80036c8 <HAL_TIM_Base_MspInit+0xcc>)
 800367c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367e:	4a12      	ldr	r2, [pc, #72]	; (80036c8 <HAL_TIM_Base_MspInit+0xcc>)
 8003680:	f043 0308 	orr.w	r3, r3, #8
 8003684:	6413      	str	r3, [r2, #64]	; 0x40
 8003686:	4b10      	ldr	r3, [pc, #64]	; (80036c8 <HAL_TIM_Base_MspInit+0xcc>)
 8003688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800368a:	f003 0308 	and.w	r3, r3, #8
 800368e:	613b      	str	r3, [r7, #16]
 8003690:	693b      	ldr	r3, [r7, #16]
}
 8003692:	e010      	b.n	80036b6 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a0e      	ldr	r2, [pc, #56]	; (80036d4 <HAL_TIM_Base_MspInit+0xd8>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d10b      	bne.n	80036b6 <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800369e:	4b0a      	ldr	r3, [pc, #40]	; (80036c8 <HAL_TIM_Base_MspInit+0xcc>)
 80036a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036a2:	4a09      	ldr	r2, [pc, #36]	; (80036c8 <HAL_TIM_Base_MspInit+0xcc>)
 80036a4:	f043 0302 	orr.w	r3, r3, #2
 80036a8:	6453      	str	r3, [r2, #68]	; 0x44
 80036aa:	4b07      	ldr	r3, [pc, #28]	; (80036c8 <HAL_TIM_Base_MspInit+0xcc>)
 80036ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ae:	f003 0302 	and.w	r3, r3, #2
 80036b2:	60fb      	str	r3, [r7, #12]
 80036b4:	68fb      	ldr	r3, [r7, #12]
}
 80036b6:	bf00      	nop
 80036b8:	3724      	adds	r7, #36	; 0x24
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr
 80036c2:	bf00      	nop
 80036c4:	40010000 	.word	0x40010000
 80036c8:	40023800 	.word	0x40023800
 80036cc:	40000400 	.word	0x40000400
 80036d0:	40000c00 	.word	0x40000c00
 80036d4:	40010400 	.word	0x40010400

080036d8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80036d8:	b480      	push	{r7}
 80036da:	b085      	sub	sp, #20
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a0a      	ldr	r2, [pc, #40]	; (8003710 <HAL_TIM_PWM_MspInit+0x38>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d10b      	bne.n	8003702 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 80036ea:	4b0a      	ldr	r3, [pc, #40]	; (8003714 <HAL_TIM_PWM_MspInit+0x3c>)
 80036ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ee:	4a09      	ldr	r2, [pc, #36]	; (8003714 <HAL_TIM_PWM_MspInit+0x3c>)
 80036f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80036f4:	6413      	str	r3, [r2, #64]	; 0x40
 80036f6:	4b07      	ldr	r3, [pc, #28]	; (8003714 <HAL_TIM_PWM_MspInit+0x3c>)
 80036f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036fe:	60fb      	str	r3, [r7, #12]
 8003700:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8003702:	bf00      	nop
 8003704:	3714      	adds	r7, #20
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr
 800370e:	bf00      	nop
 8003710:	40001800 	.word	0x40001800
 8003714:	40023800 	.word	0x40023800

08003718 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b08c      	sub	sp, #48	; 0x30
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003720:	f107 031c 	add.w	r3, r7, #28
 8003724:	2200      	movs	r2, #0
 8003726:	601a      	str	r2, [r3, #0]
 8003728:	605a      	str	r2, [r3, #4]
 800372a:	609a      	str	r2, [r3, #8]
 800372c:	60da      	str	r2, [r3, #12]
 800372e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a56      	ldr	r2, [pc, #344]	; (8003890 <HAL_TIM_MspPostInit+0x178>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d11d      	bne.n	8003776 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800373a:	4b56      	ldr	r3, [pc, #344]	; (8003894 <HAL_TIM_MspPostInit+0x17c>)
 800373c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800373e:	4a55      	ldr	r2, [pc, #340]	; (8003894 <HAL_TIM_MspPostInit+0x17c>)
 8003740:	f043 0301 	orr.w	r3, r3, #1
 8003744:	6313      	str	r3, [r2, #48]	; 0x30
 8003746:	4b53      	ldr	r3, [pc, #332]	; (8003894 <HAL_TIM_MspPostInit+0x17c>)
 8003748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800374a:	f003 0301 	and.w	r3, r3, #1
 800374e:	61bb      	str	r3, [r7, #24]
 8003750:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8003752:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003756:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003758:	2302      	movs	r3, #2
 800375a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800375c:	2300      	movs	r3, #0
 800375e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003760:	2300      	movs	r3, #0
 8003762:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003764:	2301      	movs	r3, #1
 8003766:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8003768:	f107 031c 	add.w	r3, r7, #28
 800376c:	4619      	mov	r1, r3
 800376e:	484a      	ldr	r0, [pc, #296]	; (8003898 <HAL_TIM_MspPostInit+0x180>)
 8003770:	f004 f876 	bl	8007860 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8003774:	e087      	b.n	8003886 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM2)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800377e:	d11d      	bne.n	80037bc <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003780:	4b44      	ldr	r3, [pc, #272]	; (8003894 <HAL_TIM_MspPostInit+0x17c>)
 8003782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003784:	4a43      	ldr	r2, [pc, #268]	; (8003894 <HAL_TIM_MspPostInit+0x17c>)
 8003786:	f043 0301 	orr.w	r3, r3, #1
 800378a:	6313      	str	r3, [r2, #48]	; 0x30
 800378c:	4b41      	ldr	r3, [pc, #260]	; (8003894 <HAL_TIM_MspPostInit+0x17c>)
 800378e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003790:	f003 0301 	and.w	r3, r3, #1
 8003794:	617b      	str	r3, [r7, #20]
 8003796:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8003798:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800379c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800379e:	2302      	movs	r3, #2
 80037a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037a2:	2300      	movs	r3, #0
 80037a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037a6:	2300      	movs	r3, #0
 80037a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80037aa:	2301      	movs	r3, #1
 80037ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 80037ae:	f107 031c 	add.w	r3, r7, #28
 80037b2:	4619      	mov	r1, r3
 80037b4:	4838      	ldr	r0, [pc, #224]	; (8003898 <HAL_TIM_MspPostInit+0x180>)
 80037b6:	f004 f853 	bl	8007860 <HAL_GPIO_Init>
}
 80037ba:	e064      	b.n	8003886 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM3)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a36      	ldr	r2, [pc, #216]	; (800389c <HAL_TIM_MspPostInit+0x184>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d11c      	bne.n	8003800 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037c6:	4b33      	ldr	r3, [pc, #204]	; (8003894 <HAL_TIM_MspPostInit+0x17c>)
 80037c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ca:	4a32      	ldr	r2, [pc, #200]	; (8003894 <HAL_TIM_MspPostInit+0x17c>)
 80037cc:	f043 0302 	orr.w	r3, r3, #2
 80037d0:	6313      	str	r3, [r2, #48]	; 0x30
 80037d2:	4b30      	ldr	r3, [pc, #192]	; (8003894 <HAL_TIM_MspPostInit+0x17c>)
 80037d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d6:	f003 0302 	and.w	r3, r3, #2
 80037da:	613b      	str	r3, [r7, #16]
 80037dc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 80037de:	2310      	movs	r3, #16
 80037e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037e2:	2302      	movs	r3, #2
 80037e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037e6:	2300      	movs	r3, #0
 80037e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037ea:	2300      	movs	r3, #0
 80037ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80037ee:	2302      	movs	r3, #2
 80037f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 80037f2:	f107 031c 	add.w	r3, r7, #28
 80037f6:	4619      	mov	r1, r3
 80037f8:	4829      	ldr	r0, [pc, #164]	; (80038a0 <HAL_TIM_MspPostInit+0x188>)
 80037fa:	f004 f831 	bl	8007860 <HAL_GPIO_Init>
}
 80037fe:	e042      	b.n	8003886 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM5)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a27      	ldr	r2, [pc, #156]	; (80038a4 <HAL_TIM_MspPostInit+0x18c>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d11c      	bne.n	8003844 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800380a:	4b22      	ldr	r3, [pc, #136]	; (8003894 <HAL_TIM_MspPostInit+0x17c>)
 800380c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800380e:	4a21      	ldr	r2, [pc, #132]	; (8003894 <HAL_TIM_MspPostInit+0x17c>)
 8003810:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003814:	6313      	str	r3, [r2, #48]	; 0x30
 8003816:	4b1f      	ldr	r3, [pc, #124]	; (8003894 <HAL_TIM_MspPostInit+0x17c>)
 8003818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800381a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800381e:	60fb      	str	r3, [r7, #12]
 8003820:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8003822:	2301      	movs	r3, #1
 8003824:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003826:	2302      	movs	r3, #2
 8003828:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800382a:	2300      	movs	r3, #0
 800382c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800382e:	2300      	movs	r3, #0
 8003830:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003832:	2302      	movs	r3, #2
 8003834:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8003836:	f107 031c 	add.w	r3, r7, #28
 800383a:	4619      	mov	r1, r3
 800383c:	481a      	ldr	r0, [pc, #104]	; (80038a8 <HAL_TIM_MspPostInit+0x190>)
 800383e:	f004 f80f 	bl	8007860 <HAL_GPIO_Init>
}
 8003842:	e020      	b.n	8003886 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM12)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a18      	ldr	r2, [pc, #96]	; (80038ac <HAL_TIM_MspPostInit+0x194>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d11b      	bne.n	8003886 <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800384e:	4b11      	ldr	r3, [pc, #68]	; (8003894 <HAL_TIM_MspPostInit+0x17c>)
 8003850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003852:	4a10      	ldr	r2, [pc, #64]	; (8003894 <HAL_TIM_MspPostInit+0x17c>)
 8003854:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003858:	6313      	str	r3, [r2, #48]	; 0x30
 800385a:	4b0e      	ldr	r3, [pc, #56]	; (8003894 <HAL_TIM_MspPostInit+0x17c>)
 800385c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800385e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003862:	60bb      	str	r3, [r7, #8]
 8003864:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8003866:	2340      	movs	r3, #64	; 0x40
 8003868:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800386a:	2302      	movs	r3, #2
 800386c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800386e:	2300      	movs	r3, #0
 8003870:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003872:	2300      	movs	r3, #0
 8003874:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8003876:	2309      	movs	r3, #9
 8003878:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 800387a:	f107 031c 	add.w	r3, r7, #28
 800387e:	4619      	mov	r1, r3
 8003880:	480b      	ldr	r0, [pc, #44]	; (80038b0 <HAL_TIM_MspPostInit+0x198>)
 8003882:	f003 ffed 	bl	8007860 <HAL_GPIO_Init>
}
 8003886:	bf00      	nop
 8003888:	3730      	adds	r7, #48	; 0x30
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}
 800388e:	bf00      	nop
 8003890:	40010000 	.word	0x40010000
 8003894:	40023800 	.word	0x40023800
 8003898:	40020000 	.word	0x40020000
 800389c:	40000400 	.word	0x40000400
 80038a0:	40020400 	.word	0x40020400
 80038a4:	40000c00 	.word	0x40000c00
 80038a8:	40022000 	.word	0x40022000
 80038ac:	40001800 	.word	0x40001800
 80038b0:	40021c00 	.word	0x40021c00

080038b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b08c      	sub	sp, #48	; 0x30
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038bc:	f107 031c 	add.w	r3, r7, #28
 80038c0:	2200      	movs	r2, #0
 80038c2:	601a      	str	r2, [r3, #0]
 80038c4:	605a      	str	r2, [r3, #4]
 80038c6:	609a      	str	r2, [r3, #8]
 80038c8:	60da      	str	r2, [r3, #12]
 80038ca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a3c      	ldr	r2, [pc, #240]	; (80039c4 <HAL_UART_MspInit+0x110>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d145      	bne.n	8003962 <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80038d6:	4b3c      	ldr	r3, [pc, #240]	; (80039c8 <HAL_UART_MspInit+0x114>)
 80038d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038da:	4a3b      	ldr	r2, [pc, #236]	; (80039c8 <HAL_UART_MspInit+0x114>)
 80038dc:	f043 0310 	orr.w	r3, r3, #16
 80038e0:	6453      	str	r3, [r2, #68]	; 0x44
 80038e2:	4b39      	ldr	r3, [pc, #228]	; (80039c8 <HAL_UART_MspInit+0x114>)
 80038e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038e6:	f003 0310 	and.w	r3, r3, #16
 80038ea:	61bb      	str	r3, [r7, #24]
 80038ec:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80038ee:	4b36      	ldr	r3, [pc, #216]	; (80039c8 <HAL_UART_MspInit+0x114>)
 80038f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f2:	4a35      	ldr	r2, [pc, #212]	; (80039c8 <HAL_UART_MspInit+0x114>)
 80038f4:	f043 0302 	orr.w	r3, r3, #2
 80038f8:	6313      	str	r3, [r2, #48]	; 0x30
 80038fa:	4b33      	ldr	r3, [pc, #204]	; (80039c8 <HAL_UART_MspInit+0x114>)
 80038fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038fe:	f003 0302 	and.w	r3, r3, #2
 8003902:	617b      	str	r3, [r7, #20]
 8003904:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003906:	4b30      	ldr	r3, [pc, #192]	; (80039c8 <HAL_UART_MspInit+0x114>)
 8003908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800390a:	4a2f      	ldr	r2, [pc, #188]	; (80039c8 <HAL_UART_MspInit+0x114>)
 800390c:	f043 0301 	orr.w	r3, r3, #1
 8003910:	6313      	str	r3, [r2, #48]	; 0x30
 8003912:	4b2d      	ldr	r3, [pc, #180]	; (80039c8 <HAL_UART_MspInit+0x114>)
 8003914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003916:	f003 0301 	and.w	r3, r3, #1
 800391a:	613b      	str	r3, [r7, #16]
 800391c:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800391e:	2380      	movs	r3, #128	; 0x80
 8003920:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003922:	2302      	movs	r3, #2
 8003924:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003926:	2300      	movs	r3, #0
 8003928:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800392a:	2300      	movs	r3, #0
 800392c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800392e:	2307      	movs	r3, #7
 8003930:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8003932:	f107 031c 	add.w	r3, r7, #28
 8003936:	4619      	mov	r1, r3
 8003938:	4824      	ldr	r0, [pc, #144]	; (80039cc <HAL_UART_MspInit+0x118>)
 800393a:	f003 ff91 	bl	8007860 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800393e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003942:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003944:	2302      	movs	r3, #2
 8003946:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003948:	2300      	movs	r3, #0
 800394a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800394c:	2300      	movs	r3, #0
 800394e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003950:	2307      	movs	r3, #7
 8003952:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8003954:	f107 031c 	add.w	r3, r7, #28
 8003958:	4619      	mov	r1, r3
 800395a:	481d      	ldr	r0, [pc, #116]	; (80039d0 <HAL_UART_MspInit+0x11c>)
 800395c:	f003 ff80 	bl	8007860 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003960:	e02c      	b.n	80039bc <HAL_UART_MspInit+0x108>
  else if(huart->Instance==USART6)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a1b      	ldr	r2, [pc, #108]	; (80039d4 <HAL_UART_MspInit+0x120>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d127      	bne.n	80039bc <HAL_UART_MspInit+0x108>
    __HAL_RCC_USART6_CLK_ENABLE();
 800396c:	4b16      	ldr	r3, [pc, #88]	; (80039c8 <HAL_UART_MspInit+0x114>)
 800396e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003970:	4a15      	ldr	r2, [pc, #84]	; (80039c8 <HAL_UART_MspInit+0x114>)
 8003972:	f043 0320 	orr.w	r3, r3, #32
 8003976:	6453      	str	r3, [r2, #68]	; 0x44
 8003978:	4b13      	ldr	r3, [pc, #76]	; (80039c8 <HAL_UART_MspInit+0x114>)
 800397a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800397c:	f003 0320 	and.w	r3, r3, #32
 8003980:	60fb      	str	r3, [r7, #12]
 8003982:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003984:	4b10      	ldr	r3, [pc, #64]	; (80039c8 <HAL_UART_MspInit+0x114>)
 8003986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003988:	4a0f      	ldr	r2, [pc, #60]	; (80039c8 <HAL_UART_MspInit+0x114>)
 800398a:	f043 0304 	orr.w	r3, r3, #4
 800398e:	6313      	str	r3, [r2, #48]	; 0x30
 8003990:	4b0d      	ldr	r3, [pc, #52]	; (80039c8 <HAL_UART_MspInit+0x114>)
 8003992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003994:	f003 0304 	and.w	r3, r3, #4
 8003998:	60bb      	str	r3, [r7, #8]
 800399a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 800399c:	23c0      	movs	r3, #192	; 0xc0
 800399e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039a0:	2302      	movs	r3, #2
 80039a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039a4:	2300      	movs	r3, #0
 80039a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039a8:	2303      	movs	r3, #3
 80039aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80039ac:	2308      	movs	r3, #8
 80039ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80039b0:	f107 031c 	add.w	r3, r7, #28
 80039b4:	4619      	mov	r1, r3
 80039b6:	4808      	ldr	r0, [pc, #32]	; (80039d8 <HAL_UART_MspInit+0x124>)
 80039b8:	f003 ff52 	bl	8007860 <HAL_GPIO_Init>
}
 80039bc:	bf00      	nop
 80039be:	3730      	adds	r7, #48	; 0x30
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}
 80039c4:	40011000 	.word	0x40011000
 80039c8:	40023800 	.word	0x40023800
 80039cc:	40020400 	.word	0x40020400
 80039d0:	40020000 	.word	0x40020000
 80039d4:	40011400 	.word	0x40011400
 80039d8:	40020800 	.word	0x40020800

080039dc <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80039dc:	b580      	push	{r7, lr}
 80039de:	b086      	sub	sp, #24
 80039e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80039e2:	1d3b      	adds	r3, r7, #4
 80039e4:	2200      	movs	r2, #0
 80039e6:	601a      	str	r2, [r3, #0]
 80039e8:	605a      	str	r2, [r3, #4]
 80039ea:	609a      	str	r2, [r3, #8]
 80039ec:	60da      	str	r2, [r3, #12]
 80039ee:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80039f0:	4b3d      	ldr	r3, [pc, #244]	; (8003ae8 <HAL_FMC_MspInit+0x10c>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d173      	bne.n	8003ae0 <HAL_FMC_MspInit+0x104>
    return;
  }
  FMC_Initialized = 1;
 80039f8:	4b3b      	ldr	r3, [pc, #236]	; (8003ae8 <HAL_FMC_MspInit+0x10c>)
 80039fa:	2201      	movs	r2, #1
 80039fc:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80039fe:	4b3b      	ldr	r3, [pc, #236]	; (8003aec <HAL_FMC_MspInit+0x110>)
 8003a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a02:	4a3a      	ldr	r2, [pc, #232]	; (8003aec <HAL_FMC_MspInit+0x110>)
 8003a04:	f043 0301 	orr.w	r3, r3, #1
 8003a08:	6393      	str	r3, [r2, #56]	; 0x38
 8003a0a:	4b38      	ldr	r3, [pc, #224]	; (8003aec <HAL_FMC_MspInit+0x110>)
 8003a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a0e:	f003 0301 	and.w	r3, r3, #1
 8003a12:	603b      	str	r3, [r7, #0]
 8003a14:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8003a16:	f64f 7383 	movw	r3, #65411	; 0xff83
 8003a1a:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a1c:	2302      	movs	r3, #2
 8003a1e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a20:	2300      	movs	r3, #0
 8003a22:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a24:	2303      	movs	r3, #3
 8003a26:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003a28:	230c      	movs	r3, #12
 8003a2a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003a2c:	1d3b      	adds	r3, r7, #4
 8003a2e:	4619      	mov	r1, r3
 8003a30:	482f      	ldr	r0, [pc, #188]	; (8003af0 <HAL_FMC_MspInit+0x114>)
 8003a32:	f003 ff15 	bl	8007860 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8003a36:	f248 1333 	movw	r3, #33075	; 0x8133
 8003a3a:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a3c:	2302      	movs	r3, #2
 8003a3e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a40:	2300      	movs	r3, #0
 8003a42:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a44:	2303      	movs	r3, #3
 8003a46:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003a48:	230c      	movs	r3, #12
 8003a4a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003a4c:	1d3b      	adds	r3, r7, #4
 8003a4e:	4619      	mov	r1, r3
 8003a50:	4828      	ldr	r0, [pc, #160]	; (8003af4 <HAL_FMC_MspInit+0x118>)
 8003a52:	f003 ff05 	bl	8007860 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8003a56:	f24c 7303 	movw	r3, #50947	; 0xc703
 8003a5a:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a5c:	2302      	movs	r3, #2
 8003a5e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a60:	2300      	movs	r3, #0
 8003a62:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a64:	2303      	movs	r3, #3
 8003a66:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003a68:	230c      	movs	r3, #12
 8003a6a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003a6c:	1d3b      	adds	r3, r7, #4
 8003a6e:	4619      	mov	r1, r3
 8003a70:	4821      	ldr	r0, [pc, #132]	; (8003af8 <HAL_FMC_MspInit+0x11c>)
 8003a72:	f003 fef5 	bl	8007860 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8003a76:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8003a7a:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a7c:	2302      	movs	r3, #2
 8003a7e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a80:	2300      	movs	r3, #0
 8003a82:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a84:	2303      	movs	r3, #3
 8003a86:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003a88:	230c      	movs	r3, #12
 8003a8a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003a8c:	1d3b      	adds	r3, r7, #4
 8003a8e:	4619      	mov	r1, r3
 8003a90:	481a      	ldr	r0, [pc, #104]	; (8003afc <HAL_FMC_MspInit+0x120>)
 8003a92:	f003 fee5 	bl	8007860 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8003a96:	2328      	movs	r3, #40	; 0x28
 8003a98:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a9a:	2302      	movs	r3, #2
 8003a9c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003aa2:	2303      	movs	r3, #3
 8003aa4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003aa6:	230c      	movs	r3, #12
 8003aa8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003aaa:	1d3b      	adds	r3, r7, #4
 8003aac:	4619      	mov	r1, r3
 8003aae:	4814      	ldr	r0, [pc, #80]	; (8003b00 <HAL_FMC_MspInit+0x124>)
 8003ab0:	f003 fed6 	bl	8007860 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8003ab4:	2308      	movs	r3, #8
 8003ab6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ab8:	2302      	movs	r3, #2
 8003aba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003abc:	2300      	movs	r3, #0
 8003abe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ac0:	2303      	movs	r3, #3
 8003ac2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003ac4:	230c      	movs	r3, #12
 8003ac6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8003ac8:	1d3b      	adds	r3, r7, #4
 8003aca:	4619      	mov	r1, r3
 8003acc:	480d      	ldr	r0, [pc, #52]	; (8003b04 <HAL_FMC_MspInit+0x128>)
 8003ace:	f003 fec7 	bl	8007860 <HAL_GPIO_Init>

  /* USER CODE BEGIN FMC_MspInit 1 */

  // syd:
  /* Associate mem2mem DMA handle with SDRAM */
  __HAL_LINKDMA(&hsdram1, hdma, hdma_memtomem_dma2_stream0);
 8003ad2:	4b0d      	ldr	r3, [pc, #52]	; (8003b08 <HAL_FMC_MspInit+0x12c>)
 8003ad4:	4a0d      	ldr	r2, [pc, #52]	; (8003b0c <HAL_FMC_MspInit+0x130>)
 8003ad6:	631a      	str	r2, [r3, #48]	; 0x30
 8003ad8:	4b0c      	ldr	r3, [pc, #48]	; (8003b0c <HAL_FMC_MspInit+0x130>)
 8003ada:	4a0b      	ldr	r2, [pc, #44]	; (8003b08 <HAL_FMC_MspInit+0x12c>)
 8003adc:	639a      	str	r2, [r3, #56]	; 0x38
 8003ade:	e000      	b.n	8003ae2 <HAL_FMC_MspInit+0x106>
    return;
 8003ae0:	bf00      	nop
  //i.e.:
  // hsdram1.hdma = &hdma_memtomem_dma2_stream0;
  // hdma_memtomem_dma2_stream0.Parent = &hsdram1;

  /* USER CODE END FMC_MspInit 1 */
}
 8003ae2:	3718      	adds	r7, #24
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	200004c4 	.word	0x200004c4
 8003aec:	40023800 	.word	0x40023800
 8003af0:	40021000 	.word	0x40021000
 8003af4:	40021800 	.word	0x40021800
 8003af8:	40020c00 	.word	0x40020c00
 8003afc:	40021400 	.word	0x40021400
 8003b00:	40021c00 	.word	0x40021c00
 8003b04:	40020800 	.word	0x40020800
 8003b08:	20009efc 	.word	0x20009efc
 8003b0c:	20009744 	.word	0x20009744

08003b10 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b082      	sub	sp, #8
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8003b18:	f7ff ff60 	bl	80039dc <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8003b1c:	bf00      	nop
 8003b1e:	3708      	adds	r7, #8
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}

08003b24 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai2_b;

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b08a      	sub	sp, #40	; 0x28
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a6f      	ldr	r2, [pc, #444]	; (8003cf0 <HAL_SAI_MspInit+0x1cc>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d175      	bne.n	8003c22 <HAL_SAI_MspInit+0xfe>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 8003b36:	4b6f      	ldr	r3, [pc, #444]	; (8003cf4 <HAL_SAI_MspInit+0x1d0>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d10b      	bne.n	8003b56 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8003b3e:	4b6e      	ldr	r3, [pc, #440]	; (8003cf8 <HAL_SAI_MspInit+0x1d4>)
 8003b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b42:	4a6d      	ldr	r2, [pc, #436]	; (8003cf8 <HAL_SAI_MspInit+0x1d4>)
 8003b44:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003b48:	6453      	str	r3, [r2, #68]	; 0x44
 8003b4a:	4b6b      	ldr	r3, [pc, #428]	; (8003cf8 <HAL_SAI_MspInit+0x1d4>)
 8003b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b4e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003b52:	613b      	str	r3, [r7, #16]
 8003b54:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 8003b56:	4b67      	ldr	r3, [pc, #412]	; (8003cf4 <HAL_SAI_MspInit+0x1d0>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	3301      	adds	r3, #1
 8003b5c:	4a65      	ldr	r2, [pc, #404]	; (8003cf4 <HAL_SAI_MspInit+0x1d0>)
 8003b5e:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin;
 8003b60:	2310      	movs	r3, #16
 8003b62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b64:	2302      	movs	r3, #2
 8003b66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b6c:	2303      	movs	r3, #3
 8003b6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8003b70:	230a      	movs	r3, #10
 8003b72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_MCLKA_GPIO_Port, &GPIO_InitStruct);
 8003b74:	f107 0314 	add.w	r3, r7, #20
 8003b78:	4619      	mov	r1, r3
 8003b7a:	4860      	ldr	r0, [pc, #384]	; (8003cfc <HAL_SAI_MspInit+0x1d8>)
 8003b7c:	f003 fe70 	bl	8007860 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8003b80:	23e0      	movs	r3, #224	; 0xe0
 8003b82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b84:	2302      	movs	r3, #2
 8003b86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003b8c:	2302      	movs	r3, #2
 8003b8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8003b90:	230a      	movs	r3, #10
 8003b92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003b94:	f107 0314 	add.w	r3, r7, #20
 8003b98:	4619      	mov	r1, r3
 8003b9a:	4858      	ldr	r0, [pc, #352]	; (8003cfc <HAL_SAI_MspInit+0x1d8>)
 8003b9c:	f003 fe60 	bl	8007860 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai2_a.Instance = DMA2_Stream4;
 8003ba0:	4b57      	ldr	r3, [pc, #348]	; (8003d00 <HAL_SAI_MspInit+0x1dc>)
 8003ba2:	4a58      	ldr	r2, [pc, #352]	; (8003d04 <HAL_SAI_MspInit+0x1e0>)
 8003ba4:	601a      	str	r2, [r3, #0]
    hdma_sai2_a.Init.Channel = DMA_CHANNEL_3;
 8003ba6:	4b56      	ldr	r3, [pc, #344]	; (8003d00 <HAL_SAI_MspInit+0x1dc>)
 8003ba8:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8003bac:	605a      	str	r2, [r3, #4]
    hdma_sai2_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003bae:	4b54      	ldr	r3, [pc, #336]	; (8003d00 <HAL_SAI_MspInit+0x1dc>)
 8003bb0:	2240      	movs	r2, #64	; 0x40
 8003bb2:	609a      	str	r2, [r3, #8]
    hdma_sai2_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8003bb4:	4b52      	ldr	r3, [pc, #328]	; (8003d00 <HAL_SAI_MspInit+0x1dc>)
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	60da      	str	r2, [r3, #12]
    hdma_sai2_a.Init.MemInc = DMA_MINC_ENABLE;
 8003bba:	4b51      	ldr	r3, [pc, #324]	; (8003d00 <HAL_SAI_MspInit+0x1dc>)
 8003bbc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003bc0:	611a      	str	r2, [r3, #16]
    hdma_sai2_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003bc2:	4b4f      	ldr	r3, [pc, #316]	; (8003d00 <HAL_SAI_MspInit+0x1dc>)
 8003bc4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003bc8:	615a      	str	r2, [r3, #20]
    hdma_sai2_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003bca:	4b4d      	ldr	r3, [pc, #308]	; (8003d00 <HAL_SAI_MspInit+0x1dc>)
 8003bcc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003bd0:	619a      	str	r2, [r3, #24]
    hdma_sai2_a.Init.Mode = DMA_CIRCULAR;
 8003bd2:	4b4b      	ldr	r3, [pc, #300]	; (8003d00 <HAL_SAI_MspInit+0x1dc>)
 8003bd4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003bd8:	61da      	str	r2, [r3, #28]
    hdma_sai2_a.Init.Priority = DMA_PRIORITY_HIGH;
 8003bda:	4b49      	ldr	r3, [pc, #292]	; (8003d00 <HAL_SAI_MspInit+0x1dc>)
 8003bdc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003be0:	621a      	str	r2, [r3, #32]
    hdma_sai2_a.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003be2:	4b47      	ldr	r3, [pc, #284]	; (8003d00 <HAL_SAI_MspInit+0x1dc>)
 8003be4:	2204      	movs	r2, #4
 8003be6:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai2_a.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003be8:	4b45      	ldr	r3, [pc, #276]	; (8003d00 <HAL_SAI_MspInit+0x1dc>)
 8003bea:	2203      	movs	r2, #3
 8003bec:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai2_a.Init.MemBurst = DMA_MBURST_SINGLE;
 8003bee:	4b44      	ldr	r3, [pc, #272]	; (8003d00 <HAL_SAI_MspInit+0x1dc>)
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai2_a.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8003bf4:	4b42      	ldr	r3, [pc, #264]	; (8003d00 <HAL_SAI_MspInit+0x1dc>)
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sai2_a) != HAL_OK)
 8003bfa:	4841      	ldr	r0, [pc, #260]	; (8003d00 <HAL_SAI_MspInit+0x1dc>)
 8003bfc:	f002 fe7e 	bl	80068fc <HAL_DMA_Init>
 8003c00:	4603      	mov	r3, r0
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d001      	beq.n	8003c0a <HAL_SAI_MspInit+0xe6>
    {
      Error_Handler();
 8003c06:	f7ff f865 	bl	8002cd4 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai2_a);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	4a3c      	ldr	r2, [pc, #240]	; (8003d00 <HAL_SAI_MspInit+0x1dc>)
 8003c0e:	671a      	str	r2, [r3, #112]	; 0x70
 8003c10:	4a3b      	ldr	r2, [pc, #236]	; (8003d00 <HAL_SAI_MspInit+0x1dc>)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6393      	str	r3, [r2, #56]	; 0x38

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai2_a);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	4a39      	ldr	r2, [pc, #228]	; (8003d00 <HAL_SAI_MspInit+0x1dc>)
 8003c1a:	66da      	str	r2, [r3, #108]	; 0x6c
 8003c1c:	4a38      	ldr	r2, [pc, #224]	; (8003d00 <HAL_SAI_MspInit+0x1dc>)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6393      	str	r3, [r2, #56]	; 0x38

    }
    if(hsai->Instance==SAI2_Block_B)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a38      	ldr	r2, [pc, #224]	; (8003d08 <HAL_SAI_MspInit+0x1e4>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d15c      	bne.n	8003ce6 <HAL_SAI_MspInit+0x1c2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 8003c2c:	4b31      	ldr	r3, [pc, #196]	; (8003cf4 <HAL_SAI_MspInit+0x1d0>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d10b      	bne.n	8003c4c <HAL_SAI_MspInit+0x128>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8003c34:	4b30      	ldr	r3, [pc, #192]	; (8003cf8 <HAL_SAI_MspInit+0x1d4>)
 8003c36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c38:	4a2f      	ldr	r2, [pc, #188]	; (8003cf8 <HAL_SAI_MspInit+0x1d4>)
 8003c3a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003c3e:	6453      	str	r3, [r2, #68]	; 0x44
 8003c40:	4b2d      	ldr	r3, [pc, #180]	; (8003cf8 <HAL_SAI_MspInit+0x1d4>)
 8003c42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c44:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003c48:	60fb      	str	r3, [r7, #12]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 8003c4c:	4b29      	ldr	r3, [pc, #164]	; (8003cf4 <HAL_SAI_MspInit+0x1d0>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	3301      	adds	r3, #1
 8003c52:	4a28      	ldr	r2, [pc, #160]	; (8003cf4 <HAL_SAI_MspInit+0x1d0>)
 8003c54:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8003c56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c5c:	2302      	movs	r3, #2
 8003c5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c60:	2300      	movs	r3, #0
 8003c62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003c64:	2302      	movs	r3, #2
 8003c66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8003c68:	230a      	movs	r3, #10
 8003c6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8003c6c:	f107 0314 	add.w	r3, r7, #20
 8003c70:	4619      	mov	r1, r3
 8003c72:	4826      	ldr	r0, [pc, #152]	; (8003d0c <HAL_SAI_MspInit+0x1e8>)
 8003c74:	f003 fdf4 	bl	8007860 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai2_b.Instance = DMA2_Stream7;
 8003c78:	4b25      	ldr	r3, [pc, #148]	; (8003d10 <HAL_SAI_MspInit+0x1ec>)
 8003c7a:	4a26      	ldr	r2, [pc, #152]	; (8003d14 <HAL_SAI_MspInit+0x1f0>)
 8003c7c:	601a      	str	r2, [r3, #0]
    hdma_sai2_b.Init.Channel = DMA_CHANNEL_0;
 8003c7e:	4b24      	ldr	r3, [pc, #144]	; (8003d10 <HAL_SAI_MspInit+0x1ec>)
 8003c80:	2200      	movs	r2, #0
 8003c82:	605a      	str	r2, [r3, #4]
    hdma_sai2_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003c84:	4b22      	ldr	r3, [pc, #136]	; (8003d10 <HAL_SAI_MspInit+0x1ec>)
 8003c86:	2200      	movs	r2, #0
 8003c88:	609a      	str	r2, [r3, #8]
    hdma_sai2_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c8a:	4b21      	ldr	r3, [pc, #132]	; (8003d10 <HAL_SAI_MspInit+0x1ec>)
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	60da      	str	r2, [r3, #12]
    hdma_sai2_b.Init.MemInc = DMA_MINC_ENABLE;
 8003c90:	4b1f      	ldr	r3, [pc, #124]	; (8003d10 <HAL_SAI_MspInit+0x1ec>)
 8003c92:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003c96:	611a      	str	r2, [r3, #16]
    hdma_sai2_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003c98:	4b1d      	ldr	r3, [pc, #116]	; (8003d10 <HAL_SAI_MspInit+0x1ec>)
 8003c9a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c9e:	615a      	str	r2, [r3, #20]
    hdma_sai2_b.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003ca0:	4b1b      	ldr	r3, [pc, #108]	; (8003d10 <HAL_SAI_MspInit+0x1ec>)
 8003ca2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003ca6:	619a      	str	r2, [r3, #24]
    hdma_sai2_b.Init.Mode = DMA_CIRCULAR;
 8003ca8:	4b19      	ldr	r3, [pc, #100]	; (8003d10 <HAL_SAI_MspInit+0x1ec>)
 8003caa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003cae:	61da      	str	r2, [r3, #28]
    hdma_sai2_b.Init.Priority = DMA_PRIORITY_HIGH;
 8003cb0:	4b17      	ldr	r3, [pc, #92]	; (8003d10 <HAL_SAI_MspInit+0x1ec>)
 8003cb2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003cb6:	621a      	str	r2, [r3, #32]
    hdma_sai2_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003cb8:	4b15      	ldr	r3, [pc, #84]	; (8003d10 <HAL_SAI_MspInit+0x1ec>)
 8003cba:	2200      	movs	r2, #0
 8003cbc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai2_b) != HAL_OK)
 8003cbe:	4814      	ldr	r0, [pc, #80]	; (8003d10 <HAL_SAI_MspInit+0x1ec>)
 8003cc0:	f002 fe1c 	bl	80068fc <HAL_DMA_Init>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d001      	beq.n	8003cce <HAL_SAI_MspInit+0x1aa>
    {
      Error_Handler();
 8003cca:	f7ff f803 	bl	8002cd4 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai2_b);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	4a0f      	ldr	r2, [pc, #60]	; (8003d10 <HAL_SAI_MspInit+0x1ec>)
 8003cd2:	671a      	str	r2, [r3, #112]	; 0x70
 8003cd4:	4a0e      	ldr	r2, [pc, #56]	; (8003d10 <HAL_SAI_MspInit+0x1ec>)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai2_b);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	4a0c      	ldr	r2, [pc, #48]	; (8003d10 <HAL_SAI_MspInit+0x1ec>)
 8003cde:	66da      	str	r2, [r3, #108]	; 0x6c
 8003ce0:	4a0b      	ldr	r2, [pc, #44]	; (8003d10 <HAL_SAI_MspInit+0x1ec>)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6393      	str	r3, [r2, #56]	; 0x38
    }
}
 8003ce6:	bf00      	nop
 8003ce8:	3728      	adds	r7, #40	; 0x28
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}
 8003cee:	bf00      	nop
 8003cf0:	40015c04 	.word	0x40015c04
 8003cf4:	200004c8 	.word	0x200004c8
 8003cf8:	40023800 	.word	0x40023800
 8003cfc:	40022000 	.word	0x40022000
 8003d00:	20009d40 	.word	0x20009d40
 8003d04:	40026470 	.word	0x40026470
 8003d08:	40015c24 	.word	0x40015c24
 8003d0c:	40021800 	.word	0x40021800
 8003d10:	200097f0 	.word	0x200097f0
 8003d14:	400264b8 	.word	0x400264b8

08003d18 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b08c      	sub	sp, #48	; 0x30
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003d20:	2300      	movs	r3, #0
 8003d22:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003d24:	2300      	movs	r3, #0
 8003d26:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8003d28:	2200      	movs	r2, #0
 8003d2a:	6879      	ldr	r1, [r7, #4]
 8003d2c:	2036      	movs	r0, #54	; 0x36
 8003d2e:	f002 fb79 	bl	8006424 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003d32:	2036      	movs	r0, #54	; 0x36
 8003d34:	f002 fb92 	bl	800645c <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003d38:	4b1f      	ldr	r3, [pc, #124]	; (8003db8 <HAL_InitTick+0xa0>)
 8003d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d3c:	4a1e      	ldr	r2, [pc, #120]	; (8003db8 <HAL_InitTick+0xa0>)
 8003d3e:	f043 0310 	orr.w	r3, r3, #16
 8003d42:	6413      	str	r3, [r2, #64]	; 0x40
 8003d44:	4b1c      	ldr	r3, [pc, #112]	; (8003db8 <HAL_InitTick+0xa0>)
 8003d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d48:	f003 0310 	and.w	r3, r3, #16
 8003d4c:	60fb      	str	r3, [r7, #12]
 8003d4e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003d50:	f107 0210 	add.w	r2, r7, #16
 8003d54:	f107 0314 	add.w	r3, r7, #20
 8003d58:	4611      	mov	r1, r2
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f008 fb2a 	bl	800c3b4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8003d60:	f008 fb00 	bl	800c364 <HAL_RCC_GetPCLK1Freq>
 8003d64:	4603      	mov	r3, r0
 8003d66:	005b      	lsls	r3, r3, #1
 8003d68:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d6c:	4a13      	ldr	r2, [pc, #76]	; (8003dbc <HAL_InitTick+0xa4>)
 8003d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d72:	0c9b      	lsrs	r3, r3, #18
 8003d74:	3b01      	subs	r3, #1
 8003d76:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003d78:	4b11      	ldr	r3, [pc, #68]	; (8003dc0 <HAL_InitTick+0xa8>)
 8003d7a:	4a12      	ldr	r2, [pc, #72]	; (8003dc4 <HAL_InitTick+0xac>)
 8003d7c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003d7e:	4b10      	ldr	r3, [pc, #64]	; (8003dc0 <HAL_InitTick+0xa8>)
 8003d80:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003d84:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003d86:	4a0e      	ldr	r2, [pc, #56]	; (8003dc0 <HAL_InitTick+0xa8>)
 8003d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d8a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003d8c:	4b0c      	ldr	r3, [pc, #48]	; (8003dc0 <HAL_InitTick+0xa8>)
 8003d8e:	2200      	movs	r2, #0
 8003d90:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d92:	4b0b      	ldr	r3, [pc, #44]	; (8003dc0 <HAL_InitTick+0xa8>)
 8003d94:	2200      	movs	r2, #0
 8003d96:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8003d98:	4809      	ldr	r0, [pc, #36]	; (8003dc0 <HAL_InitTick+0xa8>)
 8003d9a:	f00b f99b 	bl	800f0d4 <HAL_TIM_Base_Init>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d104      	bne.n	8003dae <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8003da4:	4806      	ldr	r0, [pc, #24]	; (8003dc0 <HAL_InitTick+0xa8>)
 8003da6:	f00b f9ed 	bl	800f184 <HAL_TIM_Base_Start_IT>
 8003daa:	4603      	mov	r3, r0
 8003dac:	e000      	b.n	8003db0 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	3730      	adds	r7, #48	; 0x30
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}
 8003db8:	40023800 	.word	0x40023800
 8003dbc:	431bde83 	.word	0x431bde83
 8003dc0:	20009f7c 	.word	0x20009f7c
 8003dc4:	40001000 	.word	0x40001000

08003dc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003dcc:	e7fe      	b.n	8003dcc <NMI_Handler+0x4>

08003dce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003dce:	b480      	push	{r7}
 8003dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003dd2:	e7fe      	b.n	8003dd2 <HardFault_Handler+0x4>

08003dd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003dd8:	e7fe      	b.n	8003dd8 <MemManage_Handler+0x4>

08003dda <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003dda:	b480      	push	{r7}
 8003ddc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003dde:	e7fe      	b.n	8003dde <BusFault_Handler+0x4>

08003de0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003de0:	b480      	push	{r7}
 8003de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003de4:	e7fe      	b.n	8003de4 <UsageFault_Handler+0x4>

08003de6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003de6:	b480      	push	{r7}
 8003de8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003dea:	bf00      	nop
 8003dec:	46bd      	mov	sp, r7
 8003dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df2:	4770      	bx	lr

08003df4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8003df8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003dfc:	f004 f834 	bl	8007e68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003e00:	bf00      	nop
 8003e02:	bd80      	pop	{r7, pc}

08003e04 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003e08:	4802      	ldr	r0, [pc, #8]	; (8003e14 <TIM6_DAC_IRQHandler+0x10>)
 8003e0a:	f00b fa8a 	bl	800f322 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003e0e:	bf00      	nop
 8003e10:	bd80      	pop	{r7, pc}
 8003e12:	bf00      	nop
 8003e14:	20009f7c 	.word	0x20009f7c

08003e18 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

	// mem2mem DMA (eg SDRAM to RAM)

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma2_stream0);
 8003e1c:	4802      	ldr	r0, [pc, #8]	; (8003e28 <DMA2_Stream0_IRQHandler+0x10>)
 8003e1e:	f002 ff0d 	bl	8006c3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003e22:	bf00      	nop
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop
 8003e28:	20009744 	.word	0x20009744

08003e2c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

	// DMA streaming from camera to memory

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 8003e30:	4802      	ldr	r0, [pc, #8]	; (8003e3c <DMA2_Stream1_IRQHandler+0x10>)
 8003e32:	f002 ff03 	bl	8006c3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8003e36:	bf00      	nop
 8003e38:	bd80      	pop	{r7, pc}
 8003e3a:	bf00      	nop
 8003e3c:	20009990 	.word	0x20009990

08003e40 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

	// audio out

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_a);
 8003e44:	4802      	ldr	r0, [pc, #8]	; (8003e50 <DMA2_Stream4_IRQHandler+0x10>)
 8003e46:	f002 fef9 	bl	8006c3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8003e4a:	bf00      	nop
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	bf00      	nop
 8003e50:	20009d40 	.word	0x20009d40

08003e54 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8003e58:	4802      	ldr	r0, [pc, #8]	; (8003e64 <OTG_FS_IRQHandler+0x10>)
 8003e5a:	f004 fa93 	bl	8008384 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003e5e:	bf00      	nop
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	bf00      	nop
 8003e64:	2004a41c 	.word	0x2004a41c

08003e68 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

	// audio in

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_b);
 8003e6c:	4802      	ldr	r0, [pc, #8]	; (8003e78 <DMA2_Stream7_IRQHandler+0x10>)
 8003e6e:	f002 fee5 	bl	8006c3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8003e72:	bf00      	nop
 8003e74:	bd80      	pop	{r7, pc}
 8003e76:	bf00      	nop
 8003e78:	200097f0 	.word	0x200097f0

08003e7c <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */

	// c'était BSP_CAMERA_IRQHandler()

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 8003e80:	4802      	ldr	r0, [pc, #8]	; (8003e8c <DCMI_IRQHandler+0x10>)
 8003e82:	f002 fc6b 	bl	800675c <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 8003e86:	bf00      	nop
 8003e88:	bd80      	pop	{r7, pc}
 8003e8a:	bf00      	nop
 8003e8c:	20009c00 	.word	0x20009c00

08003e90 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

	// c'était BSP_LCD_DMA2D_IRQHandler();

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8003e94:	4802      	ldr	r0, [pc, #8]	; (8003ea0 <DMA2D_IRQHandler+0x10>)
 8003e96:	f003 faa5 	bl	80073e4 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8003e9a:	bf00      	nop
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	bf00      	nop
 8003ea0:	20009e24 	.word	0x20009e24

08003ea4 <QUADSPI_IRQHandler>:

/**
  * @brief This function handles QUADSPI global interrupt.
  */
void QUADSPI_IRQHandler(void)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN QUADSPI_IRQn 0 */

  /* USER CODE END QUADSPI_IRQn 0 */
  HAL_QSPI_IRQHandler(&hqspi);
 8003ea8:	4802      	ldr	r0, [pc, #8]	; (8003eb4 <QUADSPI_IRQHandler+0x10>)
 8003eaa:	f006 fec1 	bl	800ac30 <HAL_QSPI_IRQHandler>
  /* USER CODE BEGIN QUADSPI_IRQn 1 */

  /* USER CODE END QUADSPI_IRQn 1 */
}
 8003eae:	bf00      	nop
 8003eb0:	bd80      	pop	{r7, pc}
 8003eb2:	bf00      	nop
 8003eb4:	20009f30 	.word	0x20009f30

08003eb8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	af00      	add	r7, sp, #0
	return 1;
 8003ebc:	2301      	movs	r3, #1
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec6:	4770      	bx	lr

08003ec8 <_kill>:

int _kill(int pid, int sig)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b082      	sub	sp, #8
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003ed2:	f014 f917 	bl	8018104 <__errno>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	2216      	movs	r2, #22
 8003eda:	601a      	str	r2, [r3, #0]
	return -1;
 8003edc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3708      	adds	r7, #8
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}

08003ee8 <_exit>:

void _exit (int status)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b082      	sub	sp, #8
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003ef0:	f04f 31ff 	mov.w	r1, #4294967295
 8003ef4:	6878      	ldr	r0, [r7, #4]
 8003ef6:	f7ff ffe7 	bl	8003ec8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003efa:	e7fe      	b.n	8003efa <_exit+0x12>

08003efc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b086      	sub	sp, #24
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	60f8      	str	r0, [r7, #12]
 8003f04:	60b9      	str	r1, [r7, #8]
 8003f06:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f08:	2300      	movs	r3, #0
 8003f0a:	617b      	str	r3, [r7, #20]
 8003f0c:	e00a      	b.n	8003f24 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003f0e:	f3af 8000 	nop.w
 8003f12:	4601      	mov	r1, r0
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	1c5a      	adds	r2, r3, #1
 8003f18:	60ba      	str	r2, [r7, #8]
 8003f1a:	b2ca      	uxtb	r2, r1
 8003f1c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	3301      	adds	r3, #1
 8003f22:	617b      	str	r3, [r7, #20]
 8003f24:	697a      	ldr	r2, [r7, #20]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	dbf0      	blt.n	8003f0e <_read+0x12>
	}

return len;
 8003f2c:	687b      	ldr	r3, [r7, #4]
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3718      	adds	r7, #24
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}

08003f36 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003f36:	b580      	push	{r7, lr}
 8003f38:	b086      	sub	sp, #24
 8003f3a:	af00      	add	r7, sp, #0
 8003f3c:	60f8      	str	r0, [r7, #12]
 8003f3e:	60b9      	str	r1, [r7, #8]
 8003f40:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f42:	2300      	movs	r3, #0
 8003f44:	617b      	str	r3, [r7, #20]
 8003f46:	e009      	b.n	8003f5c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	1c5a      	adds	r2, r3, #1
 8003f4c:	60ba      	str	r2, [r7, #8]
 8003f4e:	781b      	ldrb	r3, [r3, #0]
 8003f50:	4618      	mov	r0, r3
 8003f52:	f000 f965 	bl	8004220 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	3301      	adds	r3, #1
 8003f5a:	617b      	str	r3, [r7, #20]
 8003f5c:	697a      	ldr	r2, [r7, #20]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	429a      	cmp	r2, r3
 8003f62:	dbf1      	blt.n	8003f48 <_write+0x12>
	}
	return len;
 8003f64:	687b      	ldr	r3, [r7, #4]
}
 8003f66:	4618      	mov	r0, r3
 8003f68:	3718      	adds	r7, #24
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}

08003f6e <_close>:

int _close(int file)
{
 8003f6e:	b480      	push	{r7}
 8003f70:	b083      	sub	sp, #12
 8003f72:	af00      	add	r7, sp, #0
 8003f74:	6078      	str	r0, [r7, #4]
	return -1;
 8003f76:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	370c      	adds	r7, #12
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f84:	4770      	bx	lr

08003f86 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003f86:	b480      	push	{r7}
 8003f88:	b083      	sub	sp, #12
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	6078      	str	r0, [r7, #4]
 8003f8e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003f96:	605a      	str	r2, [r3, #4]
	return 0;
 8003f98:	2300      	movs	r3, #0
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	370c      	adds	r7, #12
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa4:	4770      	bx	lr

08003fa6 <_isatty>:

int _isatty(int file)
{
 8003fa6:	b480      	push	{r7}
 8003fa8:	b083      	sub	sp, #12
 8003faa:	af00      	add	r7, sp, #0
 8003fac:	6078      	str	r0, [r7, #4]
	return 1;
 8003fae:	2301      	movs	r3, #1
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	370c      	adds	r7, #12
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr

08003fbc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b085      	sub	sp, #20
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	60f8      	str	r0, [r7, #12]
 8003fc4:	60b9      	str	r1, [r7, #8]
 8003fc6:	607a      	str	r2, [r7, #4]
	return 0;
 8003fc8:	2300      	movs	r3, #0
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	3714      	adds	r7, #20
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr
	...

08003fd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b086      	sub	sp, #24
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003fe0:	4a14      	ldr	r2, [pc, #80]	; (8004034 <_sbrk+0x5c>)
 8003fe2:	4b15      	ldr	r3, [pc, #84]	; (8004038 <_sbrk+0x60>)
 8003fe4:	1ad3      	subs	r3, r2, r3
 8003fe6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003fec:	4b13      	ldr	r3, [pc, #76]	; (800403c <_sbrk+0x64>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d102      	bne.n	8003ffa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003ff4:	4b11      	ldr	r3, [pc, #68]	; (800403c <_sbrk+0x64>)
 8003ff6:	4a12      	ldr	r2, [pc, #72]	; (8004040 <_sbrk+0x68>)
 8003ff8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003ffa:	4b10      	ldr	r3, [pc, #64]	; (800403c <_sbrk+0x64>)
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	4413      	add	r3, r2
 8004002:	693a      	ldr	r2, [r7, #16]
 8004004:	429a      	cmp	r2, r3
 8004006:	d207      	bcs.n	8004018 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004008:	f014 f87c 	bl	8018104 <__errno>
 800400c:	4603      	mov	r3, r0
 800400e:	220c      	movs	r2, #12
 8004010:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004012:	f04f 33ff 	mov.w	r3, #4294967295
 8004016:	e009      	b.n	800402c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004018:	4b08      	ldr	r3, [pc, #32]	; (800403c <_sbrk+0x64>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800401e:	4b07      	ldr	r3, [pc, #28]	; (800403c <_sbrk+0x64>)
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	4413      	add	r3, r2
 8004026:	4a05      	ldr	r2, [pc, #20]	; (800403c <_sbrk+0x64>)
 8004028:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800402a:	68fb      	ldr	r3, [r7, #12]
}
 800402c:	4618      	mov	r0, r3
 800402e:	3718      	adds	r7, #24
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}
 8004034:	20050000 	.word	0x20050000
 8004038:	00000400 	.word	0x00000400
 800403c:	200004cc 	.word	0x200004cc
 8004040:	2004a730 	.word	0x2004a730

08004044 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004044:	b480      	push	{r7}
 8004046:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004048:	4b06      	ldr	r3, [pc, #24]	; (8004064 <SystemInit+0x20>)
 800404a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800404e:	4a05      	ldr	r2, [pc, #20]	; (8004064 <SystemInit+0x20>)
 8004050:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004054:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004058:	bf00      	nop
 800405a:	46bd      	mov	sp, r7
 800405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004060:	4770      	bx	lr
 8004062:	bf00      	nop
 8004064:	e000ed00 	.word	0xe000ed00

08004068 <uiDisplayBasic>:
#include <stdio.h>

/**
 * Display basic UI information.
 */
void uiDisplayBasic(void) {
 8004068:	b580      	push	{r7, lr}
 800406a:	b082      	sub	sp, #8
 800406c:	af02      	add	r7, sp, #8

	LCD_Clear(LCD_COLOR_WHITE);
 800406e:	f04f 30ff 	mov.w	r0, #4294967295
 8004072:	f000 fabd 	bl	80045f0 <LCD_Clear>

	//LCD_SetTextColor(LCD_COLOR_BLUE);
	//LCD_FillRect(0, 0, LCD_GetXSize(), 90);

	LCD_SetStrokeColor(LCD_COLOR_BLACK);
 8004076:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800407a:	f000 fa3f 	bl	80044fc <LCD_SetStrokeColor>
	LCD_SetBackColor(LCD_COLOR_WHITE);
 800407e:	f04f 30ff 	mov.w	r0, #4294967295
 8004082:	f000 fa6b 	bl	800455c <LCD_SetBackColor>
	LCD_SetFont(&Font24);
 8004086:	4810      	ldr	r0, [pc, #64]	; (80040c8 <uiDisplayBasic+0x60>)
 8004088:	f000 fa80 	bl	800458c <LCD_SetFont>
	LCD_DrawString(0, 0, (uint8_t*) "SIA 2021 - RT AUDIO FX", CENTER_MODE, true);
 800408c:	2301      	movs	r3, #1
 800408e:	9300      	str	r3, [sp, #0]
 8004090:	2301      	movs	r3, #1
 8004092:	4a0e      	ldr	r2, [pc, #56]	; (80040cc <uiDisplayBasic+0x64>)
 8004094:	2100      	movs	r1, #0
 8004096:	2000      	movs	r0, #0
 8004098:	f000 faf2 	bl	8004680 <LCD_DrawString>

	LCD_SetFont(&Font12);
 800409c:	480c      	ldr	r0, [pc, #48]	; (80040d0 <uiDisplayBasic+0x68>)
 800409e:	f000 fa75 	bl	800458c <LCD_SetFont>
	LCD_DrawString(10, 30, (uint8_t*) "Input L =", LEFT_MODE, true);
 80040a2:	2301      	movs	r3, #1
 80040a4:	9300      	str	r3, [sp, #0]
 80040a6:	2303      	movs	r3, #3
 80040a8:	4a0a      	ldr	r2, [pc, #40]	; (80040d4 <uiDisplayBasic+0x6c>)
 80040aa:	211e      	movs	r1, #30
 80040ac:	200a      	movs	r0, #10
 80040ae:	f000 fae7 	bl	8004680 <LCD_DrawString>
	LCD_DrawString(10, 50, (uint8_t*) "Input R =", LEFT_MODE, true);
 80040b2:	2301      	movs	r3, #1
 80040b4:	9300      	str	r3, [sp, #0]
 80040b6:	2303      	movs	r3, #3
 80040b8:	4a07      	ldr	r2, [pc, #28]	; (80040d8 <uiDisplayBasic+0x70>)
 80040ba:	2132      	movs	r1, #50	; 0x32
 80040bc:	200a      	movs	r0, #10
 80040be:	f000 fadf 	bl	8004680 <LCD_DrawString>

	/* Set the LCD Text Color */
	//LCD_SetTextColor(LCD_COLOR_BLUE);
	//LCD_DrawRect(10, 100, LCD_GetXSize() - 20, LCD_GetYSize() - 110);
	//LCD_DrawRect(11, 101, LCD_GetXSize() - 22, LCD_GetYSize() - 112);
}
 80040c2:	bf00      	nop
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}
 80040c8:	20000024 	.word	0x20000024
 80040cc:	0801b684 	.word	0x0801b684
 80040d0:	2000001c 	.word	0x2000001c
 80040d4:	0801b69c 	.word	0x0801b69c
 80040d8:	0801b6a8 	.word	0x0801b6a8

080040dc <uiDisplayInputLevel>:


/**
 * Displays line or microphones input level on the LCD.
 */
void uiDisplayInputLevel(double inputLevelL, double inputLevelR) {
 80040dc:	b580      	push	{r7, lr}
 80040de:	b096      	sub	sp, #88	; 0x58
 80040e0:	af02      	add	r7, sp, #8
 80040e2:	ed87 0b02 	vstr	d0, [r7, #8]
 80040e6:	ed87 1b00 	vstr	d1, [r7]

	uint8_t buf[50];

	LCD_SetStrokeColor(LCD_COLOR_BLACK);
 80040ea:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80040ee:	f000 fa05 	bl	80044fc <LCD_SetStrokeColor>
	LCD_SetBackColor(LCD_COLOR_WHITE);
 80040f2:	f04f 30ff 	mov.w	r0, #4294967295
 80040f6:	f000 fa31 	bl	800455c <LCD_SetBackColor>
	LCD_SetFont(&Font12);
 80040fa:	483a      	ldr	r0, [pc, #232]	; (80041e4 <uiDisplayInputLevel+0x108>)
 80040fc:	f000 fa46 	bl	800458c <LCD_SetFont>
	 LCD_DisplayStringAt(90, 30, (uint8_t *)buf, LEFT_MODE);

	 sprintf((char *)buf, "%d     ", (int)(inputLevelR));
	 LCD_DisplayStringAt(90, 50, (uint8_t *)buf, LEFT_MODE);*/

	if (inputLevelL > 0) {
 8004100:	f04f 0200 	mov.w	r2, #0
 8004104:	f04f 0300 	mov.w	r3, #0
 8004108:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800410c:	f7fc fd24 	bl	8000b58 <__aeabi_dcmpgt>
 8004110:	4603      	mov	r3, r0
 8004112:	2b00      	cmp	r3, #0
 8004114:	d023      	beq.n	800415e <uiDisplayInputLevel+0x82>
		int lvl_db = (int) (20. * log10(inputLevelL));
 8004116:	ed97 0b02 	vldr	d0, [r7, #8]
 800411a:	f016 ffad 	bl	801b078 <log10>
 800411e:	ec51 0b10 	vmov	r0, r1, d0
 8004122:	f04f 0200 	mov.w	r2, #0
 8004126:	4b30      	ldr	r3, [pc, #192]	; (80041e8 <uiDisplayInputLevel+0x10c>)
 8004128:	f7fc fa86 	bl	8000638 <__aeabi_dmul>
 800412c:	4602      	mov	r2, r0
 800412e:	460b      	mov	r3, r1
 8004130:	4610      	mov	r0, r2
 8004132:	4619      	mov	r1, r3
 8004134:	f7fc fd30 	bl	8000b98 <__aeabi_d2iz>
 8004138:	4603      	mov	r3, r0
 800413a:	64fb      	str	r3, [r7, #76]	; 0x4c
		sprintf((char*) buf, "%d dB   ", lvl_db);
 800413c:	f107 0314 	add.w	r3, r7, #20
 8004140:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004142:	492a      	ldr	r1, [pc, #168]	; (80041ec <uiDisplayInputLevel+0x110>)
 8004144:	4618      	mov	r0, r3
 8004146:	f014 fdf5 	bl	8018d34 <siprintf>
		LCD_DrawString(90, 30, (uint8_t*) buf, LEFT_MODE, true);
 800414a:	f107 0214 	add.w	r2, r7, #20
 800414e:	2301      	movs	r3, #1
 8004150:	9300      	str	r3, [sp, #0]
 8004152:	2303      	movs	r3, #3
 8004154:	211e      	movs	r1, #30
 8004156:	205a      	movs	r0, #90	; 0x5a
 8004158:	f000 fa92 	bl	8004680 <LCD_DrawString>
 800415c:	e007      	b.n	800416e <uiDisplayInputLevel+0x92>
	} else
		LCD_DrawString(90, 30, (uint8_t*) "-inf dB", LEFT_MODE, true);
 800415e:	2301      	movs	r3, #1
 8004160:	9300      	str	r3, [sp, #0]
 8004162:	2303      	movs	r3, #3
 8004164:	4a22      	ldr	r2, [pc, #136]	; (80041f0 <uiDisplayInputLevel+0x114>)
 8004166:	211e      	movs	r1, #30
 8004168:	205a      	movs	r0, #90	; 0x5a
 800416a:	f000 fa89 	bl	8004680 <LCD_DrawString>

	if (inputLevelR > 0) {
 800416e:	f04f 0200 	mov.w	r2, #0
 8004172:	f04f 0300 	mov.w	r3, #0
 8004176:	e9d7 0100 	ldrd	r0, r1, [r7]
 800417a:	f7fc fced 	bl	8000b58 <__aeabi_dcmpgt>
 800417e:	4603      	mov	r3, r0
 8004180:	2b00      	cmp	r3, #0
 8004182:	d023      	beq.n	80041cc <uiDisplayInputLevel+0xf0>
		int lvl_db = (int) (20. * log10(inputLevelR));
 8004184:	ed97 0b00 	vldr	d0, [r7]
 8004188:	f016 ff76 	bl	801b078 <log10>
 800418c:	ec51 0b10 	vmov	r0, r1, d0
 8004190:	f04f 0200 	mov.w	r2, #0
 8004194:	4b14      	ldr	r3, [pc, #80]	; (80041e8 <uiDisplayInputLevel+0x10c>)
 8004196:	f7fc fa4f 	bl	8000638 <__aeabi_dmul>
 800419a:	4602      	mov	r2, r0
 800419c:	460b      	mov	r3, r1
 800419e:	4610      	mov	r0, r2
 80041a0:	4619      	mov	r1, r3
 80041a2:	f7fc fcf9 	bl	8000b98 <__aeabi_d2iz>
 80041a6:	4603      	mov	r3, r0
 80041a8:	64bb      	str	r3, [r7, #72]	; 0x48
		sprintf((char*) buf, "%d dB   ", lvl_db);
 80041aa:	f107 0314 	add.w	r3, r7, #20
 80041ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80041b0:	490e      	ldr	r1, [pc, #56]	; (80041ec <uiDisplayInputLevel+0x110>)
 80041b2:	4618      	mov	r0, r3
 80041b4:	f014 fdbe 	bl	8018d34 <siprintf>
		LCD_DrawString(90, 50, (uint8_t*) buf, LEFT_MODE, true);
 80041b8:	f107 0214 	add.w	r2, r7, #20
 80041bc:	2301      	movs	r3, #1
 80041be:	9300      	str	r3, [sp, #0]
 80041c0:	2303      	movs	r3, #3
 80041c2:	2132      	movs	r1, #50	; 0x32
 80041c4:	205a      	movs	r0, #90	; 0x5a
 80041c6:	f000 fa5b 	bl	8004680 <LCD_DrawString>
	} else
		LCD_DrawString(90, 50, (uint8_t*) "-inf dB", LEFT_MODE, true);

}
 80041ca:	e007      	b.n	80041dc <uiDisplayInputLevel+0x100>
		LCD_DrawString(90, 50, (uint8_t*) "-inf dB", LEFT_MODE, true);
 80041cc:	2301      	movs	r3, #1
 80041ce:	9300      	str	r3, [sp, #0]
 80041d0:	2303      	movs	r3, #3
 80041d2:	4a07      	ldr	r2, [pc, #28]	; (80041f0 <uiDisplayInputLevel+0x114>)
 80041d4:	2132      	movs	r1, #50	; 0x32
 80041d6:	205a      	movs	r0, #90	; 0x5a
 80041d8:	f000 fa52 	bl	8004680 <LCD_DrawString>
}
 80041dc:	bf00      	nop
 80041de:	3750      	adds	r7, #80	; 0x50
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}
 80041e4:	2000001c 	.word	0x2000001c
 80041e8:	40340000 	.word	0x40340000
 80041ec:	0801b6b4 	.word	0x0801b6b4
 80041f0:	0801b6c0 	.word	0x0801b6c0

080041f4 <LED_Toggle>:
void LED_Off(){

	HAL_GPIO_WritePin(GPIOI, LD_GREEN_Pin, GPIO_PIN_RESET);
}

void LED_Toggle(){
 80041f4:	b580      	push	{r7, lr}
 80041f6:	af00      	add	r7, sp, #0

	HAL_GPIO_TogglePin(GPIOI, LD_GREEN_Pin);
 80041f8:	2102      	movs	r1, #2
 80041fa:	4802      	ldr	r0, [pc, #8]	; (8004204 <LED_Toggle+0x10>)
 80041fc:	f003 fe19 	bl	8007e32 <HAL_GPIO_TogglePin>

}
 8004200:	bf00      	nop
 8004202:	bd80      	pop	{r7, pc}
 8004204:	40022000 	.word	0x40022000

08004208 <PB_GetState>:
// --------------------------------- onboard blue button ------------------------------

/**
 * @return GPIO_PIN_SET or GPIO_PIN_RESET depending on the state of the onboard blue (push) button
 */
uint32_t PB_GetState(){
 8004208:	b580      	push	{r7, lr}
 800420a:	af00      	add	r7, sp, #0

  return HAL_GPIO_ReadPin(BLUE_BTN_GPIO_Port, BLUE_BTN_Pin);
 800420c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004210:	4802      	ldr	r0, [pc, #8]	; (800421c <PB_GetState+0x14>)
 8004212:	f003 fddd 	bl	8007dd0 <HAL_GPIO_ReadPin>
 8004216:	4603      	mov	r3, r0

}
 8004218:	4618      	mov	r0, r3
 800421a:	bd80      	pop	{r7, pc}
 800421c:	40022000 	.word	0x40022000

08004220 <__io_putchar>:
 * of the STLink (USB) programming port, it is enough to open a serial terminal on the host PC
 * (e.g., Hyperterminal or Putty on Windows, screen on Linux or Macos) to obtain a debugging console.
 * On linux/MacOS, this VCP shows up as /dev/ttyUSBSomething (ls /dev etc will provide you with its real name),
 * while on Windows, it's COMSOmething (from COM1 to ...).
 */
int __io_putchar(int ch){
 8004220:	b580      	push	{r7, lr}
 8004222:	b082      	sub	sp, #8
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]

	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF); // beware blocking call! TODO => use DMA
 8004228:	1d39      	adds	r1, r7, #4
 800422a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800422e:	2201      	movs	r2, #1
 8004230:	4803      	ldr	r0, [pc, #12]	; (8004240 <__io_putchar+0x20>)
 8004232:	f00c f8a3 	bl	801037c <HAL_UART_Transmit>
	return ch;
 8004236:	687b      	ldr	r3, [r7, #4]
}
 8004238:	4618      	mov	r0, r3
 800423a:	3708      	adds	r7, #8
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}
 8004240:	20009c50 	.word	0x20009c50

08004244 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b08a      	sub	sp, #40	; 0x28
 8004248:	af04      	add	r7, sp, #16
 800424a:	60f8      	str	r0, [r7, #12]
 800424c:	4608      	mov	r0, r1
 800424e:	4611      	mov	r1, r2
 8004250:	461a      	mov	r2, r3
 8004252:	4603      	mov	r3, r0
 8004254:	72fb      	strb	r3, [r7, #11]
 8004256:	460b      	mov	r3, r1
 8004258:	813b      	strh	r3, [r7, #8]
 800425a:	4613      	mov	r3, r2
 800425c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800425e:	2300      	movs	r3, #0
 8004260:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8004262:	7afb      	ldrb	r3, [r7, #11]
 8004264:	b299      	uxth	r1, r3
 8004266:	88f8      	ldrh	r0, [r7, #6]
 8004268:	893a      	ldrh	r2, [r7, #8]
 800426a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800426e:	9302      	str	r3, [sp, #8]
 8004270:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004272:	9301      	str	r3, [sp, #4]
 8004274:	6a3b      	ldr	r3, [r7, #32]
 8004276:	9300      	str	r3, [sp, #0]
 8004278:	4603      	mov	r3, r0
 800427a:	68f8      	ldr	r0, [r7, #12]
 800427c:	f005 fd50 	bl	8009d20 <HAL_I2C_Mem_Read>
 8004280:	4603      	mov	r3, r0
 8004282:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8004284:	7dfb      	ldrb	r3, [r7, #23]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d004      	beq.n	8004294 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 800428a:	7afb      	ldrb	r3, [r7, #11]
 800428c:	4619      	mov	r1, r3
 800428e:	68f8      	ldr	r0, [r7, #12]
 8004290:	f000 f832 	bl	80042f8 <I2Cx_Error>
  }
  return status;
 8004294:	7dfb      	ldrb	r3, [r7, #23]
}
 8004296:	4618      	mov	r0, r3
 8004298:	3718      	adds	r7, #24
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}

0800429e <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 800429e:	b580      	push	{r7, lr}
 80042a0:	b08a      	sub	sp, #40	; 0x28
 80042a2:	af04      	add	r7, sp, #16
 80042a4:	60f8      	str	r0, [r7, #12]
 80042a6:	4608      	mov	r0, r1
 80042a8:	4611      	mov	r1, r2
 80042aa:	461a      	mov	r2, r3
 80042ac:	4603      	mov	r3, r0
 80042ae:	72fb      	strb	r3, [r7, #11]
 80042b0:	460b      	mov	r3, r1
 80042b2:	813b      	strh	r3, [r7, #8]
 80042b4:	4613      	mov	r3, r2
 80042b6:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80042b8:	2300      	movs	r3, #0
 80042ba:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80042bc:	7afb      	ldrb	r3, [r7, #11]
 80042be:	b299      	uxth	r1, r3
 80042c0:	88f8      	ldrh	r0, [r7, #6]
 80042c2:	893a      	ldrh	r2, [r7, #8]
 80042c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80042c8:	9302      	str	r3, [sp, #8]
 80042ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80042cc:	9301      	str	r3, [sp, #4]
 80042ce:	6a3b      	ldr	r3, [r7, #32]
 80042d0:	9300      	str	r3, [sp, #0]
 80042d2:	4603      	mov	r3, r0
 80042d4:	68f8      	ldr	r0, [r7, #12]
 80042d6:	f005 fc0f 	bl	8009af8 <HAL_I2C_Mem_Write>
 80042da:	4603      	mov	r3, r0
 80042dc:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80042de:	7dfb      	ldrb	r3, [r7, #23]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d004      	beq.n	80042ee <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 80042e4:	7afb      	ldrb	r3, [r7, #11]
 80042e6:	4619      	mov	r1, r3
 80042e8:	68f8      	ldr	r0, [r7, #12]
 80042ea:	f000 f805 	bl	80042f8 <I2Cx_Error>
  }
  return status;
 80042ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	3718      	adds	r7, #24
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}

080042f8 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b082      	sub	sp, #8
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
 8004300:	460b      	mov	r3, r1
 8004302:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8004304:	6878      	ldr	r0, [r7, #4]
 8004306:	f005 fbc7 	bl	8009a98 <HAL_I2C_DeInit>

  /* Re-Initialize the I2C communication bus */
  HAL_I2C_Init(i2c_handler);
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f005 fb34 	bl	8009978 <HAL_I2C_Init>
}
 8004310:	bf00      	nop
 8004312:	3708      	adds	r7, #8
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}

08004318 <AUDIO_I2C_Write>:
  * Writes a single CONTROL data to the audio codec over the I2C bus.
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void AUDIO_I2C_Write(uint16_t Reg, uint16_t Value){
 8004318:	b580      	push	{r7, lr}
 800431a:	b086      	sub	sp, #24
 800431c:	af02      	add	r7, sp, #8
 800431e:	4603      	mov	r3, r0
 8004320:	460a      	mov	r2, r1
 8004322:	80fb      	strh	r3, [r7, #6]
 8004324:	4613      	mov	r3, r2
 8004326:	80bb      	strh	r3, [r7, #4]

  uint16_t tmp = Value;
 8004328:	88bb      	ldrh	r3, [r7, #4]
 800432a:	81fb      	strh	r3, [r7, #14]

  Value = ((uint16_t)(tmp >> 8) & 0x00FF);
 800432c:	89fb      	ldrh	r3, [r7, #14]
 800432e:	0a1b      	lsrs	r3, r3, #8
 8004330:	b29b      	uxth	r3, r3
 8004332:	80bb      	strh	r3, [r7, #4]

  Value |= ((uint16_t)(tmp << 8)& 0xFF00);
 8004334:	89fb      	ldrh	r3, [r7, #14]
 8004336:	021b      	lsls	r3, r3, #8
 8004338:	b29b      	uxth	r3, r3
 800433a:	b21a      	sxth	r2, r3
 800433c:	88bb      	ldrh	r3, [r7, #4]
 800433e:	b21b      	sxth	r3, r3
 8004340:	4313      	orrs	r3, r2
 8004342:	b21b      	sxth	r3, r3
 8004344:	b29b      	uxth	r3, r3
 8004346:	80bb      	strh	r3, [r7, #4]

  I2Cx_WriteMultiple(&hi2c3, AUDIO_I2C_ADDRESS, Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&Value, 2);
 8004348:	88fa      	ldrh	r2, [r7, #6]
 800434a:	2302      	movs	r3, #2
 800434c:	9301      	str	r3, [sp, #4]
 800434e:	1d3b      	adds	r3, r7, #4
 8004350:	9300      	str	r3, [sp, #0]
 8004352:	2302      	movs	r3, #2
 8004354:	2134      	movs	r1, #52	; 0x34
 8004356:	4803      	ldr	r0, [pc, #12]	; (8004364 <AUDIO_I2C_Write+0x4c>)
 8004358:	f7ff ffa1 	bl	800429e <I2Cx_WriteMultiple>
  //I2Cx_WriteMultiple(&hi2c3, Addr, Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&Value, 2);
}
 800435c:	bf00      	nop
 800435e:	3710      	adds	r7, #16
 8004360:	46bd      	mov	sp, r7
 8004362:	bd80      	pop	{r7, pc}
 8004364:	200096f8 	.word	0x200096f8

08004368 <AUDIO_I2C_Read>:
/**
  * Reads a single CONTROL data from the audio codec over the I2C bus.
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint16_t AUDIO_I2C_Read(uint16_t Reg){
 8004368:	b580      	push	{r7, lr}
 800436a:	b086      	sub	sp, #24
 800436c:	af02      	add	r7, sp, #8
 800436e:	4603      	mov	r3, r0
 8004370:	80fb      	strh	r3, [r7, #6]

  uint16_t read_value = 0, tmp = 0;
 8004372:	2300      	movs	r3, #0
 8004374:	81bb      	strh	r3, [r7, #12]
 8004376:	2300      	movs	r3, #0
 8004378:	81fb      	strh	r3, [r7, #14]

  I2Cx_ReadMultiple(&hi2c3, AUDIO_I2C_ADDRESS, Reg, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&read_value, 2);
 800437a:	88fa      	ldrh	r2, [r7, #6]
 800437c:	2302      	movs	r3, #2
 800437e:	9301      	str	r3, [sp, #4]
 8004380:	f107 030c 	add.w	r3, r7, #12
 8004384:	9300      	str	r3, [sp, #0]
 8004386:	2302      	movs	r3, #2
 8004388:	2134      	movs	r1, #52	; 0x34
 800438a:	480b      	ldr	r0, [pc, #44]	; (80043b8 <AUDIO_I2C_Read+0x50>)
 800438c:	f7ff ff5a 	bl	8004244 <I2Cx_ReadMultiple>
  //I2Cx_ReadMultiple(&hi2c3, Addr, Reg, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&read_value, 2);

  tmp = ((uint16_t)(read_value >> 8) & 0x00FF);
 8004390:	89bb      	ldrh	r3, [r7, #12]
 8004392:	0a1b      	lsrs	r3, r3, #8
 8004394:	81fb      	strh	r3, [r7, #14]

  tmp |= ((uint16_t)(read_value << 8)& 0xFF00);
 8004396:	89bb      	ldrh	r3, [r7, #12]
 8004398:	021b      	lsls	r3, r3, #8
 800439a:	b29b      	uxth	r3, r3
 800439c:	b21a      	sxth	r2, r3
 800439e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80043a2:	4313      	orrs	r3, r2
 80043a4:	b21b      	sxth	r3, r3
 80043a6:	81fb      	strh	r3, [r7, #14]

  read_value = tmp;
 80043a8:	89fb      	ldrh	r3, [r7, #14]
 80043aa:	81bb      	strh	r3, [r7, #12]

  return read_value;
 80043ac:	89bb      	ldrh	r3, [r7, #12]
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3710      	adds	r7, #16
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}
 80043b6:	bf00      	nop
 80043b8:	200096f8 	.word	0x200096f8

080043bc <TS_I2C_Write>:
  * Writes a single control data to the touchscreen controller over the I2C bus.
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_I2C_Write(uint8_t Reg, uint8_t Value){
 80043bc:	b580      	push	{r7, lr}
 80043be:	b084      	sub	sp, #16
 80043c0:	af02      	add	r7, sp, #8
 80043c2:	4603      	mov	r3, r0
 80043c4:	460a      	mov	r2, r1
 80043c6:	71fb      	strb	r3, [r7, #7]
 80043c8:	4613      	mov	r3, r2
 80043ca:	71bb      	strb	r3, [r7, #6]

  I2Cx_WriteMultiple(&hi2c3, TS_I2C_ADDRESS, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 80043cc:	79fb      	ldrb	r3, [r7, #7]
 80043ce:	b29a      	uxth	r2, r3
 80043d0:	2301      	movs	r3, #1
 80043d2:	9301      	str	r3, [sp, #4]
 80043d4:	1dbb      	adds	r3, r7, #6
 80043d6:	9300      	str	r3, [sp, #0]
 80043d8:	2301      	movs	r3, #1
 80043da:	2170      	movs	r1, #112	; 0x70
 80043dc:	4803      	ldr	r0, [pc, #12]	; (80043ec <TS_I2C_Write+0x30>)
 80043de:	f7ff ff5e 	bl	800429e <I2Cx_WriteMultiple>

}
 80043e2:	bf00      	nop
 80043e4:	3708      	adds	r7, #8
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}
 80043ea:	bf00      	nop
 80043ec:	200096f8 	.word	0x200096f8

080043f0 <SCB_CleanDCache>:
/**
  \brief   Clean D-Cache
  \details Cleans D-Cache
  */
__STATIC_INLINE void SCB_CleanDCache (void)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b085      	sub	sp, #20
 80043f4:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

     SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80043f6:	4b1b      	ldr	r3, [pc, #108]	; (8004464 <SCB_CleanDCache+0x74>)
 80043f8:	2200      	movs	r2, #0
 80043fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80043fe:	f3bf 8f4f 	dsb	sy
}
 8004402:	bf00      	nop
   __DSB();

    ccsidr = SCB->CCSIDR;
 8004404:	4b17      	ldr	r3, [pc, #92]	; (8004464 <SCB_CleanDCache+0x74>)
 8004406:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800440a:	607b      	str	r3, [r7, #4]

                                            /* clean D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	0b5b      	lsrs	r3, r3, #13
 8004410:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8004414:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	08db      	lsrs	r3, r3, #3
 800441a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800441e:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCCSW = (((sets << SCB_DCCSW_SET_Pos) & SCB_DCCSW_SET_Msk) |
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	015a      	lsls	r2, r3, #5
 8004424:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8004428:	4013      	ands	r3, r2
                      ((ways << SCB_DCCSW_WAY_Pos) & SCB_DCCSW_WAY_Msk)  );
 800442a:	68ba      	ldr	r2, [r7, #8]
 800442c:	0792      	lsls	r2, r2, #30
        SCB->DCCSW = (((sets << SCB_DCCSW_SET_Pos) & SCB_DCCSW_SET_Msk) |
 800442e:	490d      	ldr	r1, [pc, #52]	; (8004464 <SCB_CleanDCache+0x74>)
 8004430:	4313      	orrs	r3, r2
 8004432:	f8c1 326c 	str.w	r3, [r1, #620]	; 0x26c
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	1e5a      	subs	r2, r3, #1
 800443a:	60ba      	str	r2, [r7, #8]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d1ef      	bne.n	8004420 <SCB_CleanDCache+0x30>
    } while(sets-- != 0U);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	1e5a      	subs	r2, r3, #1
 8004444:	60fa      	str	r2, [r7, #12]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d1e5      	bne.n	8004416 <SCB_CleanDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 800444a:	f3bf 8f4f 	dsb	sy
}
 800444e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004450:	f3bf 8f6f 	isb	sy
}
 8004454:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8004456:	bf00      	nop
 8004458:	3714      	adds	r7, #20
 800445a:	46bd      	mov	sp, r7
 800445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004460:	4770      	bx	lr
 8004462:	bf00      	nop
 8004464:	e000ed00 	.word	0xe000ed00

08004468 <LCD_Init>:

/**
 * @brief  Initializes the LCD.
 * @retval LCD state
 */
void LCD_Init(void){
 8004468:	b580      	push	{r7, lr}
 800446a:	af00      	add	r7, sp, #0

	/* check if FB has a pixel format coherent with PF_565 define */
#ifdef PF_565
	if (hltdc.LayerCfg[0].PixelFormat != LTDC_PIXEL_FORMAT_RGB565) Error("Pixel Format Error: should be RGB565, check MX_LTDC_Init() or undefine PF_565");
 800446c:	4b0f      	ldr	r3, [pc, #60]	; (80044ac <LCD_Init+0x44>)
 800446e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004470:	2b02      	cmp	r3, #2
 8004472:	d002      	beq.n	800447a <LCD_Init+0x12>
 8004474:	480e      	ldr	r0, [pc, #56]	; (80044b0 <LCD_Init+0x48>)
 8004476:	f7fe fbc7 	bl	8002c08 <Error>
#else
	if (hltdc.LayerCfg[0].PixelFormat == LTDC_PIXEL_FORMAT_RGB565) Error("Pixel Format Error: should be RGB888, check MX_LTDC_Init() or define PF_565");
#endif

#ifndef FB_IN_SDRAM
	HAL_LTDC_SetAddress(&hltdc, frameBuf0, 0);
 800447a:	4b0e      	ldr	r3, [pc, #56]	; (80044b4 <LCD_Init+0x4c>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	2200      	movs	r2, #0
 8004480:	4619      	mov	r1, r3
 8004482:	480a      	ldr	r0, [pc, #40]	; (80044ac <LCD_Init+0x44>)
 8004484:	f006 f928 	bl	800a6d8 <HAL_LTDC_SetAddress>
#endif

	LCD_DisplayOn();
 8004488:	f000 f81a 	bl	80044c0 <LCD_DisplayOn>

	LCD_SetFont(&LCD_DEFAULT_FONT);
 800448c:	480a      	ldr	r0, [pc, #40]	; (80044b8 <LCD_Init+0x50>)
 800448e:	f000 f87d 	bl	800458c <LCD_SetFont>

	LCD_SetBackColor(LCD_COLOR_WHITE);
 8004492:	f04f 30ff 	mov.w	r0, #4294967295
 8004496:	f000 f861 	bl	800455c <LCD_SetBackColor>
	LCD_SetStrokeColor(LCD_COLOR_BLACK);
 800449a:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800449e:	f000 f82d 	bl	80044fc <LCD_SetStrokeColor>
	LCD_SetFillColor(LCD_COLOR_RED);
 80044a2:	4806      	ldr	r0, [pc, #24]	; (80044bc <LCD_Init+0x54>)
 80044a4:	f000 f842 	bl	800452c <LCD_SetFillColor>


}
 80044a8:	bf00      	nop
 80044aa:	bd80      	pop	{r7, pc}
 80044ac:	20009b10 	.word	0x20009b10
 80044b0:	0801b6c8 	.word	0x0801b6c8
 80044b4:	20000014 	.word	0x20000014
 80044b8:	20000024 	.word	0x20000024
 80044bc:	ffff0000 	.word	0xffff0000

080044c0 <LCD_DisplayOn>:
/**
 * @brief  Enables the display.
 * @retval None
 */
void LCD_DisplayOn(void)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	af00      	add	r7, sp, #0
	__HAL_LTDC_ENABLE(&hltdc);
 80044c4:	4b0a      	ldr	r3, [pc, #40]	; (80044f0 <LCD_DisplayOn+0x30>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	699a      	ldr	r2, [r3, #24]
 80044ca:	4b09      	ldr	r3, [pc, #36]	; (80044f0 <LCD_DisplayOn+0x30>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f042 0201 	orr.w	r2, r2, #1
 80044d2:	619a      	str	r2, [r3, #24]
	HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 80044d4:	2201      	movs	r2, #1
 80044d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80044da:	4806      	ldr	r0, [pc, #24]	; (80044f4 <LCD_DisplayOn+0x34>)
 80044dc:	f003 fc90 	bl	8007e00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 80044e0:	2201      	movs	r2, #1
 80044e2:	2108      	movs	r1, #8
 80044e4:	4804      	ldr	r0, [pc, #16]	; (80044f8 <LCD_DisplayOn+0x38>)
 80044e6:	f003 fc8b 	bl	8007e00 <HAL_GPIO_WritePin>
}
 80044ea:	bf00      	nop
 80044ec:	bd80      	pop	{r7, pc}
 80044ee:	bf00      	nop
 80044f0:	20009b10 	.word	0x20009b10
 80044f4:	40022000 	.word	0x40022000
 80044f8:	40022800 	.word	0x40022800

080044fc <LCD_SetStrokeColor>:
/**
 * @brief  Sets the LCD stroke (and text) color.
 * @param  Color: Text color code ARGB(8-8-8-8)
 */
void LCD_SetStrokeColor(uint32_t Color8888)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b082      	sub	sp, #8
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
	StrokeColor = Color8888;
 8004504:	4a07      	ldr	r2, [pc, #28]	; (8004524 <LCD_SetStrokeColor+0x28>)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6013      	str	r3, [r2, #0]
#ifdef PF_565
	StrokeColor565 = ARGB888ToRGB565(StrokeColor);
 800450a:	4b06      	ldr	r3, [pc, #24]	; (8004524 <LCD_SetStrokeColor+0x28>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4618      	mov	r0, r3
 8004510:	f000 fa2c 	bl	800496c <ARGB888ToRGB565>
 8004514:	4603      	mov	r3, r0
 8004516:	461a      	mov	r2, r3
 8004518:	4b03      	ldr	r3, [pc, #12]	; (8004528 <LCD_SetStrokeColor+0x2c>)
 800451a:	601a      	str	r2, [r3, #0]
#endif
}
 800451c:	bf00      	nop
 800451e:	3708      	adds	r7, #8
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}
 8004524:	200004d0 	.word	0x200004d0
 8004528:	200004dc 	.word	0x200004dc

0800452c <LCD_SetFillColor>:
/**
 * @brief  Sets the LCD fill color.
 * @param  Color: Text color code ARGB(8-8-8-8)
 */
void LCD_SetFillColor(uint32_t Color8888)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b082      	sub	sp, #8
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
	FillColor = Color8888;
 8004534:	4a07      	ldr	r2, [pc, #28]	; (8004554 <LCD_SetFillColor+0x28>)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6013      	str	r3, [r2, #0]
#ifdef PF_565
	FillColor565 = ARGB888ToRGB565(FillColor);
 800453a:	4b06      	ldr	r3, [pc, #24]	; (8004554 <LCD_SetFillColor+0x28>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4618      	mov	r0, r3
 8004540:	f000 fa14 	bl	800496c <ARGB888ToRGB565>
 8004544:	4603      	mov	r3, r0
 8004546:	461a      	mov	r2, r3
 8004548:	4b03      	ldr	r3, [pc, #12]	; (8004558 <LCD_SetFillColor+0x2c>)
 800454a:	601a      	str	r2, [r3, #0]
#endif
}
 800454c:	bf00      	nop
 800454e:	3708      	adds	r7, #8
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}
 8004554:	200004d4 	.word	0x200004d4
 8004558:	200004e0 	.word	0x200004e0

0800455c <LCD_SetBackColor>:
 * @brief  Sets the LCD background color.
 * @param  Color: Layer background color code ARGB(8-8-8-8)
 * @retval None
 */
void LCD_SetBackColor(uint32_t Color)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b082      	sub	sp, #8
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
	BackColor = Color;
 8004564:	4a07      	ldr	r2, [pc, #28]	; (8004584 <LCD_SetBackColor+0x28>)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6013      	str	r3, [r2, #0]
#ifdef PF_565
	BackColor565 = ARGB888ToRGB565(BackColor);
 800456a:	4b06      	ldr	r3, [pc, #24]	; (8004584 <LCD_SetBackColor+0x28>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4618      	mov	r0, r3
 8004570:	f000 f9fc 	bl	800496c <ARGB888ToRGB565>
 8004574:	4603      	mov	r3, r0
 8004576:	461a      	mov	r2, r3
 8004578:	4b03      	ldr	r3, [pc, #12]	; (8004588 <LCD_SetBackColor+0x2c>)
 800457a:	601a      	str	r2, [r3, #0]
#endif
}
 800457c:	bf00      	nop
 800457e:	3708      	adds	r7, #8
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}
 8004584:	200004d8 	.word	0x200004d8
 8004588:	200004e4 	.word	0x200004e4

0800458c <LCD_SetFont>:
 * @brief  Sets the LCD text font.
 * @param  fonts: Layer font to be used
 * @retval None
 */
void LCD_SetFont(sFONT *fonts)
{
 800458c:	b480      	push	{r7}
 800458e:	b083      	sub	sp, #12
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
	pFont = fonts;
 8004594:	4a04      	ldr	r2, [pc, #16]	; (80045a8 <LCD_SetFont+0x1c>)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6013      	str	r3, [r2, #0]
}
 800459a:	bf00      	nop
 800459c:	370c      	adds	r7, #12
 800459e:	46bd      	mov	sp, r7
 80045a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a4:	4770      	bx	lr
 80045a6:	bf00      	nop
 80045a8:	200004e8 	.word	0x200004e8

080045ac <LCD_ErasePixel>:
 * @param  Xpos: X position
 * @param  Ypos: Y position
 * @retval None
 */
void LCD_ErasePixel(uint16_t Xpos, uint16_t Ypos)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b082      	sub	sp, #8
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	4603      	mov	r3, r0
 80045b4:	460a      	mov	r2, r1
 80045b6:	80fb      	strh	r3, [r7, #6]
 80045b8:	4613      	mov	r3, r2
 80045ba:	80bb      	strh	r3, [r7, #4]
	__DrawPixel(Xpos, Ypos, BACK_COLOR);
 80045bc:	4b0a      	ldr	r3, [pc, #40]	; (80045e8 <LCD_ErasePixel+0x3c>)
 80045be:	6818      	ldr	r0, [r3, #0]
 80045c0:	4b0a      	ldr	r3, [pc, #40]	; (80045ec <LCD_ErasePixel+0x40>)
 80045c2:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80045c4:	88ba      	ldrh	r2, [r7, #4]
 80045c6:	4613      	mov	r3, r2
 80045c8:	011b      	lsls	r3, r3, #4
 80045ca:	1a9b      	subs	r3, r3, r2
 80045cc:	015b      	lsls	r3, r3, #5
 80045ce:	461a      	mov	r2, r3
 80045d0:	88fb      	ldrh	r3, [r7, #6]
 80045d2:	4413      	add	r3, r2
 80045d4:	005b      	lsls	r3, r3, #1
 80045d6:	440b      	add	r3, r1
 80045d8:	b282      	uxth	r2, r0
 80045da:	801a      	strh	r2, [r3, #0]
	__CleanDCache();
 80045dc:	f7ff ff08 	bl	80043f0 <SCB_CleanDCache>
}
 80045e0:	bf00      	nop
 80045e2:	3708      	adds	r7, #8
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}
 80045e8:	200004e4 	.word	0x200004e4
 80045ec:	20009b10 	.word	0x20009b10

080045f0 <LCD_Clear>:
/**
 * @brief  Clears the whole LCD, ie fills with background color
 * @retval None
 */
void LCD_Clear()
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b082      	sub	sp, #8
 80045f4:	af02      	add	r7, sp, #8
	/* Clear the LCD */
	LL_FillBuffer((uint32_t *)(hltdc.LayerCfg[0].FBStartAdress), LCD_SCREEN_WIDTH, LCD_SCREEN_HEIGHT, 0, BackColor);
 80045f6:	4b08      	ldr	r3, [pc, #32]	; (8004618 <LCD_Clear+0x28>)
 80045f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045fa:	4618      	mov	r0, r3
 80045fc:	4b07      	ldr	r3, [pc, #28]	; (800461c <LCD_Clear+0x2c>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	9300      	str	r3, [sp, #0]
 8004602:	2300      	movs	r3, #0
 8004604:	f44f 7288 	mov.w	r2, #272	; 0x110
 8004608:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 800460c:	f000 f976 	bl	80048fc <LL_FillBuffer>
}
 8004610:	bf00      	nop
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}
 8004616:	bf00      	nop
 8004618:	20009b10 	.word	0x20009b10
 800461c:	200004d8 	.word	0x200004d8

08004620 <LCD_DrawChar>:
 * @param  Ascii: Character ascii code
 *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
 * @retval None
 */
void LCD_DrawChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii, const boolean_t isOpaqueBackground)
{
 8004620:	b590      	push	{r4, r7, lr}
 8004622:	b083      	sub	sp, #12
 8004624:	af00      	add	r7, sp, #0
 8004626:	4604      	mov	r4, r0
 8004628:	4608      	mov	r0, r1
 800462a:	4611      	mov	r1, r2
 800462c:	461a      	mov	r2, r3
 800462e:	4623      	mov	r3, r4
 8004630:	80fb      	strh	r3, [r7, #6]
 8004632:	4603      	mov	r3, r0
 8004634:	80bb      	strh	r3, [r7, #4]
 8004636:	460b      	mov	r3, r1
 8004638:	70fb      	strb	r3, [r7, #3]
 800463a:	4613      	mov	r3, r2
 800463c:	70bb      	strb	r3, [r7, #2]
	DrawChar(Xpos, Ypos, &pFont->table[(Ascii-' ') * pFont->Height * ((pFont->Width + 7) / 8)], isOpaqueBackground);
 800463e:	4b0f      	ldr	r3, [pc, #60]	; (800467c <LCD_DrawChar+0x5c>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	78fb      	ldrb	r3, [r7, #3]
 8004646:	3b20      	subs	r3, #32
 8004648:	490c      	ldr	r1, [pc, #48]	; (800467c <LCD_DrawChar+0x5c>)
 800464a:	6809      	ldr	r1, [r1, #0]
 800464c:	88c9      	ldrh	r1, [r1, #6]
 800464e:	fb01 f103 	mul.w	r1, r1, r3
 8004652:	4b0a      	ldr	r3, [pc, #40]	; (800467c <LCD_DrawChar+0x5c>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	889b      	ldrh	r3, [r3, #4]
 8004658:	3307      	adds	r3, #7
 800465a:	2b00      	cmp	r3, #0
 800465c:	da00      	bge.n	8004660 <LCD_DrawChar+0x40>
 800465e:	3307      	adds	r3, #7
 8004660:	10db      	asrs	r3, r3, #3
 8004662:	fb03 f301 	mul.w	r3, r3, r1
 8004666:	441a      	add	r2, r3
 8004668:	78bb      	ldrb	r3, [r7, #2]
 800466a:	88b9      	ldrh	r1, [r7, #4]
 800466c:	88f8      	ldrh	r0, [r7, #6]
 800466e:	f000 f89d 	bl	80047ac <DrawChar>

}
 8004672:	bf00      	nop
 8004674:	370c      	adds	r7, #12
 8004676:	46bd      	mov	sp, r7
 8004678:	bd90      	pop	{r4, r7, pc}
 800467a:	bf00      	nop
 800467c:	200004e8 	.word	0x200004e8

08004680 <LCD_DrawString>:
 *            @arg  RIGHT_MODE
 *            @arg  LEFT_MODE
 * @retval None
 */
void LCD_DrawString(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Alignment, const boolean_t isOpaqueBackground)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b088      	sub	sp, #32
 8004684:	af00      	add	r7, sp, #0
 8004686:	60ba      	str	r2, [r7, #8]
 8004688:	461a      	mov	r2, r3
 800468a:	4603      	mov	r3, r0
 800468c:	81fb      	strh	r3, [r7, #14]
 800468e:	460b      	mov	r3, r1
 8004690:	81bb      	strh	r3, [r7, #12]
 8004692:	4613      	mov	r3, r2
 8004694:	71fb      	strb	r3, [r7, #7]
	uint16_t ref_column = 1, i = 0;
 8004696:	2301      	movs	r3, #1
 8004698:	83fb      	strh	r3, [r7, #30]
 800469a:	2300      	movs	r3, #0
 800469c:	83bb      	strh	r3, [r7, #28]
	uint32_t size = 0, xsize = 0;
 800469e:	2300      	movs	r3, #0
 80046a0:	61bb      	str	r3, [r7, #24]
 80046a2:	2300      	movs	r3, #0
 80046a4:	613b      	str	r3, [r7, #16]
	uint8_t  *ptr = Text;
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	617b      	str	r3, [r7, #20]

	/* Get the text size */
	while (*ptr++) size ++ ;
 80046aa:	e002      	b.n	80046b2 <LCD_DrawString+0x32>
 80046ac:	69bb      	ldr	r3, [r7, #24]
 80046ae:	3301      	adds	r3, #1
 80046b0:	61bb      	str	r3, [r7, #24]
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	1c5a      	adds	r2, r3, #1
 80046b6:	617a      	str	r2, [r7, #20]
 80046b8:	781b      	ldrb	r3, [r3, #0]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d1f6      	bne.n	80046ac <LCD_DrawString+0x2c>

	/* Characters number per line */
	xsize = (LCD_SCREEN_WIDTH / pFont->Width);
 80046be:	4b3a      	ldr	r3, [pc, #232]	; (80047a8 <LCD_DrawString+0x128>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	889b      	ldrh	r3, [r3, #4]
 80046c4:	461a      	mov	r2, r3
 80046c6:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80046ca:	fb93 f3f2 	sdiv	r3, r3, r2
 80046ce:	613b      	str	r3, [r7, #16]

	switch (Alignment)
 80046d0:	79fb      	ldrb	r3, [r7, #7]
 80046d2:	2b03      	cmp	r3, #3
 80046d4:	d014      	beq.n	8004700 <LCD_DrawString+0x80>
 80046d6:	2b03      	cmp	r3, #3
 80046d8:	dc23      	bgt.n	8004722 <LCD_DrawString+0xa2>
 80046da:	2b01      	cmp	r3, #1
 80046dc:	d002      	beq.n	80046e4 <LCD_DrawString+0x64>
 80046de:	2b02      	cmp	r3, #2
 80046e0:	d011      	beq.n	8004706 <LCD_DrawString+0x86>
 80046e2:	e01e      	b.n	8004722 <LCD_DrawString+0xa2>
	{
	case CENTER_MODE:
	{
		ref_column = Xpos + ((xsize - size)* pFont->Width) / 2;
 80046e4:	693a      	ldr	r2, [r7, #16]
 80046e6:	69bb      	ldr	r3, [r7, #24]
 80046e8:	1ad3      	subs	r3, r2, r3
 80046ea:	4a2f      	ldr	r2, [pc, #188]	; (80047a8 <LCD_DrawString+0x128>)
 80046ec:	6812      	ldr	r2, [r2, #0]
 80046ee:	8892      	ldrh	r2, [r2, #4]
 80046f0:	fb02 f303 	mul.w	r3, r2, r3
 80046f4:	085b      	lsrs	r3, r3, #1
 80046f6:	b29a      	uxth	r2, r3
 80046f8:	89fb      	ldrh	r3, [r7, #14]
 80046fa:	4413      	add	r3, r2
 80046fc:	83fb      	strh	r3, [r7, #30]
		break;
 80046fe:	e013      	b.n	8004728 <LCD_DrawString+0xa8>
	}
	case LEFT_MODE:
	{
		ref_column = Xpos;
 8004700:	89fb      	ldrh	r3, [r7, #14]
 8004702:	83fb      	strh	r3, [r7, #30]
		break;
 8004704:	e010      	b.n	8004728 <LCD_DrawString+0xa8>
	}
	case RIGHT_MODE:
	{
		ref_column = - Xpos + ((xsize - size)*pFont->Width);
 8004706:	693a      	ldr	r2, [r7, #16]
 8004708:	69bb      	ldr	r3, [r7, #24]
 800470a:	1ad3      	subs	r3, r2, r3
 800470c:	b29a      	uxth	r2, r3
 800470e:	4b26      	ldr	r3, [pc, #152]	; (80047a8 <LCD_DrawString+0x128>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	889b      	ldrh	r3, [r3, #4]
 8004714:	fb12 f303 	smulbb	r3, r2, r3
 8004718:	b29a      	uxth	r2, r3
 800471a:	89fb      	ldrh	r3, [r7, #14]
 800471c:	1ad3      	subs	r3, r2, r3
 800471e:	83fb      	strh	r3, [r7, #30]
		break;
 8004720:	e002      	b.n	8004728 <LCD_DrawString+0xa8>
	}
	default:
	{
		ref_column = Xpos;
 8004722:	89fb      	ldrh	r3, [r7, #14]
 8004724:	83fb      	strh	r3, [r7, #30]
		break;
 8004726:	bf00      	nop
	}
	}

	/* Check that the Start column is located in the screen */
	if ((ref_column < 1) || (ref_column >= 0x8000))
 8004728:	8bfb      	ldrh	r3, [r7, #30]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d003      	beq.n	8004736 <LCD_DrawString+0xb6>
 800472e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004732:	2b00      	cmp	r3, #0
 8004734:	da16      	bge.n	8004764 <LCD_DrawString+0xe4>
	{
		ref_column = 1;
 8004736:	2301      	movs	r3, #1
 8004738:	83fb      	strh	r3, [r7, #30]
	}

	/* Send the string character by character on LCD */
	while ((*Text != 0) & (((LCD_SCREEN_WIDTH - (i*pFont->Width)) & 0xFFFF) >= pFont->Width))
 800473a:	e013      	b.n	8004764 <LCD_DrawString+0xe4>
	{
		/* Display one character on LCD */
		LCD_DrawChar(ref_column, Ypos, *Text, isOpaqueBackground);
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	781a      	ldrb	r2, [r3, #0]
 8004740:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004744:	89b9      	ldrh	r1, [r7, #12]
 8004746:	8bf8      	ldrh	r0, [r7, #30]
 8004748:	f7ff ff6a 	bl	8004620 <LCD_DrawChar>
		/* Decrement the column position by 16 */
		ref_column += pFont->Width;
 800474c:	4b16      	ldr	r3, [pc, #88]	; (80047a8 <LCD_DrawString+0x128>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	889a      	ldrh	r2, [r3, #4]
 8004752:	8bfb      	ldrh	r3, [r7, #30]
 8004754:	4413      	add	r3, r2
 8004756:	83fb      	strh	r3, [r7, #30]
		/* Point on the next character */
		Text++;
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	3301      	adds	r3, #1
 800475c:	60bb      	str	r3, [r7, #8]
		i++;
 800475e:	8bbb      	ldrh	r3, [r7, #28]
 8004760:	3301      	adds	r3, #1
 8004762:	83bb      	strh	r3, [r7, #28]
	while ((*Text != 0) & (((LCD_SCREEN_WIDTH - (i*pFont->Width)) & 0xFFFF) >= pFont->Width))
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	781b      	ldrb	r3, [r3, #0]
 8004768:	2b00      	cmp	r3, #0
 800476a:	bf14      	ite	ne
 800476c:	2301      	movne	r3, #1
 800476e:	2300      	moveq	r3, #0
 8004770:	b2da      	uxtb	r2, r3
 8004772:	8bbb      	ldrh	r3, [r7, #28]
 8004774:	490c      	ldr	r1, [pc, #48]	; (80047a8 <LCD_DrawString+0x128>)
 8004776:	6809      	ldr	r1, [r1, #0]
 8004778:	8889      	ldrh	r1, [r1, #4]
 800477a:	fb01 f303 	mul.w	r3, r1, r3
 800477e:	f5c3 73f0 	rsb	r3, r3, #480	; 0x1e0
 8004782:	b29b      	uxth	r3, r3
 8004784:	4908      	ldr	r1, [pc, #32]	; (80047a8 <LCD_DrawString+0x128>)
 8004786:	6809      	ldr	r1, [r1, #0]
 8004788:	8889      	ldrh	r1, [r1, #4]
 800478a:	428b      	cmp	r3, r1
 800478c:	bfac      	ite	ge
 800478e:	2301      	movge	r3, #1
 8004790:	2300      	movlt	r3, #0
 8004792:	b2db      	uxtb	r3, r3
 8004794:	4013      	ands	r3, r2
 8004796:	b2db      	uxtb	r3, r3
 8004798:	2b00      	cmp	r3, #0
 800479a:	d1cf      	bne.n	800473c <LCD_DrawString+0xbc>
	}
}
 800479c:	bf00      	nop
 800479e:	bf00      	nop
 80047a0:	3720      	adds	r7, #32
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}
 80047a6:	bf00      	nop
 80047a8:	200004e8 	.word	0x200004e8

080047ac <DrawChar>:
 * @param  Ypos: Start column address
 * @param  c: Pointer to the character data
 * @retval None
 */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c, const boolean_t isOpaqueBackground)
{
 80047ac:	b590      	push	{r4, r7, lr}
 80047ae:	b08b      	sub	sp, #44	; 0x2c
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	60ba      	str	r2, [r7, #8]
 80047b4:	461a      	mov	r2, r3
 80047b6:	4603      	mov	r3, r0
 80047b8:	81fb      	strh	r3, [r7, #14]
 80047ba:	460b      	mov	r3, r1
 80047bc:	81bb      	strh	r3, [r7, #12]
 80047be:	4613      	mov	r3, r2
 80047c0:	71fb      	strb	r3, [r7, #7]
	uint32_t i = 0, j = 0;
 80047c2:	2300      	movs	r3, #0
 80047c4:	627b      	str	r3, [r7, #36]	; 0x24
 80047c6:	2300      	movs	r3, #0
 80047c8:	623b      	str	r3, [r7, #32]
	uint16_t height, width;
	uint8_t  offset;
	uint8_t  *pchar;
	uint32_t line;

	height = pFont->Height;
 80047ca:	4b49      	ldr	r3, [pc, #292]	; (80048f0 <DrawChar+0x144>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	88db      	ldrh	r3, [r3, #6]
 80047d0:	837b      	strh	r3, [r7, #26]
	width  = pFont->Width;
 80047d2:	4b47      	ldr	r3, [pc, #284]	; (80048f0 <DrawChar+0x144>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	889b      	ldrh	r3, [r3, #4]
 80047d8:	833b      	strh	r3, [r7, #24]

	offset =  8 *((width + 7)/8) -  width ;
 80047da:	8b3b      	ldrh	r3, [r7, #24]
 80047dc:	3307      	adds	r3, #7
 80047de:	2b00      	cmp	r3, #0
 80047e0:	da00      	bge.n	80047e4 <DrawChar+0x38>
 80047e2:	3307      	adds	r3, #7
 80047e4:	10db      	asrs	r3, r3, #3
 80047e6:	b2db      	uxtb	r3, r3
 80047e8:	00db      	lsls	r3, r3, #3
 80047ea:	b2da      	uxtb	r2, r3
 80047ec:	8b3b      	ldrh	r3, [r7, #24]
 80047ee:	b2db      	uxtb	r3, r3
 80047f0:	1ad3      	subs	r3, r2, r3
 80047f2:	75fb      	strb	r3, [r7, #23]

	for(i = 0; i < height; i++)
 80047f4:	2300      	movs	r3, #0
 80047f6:	627b      	str	r3, [r7, #36]	; 0x24
 80047f8:	e070      	b.n	80048dc <DrawChar+0x130>
	{
		pchar = ((uint8_t *)c + (width + 7)/8 * i);
 80047fa:	8b3b      	ldrh	r3, [r7, #24]
 80047fc:	3307      	adds	r3, #7
 80047fe:	2b00      	cmp	r3, #0
 8004800:	da00      	bge.n	8004804 <DrawChar+0x58>
 8004802:	3307      	adds	r3, #7
 8004804:	10db      	asrs	r3, r3, #3
 8004806:	461a      	mov	r2, r3
 8004808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800480a:	fb03 f302 	mul.w	r3, r3, r2
 800480e:	68ba      	ldr	r2, [r7, #8]
 8004810:	4413      	add	r3, r2
 8004812:	613b      	str	r3, [r7, #16]

		switch(((width + 7)/8))
 8004814:	8b3b      	ldrh	r3, [r7, #24]
 8004816:	3307      	adds	r3, #7
 8004818:	2b00      	cmp	r3, #0
 800481a:	da00      	bge.n	800481e <DrawChar+0x72>
 800481c:	3307      	adds	r3, #7
 800481e:	10db      	asrs	r3, r3, #3
 8004820:	2b01      	cmp	r3, #1
 8004822:	d002      	beq.n	800482a <DrawChar+0x7e>
 8004824:	2b02      	cmp	r3, #2
 8004826:	d004      	beq.n	8004832 <DrawChar+0x86>
 8004828:	e00c      	b.n	8004844 <DrawChar+0x98>
		{

		case 1:
			line =  pchar[0];
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	781b      	ldrb	r3, [r3, #0]
 800482e:	61fb      	str	r3, [r7, #28]
			break;
 8004830:	e016      	b.n	8004860 <DrawChar+0xb4>

		case 2:
			line =  (pchar[0]<< 8) | pchar[1];
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	781b      	ldrb	r3, [r3, #0]
 8004836:	021b      	lsls	r3, r3, #8
 8004838:	693a      	ldr	r2, [r7, #16]
 800483a:	3201      	adds	r2, #1
 800483c:	7812      	ldrb	r2, [r2, #0]
 800483e:	4313      	orrs	r3, r2
 8004840:	61fb      	str	r3, [r7, #28]
			break;
 8004842:	e00d      	b.n	8004860 <DrawChar+0xb4>

		case 3:
		default:
			line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	781b      	ldrb	r3, [r3, #0]
 8004848:	041a      	lsls	r2, r3, #16
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	3301      	adds	r3, #1
 800484e:	781b      	ldrb	r3, [r3, #0]
 8004850:	021b      	lsls	r3, r3, #8
 8004852:	4313      	orrs	r3, r2
 8004854:	693a      	ldr	r2, [r7, #16]
 8004856:	3202      	adds	r2, #2
 8004858:	7812      	ldrb	r2, [r2, #0]
 800485a:	4313      	orrs	r3, r2
 800485c:	61fb      	str	r3, [r7, #28]
			break;
 800485e:	bf00      	nop
		}

		for (j = 0; j < width; j++)
 8004860:	2300      	movs	r3, #0
 8004862:	623b      	str	r3, [r7, #32]
 8004864:	e030      	b.n	80048c8 <DrawChar+0x11c>
		{
			if(line & (1 << (width- j + offset- 1)))
 8004866:	8b3a      	ldrh	r2, [r7, #24]
 8004868:	6a3b      	ldr	r3, [r7, #32]
 800486a:	1ad2      	subs	r2, r2, r3
 800486c:	7dfb      	ldrb	r3, [r7, #23]
 800486e:	4413      	add	r3, r2
 8004870:	3b01      	subs	r3, #1
 8004872:	2201      	movs	r2, #1
 8004874:	fa02 f303 	lsl.w	r3, r2, r3
 8004878:	461a      	mov	r2, r3
 800487a:	69fb      	ldr	r3, [r7, #28]
 800487c:	4013      	ands	r3, r2
 800487e:	2b00      	cmp	r3, #0
 8004880:	d012      	beq.n	80048a8 <DrawChar+0xfc>
			{
				__DrawPixel((Xpos + j), Ypos, STROKE_COLOR);
 8004882:	4b1c      	ldr	r3, [pc, #112]	; (80048f4 <DrawChar+0x148>)
 8004884:	6818      	ldr	r0, [r3, #0]
 8004886:	4b1c      	ldr	r3, [pc, #112]	; (80048f8 <DrawChar+0x14c>)
 8004888:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800488a:	89ba      	ldrh	r2, [r7, #12]
 800488c:	4613      	mov	r3, r2
 800488e:	011b      	lsls	r3, r3, #4
 8004890:	1a9b      	subs	r3, r3, r2
 8004892:	015b      	lsls	r3, r3, #5
 8004894:	461c      	mov	r4, r3
 8004896:	89fa      	ldrh	r2, [r7, #14]
 8004898:	6a3b      	ldr	r3, [r7, #32]
 800489a:	4413      	add	r3, r2
 800489c:	4423      	add	r3, r4
 800489e:	005b      	lsls	r3, r3, #1
 80048a0:	440b      	add	r3, r1
 80048a2:	b282      	uxth	r2, r0
 80048a4:	801a      	strh	r2, [r3, #0]
 80048a6:	e00c      	b.n	80048c2 <DrawChar+0x116>
			}
			else
			{
				if (isOpaqueBackground == true) LCD_ErasePixel((Xpos + j), Ypos);
 80048a8:	79fb      	ldrb	r3, [r7, #7]
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	d109      	bne.n	80048c2 <DrawChar+0x116>
 80048ae:	6a3b      	ldr	r3, [r7, #32]
 80048b0:	b29a      	uxth	r2, r3
 80048b2:	89fb      	ldrh	r3, [r7, #14]
 80048b4:	4413      	add	r3, r2
 80048b6:	b29b      	uxth	r3, r3
 80048b8:	89ba      	ldrh	r2, [r7, #12]
 80048ba:	4611      	mov	r1, r2
 80048bc:	4618      	mov	r0, r3
 80048be:	f7ff fe75 	bl	80045ac <LCD_ErasePixel>
		for (j = 0; j < width; j++)
 80048c2:	6a3b      	ldr	r3, [r7, #32]
 80048c4:	3301      	adds	r3, #1
 80048c6:	623b      	str	r3, [r7, #32]
 80048c8:	8b3b      	ldrh	r3, [r7, #24]
 80048ca:	6a3a      	ldr	r2, [r7, #32]
 80048cc:	429a      	cmp	r2, r3
 80048ce:	d3ca      	bcc.n	8004866 <DrawChar+0xba>
			}
		}
		Ypos++;
 80048d0:	89bb      	ldrh	r3, [r7, #12]
 80048d2:	3301      	adds	r3, #1
 80048d4:	81bb      	strh	r3, [r7, #12]
	for(i = 0; i < height; i++)
 80048d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d8:	3301      	adds	r3, #1
 80048da:	627b      	str	r3, [r7, #36]	; 0x24
 80048dc:	8b7b      	ldrh	r3, [r7, #26]
 80048de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048e0:	429a      	cmp	r2, r3
 80048e2:	d38a      	bcc.n	80047fa <DrawChar+0x4e>
	}

	__CleanDCache();
 80048e4:	f7ff fd84 	bl	80043f0 <SCB_CleanDCache>
}
 80048e8:	bf00      	nop
 80048ea:	372c      	adds	r7, #44	; 0x2c
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd90      	pop	{r4, r7, pc}
 80048f0:	200004e8 	.word	0x200004e8
 80048f4:	200004dc 	.word	0x200004dc
 80048f8:	20009b10 	.word	0x20009b10

080048fc <LL_FillBuffer>:
 * @param  OffLine: Offset
 * @param  withColor: fill color in ARGB888 format (even if FB may use RGB565)
 * @retval None
 */
static void LL_FillBuffer(void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t withColor)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b086      	sub	sp, #24
 8004900:	af02      	add	r7, sp, #8
 8004902:	60f8      	str	r0, [r7, #12]
 8004904:	60b9      	str	r1, [r7, #8]
 8004906:	607a      	str	r2, [r7, #4]
 8004908:	603b      	str	r3, [r7, #0]
	/* Register to memory mode with ARGB8888 as color Mode */
	hdma2d.Init.Mode         = DMA2D_R2M;
 800490a:	4b16      	ldr	r3, [pc, #88]	; (8004964 <LL_FillBuffer+0x68>)
 800490c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8004910:	605a      	str	r2, [r3, #4]
#ifdef PF_565
	/* RGB565 "output" format */
	hdma2d.Init.ColorMode    = DMA2D_RGB565;
 8004912:	4b14      	ldr	r3, [pc, #80]	; (8004964 <LL_FillBuffer+0x68>)
 8004914:	2202      	movs	r2, #2
 8004916:	609a      	str	r2, [r3, #8]
#else
	/* ARGB8888 "output" format */
	hdma2d.Init.ColorMode    = DMA2D_ARGB8888;
#endif
	hdma2d.Init.OutputOffset = OffLine;
 8004918:	4a12      	ldr	r2, [pc, #72]	; (8004964 <LL_FillBuffer+0x68>)
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	60d3      	str	r3, [r2, #12]

	hdma2d.Instance = DMA2D;
 800491e:	4b11      	ldr	r3, [pc, #68]	; (8004964 <LL_FillBuffer+0x68>)
 8004920:	4a11      	ldr	r2, [pc, #68]	; (8004968 <LL_FillBuffer+0x6c>)
 8004922:	601a      	str	r2, [r3, #0]

	/* DMA2D Initialization */
	if(HAL_DMA2D_Init(&hdma2d) == HAL_OK)
 8004924:	480f      	ldr	r0, [pc, #60]	; (8004964 <LL_FillBuffer+0x68>)
 8004926:	f002 fbff 	bl	8007128 <HAL_DMA2D_Init>
 800492a:	4603      	mov	r3, r0
 800492c:	2b00      	cmp	r3, #0
 800492e:	d115      	bne.n	800495c <LL_FillBuffer+0x60>
	{
		if(HAL_DMA2D_ConfigLayer(&hdma2d, 0) == HAL_OK)
 8004930:	2100      	movs	r1, #0
 8004932:	480c      	ldr	r0, [pc, #48]	; (8004964 <LL_FillBuffer+0x68>)
 8004934:	f002 fe66 	bl	8007604 <HAL_DMA2D_ConfigLayer>
 8004938:	4603      	mov	r3, r0
 800493a:	2b00      	cmp	r3, #0
 800493c:	d10e      	bne.n	800495c <LL_FillBuffer+0x60>
		{
			if (HAL_DMA2D_Start(&hdma2d, withColor, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 800493e:	68fa      	ldr	r2, [r7, #12]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	9300      	str	r3, [sp, #0]
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	69b9      	ldr	r1, [r7, #24]
 8004948:	4806      	ldr	r0, [pc, #24]	; (8004964 <LL_FillBuffer+0x68>)
 800494a:	f002 fc37 	bl	80071bc <HAL_DMA2D_Start>
 800494e:	4603      	mov	r3, r0
 8004950:	2b00      	cmp	r3, #0
 8004952:	d103      	bne.n	800495c <LL_FillBuffer+0x60>
			{
				/* Polling For DMA transfer */
				HAL_DMA2D_PollForTransfer(&hdma2d, 10); // TODO : adapt to to CMSIS-RTOS
 8004954:	210a      	movs	r1, #10
 8004956:	4803      	ldr	r0, [pc, #12]	; (8004964 <LL_FillBuffer+0x68>)
 8004958:	f002 fc5b 	bl	8007212 <HAL_DMA2D_PollForTransfer>
			}
		}
	}
}
 800495c:	bf00      	nop
 800495e:	3710      	adds	r7, #16
 8004960:	46bd      	mov	sp, r7
 8004962:	bd80      	pop	{r7, pc}
 8004964:	20009e24 	.word	0x20009e24
 8004968:	4002b000 	.word	0x4002b000

0800496c <ARGB888ToRGB565>:

/**
 * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
 */
static uint16_t ARGB888ToRGB565(uint32_t RGB_Code)
{
 800496c:	b480      	push	{r7}
 800496e:	b087      	sub	sp, #28
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
	uint8_t red   = (RGB_Code & 0x00FF0000) >> 16;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	0c1b      	lsrs	r3, r3, #16
 8004978:	75fb      	strb	r3, [r7, #23]
	uint8_t green = (RGB_Code & 0x0000FF00) >> 8;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	0a1b      	lsrs	r3, r3, #8
 800497e:	75bb      	strb	r3, [r7, #22]
	uint8_t blue  = (RGB_Code & 0x000000FF);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	757b      	strb	r3, [r7, #21]

	uint16_t b = (blue >> 3) & 0x1f; // 5 bits
 8004984:	7d7b      	ldrb	r3, [r7, #21]
 8004986:	08db      	lsrs	r3, r3, #3
 8004988:	b2db      	uxtb	r3, r3
 800498a:	b29b      	uxth	r3, r3
 800498c:	f003 031f 	and.w	r3, r3, #31
 8004990:	827b      	strh	r3, [r7, #18]
	uint16_t g = ((green >> 2) & 0x3f) << 5; // 6 bits
 8004992:	7dbb      	ldrb	r3, [r7, #22]
 8004994:	089b      	lsrs	r3, r3, #2
 8004996:	b2db      	uxtb	r3, r3
 8004998:	015b      	lsls	r3, r3, #5
 800499a:	b29b      	uxth	r3, r3
 800499c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80049a0:	823b      	strh	r3, [r7, #16]
	uint16_t r = ((red >> 3) & 0x1f) << 11; // 5 bits
 80049a2:	7dfb      	ldrb	r3, [r7, #23]
 80049a4:	08db      	lsrs	r3, r3, #3
 80049a6:	b2db      	uxtb	r3, r3
 80049a8:	02db      	lsls	r3, r3, #11
 80049aa:	81fb      	strh	r3, [r7, #14]

	return (uint16_t) (r | g | b);
 80049ac:	89fa      	ldrh	r2, [r7, #14]
 80049ae:	8a3b      	ldrh	r3, [r7, #16]
 80049b0:	4313      	orrs	r3, r2
 80049b2:	b29a      	uxth	r2, r3
 80049b4:	8a7b      	ldrh	r3, [r7, #18]
 80049b6:	4313      	orrs	r3, r2
 80049b8:	b29b      	uxth	r3, r3
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	371c      	adds	r7, #28
 80049be:	46bd      	mov	sp, r7
 80049c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c4:	4770      	bx	lr
	...

080049c8 <DISCO_QSPI_EnableMemoryMappedMode>:
/**
  * @brief  Configure the QSPI in memory-mapped mode
  * @retval QSPI memory status
  */
uint8_t DISCO_QSPI_EnableMemoryMappedMode(void)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b090      	sub	sp, #64	; 0x40
 80049cc:	af00      	add	r7, sp, #0
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;

  /* Configure the command for the read instruction */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80049ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80049d2:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = QUAD_INOUT_FAST_READ_CMD;
 80049d4:	23eb      	movs	r3, #235	; 0xeb
 80049d6:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 80049d8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80049dc:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AddressSize       = QSPI_ADDRESS_24_BITS;
 80049de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80049e2:	617b      	str	r3, [r7, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80049e4:	2300      	movs	r3, #0
 80049e6:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_4_LINES;
 80049e8:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80049ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = N25Q128A_DUMMY_CYCLES_READ_QUAD;
 80049ee:	230a      	movs	r3, #10
 80049f0:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80049f2:	2300      	movs	r3, #0
 80049f4:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80049f6:	2300      	movs	r3, #0
 80049f8:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80049fa:	2300      	movs	r3, #0
 80049fc:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 80049fe:	2300      	movs	r3, #0
 8004a00:	607b      	str	r3, [r7, #4]
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 8004a02:	2300      	movs	r3, #0
 8004a04:	603b      	str	r3, [r7, #0]

  if (HAL_QSPI_MemoryMapped(&hqspi, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8004a06:	463a      	mov	r2, r7
 8004a08:	f107 0308 	add.w	r3, r7, #8
 8004a0c:	4619      	mov	r1, r3
 8004a0e:	4806      	ldr	r0, [pc, #24]	; (8004a28 <DISCO_QSPI_EnableMemoryMappedMode+0x60>)
 8004a10:	f006 fcdc 	bl	800b3cc <HAL_QSPI_MemoryMapped>
 8004a14:	4603      	mov	r3, r0
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d001      	beq.n	8004a1e <DISCO_QSPI_EnableMemoryMappedMode+0x56>
  {
    return HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e000      	b.n	8004a20 <DISCO_QSPI_EnableMemoryMappedMode+0x58>
  }

  return HAL_OK;
 8004a1e:	2300      	movs	r3, #0
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	3740      	adds	r7, #64	; 0x40
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}
 8004a28:	20009f30 	.word	0x20009f30

08004a2c <DISCO_QSPI_ResetMemory>:
  * @brief  This function reset the QSPI memory.
  * @param  hqspi: QSPI handle
  * @retval None
  */
uint8_t DISCO_QSPI_ResetMemory(QSPI_HandleTypeDef *hqspi)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b090      	sub	sp, #64	; 0x40
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004a34:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004a38:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = RESET_ENABLE_CMD;
 8004a3a:	2366      	movs	r3, #102	; 0x66
 8004a3c:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004a42:	2300      	movs	r3, #0
 8004a44:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 8004a46:	2300      	movs	r3, #0
 8004a48:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8004a52:	2300      	movs	r3, #0
 8004a54:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004a56:	2300      	movs	r3, #0
 8004a58:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Send the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004a5a:	f107 0308 	add.w	r3, r7, #8
 8004a5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a62:	4619      	mov	r1, r3
 8004a64:	6878      	ldr	r0, [r7, #4]
 8004a66:	f006 faa3 	bl	800afb0 <HAL_QSPI_Command>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d001      	beq.n	8004a74 <DISCO_QSPI_ResetMemory+0x48>
  {
    return HAL_ERROR;
 8004a70:	2301      	movs	r3, #1
 8004a72:	e019      	b.n	8004aa8 <DISCO_QSPI_ResetMemory+0x7c>
  }

  /* Send the reset memory command */
  s_command.Instruction = RESET_MEMORY_CMD;
 8004a74:	2399      	movs	r3, #153	; 0x99
 8004a76:	60bb      	str	r3, [r7, #8]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004a78:	f107 0308 	add.w	r3, r7, #8
 8004a7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a80:	4619      	mov	r1, r3
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f006 fa94 	bl	800afb0 <HAL_QSPI_Command>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d001      	beq.n	8004a92 <DISCO_QSPI_ResetMemory+0x66>
  {
    return HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	e00a      	b.n	8004aa8 <DISCO_QSPI_ResetMemory+0x7c>
  }

  /* Configure automatic polling mode to wait the memory is ready */
  if (QSPI_AutoPollingMemReady(hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004a92:	f241 3188 	movw	r1, #5000	; 0x1388
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	f000 f8c7 	bl	8004c2a <QSPI_AutoPollingMemReady>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d001      	beq.n	8004aa6 <DISCO_QSPI_ResetMemory+0x7a>
  {
    return HAL_ERROR;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	e000      	b.n	8004aa8 <DISCO_QSPI_ResetMemory+0x7c>
  }

  return HAL_OK;
 8004aa6:	2300      	movs	r3, #0
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	3740      	adds	r7, #64	; 0x40
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}

08004ab0 <DISCO_QSPI_DummyCyclesCfg>:
  * @brief  This function configure the dummy cycles on memory side.
  * @param  hqspi: QSPI handle
  * @retval None
  */
uint8_t DISCO_QSPI_DummyCyclesCfg(QSPI_HandleTypeDef *hqspi)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b094      	sub	sp, #80	; 0x50
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;
  uint8_t reg;

  /* Initialize the read volatile configuration register command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004ab8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004abc:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction       = READ_VOL_CFG_REG_CMD;
 8004abe:	2385      	movs	r3, #133	; 0x85
 8004ac0:	613b      	str	r3, [r7, #16]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode          = QSPI_DATA_1_LINE;
 8004aca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004ace:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles       = 0;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData            = 1;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8004adc:	2300      	movs	r3, #0
 8004ade:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004ae4:	f107 0310 	add.w	r3, r7, #16
 8004ae8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004aec:	4619      	mov	r1, r3
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f006 fa5e 	bl	800afb0 <HAL_QSPI_Command>
 8004af4:	4603      	mov	r3, r0
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d001      	beq.n	8004afe <DISCO_QSPI_DummyCyclesCfg+0x4e>
  {
    return HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	e048      	b.n	8004b90 <DISCO_QSPI_DummyCyclesCfg+0xe0>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004afe:	f107 030f 	add.w	r3, r7, #15
 8004b02:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b06:	4619      	mov	r1, r3
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	f006 fb46 	bl	800b19a <HAL_QSPI_Receive>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d001      	beq.n	8004b18 <DISCO_QSPI_DummyCyclesCfg+0x68>
  {
    return HAL_ERROR;
 8004b14:	2301      	movs	r3, #1
 8004b16:	e03b      	b.n	8004b90 <DISCO_QSPI_DummyCyclesCfg+0xe0>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(hqspi) != HAL_OK)
 8004b18:	6878      	ldr	r0, [r7, #4]
 8004b1a:	f000 f83d 	bl	8004b98 <QSPI_WriteEnable>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d001      	beq.n	8004b28 <DISCO_QSPI_DummyCyclesCfg+0x78>
  {
    return HAL_ERROR;
 8004b24:	2301      	movs	r3, #1
 8004b26:	e033      	b.n	8004b90 <DISCO_QSPI_DummyCyclesCfg+0xe0>
  }

  /* Update volatile configuration register (with new dummy cycles) */
  s_command.Instruction = WRITE_VOL_CFG_REG_CMD;
 8004b28:	2381      	movs	r3, #129	; 0x81
 8004b2a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(reg, N25Q128A_VCR_NB_DUMMY, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(N25Q128A_VCR_NB_DUMMY)));
 8004b2c:	7bfb      	ldrb	r3, [r7, #15]
 8004b2e:	b25b      	sxtb	r3, r3
 8004b30:	f003 030f 	and.w	r3, r3, #15
 8004b34:	b25a      	sxtb	r2, r3
 8004b36:	23f0      	movs	r3, #240	; 0xf0
 8004b38:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b3c:	fa93 f3a3 	rbit	r3, r3
 8004b40:	64bb      	str	r3, [r7, #72]	; 0x48
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004b42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b44:	fab3 f383 	clz	r3, r3
 8004b48:	b2db      	uxtb	r3, r3
 8004b4a:	4619      	mov	r1, r3
 8004b4c:	230a      	movs	r3, #10
 8004b4e:	408b      	lsls	r3, r1
 8004b50:	b25b      	sxtb	r3, r3
 8004b52:	4313      	orrs	r3, r2
 8004b54:	b25b      	sxtb	r3, r3
 8004b56:	b2db      	uxtb	r3, r3
 8004b58:	73fb      	strb	r3, [r7, #15]

  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004b5a:	f107 0310 	add.w	r3, r7, #16
 8004b5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b62:	4619      	mov	r1, r3
 8004b64:	6878      	ldr	r0, [r7, #4]
 8004b66:	f006 fa23 	bl	800afb0 <HAL_QSPI_Command>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d001      	beq.n	8004b74 <DISCO_QSPI_DummyCyclesCfg+0xc4>
  {
    return HAL_ERROR;
 8004b70:	2301      	movs	r3, #1
 8004b72:	e00d      	b.n	8004b90 <DISCO_QSPI_DummyCyclesCfg+0xe0>
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004b74:	f107 030f 	add.w	r3, r7, #15
 8004b78:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b7c:	4619      	mov	r1, r3
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f006 fa74 	bl	800b06c <HAL_QSPI_Transmit>
 8004b84:	4603      	mov	r3, r0
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d001      	beq.n	8004b8e <DISCO_QSPI_DummyCyclesCfg+0xde>
  {
    return HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e000      	b.n	8004b90 <DISCO_QSPI_DummyCyclesCfg+0xe0>
  }

  return HAL_OK;
 8004b8e:	2300      	movs	r3, #0
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	3750      	adds	r7, #80	; 0x50
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd80      	pop	{r7, pc}

08004b98 <QSPI_WriteEnable>:
  * @brief  This function send a Write Enable and wait it is effective.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b096      	sub	sp, #88	; 0x58
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Enable write operations */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004ba0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004ba4:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.Instruction       = WRITE_ENABLE_CMD;
 8004ba6:	2306      	movs	r3, #6
 8004ba8:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8004baa:	2300      	movs	r3, #0
 8004bac:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_NONE;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 0;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004bc6:	f107 0320 	add.w	r3, r7, #32
 8004bca:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bce:	4619      	mov	r1, r3
 8004bd0:	6878      	ldr	r0, [r7, #4]
 8004bd2:	f006 f9ed 	bl	800afb0 <HAL_QSPI_Command>
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d001      	beq.n	8004be0 <QSPI_WriteEnable+0x48>
  {
    return HAL_ERROR;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	e020      	b.n	8004c22 <QSPI_WriteEnable+0x8a>
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_config.Match           = N25Q128A_SR_WREN;
 8004be0:	2302      	movs	r3, #2
 8004be2:	60bb      	str	r3, [r7, #8]
  s_config.Mask            = N25Q128A_SR_WREN;
 8004be4:	2302      	movs	r3, #2
 8004be6:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8004be8:	2300      	movs	r3, #0
 8004bea:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 1;
 8004bec:	2301      	movs	r3, #1
 8004bee:	617b      	str	r3, [r7, #20]
  s_config.Interval        = 0x10;
 8004bf0:	2310      	movs	r3, #16
 8004bf2:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8004bf4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004bf8:	61fb      	str	r3, [r7, #28]

  s_command.Instruction    = READ_STATUS_REG_CMD;
 8004bfa:	2305      	movs	r3, #5
 8004bfc:	623b      	str	r3, [r7, #32]
  s_command.DataMode       = QSPI_DATA_1_LINE;
 8004bfe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004c02:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004c04:	f107 0208 	add.w	r2, r7, #8
 8004c08:	f107 0120 	add.w	r1, r7, #32
 8004c0c:	f241 3388 	movw	r3, #5000	; 0x1388
 8004c10:	6878      	ldr	r0, [r7, #4]
 8004c12:	f006 fb64 	bl	800b2de <HAL_QSPI_AutoPolling>
 8004c16:	4603      	mov	r3, r0
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d001      	beq.n	8004c20 <QSPI_WriteEnable+0x88>
  {
    return HAL_ERROR;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	e000      	b.n	8004c22 <QSPI_WriteEnable+0x8a>
  }

  return HAL_OK;
 8004c20:	2300      	movs	r3, #0
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	3758      	adds	r7, #88	; 0x58
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}

08004c2a <QSPI_AutoPollingMemReady>:
  * @param  hqspi: QSPI handle
  * @param  Timeout
  * @retval None
  */
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8004c2a:	b580      	push	{r7, lr}
 8004c2c:	b096      	sub	sp, #88	; 0x58
 8004c2e:	af00      	add	r7, sp, #0
 8004c30:	6078      	str	r0, [r7, #4]
 8004c32:	6039      	str	r1, [r7, #0]
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004c34:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004c38:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.Instruction       = READ_STATUS_REG_CMD;
 8004c3a:	2305      	movs	r3, #5
 8004c3c:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004c42:	2300      	movs	r3, #0
 8004c44:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_1_LINE;
 8004c46:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004c4a:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 0;
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8004c50:	2300      	movs	r3, #0
 8004c52:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8004c54:	2300      	movs	r3, #0
 8004c56:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004c58:	2300      	movs	r3, #0
 8004c5a:	657b      	str	r3, [r7, #84]	; 0x54

  s_config.Match           = 0;
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	60bb      	str	r3, [r7, #8]
  s_config.Mask            = N25Q128A_SR_WIP;
 8004c60:	2301      	movs	r3, #1
 8004c62:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8004c64:	2300      	movs	r3, #0
 8004c66:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 1;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	617b      	str	r3, [r7, #20]
  s_config.Interval        = 0x10;
 8004c6c:	2310      	movs	r3, #16
 8004c6e:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8004c70:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004c74:	61fb      	str	r3, [r7, #28]

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 8004c76:	f107 0208 	add.w	r2, r7, #8
 8004c7a:	f107 0120 	add.w	r1, r7, #32
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	6878      	ldr	r0, [r7, #4]
 8004c82:	f006 fb2c 	bl	800b2de <HAL_QSPI_AutoPolling>
 8004c86:	4603      	mov	r3, r0
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d001      	beq.n	8004c90 <QSPI_AutoPollingMemReady+0x66>
  {
    return HAL_ERROR;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	e000      	b.n	8004c92 <QSPI_AutoPollingMemReady+0x68>
  }

  return HAL_OK;
 8004c90:	2300      	movs	r3, #0
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	3758      	adds	r7, #88	; 0x58
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}
	...

08004c9c <startAudioDMA>:
 * @param AudioFreq I2S_AUDIOFREQ_16K, I2S_AUDIOFREQ_48K, etc (48kHz frequency group)
 *
 * @retval AUDIO_OK if correct communication, else wrong communication
 */
void startAudioDMA(int16_t *buf_output, int16_t *buf_input,
		uint32_t audio_dma_buf_size) {
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b086      	sub	sp, #24
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	60f8      	str	r0, [r7, #12]
 8004ca4:	60b9      	str	r1, [r7, #8]
 8004ca6:	607a      	str	r2, [r7, #4]

	__HAL_RCC_SAI2_CLK_ENABLE(); // bug fix syd: was not called in stm32f7xx_hal_msp.c (pb with static variable SAI2_client)
 8004ca8:	4b27      	ldr	r3, [pc, #156]	; (8004d48 <startAudioDMA+0xac>)
 8004caa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cac:	4a26      	ldr	r2, [pc, #152]	; (8004d48 <startAudioDMA+0xac>)
 8004cae:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004cb2:	6453      	str	r3, [r2, #68]	; 0x44
 8004cb4:	4b24      	ldr	r3, [pc, #144]	; (8004d48 <startAudioDMA+0xac>)
 8004cb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cb8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004cbc:	617b      	str	r3, [r7, #20]
 8004cbe:	697b      	ldr	r3, [r7, #20]

	//  Initialize WM8994 CODEC
	if (wm8994_ReadID(AUDIO_I2C_ADDRESS) != WM8994_ID) Error_Handler();
 8004cc0:	2034      	movs	r0, #52	; 0x34
 8004cc2:	f000 fe5b 	bl	800597c <wm8994_ReadID>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	f648 1294 	movw	r2, #35220	; 0x8994
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d001      	beq.n	8004cd4 <startAudioDMA+0x38>
 8004cd0:	f7fe f800 	bl	8002cd4 <Error_Handler>

	/* Reset the Codec Registers */
	wm8994_Reset(AUDIO_I2C_ADDRESS);
 8004cd4:	2034      	movs	r0, #52	; 0x34
 8004cd6:	f000 ff99 	bl	8005c0c <wm8994_Reset>

	switch (hsai_BlockB2.SlotInit.SlotActive) {
 8004cda:	4b1c      	ldr	r3, [pc, #112]	; (8004d4c <startAudioDMA+0xb0>)
 8004cdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cde:	2b05      	cmp	r3, #5
 8004ce0:	d002      	beq.n	8004ce8 <startAudioDMA+0x4c>
 8004ce2:	2b0a      	cmp	r3, #10
 8004ce4:	d009      	beq.n	8004cfa <startAudioDMA+0x5e>
 8004ce6:	e011      	b.n	8004d0c <startAudioDMA+0x70>

	// line in (slot 0 L/R, violet jack):
	case 0x5:
		wm8994_Init(INPUT_DEVICE_INPUT_LINE_1 | OUTPUT_DEVICE_HEADPHONE,
 8004ce8:	4b19      	ldr	r3, [pc, #100]	; (8004d50 <startAudioDMA+0xb4>)
 8004cea:	69db      	ldr	r3, [r3, #28]
 8004cec:	461a      	mov	r2, r3
 8004cee:	214b      	movs	r1, #75	; 0x4b
 8004cf0:	f240 3002 	movw	r0, #770	; 0x302
 8004cf4:	f000 f8e0 	bl	8004eb8 <wm8994_Init>
				DEFAULT_LINEIN_VOLUME, hsai_BlockA2.Init.AudioFrequency);
		break;
 8004cf8:	e00d      	b.n	8004d16 <startAudioDMA+0x7a>

		// microphones (slot 1 L/R):
	case 0xA:
		wm8994_Init(INPUT_DEVICE_DIGITAL_MICROPHONE_2 | OUTPUT_DEVICE_HEADPHONE,
 8004cfa:	4b15      	ldr	r3, [pc, #84]	; (8004d50 <startAudioDMA+0xb4>)
 8004cfc:	69db      	ldr	r3, [r3, #28]
 8004cfe:	461a      	mov	r2, r3
 8004d00:	21c8      	movs	r1, #200	; 0xc8
 8004d02:	f240 2002 	movw	r0, #514	; 0x202
 8004d06:	f000 f8d7 	bl	8004eb8 <wm8994_Init>
				DEFAULT_MICIN_VOLUME, hsai_BlockA2.Init.AudioFrequency);
		break;
 8004d0a:	e004      	b.n	8004d16 <startAudioDMA+0x7a>

	default:
		printf("Unsupported audio input in hsai_BlockB2.SlotInit.SlotActive\n");
 8004d0c:	4811      	ldr	r0, [pc, #68]	; (8004d54 <startAudioDMA+0xb8>)
 8004d0e:	f013 fff9 	bl	8018d04 <puts>
		Error_Handler();
 8004d12:	f7fd ffdf 	bl	8002cd4 <Error_Handler>
	}

	// unmute CODEC output
	wm8994_SetMute(AUDIO_MUTE_OFF);
 8004d16:	2000      	movs	r0, #0
 8004d18:	f000 ff38 	bl	8005b8c <wm8994_SetMute>

	//  Start DMA transfers

	/* Start Recording */
	HAL_SAI_Receive_DMA(&hsai_BlockB2, (uint8_t*) buf_input, audio_dma_buf_size);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	b29b      	uxth	r3, r3
 8004d20:	461a      	mov	r2, r3
 8004d22:	68b9      	ldr	r1, [r7, #8]
 8004d24:	4809      	ldr	r0, [pc, #36]	; (8004d4c <startAudioDMA+0xb0>)
 8004d26:	f008 feb1 	bl	800da8c <HAL_SAI_Receive_DMA>
	/* Start Playback */
	HAL_SAI_Transmit_DMA(&hsai_BlockA2, (uint8_t*) buf_output, audio_dma_buf_size);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	b29b      	uxth	r3, r3
 8004d2e:	461a      	mov	r2, r3
 8004d30:	68f9      	ldr	r1, [r7, #12]
 8004d32:	4807      	ldr	r0, [pc, #28]	; (8004d50 <startAudioDMA+0xb4>)
 8004d34:	f008 fdfa 	bl	800d92c <HAL_SAI_Transmit_DMA>

	printf("SAI (audio) DMA started: OK\n");
 8004d38:	4807      	ldr	r0, [pc, #28]	; (8004d58 <startAudioDMA+0xbc>)
 8004d3a:	f013 ffe3 	bl	8018d04 <puts>


}
 8004d3e:	bf00      	nop
 8004d40:	3718      	adds	r7, #24
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}
 8004d46:	bf00      	nop
 8004d48:	40023800 	.word	0x40023800
 8004d4c:	20009670 	.word	0x20009670
 8004d50:	2000989c 	.word	0x2000989c
 8004d54:	0801b718 	.word	0x0801b718
 8004d58:	0801b754 	.word	0x0801b754

08004d5c <HAL_SAI_TxCpltCallback>:

/*------------------------------------------------------------------------------
 SAI DMA Callbacks
 ----------------------------------------------------------------------------*/

void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai) {
 8004d5c:	b480      	push	{r7}
 8004d5e:	b083      	sub	sp, #12
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
}
 8004d64:	bf00      	nop
 8004d66:	370c      	adds	r7, #12
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6e:	4770      	bx	lr

08004d70 <HAL_SAI_TxHalfCpltCallback>:

void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai) {
 8004d70:	b480      	push	{r7}
 8004d72:	b083      	sub	sp, #12
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
}
 8004d78:	bf00      	nop
 8004d7a:	370c      	adds	r7, #12
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d82:	4770      	bx	lr

08004d84 <HAL_SAI_ErrorCallback>:

void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai) {
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b082      	sub	sp, #8
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]

	if (hsai == &hsai_BlockA2)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	4a09      	ldr	r2, [pc, #36]	; (8004db4 <HAL_SAI_ErrorCallback+0x30>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d103      	bne.n	8004d9c <HAL_SAI_ErrorCallback+0x18>
		printf("DMA Out error\n");
 8004d94:	4808      	ldr	r0, [pc, #32]	; (8004db8 <HAL_SAI_ErrorCallback+0x34>)
 8004d96:	f013 ffb5 	bl	8018d04 <puts>
	else if (hsai == &hsai_BlockB2)
		printf("DMA In error\n");
}
 8004d9a:	e006      	b.n	8004daa <HAL_SAI_ErrorCallback+0x26>
	else if (hsai == &hsai_BlockB2)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	4a07      	ldr	r2, [pc, #28]	; (8004dbc <HAL_SAI_ErrorCallback+0x38>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d102      	bne.n	8004daa <HAL_SAI_ErrorCallback+0x26>
		printf("DMA In error\n");
 8004da4:	4806      	ldr	r0, [pc, #24]	; (8004dc0 <HAL_SAI_ErrorCallback+0x3c>)
 8004da6:	f013 ffad 	bl	8018d04 <puts>
}
 8004daa:	bf00      	nop
 8004dac:	3708      	adds	r7, #8
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}
 8004db2:	bf00      	nop
 8004db4:	2000989c 	.word	0x2000989c
 8004db8:	0801b770 	.word	0x0801b770
 8004dbc:	20009670 	.word	0x20009670
 8004dc0:	0801b780 	.word	0x0801b780

08004dc4 <DISCO_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value
  * @retval None
  */
void DISCO_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b084      	sub	sp, #16
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8004dcc:	2300      	movs	r3, #0
 8004dce:	60fb      	str	r3, [r7, #12]

  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8004dd0:	4b2a      	ldr	r3, [pc, #168]	; (8004e7c <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8004dd6:	4b29      	ldr	r3, [pc, #164]	; (8004e7c <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004dd8:	2210      	movs	r2, #16
 8004dda:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8004ddc:	4b27      	ldr	r3, [pc, #156]	; (8004e7c <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004dde:	2201      	movs	r2, #1
 8004de0:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8004de2:	4b26      	ldr	r3, [pc, #152]	; (8004e7c <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004de4:	2200      	movs	r2, #0
 8004de6:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8004de8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004dec:	4923      	ldr	r1, [pc, #140]	; (8004e7c <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004dee:	4824      	ldr	r0, [pc, #144]	; (8004e80 <DISCO_SDRAM_Initialization_sequence+0xbc>)
 8004df0:	f00a f8c9 	bl	800ef86 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8004df4:	2001      	movs	r0, #1
 8004df6:	f000 ff8d 	bl	8005d14 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8004dfa:	4b20      	ldr	r3, [pc, #128]	; (8004e7c <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004dfc:	2202      	movs	r2, #2
 8004dfe:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8004e00:	4b1e      	ldr	r3, [pc, #120]	; (8004e7c <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004e02:	2210      	movs	r2, #16
 8004e04:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8004e06:	4b1d      	ldr	r3, [pc, #116]	; (8004e7c <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004e08:	2201      	movs	r2, #1
 8004e0a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8004e0c:	4b1b      	ldr	r3, [pc, #108]	; (8004e7c <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004e0e:	2200      	movs	r2, #0
 8004e10:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8004e12:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004e16:	4919      	ldr	r1, [pc, #100]	; (8004e7c <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004e18:	4819      	ldr	r0, [pc, #100]	; (8004e80 <DISCO_SDRAM_Initialization_sequence+0xbc>)
 8004e1a:	f00a f8b4 	bl	800ef86 <HAL_SDRAM_SendCommand>

  /* Step 4: Configure an Auto Refresh command */
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8004e1e:	4b17      	ldr	r3, [pc, #92]	; (8004e7c <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004e20:	2203      	movs	r2, #3
 8004e22:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8004e24:	4b15      	ldr	r3, [pc, #84]	; (8004e7c <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004e26:	2210      	movs	r2, #16
 8004e28:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8004e2a:	4b14      	ldr	r3, [pc, #80]	; (8004e7c <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004e2c:	2208      	movs	r2, #8
 8004e2e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8004e30:	4b12      	ldr	r3, [pc, #72]	; (8004e7c <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004e32:	2200      	movs	r2, #0
 8004e34:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8004e36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004e3a:	4910      	ldr	r1, [pc, #64]	; (8004e7c <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004e3c:	4810      	ldr	r0, [pc, #64]	; (8004e80 <DISCO_SDRAM_Initialization_sequence+0xbc>)
 8004e3e:	f00a f8a2 	bl	800ef86 <HAL_SDRAM_SendCommand>

  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8004e42:	f44f 7308 	mov.w	r3, #544	; 0x220
 8004e46:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8004e48:	4b0c      	ldr	r3, [pc, #48]	; (8004e7c <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004e4a:	2204      	movs	r2, #4
 8004e4c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8004e4e:	4b0b      	ldr	r3, [pc, #44]	; (8004e7c <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004e50:	2210      	movs	r2, #16
 8004e52:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8004e54:	4b09      	ldr	r3, [pc, #36]	; (8004e7c <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004e56:	2201      	movs	r2, #1
 8004e58:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	4a07      	ldr	r2, [pc, #28]	; (8004e7c <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004e5e:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8004e60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004e64:	4905      	ldr	r1, [pc, #20]	; (8004e7c <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004e66:	4806      	ldr	r0, [pc, #24]	; (8004e80 <DISCO_SDRAM_Initialization_sequence+0xbc>)
 8004e68:	f00a f88d 	bl	800ef86 <HAL_SDRAM_SendCommand>

  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&hsdram1, RefreshCount);
 8004e6c:	6879      	ldr	r1, [r7, #4]
 8004e6e:	4804      	ldr	r0, [pc, #16]	; (8004e80 <DISCO_SDRAM_Initialization_sequence+0xbc>)
 8004e70:	f00a f8b4 	bl	800efdc <HAL_SDRAM_ProgramRefreshRate>
}
 8004e74:	bf00      	nop
 8004e76:	3710      	adds	r7, #16
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}
 8004e7c:	200004ec 	.word	0x200004ec
 8004e80:	20009efc 	.word	0x20009efc

08004e84 <TS_Init>:
 * @brief  Initializes and configures the touch screen functionalities and
 *         configures all necessary hardware resources (GPIOs, I2C, clocks..).
 * @retval TS_OK if all initializations are OK. Other value if error.
 */
void TS_Init()
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	af00      	add	r7, sp, #0
	/* Wait at least 200ms after power up before accessing registers
	 * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
	HAL_Delay(200);
 8004e88:	20c8      	movs	r0, #200	; 0xc8
 8004e8a:	f000 ff43 	bl	8005d14 <HAL_Delay>

	TS_DisableIT();
 8004e8e:	f000 f802 	bl	8004e96 <TS_DisableIT>

}
 8004e92:	bf00      	nop
 8004e94:	bd80      	pop	{r7, pc}

08004e96 <TS_DisableIT>:
  * @brief  Configure the FT5336 device to stop generating IT on the given INT pin
  *         connected to MCU as EXTI.
  * @retval None
  */
void TS_DisableIT()
{
 8004e96:	b580      	push	{r7, lr}
 8004e98:	b082      	sub	sp, #8
 8004e9a:	af00      	add	r7, sp, #0
  uint8_t regValue = 0;
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	71fb      	strb	r3, [r7, #7]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	71fb      	strb	r3, [r7, #7]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_I2C_Write(FT5336_GMODE_REG, regValue);
 8004ea4:	79fb      	ldrb	r3, [r7, #7]
 8004ea6:	4619      	mov	r1, r3
 8004ea8:	20a4      	movs	r0, #164	; 0xa4
 8004eaa:	f7ff fa87 	bl	80043bc <TS_I2C_Write>
}
 8004eae:	bf00      	nop
 8004eb0:	3708      	adds	r7, #8
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}
	...

08004eb8 <wm8994_Init>:
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param AudioFreq: Audio Frequency
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Init(uint16_t OutputInputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b086      	sub	sp, #24
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	603a      	str	r2, [r7, #0]
 8004ec2:	80fb      	strh	r3, [r7, #6]
 8004ec4:	460b      	mov	r3, r1
 8004ec6:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 8004ec8:	2300      	movs	r3, #0
 8004eca:	617b      	str	r3, [r7, #20]
  uint16_t output_device = OutputInputDevice & 0xFF;
 8004ecc:	88fb      	ldrh	r3, [r7, #6]
 8004ece:	b2db      	uxtb	r3, r3
 8004ed0:	823b      	strh	r3, [r7, #16]
  uint16_t input_device = OutputInputDevice & 0xFF00;
 8004ed2:	88fb      	ldrh	r3, [r7, #6]
 8004ed4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004ed8:	81fb      	strh	r3, [r7, #14]
  uint16_t power_mgnt_reg_1 = 0;
 8004eda:	2300      	movs	r3, #0
 8004edc:	827b      	strh	r3, [r7, #18]

  /* Initialize the Control interface of the Audio Codec */
  //AUDIO_IO_Init(); // done in main.c

  /* wm8994 Errata Work-Arounds */
  counter += CODEC_IO_Write(0x102, 0x0003);
 8004ede:	2103      	movs	r1, #3
 8004ee0:	f44f 7081 	mov.w	r0, #258	; 0x102
 8004ee4:	f000 feac 	bl	8005c40 <CODEC_IO_Write>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	461a      	mov	r2, r3
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	4413      	add	r3, r2
 8004ef0:	617b      	str	r3, [r7, #20]
  counter += CODEC_IO_Write(0x817, 0x0000);
 8004ef2:	2100      	movs	r1, #0
 8004ef4:	f640 0017 	movw	r0, #2071	; 0x817
 8004ef8:	f000 fea2 	bl	8005c40 <CODEC_IO_Write>
 8004efc:	4603      	mov	r3, r0
 8004efe:	461a      	mov	r2, r3
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	4413      	add	r3, r2
 8004f04:	617b      	str	r3, [r7, #20]
  counter += CODEC_IO_Write(0x102, 0x0000);
 8004f06:	2100      	movs	r1, #0
 8004f08:	f44f 7081 	mov.w	r0, #258	; 0x102
 8004f0c:	f000 fe98 	bl	8005c40 <CODEC_IO_Write>
 8004f10:	4603      	mov	r3, r0
 8004f12:	461a      	mov	r2, r3
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	4413      	add	r3, r2
 8004f18:	617b      	str	r3, [r7, #20]

  /* Enable VMID soft start (fast), Start-up Bias Current Enabled */
  counter += CODEC_IO_Write(0x39, 0x006C);
 8004f1a:	216c      	movs	r1, #108	; 0x6c
 8004f1c:	2039      	movs	r0, #57	; 0x39
 8004f1e:	f000 fe8f 	bl	8005c40 <CODEC_IO_Write>
 8004f22:	4603      	mov	r3, r0
 8004f24:	461a      	mov	r2, r3
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	4413      	add	r3, r2
 8004f2a:	617b      	str	r3, [r7, #20]

    /* Enable bias generator, Enable VMID */
  if (input_device > 0)
 8004f2c:	89fb      	ldrh	r3, [r7, #14]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d009      	beq.n	8004f46 <wm8994_Init+0x8e>
  {
    counter += CODEC_IO_Write(0x01, 0x0013);
 8004f32:	2113      	movs	r1, #19
 8004f34:	2001      	movs	r0, #1
 8004f36:	f000 fe83 	bl	8005c40 <CODEC_IO_Write>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	461a      	mov	r2, r3
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	4413      	add	r3, r2
 8004f42:	617b      	str	r3, [r7, #20]
 8004f44:	e008      	b.n	8004f58 <wm8994_Init+0xa0>
  }
  else
  {
    counter += CODEC_IO_Write(0x01, 0x0003);
 8004f46:	2103      	movs	r1, #3
 8004f48:	2001      	movs	r0, #1
 8004f4a:	f000 fe79 	bl	8005c40 <CODEC_IO_Write>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	461a      	mov	r2, r3
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	4413      	add	r3, r2
 8004f56:	617b      	str	r3, [r7, #20]
  }

  /* Add Delay */
  HAL_Delay(50);
 8004f58:	2032      	movs	r0, #50	; 0x32
 8004f5a:	f000 fedb 	bl	8005d14 <HAL_Delay>

  /* Path Configurations for output */
  if (output_device > 0)
 8004f5e:	8a3b      	ldrh	r3, [r7, #16]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	f000 8111 	beq.w	8005188 <wm8994_Init+0x2d0>
  {
    outputEnabled = 1;
 8004f66:	4bb8      	ldr	r3, [pc, #736]	; (8005248 <wm8994_Init+0x390>)
 8004f68:	2201      	movs	r2, #1
 8004f6a:	601a      	str	r2, [r3, #0]

    switch (output_device)
 8004f6c:	8a3b      	ldrh	r3, [r7, #16]
 8004f6e:	2b03      	cmp	r3, #3
 8004f70:	d06d      	beq.n	800504e <wm8994_Init+0x196>
 8004f72:	2b03      	cmp	r3, #3
 8004f74:	f300 80d5 	bgt.w	8005122 <wm8994_Init+0x26a>
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	d002      	beq.n	8004f82 <wm8994_Init+0xca>
 8004f7c:	2b02      	cmp	r3, #2
 8004f7e:	d033      	beq.n	8004fe8 <wm8994_Init+0x130>
 8004f80:	e0cf      	b.n	8005122 <wm8994_Init+0x26a>
    {
    case OUTPUT_DEVICE_SPEAKER:
      /* Enable DAC1 (Left), Enable DAC1 (Right),
      Disable DAC2 (Left), Disable DAC2 (Right)*/
      counter += CODEC_IO_Write(0x05, 0x0C0C);
 8004f82:	f640 410c 	movw	r1, #3084	; 0xc0c
 8004f86:	2005      	movs	r0, #5
 8004f88:	f000 fe5a 	bl	8005c40 <CODEC_IO_Write>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	461a      	mov	r2, r3
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	4413      	add	r3, r2
 8004f94:	617b      	str	r3, [r7, #20]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(0x601, 0x0000);
 8004f96:	2100      	movs	r1, #0
 8004f98:	f240 6001 	movw	r0, #1537	; 0x601
 8004f9c:	f000 fe50 	bl	8005c40 <CODEC_IO_Write>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	461a      	mov	r2, r3
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	4413      	add	r3, r2
 8004fa8:	617b      	str	r3, [r7, #20]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(0x602, 0x0000);
 8004faa:	2100      	movs	r1, #0
 8004fac:	f240 6002 	movw	r0, #1538	; 0x602
 8004fb0:	f000 fe46 	bl	8005c40 <CODEC_IO_Write>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	461a      	mov	r2, r3
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	4413      	add	r3, r2
 8004fbc:	617b      	str	r3, [r7, #20]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(0x604, 0x0002);
 8004fbe:	2102      	movs	r1, #2
 8004fc0:	f240 6004 	movw	r0, #1540	; 0x604
 8004fc4:	f000 fe3c 	bl	8005c40 <CODEC_IO_Write>
 8004fc8:	4603      	mov	r3, r0
 8004fca:	461a      	mov	r2, r3
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	4413      	add	r3, r2
 8004fd0:	617b      	str	r3, [r7, #20]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(0x605, 0x0002);
 8004fd2:	2102      	movs	r1, #2
 8004fd4:	f240 6005 	movw	r0, #1541	; 0x605
 8004fd8:	f000 fe32 	bl	8005c40 <CODEC_IO_Write>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	461a      	mov	r2, r3
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	4413      	add	r3, r2
 8004fe4:	617b      	str	r3, [r7, #20]
      break;
 8004fe6:	e0d2      	b.n	800518e <wm8994_Init+0x2d6>

    case OUTPUT_DEVICE_HEADPHONE:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(0x05, 0x0303);
 8004fe8:	f240 3103 	movw	r1, #771	; 0x303
 8004fec:	2005      	movs	r0, #5
 8004fee:	f000 fe27 	bl	8005c40 <CODEC_IO_Write>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	461a      	mov	r2, r3
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	4413      	add	r3, r2
 8004ffa:	617b      	str	r3, [r7, #20]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(0x601, 0x0001);
 8004ffc:	2101      	movs	r1, #1
 8004ffe:	f240 6001 	movw	r0, #1537	; 0x601
 8005002:	f000 fe1d 	bl	8005c40 <CODEC_IO_Write>
 8005006:	4603      	mov	r3, r0
 8005008:	461a      	mov	r2, r3
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	4413      	add	r3, r2
 800500e:	617b      	str	r3, [r7, #20]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(0x602, 0x0001);
 8005010:	2101      	movs	r1, #1
 8005012:	f240 6002 	movw	r0, #1538	; 0x602
 8005016:	f000 fe13 	bl	8005c40 <CODEC_IO_Write>
 800501a:	4603      	mov	r3, r0
 800501c:	461a      	mov	r2, r3
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	4413      	add	r3, r2
 8005022:	617b      	str	r3, [r7, #20]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(0x604, 0x0000);
 8005024:	2100      	movs	r1, #0
 8005026:	f240 6004 	movw	r0, #1540	; 0x604
 800502a:	f000 fe09 	bl	8005c40 <CODEC_IO_Write>
 800502e:	4603      	mov	r3, r0
 8005030:	461a      	mov	r2, r3
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	4413      	add	r3, r2
 8005036:	617b      	str	r3, [r7, #20]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(0x605, 0x0000);
 8005038:	2100      	movs	r1, #0
 800503a:	f240 6005 	movw	r0, #1541	; 0x605
 800503e:	f000 fdff 	bl	8005c40 <CODEC_IO_Write>
 8005042:	4603      	mov	r3, r0
 8005044:	461a      	mov	r2, r3
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	4413      	add	r3, r2
 800504a:	617b      	str	r3, [r7, #20]
      break;
 800504c:	e09f      	b.n	800518e <wm8994_Init+0x2d6>

    case OUTPUT_DEVICE_BOTH:
      if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 800504e:	89fb      	ldrh	r3, [r7, #14]
 8005050:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005054:	d132      	bne.n	80050bc <wm8994_Init+0x204>
      {
        /* Enable DAC1 (Left), Enable DAC1 (Right),
        also Enable DAC2 (Left), Enable DAC2 (Right)*/
        counter += CODEC_IO_Write(0x05, 0x0303 | 0x0C0C);
 8005056:	f640 710f 	movw	r1, #3855	; 0xf0f
 800505a:	2005      	movs	r0, #5
 800505c:	f000 fdf0 	bl	8005c40 <CODEC_IO_Write>
 8005060:	4603      	mov	r3, r0
 8005062:	461a      	mov	r2, r3
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	4413      	add	r3, r2
 8005068:	617b      	str	r3, [r7, #20]

        /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 1 (Left) mixer path */
        counter += CODEC_IO_Write(0x601, 0x0003);
 800506a:	2103      	movs	r1, #3
 800506c:	f240 6001 	movw	r0, #1537	; 0x601
 8005070:	f000 fde6 	bl	8005c40 <CODEC_IO_Write>
 8005074:	4603      	mov	r3, r0
 8005076:	461a      	mov	r2, r3
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	4413      	add	r3, r2
 800507c:	617b      	str	r3, [r7, #20]

        /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 1 (Right) mixer path */
        counter += CODEC_IO_Write(0x602, 0x0003);
 800507e:	2103      	movs	r1, #3
 8005080:	f240 6002 	movw	r0, #1538	; 0x602
 8005084:	f000 fddc 	bl	8005c40 <CODEC_IO_Write>
 8005088:	4603      	mov	r3, r0
 800508a:	461a      	mov	r2, r3
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	4413      	add	r3, r2
 8005090:	617b      	str	r3, [r7, #20]

        /* Enable the AIF1 Timeslot 0 (Left) to DAC 2 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path  */
        counter += CODEC_IO_Write(0x604, 0x0003);
 8005092:	2103      	movs	r1, #3
 8005094:	f240 6004 	movw	r0, #1540	; 0x604
 8005098:	f000 fdd2 	bl	8005c40 <CODEC_IO_Write>
 800509c:	4603      	mov	r3, r0
 800509e:	461a      	mov	r2, r3
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	4413      	add	r3, r2
 80050a4:	617b      	str	r3, [r7, #20]

        /* Enable the AIF1 Timeslot 0 (Right) to DAC 2 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(0x605, 0x0003);
 80050a6:	2103      	movs	r1, #3
 80050a8:	f240 6005 	movw	r0, #1541	; 0x605
 80050ac:	f000 fdc8 	bl	8005c40 <CODEC_IO_Write>
 80050b0:	4603      	mov	r3, r0
 80050b2:	461a      	mov	r2, r3
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	4413      	add	r3, r2
 80050b8:	617b      	str	r3, [r7, #20]
        counter += CODEC_IO_Write(0x604, 0x0002);

        /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(0x605, 0x0002);
      }
      break;
 80050ba:	e068      	b.n	800518e <wm8994_Init+0x2d6>
        counter += CODEC_IO_Write(0x05, 0x0303 | 0x0C0C);
 80050bc:	f640 710f 	movw	r1, #3855	; 0xf0f
 80050c0:	2005      	movs	r0, #5
 80050c2:	f000 fdbd 	bl	8005c40 <CODEC_IO_Write>
 80050c6:	4603      	mov	r3, r0
 80050c8:	461a      	mov	r2, r3
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	4413      	add	r3, r2
 80050ce:	617b      	str	r3, [r7, #20]
        counter += CODEC_IO_Write(0x601, 0x0001);
 80050d0:	2101      	movs	r1, #1
 80050d2:	f240 6001 	movw	r0, #1537	; 0x601
 80050d6:	f000 fdb3 	bl	8005c40 <CODEC_IO_Write>
 80050da:	4603      	mov	r3, r0
 80050dc:	461a      	mov	r2, r3
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	4413      	add	r3, r2
 80050e2:	617b      	str	r3, [r7, #20]
        counter += CODEC_IO_Write(0x602, 0x0001);
 80050e4:	2101      	movs	r1, #1
 80050e6:	f240 6002 	movw	r0, #1538	; 0x602
 80050ea:	f000 fda9 	bl	8005c40 <CODEC_IO_Write>
 80050ee:	4603      	mov	r3, r0
 80050f0:	461a      	mov	r2, r3
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	4413      	add	r3, r2
 80050f6:	617b      	str	r3, [r7, #20]
        counter += CODEC_IO_Write(0x604, 0x0002);
 80050f8:	2102      	movs	r1, #2
 80050fa:	f240 6004 	movw	r0, #1540	; 0x604
 80050fe:	f000 fd9f 	bl	8005c40 <CODEC_IO_Write>
 8005102:	4603      	mov	r3, r0
 8005104:	461a      	mov	r2, r3
 8005106:	697b      	ldr	r3, [r7, #20]
 8005108:	4413      	add	r3, r2
 800510a:	617b      	str	r3, [r7, #20]
        counter += CODEC_IO_Write(0x605, 0x0002);
 800510c:	2102      	movs	r1, #2
 800510e:	f240 6005 	movw	r0, #1541	; 0x605
 8005112:	f000 fd95 	bl	8005c40 <CODEC_IO_Write>
 8005116:	4603      	mov	r3, r0
 8005118:	461a      	mov	r2, r3
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	4413      	add	r3, r2
 800511e:	617b      	str	r3, [r7, #20]
      break;
 8005120:	e035      	b.n	800518e <wm8994_Init+0x2d6>

    case OUTPUT_DEVICE_AUTO :
    default:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(0x05, 0x0303);
 8005122:	f240 3103 	movw	r1, #771	; 0x303
 8005126:	2005      	movs	r0, #5
 8005128:	f000 fd8a 	bl	8005c40 <CODEC_IO_Write>
 800512c:	4603      	mov	r3, r0
 800512e:	461a      	mov	r2, r3
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	4413      	add	r3, r2
 8005134:	617b      	str	r3, [r7, #20]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(0x601, 0x0001);
 8005136:	2101      	movs	r1, #1
 8005138:	f240 6001 	movw	r0, #1537	; 0x601
 800513c:	f000 fd80 	bl	8005c40 <CODEC_IO_Write>
 8005140:	4603      	mov	r3, r0
 8005142:	461a      	mov	r2, r3
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	4413      	add	r3, r2
 8005148:	617b      	str	r3, [r7, #20]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(0x602, 0x0001);
 800514a:	2101      	movs	r1, #1
 800514c:	f240 6002 	movw	r0, #1538	; 0x602
 8005150:	f000 fd76 	bl	8005c40 <CODEC_IO_Write>
 8005154:	4603      	mov	r3, r0
 8005156:	461a      	mov	r2, r3
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	4413      	add	r3, r2
 800515c:	617b      	str	r3, [r7, #20]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(0x604, 0x0000);
 800515e:	2100      	movs	r1, #0
 8005160:	f240 6004 	movw	r0, #1540	; 0x604
 8005164:	f000 fd6c 	bl	8005c40 <CODEC_IO_Write>
 8005168:	4603      	mov	r3, r0
 800516a:	461a      	mov	r2, r3
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	4413      	add	r3, r2
 8005170:	617b      	str	r3, [r7, #20]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(0x605, 0x0000);
 8005172:	2100      	movs	r1, #0
 8005174:	f240 6005 	movw	r0, #1541	; 0x605
 8005178:	f000 fd62 	bl	8005c40 <CODEC_IO_Write>
 800517c:	4603      	mov	r3, r0
 800517e:	461a      	mov	r2, r3
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	4413      	add	r3, r2
 8005184:	617b      	str	r3, [r7, #20]
      break;
 8005186:	e002      	b.n	800518e <wm8994_Init+0x2d6>
    }
  }
  else
  {
    outputEnabled = 0;
 8005188:	4b2f      	ldr	r3, [pc, #188]	; (8005248 <wm8994_Init+0x390>)
 800518a:	2200      	movs	r2, #0
 800518c:	601a      	str	r2, [r3, #0]
  }

  /* Path Configurations for input */
  if (input_device > 0)
 800518e:	89fb      	ldrh	r3, [r7, #14]
 8005190:	2b00      	cmp	r3, #0
 8005192:	f000 8151 	beq.w	8005438 <wm8994_Init+0x580>
  {
    inputEnabled = 1;
 8005196:	4b2d      	ldr	r3, [pc, #180]	; (800524c <wm8994_Init+0x394>)
 8005198:	2201      	movs	r2, #1
 800519a:	601a      	str	r2, [r3, #0]
    switch (input_device)
 800519c:	89fb      	ldrh	r3, [r7, #14]
 800519e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051a2:	f000 80ea 	beq.w	800537a <wm8994_Init+0x4c2>
 80051a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051aa:	f300 8141 	bgt.w	8005430 <wm8994_Init+0x578>
 80051ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80051b2:	d04d      	beq.n	8005250 <wm8994_Init+0x398>
 80051b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80051b8:	f300 813a 	bgt.w	8005430 <wm8994_Init+0x578>
 80051bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051c0:	f000 809e 	beq.w	8005300 <wm8994_Init+0x448>
 80051c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051c8:	f040 8132 	bne.w	8005430 <wm8994_Init+0x578>
    {
    case INPUT_DEVICE_DIGITAL_MICROPHONE_2 :
      /* Enable AIF1ADC2 (Left), Enable AIF1ADC2 (Right)
       * Enable DMICDAT2 (Left), Enable DMICDAT2 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(0x04, 0x0C30);
 80051cc:	f44f 6143 	mov.w	r1, #3120	; 0xc30
 80051d0:	2004      	movs	r0, #4
 80051d2:	f000 fd35 	bl	8005c40 <CODEC_IO_Write>
 80051d6:	4603      	mov	r3, r0
 80051d8:	461a      	mov	r2, r3
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	4413      	add	r3, r2
 80051de:	617b      	str	r3, [r7, #20]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(0x450, 0x00DB);
 80051e0:	21db      	movs	r1, #219	; 0xdb
 80051e2:	f44f 608a 	mov.w	r0, #1104	; 0x450
 80051e6:	f000 fd2b 	bl	8005c40 <CODEC_IO_Write>
 80051ea:	4603      	mov	r3, r0
 80051ec:	461a      	mov	r2, r3
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	4413      	add	r3, r2
 80051f2:	617b      	str	r3, [r7, #20]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(0x02, 0x6000);
 80051f4:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80051f8:	2002      	movs	r0, #2
 80051fa:	f000 fd21 	bl	8005c40 <CODEC_IO_Write>
 80051fe:	4603      	mov	r3, r0
 8005200:	461a      	mov	r2, r3
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	4413      	add	r3, r2
 8005206:	617b      	str	r3, [r7, #20]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(0x608, 0x0002);
 8005208:	2102      	movs	r1, #2
 800520a:	f44f 60c1 	mov.w	r0, #1544	; 0x608
 800520e:	f000 fd17 	bl	8005c40 <CODEC_IO_Write>
 8005212:	4603      	mov	r3, r0
 8005214:	461a      	mov	r2, r3
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	4413      	add	r3, r2
 800521a:	617b      	str	r3, [r7, #20]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(0x609, 0x0002);
 800521c:	2102      	movs	r1, #2
 800521e:	f240 6009 	movw	r0, #1545	; 0x609
 8005222:	f000 fd0d 	bl	8005c40 <CODEC_IO_Write>
 8005226:	4603      	mov	r3, r0
 8005228:	461a      	mov	r2, r3
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	4413      	add	r3, r2
 800522e:	617b      	str	r3, [r7, #20]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC2 signal detect */
      counter += CODEC_IO_Write(0x700, 0x000E);
 8005230:	210e      	movs	r1, #14
 8005232:	f44f 60e0 	mov.w	r0, #1792	; 0x700
 8005236:	f000 fd03 	bl	8005c40 <CODEC_IO_Write>
 800523a:	4603      	mov	r3, r0
 800523c:	461a      	mov	r2, r3
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	4413      	add	r3, r2
 8005242:	617b      	str	r3, [r7, #20]
      break;
 8005244:	e0fb      	b.n	800543e <wm8994_Init+0x586>
 8005246:	bf00      	nop
 8005248:	200004fc 	.word	0x200004fc
 800524c:	20000500 	.word	0x20000500

    case INPUT_DEVICE_INPUT_LINE_1 :
      /* IN1LN_TO_IN1L, IN1LP_TO_VMID, IN1RN_TO_IN1R, IN1RP_TO_VMID */
      counter += CODEC_IO_Write(0x28, 0x0011);
 8005250:	2111      	movs	r1, #17
 8005252:	2028      	movs	r0, #40	; 0x28
 8005254:	f000 fcf4 	bl	8005c40 <CODEC_IO_Write>
 8005258:	4603      	mov	r3, r0
 800525a:	461a      	mov	r2, r3
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	4413      	add	r3, r2
 8005260:	617b      	str	r3, [r7, #20]

      /* Disable mute on IN1L_TO_MIXINL and +30dB on IN1L PGA output */
      // syd : counter += CODEC_IO_Write(0x29, 0x0035);
      /* CHANGE! MIXOUTR_MIXINR_VOL set to 0 (mute)
         +30db removed : 0x0020 instead of 0x0035  */
      counter += CODEC_IO_Write(0x29, 0x0020);
 8005262:	2120      	movs	r1, #32
 8005264:	2029      	movs	r0, #41	; 0x29
 8005266:	f000 fceb 	bl	8005c40 <CODEC_IO_Write>
 800526a:	4603      	mov	r3, r0
 800526c:	461a      	mov	r2, r3
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	4413      	add	r3, r2
 8005272:	617b      	str	r3, [r7, #20]

      /* Disable mute on IN1R_TO_MIXINL, Gain = +30dB */
      //syd : counter += CODEC_IO_Write(0x2A, 0x0035);
      /* CHANGE! MIXOUTL_MIXINL_VOL set to 0 (mute)
         +30db removed : 0x0020 instead of 0x0035  */
      counter += CODEC_IO_Write(0x2A, 0x0020);
 8005274:	2120      	movs	r1, #32
 8005276:	202a      	movs	r0, #42	; 0x2a
 8005278:	f000 fce2 	bl	8005c40 <CODEC_IO_Write>
 800527c:	4603      	mov	r3, r0
 800527e:	461a      	mov	r2, r3
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	4413      	add	r3, r2
 8005284:	617b      	str	r3, [r7, #20]

      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(0x04, 0x0303);
 8005286:	f240 3103 	movw	r1, #771	; 0x303
 800528a:	2004      	movs	r0, #4
 800528c:	f000 fcd8 	bl	8005c40 <CODEC_IO_Write>
 8005290:	4603      	mov	r3, r0
 8005292:	461a      	mov	r2, r3
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	4413      	add	r3, r2
 8005298:	617b      	str	r3, [r7, #20]

      /* Enable AIF1 DRC1 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(0x440, 0x00DB);
 800529a:	21db      	movs	r1, #219	; 0xdb
 800529c:	f44f 6088 	mov.w	r0, #1088	; 0x440
 80052a0:	f000 fcce 	bl	8005c40 <CODEC_IO_Write>
 80052a4:	4603      	mov	r3, r0
 80052a6:	461a      	mov	r2, r3
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	4413      	add	r3, r2
 80052ac:	617b      	str	r3, [r7, #20]

      /* Enable IN1L and IN1R, Disable IN2L and IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(0x02, 0x6350);
 80052ae:	f246 3150 	movw	r1, #25424	; 0x6350
 80052b2:	2002      	movs	r0, #2
 80052b4:	f000 fcc4 	bl	8005c40 <CODEC_IO_Write>
 80052b8:	4603      	mov	r3, r0
 80052ba:	461a      	mov	r2, r3
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	4413      	add	r3, r2
 80052c0:	617b      	str	r3, [r7, #20]

      /* Enable the ADCL(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(0x606, 0x0002);
 80052c2:	2102      	movs	r1, #2
 80052c4:	f240 6006 	movw	r0, #1542	; 0x606
 80052c8:	f000 fcba 	bl	8005c40 <CODEC_IO_Write>
 80052cc:	4603      	mov	r3, r0
 80052ce:	461a      	mov	r2, r3
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	4413      	add	r3, r2
 80052d4:	617b      	str	r3, [r7, #20]

      /* Enable the ADCR(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(0x607, 0x0002);
 80052d6:	2102      	movs	r1, #2
 80052d8:	f240 6007 	movw	r0, #1543	; 0x607
 80052dc:	f000 fcb0 	bl	8005c40 <CODEC_IO_Write>
 80052e0:	4603      	mov	r3, r0
 80052e2:	461a      	mov	r2, r3
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	4413      	add	r3, r2
 80052e8:	617b      	str	r3, [r7, #20]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(0x700, 0x000D);
 80052ea:	210d      	movs	r1, #13
 80052ec:	f44f 60e0 	mov.w	r0, #1792	; 0x700
 80052f0:	f000 fca6 	bl	8005c40 <CODEC_IO_Write>
 80052f4:	4603      	mov	r3, r0
 80052f6:	461a      	mov	r2, r3
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	4413      	add	r3, r2
 80052fc:	617b      	str	r3, [r7, #20]
      break;
 80052fe:	e09e      	b.n	800543e <wm8994_Init+0x586>

    case INPUT_DEVICE_DIGITAL_MICROPHONE_1 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(0x04, 0x030C);
 8005300:	f44f 7143 	mov.w	r1, #780	; 0x30c
 8005304:	2004      	movs	r0, #4
 8005306:	f000 fc9b 	bl	8005c40 <CODEC_IO_Write>
 800530a:	4603      	mov	r3, r0
 800530c:	461a      	mov	r2, r3
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	4413      	add	r3, r2
 8005312:	617b      	str	r3, [r7, #20]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(0x440, 0x00DB);
 8005314:	21db      	movs	r1, #219	; 0xdb
 8005316:	f44f 6088 	mov.w	r0, #1088	; 0x440
 800531a:	f000 fc91 	bl	8005c40 <CODEC_IO_Write>
 800531e:	4603      	mov	r3, r0
 8005320:	461a      	mov	r2, r3
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	4413      	add	r3, r2
 8005326:	617b      	str	r3, [r7, #20]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(0x02, 0x6350);
 8005328:	f246 3150 	movw	r1, #25424	; 0x6350
 800532c:	2002      	movs	r0, #2
 800532e:	f000 fc87 	bl	8005c40 <CODEC_IO_Write>
 8005332:	4603      	mov	r3, r0
 8005334:	461a      	mov	r2, r3
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	4413      	add	r3, r2
 800533a:	617b      	str	r3, [r7, #20]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(0x606, 0x0002);
 800533c:	2102      	movs	r1, #2
 800533e:	f240 6006 	movw	r0, #1542	; 0x606
 8005342:	f000 fc7d 	bl	8005c40 <CODEC_IO_Write>
 8005346:	4603      	mov	r3, r0
 8005348:	461a      	mov	r2, r3
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	4413      	add	r3, r2
 800534e:	617b      	str	r3, [r7, #20]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(0x607, 0x0002);
 8005350:	2102      	movs	r1, #2
 8005352:	f240 6007 	movw	r0, #1543	; 0x607
 8005356:	f000 fc73 	bl	8005c40 <CODEC_IO_Write>
 800535a:	4603      	mov	r3, r0
 800535c:	461a      	mov	r2, r3
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	4413      	add	r3, r2
 8005362:	617b      	str	r3, [r7, #20]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(0x700, 0x000D);
 8005364:	210d      	movs	r1, #13
 8005366:	f44f 60e0 	mov.w	r0, #1792	; 0x700
 800536a:	f000 fc69 	bl	8005c40 <CODEC_IO_Write>
 800536e:	4603      	mov	r3, r0
 8005370:	461a      	mov	r2, r3
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	4413      	add	r3, r2
 8005376:	617b      	str	r3, [r7, #20]
      break;
 8005378:	e061      	b.n	800543e <wm8994_Init+0x586>
    case INPUT_DEVICE_DIGITAL_MIC1_MIC2 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(0x04, 0x0F3C);
 800537a:	f640 713c 	movw	r1, #3900	; 0xf3c
 800537e:	2004      	movs	r0, #4
 8005380:	f000 fc5e 	bl	8005c40 <CODEC_IO_Write>
 8005384:	4603      	mov	r3, r0
 8005386:	461a      	mov	r2, r3
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	4413      	add	r3, r2
 800538c:	617b      	str	r3, [r7, #20]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(0x450, 0x00DB);
 800538e:	21db      	movs	r1, #219	; 0xdb
 8005390:	f44f 608a 	mov.w	r0, #1104	; 0x450
 8005394:	f000 fc54 	bl	8005c40 <CODEC_IO_Write>
 8005398:	4603      	mov	r3, r0
 800539a:	461a      	mov	r2, r3
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	4413      	add	r3, r2
 80053a0:	617b      	str	r3, [r7, #20]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(0x440, 0x00DB);
 80053a2:	21db      	movs	r1, #219	; 0xdb
 80053a4:	f44f 6088 	mov.w	r0, #1088	; 0x440
 80053a8:	f000 fc4a 	bl	8005c40 <CODEC_IO_Write>
 80053ac:	4603      	mov	r3, r0
 80053ae:	461a      	mov	r2, r3
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	4413      	add	r3, r2
 80053b4:	617b      	str	r3, [r7, #20]

      /* Disable IN1L, IN1R, Enable IN2L, IN2R, Thermal sensor & shutdown */
      counter += CODEC_IO_Write(0x02, 0x63A0);
 80053b6:	f246 31a0 	movw	r1, #25504	; 0x63a0
 80053ba:	2002      	movs	r0, #2
 80053bc:	f000 fc40 	bl	8005c40 <CODEC_IO_Write>
 80053c0:	4603      	mov	r3, r0
 80053c2:	461a      	mov	r2, r3
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	4413      	add	r3, r2
 80053c8:	617b      	str	r3, [r7, #20]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(0x606, 0x0002);
 80053ca:	2102      	movs	r1, #2
 80053cc:	f240 6006 	movw	r0, #1542	; 0x606
 80053d0:	f000 fc36 	bl	8005c40 <CODEC_IO_Write>
 80053d4:	4603      	mov	r3, r0
 80053d6:	461a      	mov	r2, r3
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	4413      	add	r3, r2
 80053dc:	617b      	str	r3, [r7, #20]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(0x607, 0x0002);
 80053de:	2102      	movs	r1, #2
 80053e0:	f240 6007 	movw	r0, #1543	; 0x607
 80053e4:	f000 fc2c 	bl	8005c40 <CODEC_IO_Write>
 80053e8:	4603      	mov	r3, r0
 80053ea:	461a      	mov	r2, r3
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	4413      	add	r3, r2
 80053f0:	617b      	str	r3, [r7, #20]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(0x608, 0x0002);
 80053f2:	2102      	movs	r1, #2
 80053f4:	f44f 60c1 	mov.w	r0, #1544	; 0x608
 80053f8:	f000 fc22 	bl	8005c40 <CODEC_IO_Write>
 80053fc:	4603      	mov	r3, r0
 80053fe:	461a      	mov	r2, r3
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	4413      	add	r3, r2
 8005404:	617b      	str	r3, [r7, #20]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(0x609, 0x0002);
 8005406:	2102      	movs	r1, #2
 8005408:	f240 6009 	movw	r0, #1545	; 0x609
 800540c:	f000 fc18 	bl	8005c40 <CODEC_IO_Write>
 8005410:	4603      	mov	r3, r0
 8005412:	461a      	mov	r2, r3
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	4413      	add	r3, r2
 8005418:	617b      	str	r3, [r7, #20]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(0x700, 0x000D);
 800541a:	210d      	movs	r1, #13
 800541c:	f44f 60e0 	mov.w	r0, #1792	; 0x700
 8005420:	f000 fc0e 	bl	8005c40 <CODEC_IO_Write>
 8005424:	4603      	mov	r3, r0
 8005426:	461a      	mov	r2, r3
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	4413      	add	r3, r2
 800542c:	617b      	str	r3, [r7, #20]
      break;
 800542e:	e006      	b.n	800543e <wm8994_Init+0x586>
    case INPUT_DEVICE_INPUT_LINE_2 :
    default:
      /* Actually, no other input devices supported */
      counter++;
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	3301      	adds	r3, #1
 8005434:	617b      	str	r3, [r7, #20]
      break;
 8005436:	e002      	b.n	800543e <wm8994_Init+0x586>
    }
  }
  else
  {
    inputEnabled = 0;
 8005438:	4bb4      	ldr	r3, [pc, #720]	; (800570c <wm8994_Init+0x854>)
 800543a:	2200      	movs	r2, #0
 800543c:	601a      	str	r2, [r3, #0]
  }

  /*  Clock Configurations */
  switch (AudioFreq)
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	4ab3      	ldr	r2, [pc, #716]	; (8005710 <wm8994_Init+0x858>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d069      	beq.n	800551a <wm8994_Init+0x662>
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	4ab1      	ldr	r2, [pc, #708]	; (8005710 <wm8994_Init+0x858>)
 800544a:	4293      	cmp	r3, r2
 800544c:	f200 8091 	bhi.w	8005572 <wm8994_Init+0x6ba>
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8005456:	4293      	cmp	r3, r2
 8005458:	d054      	beq.n	8005504 <wm8994_Init+0x64c>
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8005460:	4293      	cmp	r3, r2
 8005462:	f200 8086 	bhi.w	8005572 <wm8994_Init+0x6ba>
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	f64a 4244 	movw	r2, #44100	; 0xac44
 800546c:	4293      	cmp	r3, r2
 800546e:	d075      	beq.n	800555c <wm8994_Init+0x6a4>
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	f64a 4244 	movw	r2, #44100	; 0xac44
 8005476:	4293      	cmp	r3, r2
 8005478:	d87b      	bhi.n	8005572 <wm8994_Init+0x6ba>
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8005480:	d035      	beq.n	80054ee <wm8994_Init+0x636>
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8005488:	d873      	bhi.n	8005572 <wm8994_Init+0x6ba>
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	f245 6222 	movw	r2, #22050	; 0x5622
 8005490:	4293      	cmp	r3, r2
 8005492:	d058      	beq.n	8005546 <wm8994_Init+0x68e>
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	f245 6222 	movw	r2, #22050	; 0x5622
 800549a:	4293      	cmp	r3, r2
 800549c:	d869      	bhi.n	8005572 <wm8994_Init+0x6ba>
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 80054a4:	d018      	beq.n	80054d8 <wm8994_Init+0x620>
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 80054ac:	d861      	bhi.n	8005572 <wm8994_Init+0x6ba>
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 80054b4:	d005      	beq.n	80054c2 <wm8994_Init+0x60a>
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	f642 3211 	movw	r2, #11025	; 0x2b11
 80054bc:	4293      	cmp	r3, r2
 80054be:	d037      	beq.n	8005530 <wm8994_Init+0x678>
 80054c0:	e057      	b.n	8005572 <wm8994_Init+0x6ba>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */
    counter += CODEC_IO_Write(0x210, 0x0003);
 80054c2:	2103      	movs	r1, #3
 80054c4:	f44f 7004 	mov.w	r0, #528	; 0x210
 80054c8:	f000 fbba 	bl	8005c40 <CODEC_IO_Write>
 80054cc:	4603      	mov	r3, r0
 80054ce:	461a      	mov	r2, r3
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	4413      	add	r3, r2
 80054d4:	617b      	str	r3, [r7, #20]
    break;
 80054d6:	e057      	b.n	8005588 <wm8994_Init+0x6d0>

  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */
    counter += CODEC_IO_Write(0x210, 0x0033);
 80054d8:	2133      	movs	r1, #51	; 0x33
 80054da:	f44f 7004 	mov.w	r0, #528	; 0x210
 80054de:	f000 fbaf 	bl	8005c40 <CODEC_IO_Write>
 80054e2:	4603      	mov	r3, r0
 80054e4:	461a      	mov	r2, r3
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	4413      	add	r3, r2
 80054ea:	617b      	str	r3, [r7, #20]
    break;
 80054ec:	e04c      	b.n	8005588 <wm8994_Init+0x6d0>

  case  AUDIO_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */
    counter += CODEC_IO_Write(0x210, 0x0063);
 80054ee:	2163      	movs	r1, #99	; 0x63
 80054f0:	f44f 7004 	mov.w	r0, #528	; 0x210
 80054f4:	f000 fba4 	bl	8005c40 <CODEC_IO_Write>
 80054f8:	4603      	mov	r3, r0
 80054fa:	461a      	mov	r2, r3
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	4413      	add	r3, r2
 8005500:	617b      	str	r3, [r7, #20]
    break;
 8005502:	e041      	b.n	8005588 <wm8994_Init+0x6d0>

  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */
    counter += CODEC_IO_Write(0x210, 0x0083);
 8005504:	2183      	movs	r1, #131	; 0x83
 8005506:	f44f 7004 	mov.w	r0, #528	; 0x210
 800550a:	f000 fb99 	bl	8005c40 <CODEC_IO_Write>
 800550e:	4603      	mov	r3, r0
 8005510:	461a      	mov	r2, r3
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	4413      	add	r3, r2
 8005516:	617b      	str	r3, [r7, #20]
    break;
 8005518:	e036      	b.n	8005588 <wm8994_Init+0x6d0>

  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */
    counter += CODEC_IO_Write(0x210, 0x00A3);
 800551a:	21a3      	movs	r1, #163	; 0xa3
 800551c:	f44f 7004 	mov.w	r0, #528	; 0x210
 8005520:	f000 fb8e 	bl	8005c40 <CODEC_IO_Write>
 8005524:	4603      	mov	r3, r0
 8005526:	461a      	mov	r2, r3
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	4413      	add	r3, r2
 800552c:	617b      	str	r3, [r7, #20]
    break;
 800552e:	e02b      	b.n	8005588 <wm8994_Init+0x6d0>

  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */
    counter += CODEC_IO_Write(0x210, 0x0013);
 8005530:	2113      	movs	r1, #19
 8005532:	f44f 7004 	mov.w	r0, #528	; 0x210
 8005536:	f000 fb83 	bl	8005c40 <CODEC_IO_Write>
 800553a:	4603      	mov	r3, r0
 800553c:	461a      	mov	r2, r3
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	4413      	add	r3, r2
 8005542:	617b      	str	r3, [r7, #20]
    break;
 8005544:	e020      	b.n	8005588 <wm8994_Init+0x6d0>

  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */
    counter += CODEC_IO_Write(0x210, 0x0043);
 8005546:	2143      	movs	r1, #67	; 0x43
 8005548:	f44f 7004 	mov.w	r0, #528	; 0x210
 800554c:	f000 fb78 	bl	8005c40 <CODEC_IO_Write>
 8005550:	4603      	mov	r3, r0
 8005552:	461a      	mov	r2, r3
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	4413      	add	r3, r2
 8005558:	617b      	str	r3, [r7, #20]
    break;
 800555a:	e015      	b.n	8005588 <wm8994_Init+0x6d0>

  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */
    counter += CODEC_IO_Write(0x210, 0x0073);
 800555c:	2173      	movs	r1, #115	; 0x73
 800555e:	f44f 7004 	mov.w	r0, #528	; 0x210
 8005562:	f000 fb6d 	bl	8005c40 <CODEC_IO_Write>
 8005566:	4603      	mov	r3, r0
 8005568:	461a      	mov	r2, r3
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	4413      	add	r3, r2
 800556e:	617b      	str	r3, [r7, #20]
    break;
 8005570:	e00a      	b.n	8005588 <wm8994_Init+0x6d0>

  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */
    counter += CODEC_IO_Write(0x210, 0x0083);
 8005572:	2183      	movs	r1, #131	; 0x83
 8005574:	f44f 7004 	mov.w	r0, #528	; 0x210
 8005578:	f000 fb62 	bl	8005c40 <CODEC_IO_Write>
 800557c:	4603      	mov	r3, r0
 800557e:	461a      	mov	r2, r3
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	4413      	add	r3, r2
 8005584:	617b      	str	r3, [r7, #20]
    break;
 8005586:	bf00      	nop
  }

  if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8005588:	89fb      	ldrh	r3, [r7, #14]
 800558a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800558e:	d10b      	bne.n	80055a8 <wm8994_Init+0x6f0>
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = DSP mode */
  counter += CODEC_IO_Write(0x300, 0x4018);
 8005590:	f244 0118 	movw	r1, #16408	; 0x4018
 8005594:	f44f 7040 	mov.w	r0, #768	; 0x300
 8005598:	f000 fb52 	bl	8005c40 <CODEC_IO_Write>
 800559c:	4603      	mov	r3, r0
 800559e:	461a      	mov	r2, r3
 80055a0:	697b      	ldr	r3, [r7, #20]
 80055a2:	4413      	add	r3, r2
 80055a4:	617b      	str	r3, [r7, #20]
 80055a6:	e00a      	b.n	80055be <wm8994_Init+0x706>
  }
  else
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = I2S (Default Register Value) */
  counter += CODEC_IO_Write(0x300, 0x4010);
 80055a8:	f244 0110 	movw	r1, #16400	; 0x4010
 80055ac:	f44f 7040 	mov.w	r0, #768	; 0x300
 80055b0:	f000 fb46 	bl	8005c40 <CODEC_IO_Write>
 80055b4:	4603      	mov	r3, r0
 80055b6:	461a      	mov	r2, r3
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	4413      	add	r3, r2
 80055bc:	617b      	str	r3, [r7, #20]
  }

  /* slave mode */
  counter += CODEC_IO_Write(0x302, 0x0000);
 80055be:	2100      	movs	r1, #0
 80055c0:	f240 3002 	movw	r0, #770	; 0x302
 80055c4:	f000 fb3c 	bl	8005c40 <CODEC_IO_Write>
 80055c8:	4603      	mov	r3, r0
 80055ca:	461a      	mov	r2, r3
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	4413      	add	r3, r2
 80055d0:	617b      	str	r3, [r7, #20]

  /* Enable the DSP processing clock for AIF1, Enable the core clock */
  counter += CODEC_IO_Write(0x208, 0x000A);
 80055d2:	210a      	movs	r1, #10
 80055d4:	f44f 7002 	mov.w	r0, #520	; 0x208
 80055d8:	f000 fb32 	bl	8005c40 <CODEC_IO_Write>
 80055dc:	4603      	mov	r3, r0
 80055de:	461a      	mov	r2, r3
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	4413      	add	r3, r2
 80055e4:	617b      	str	r3, [r7, #20]

  /* Enable AIF1 Clock, AIF1 Clock Source = MCLK1 pin */
  counter += CODEC_IO_Write(0x200, 0x0001);
 80055e6:	2101      	movs	r1, #1
 80055e8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80055ec:	f000 fb28 	bl	8005c40 <CODEC_IO_Write>
 80055f0:	4603      	mov	r3, r0
 80055f2:	461a      	mov	r2, r3
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	4413      	add	r3, r2
 80055f8:	617b      	str	r3, [r7, #20]

  if (output_device > 0)  /* Audio output selected */
 80055fa:	8a3b      	ldrh	r3, [r7, #16]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	f000 812c 	beq.w	800585a <wm8994_Init+0x9a2>
  {
    if (output_device == OUTPUT_DEVICE_HEADPHONE)
 8005602:	8a3b      	ldrh	r3, [r7, #16]
 8005604:	2b02      	cmp	r3, #2
 8005606:	d142      	bne.n	800568e <wm8994_Init+0x7d6>
    {
      /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
      counter += CODEC_IO_Write(0x2D, 0x0100);
 8005608:	f44f 7180 	mov.w	r1, #256	; 0x100
 800560c:	202d      	movs	r0, #45	; 0x2d
 800560e:	f000 fb17 	bl	8005c40 <CODEC_IO_Write>
 8005612:	4603      	mov	r3, r0
 8005614:	461a      	mov	r2, r3
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	4413      	add	r3, r2
 800561a:	617b      	str	r3, [r7, #20]

      /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
      counter += CODEC_IO_Write(0x2E, 0x0100);
 800561c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005620:	202e      	movs	r0, #46	; 0x2e
 8005622:	f000 fb0d 	bl	8005c40 <CODEC_IO_Write>
 8005626:	4603      	mov	r3, r0
 8005628:	461a      	mov	r2, r3
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	4413      	add	r3, r2
 800562e:	617b      	str	r3, [r7, #20]

      /* Startup sequence for Headphone */
      if(ColdStartup)
 8005630:	4b38      	ldr	r3, [pc, #224]	; (8005714 <wm8994_Init+0x85c>)
 8005632:	781b      	ldrb	r3, [r3, #0]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d012      	beq.n	800565e <wm8994_Init+0x7a6>
      {
        counter += CODEC_IO_Write(0x110,0x8100);
 8005638:	f44f 4101 	mov.w	r1, #33024	; 0x8100
 800563c:	f44f 7088 	mov.w	r0, #272	; 0x110
 8005640:	f000 fafe 	bl	8005c40 <CODEC_IO_Write>
 8005644:	4603      	mov	r3, r0
 8005646:	461a      	mov	r2, r3
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	4413      	add	r3, r2
 800564c:	617b      	str	r3, [r7, #20]

        ColdStartup=0;
 800564e:	4b31      	ldr	r3, [pc, #196]	; (8005714 <wm8994_Init+0x85c>)
 8005650:	2200      	movs	r2, #0
 8005652:	701a      	strb	r2, [r3, #0]
        /* Add Delay */
        HAL_Delay(300);
 8005654:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8005658:	f000 fb5c 	bl	8005d14 <HAL_Delay>
 800565c:	e00d      	b.n	800567a <wm8994_Init+0x7c2>
      }
      else /* Headphone Warm Start-Up */
      {
        counter += CODEC_IO_Write(0x110,0x8108);
 800565e:	f248 1108 	movw	r1, #33032	; 0x8108
 8005662:	f44f 7088 	mov.w	r0, #272	; 0x110
 8005666:	f000 faeb 	bl	8005c40 <CODEC_IO_Write>
 800566a:	4603      	mov	r3, r0
 800566c:	461a      	mov	r2, r3
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	4413      	add	r3, r2
 8005672:	617b      	str	r3, [r7, #20]
        /* Add Delay */
        HAL_Delay(50);
 8005674:	2032      	movs	r0, #50	; 0x32
 8005676:	f000 fb4d 	bl	8005d14 <HAL_Delay>
      }

      /* Soft un-Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(0x420, 0x0000);
 800567a:	2100      	movs	r1, #0
 800567c:	f44f 6084 	mov.w	r0, #1056	; 0x420
 8005680:	f000 fade 	bl	8005c40 <CODEC_IO_Write>
 8005684:	4603      	mov	r3, r0
 8005686:	461a      	mov	r2, r3
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	4413      	add	r3, r2
 800568c:	617b      	str	r3, [r7, #20]
    }
    /* Analog Output Configuration */

    /* Enable SPKRVOL PGA, Enable SPKMIXR, Enable SPKLVOL PGA, Enable SPKMIXL */
    counter += CODEC_IO_Write(0x03, 0x0300);
 800568e:	f44f 7140 	mov.w	r1, #768	; 0x300
 8005692:	2003      	movs	r0, #3
 8005694:	f000 fad4 	bl	8005c40 <CODEC_IO_Write>
 8005698:	4603      	mov	r3, r0
 800569a:	461a      	mov	r2, r3
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	4413      	add	r3, r2
 80056a0:	617b      	str	r3, [r7, #20]

    /* Left Speaker Mixer Volume = 0dB */
    counter += CODEC_IO_Write(0x22, 0x0000);
 80056a2:	2100      	movs	r1, #0
 80056a4:	2022      	movs	r0, #34	; 0x22
 80056a6:	f000 facb 	bl	8005c40 <CODEC_IO_Write>
 80056aa:	4603      	mov	r3, r0
 80056ac:	461a      	mov	r2, r3
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	4413      	add	r3, r2
 80056b2:	617b      	str	r3, [r7, #20]

    /* Speaker output mode = Class D, Right Speaker Mixer Volume = 0dB ((0x23, 0x0100) = class AB)*/
    counter += CODEC_IO_Write(0x23, 0x0000);
 80056b4:	2100      	movs	r1, #0
 80056b6:	2023      	movs	r0, #35	; 0x23
 80056b8:	f000 fac2 	bl	8005c40 <CODEC_IO_Write>
 80056bc:	4603      	mov	r3, r0
 80056be:	461a      	mov	r2, r3
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	4413      	add	r3, r2
 80056c4:	617b      	str	r3, [r7, #20]

    /* Unmute DAC2 (Left) to Left Speaker Mixer (SPKMIXL) path,
    Unmute DAC2 (Right) to Right Speaker Mixer (SPKMIXR) path */
    counter += CODEC_IO_Write(0x36, 0x0300);
 80056c6:	f44f 7140 	mov.w	r1, #768	; 0x300
 80056ca:	2036      	movs	r0, #54	; 0x36
 80056cc:	f000 fab8 	bl	8005c40 <CODEC_IO_Write>
 80056d0:	4603      	mov	r3, r0
 80056d2:	461a      	mov	r2, r3
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	4413      	add	r3, r2
 80056d8:	617b      	str	r3, [r7, #20]

    /* Enable bias generator, Enable VMID, Enable SPKOUTL, Enable SPKOUTR */
    counter += CODEC_IO_Write(0x01, 0x3003);
 80056da:	f243 0103 	movw	r1, #12291	; 0x3003
 80056de:	2001      	movs	r0, #1
 80056e0:	f000 faae 	bl	8005c40 <CODEC_IO_Write>
 80056e4:	4603      	mov	r3, r0
 80056e6:	461a      	mov	r2, r3
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	4413      	add	r3, r2
 80056ec:	617b      	str	r3, [r7, #20]

    /* Headphone/Speaker Enable */

    if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 80056ee:	89fb      	ldrh	r3, [r7, #14]
 80056f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056f4:	d110      	bne.n	8005718 <wm8994_Init+0x860>
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslots 0 and 1 */
    counter += CODEC_IO_Write(0x51, 0x0205);
 80056f6:	f240 2105 	movw	r1, #517	; 0x205
 80056fa:	2051      	movs	r0, #81	; 0x51
 80056fc:	f000 faa0 	bl	8005c40 <CODEC_IO_Write>
 8005700:	4603      	mov	r3, r0
 8005702:	461a      	mov	r2, r3
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	4413      	add	r3, r2
 8005708:	617b      	str	r3, [r7, #20]
 800570a:	e00e      	b.n	800572a <wm8994_Init+0x872>
 800570c:	20000500 	.word	0x20000500
 8005710:	00017700 	.word	0x00017700
 8005714:	20000018 	.word	0x20000018
    }
    else
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslot 0 */
    counter += CODEC_IO_Write(0x51, 0x0005);
 8005718:	2105      	movs	r1, #5
 800571a:	2051      	movs	r0, #81	; 0x51
 800571c:	f000 fa90 	bl	8005c40 <CODEC_IO_Write>
 8005720:	4603      	mov	r3, r0
 8005722:	461a      	mov	r2, r3
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	4413      	add	r3, r2
 8005728:	617b      	str	r3, [r7, #20]
    }

    /* Enable bias generator, Enable VMID, Enable HPOUT1 (Left) and Enable HPOUT1 (Right) input stages */
    /* idem for Speaker */
    power_mgnt_reg_1 |= 0x0303 | 0x3003;
 800572a:	8a7b      	ldrh	r3, [r7, #18]
 800572c:	f443 534c 	orr.w	r3, r3, #13056	; 0x3300
 8005730:	f043 0303 	orr.w	r3, r3, #3
 8005734:	827b      	strh	r3, [r7, #18]
    counter += CODEC_IO_Write(0x01, power_mgnt_reg_1);
 8005736:	8a7b      	ldrh	r3, [r7, #18]
 8005738:	4619      	mov	r1, r3
 800573a:	2001      	movs	r0, #1
 800573c:	f000 fa80 	bl	8005c40 <CODEC_IO_Write>
 8005740:	4603      	mov	r3, r0
 8005742:	461a      	mov	r2, r3
 8005744:	697b      	ldr	r3, [r7, #20]
 8005746:	4413      	add	r3, r2
 8005748:	617b      	str	r3, [r7, #20]

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate stages */
    counter += CODEC_IO_Write(0x60, 0x0022);
 800574a:	2122      	movs	r1, #34	; 0x22
 800574c:	2060      	movs	r0, #96	; 0x60
 800574e:	f000 fa77 	bl	8005c40 <CODEC_IO_Write>
 8005752:	4603      	mov	r3, r0
 8005754:	461a      	mov	r2, r3
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	4413      	add	r3, r2
 800575a:	617b      	str	r3, [r7, #20]

    /* Enable Charge Pump */
    counter += CODEC_IO_Write(0x4C, 0x9F25);
 800575c:	f649 7125 	movw	r1, #40741	; 0x9f25
 8005760:	204c      	movs	r0, #76	; 0x4c
 8005762:	f000 fa6d 	bl	8005c40 <CODEC_IO_Write>
 8005766:	4603      	mov	r3, r0
 8005768:	461a      	mov	r2, r3
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	4413      	add	r3, r2
 800576e:	617b      	str	r3, [r7, #20]

    /* Add Delay */
    HAL_Delay(15);
 8005770:	200f      	movs	r0, #15
 8005772:	f000 facf 	bl	8005d14 <HAL_Delay>

    /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
    counter += CODEC_IO_Write(0x2D, 0x0001);
 8005776:	2101      	movs	r1, #1
 8005778:	202d      	movs	r0, #45	; 0x2d
 800577a:	f000 fa61 	bl	8005c40 <CODEC_IO_Write>
 800577e:	4603      	mov	r3, r0
 8005780:	461a      	mov	r2, r3
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	4413      	add	r3, r2
 8005786:	617b      	str	r3, [r7, #20]

    /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
    counter += CODEC_IO_Write(0x2E, 0x0001);
 8005788:	2101      	movs	r1, #1
 800578a:	202e      	movs	r0, #46	; 0x2e
 800578c:	f000 fa58 	bl	8005c40 <CODEC_IO_Write>
 8005790:	4603      	mov	r3, r0
 8005792:	461a      	mov	r2, r3
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	4413      	add	r3, r2
 8005798:	617b      	str	r3, [r7, #20]

    /* Enable Left Output Mixer (MIXOUTL), Enable Right Output Mixer (MIXOUTR) */
    /* idem for SPKOUTL and SPKOUTR */
    counter += CODEC_IO_Write(0x03, 0x0030 | 0x0300);
 800579a:	f44f 714c 	mov.w	r1, #816	; 0x330
 800579e:	2003      	movs	r0, #3
 80057a0:	f000 fa4e 	bl	8005c40 <CODEC_IO_Write>
 80057a4:	4603      	mov	r3, r0
 80057a6:	461a      	mov	r2, r3
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	4413      	add	r3, r2
 80057ac:	617b      	str	r3, [r7, #20]

    /* Enable DC Servo and trigger start-up mode on left and right channels */
    counter += CODEC_IO_Write(0x54, 0x0033);
 80057ae:	2133      	movs	r1, #51	; 0x33
 80057b0:	2054      	movs	r0, #84	; 0x54
 80057b2:	f000 fa45 	bl	8005c40 <CODEC_IO_Write>
 80057b6:	4603      	mov	r3, r0
 80057b8:	461a      	mov	r2, r3
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	4413      	add	r3, r2
 80057be:	617b      	str	r3, [r7, #20]

    /* Add Delay */
    HAL_Delay(257);
 80057c0:	f240 1001 	movw	r0, #257	; 0x101
 80057c4:	f000 faa6 	bl	8005d14 <HAL_Delay>

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate and output stages. Remove clamps */
    counter += CODEC_IO_Write(0x60, 0x00EE);
 80057c8:	21ee      	movs	r1, #238	; 0xee
 80057ca:	2060      	movs	r0, #96	; 0x60
 80057cc:	f000 fa38 	bl	8005c40 <CODEC_IO_Write>
 80057d0:	4603      	mov	r3, r0
 80057d2:	461a      	mov	r2, r3
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	4413      	add	r3, r2
 80057d8:	617b      	str	r3, [r7, #20]

    /* Unmutes */

    /* Unmute DAC 1 (Left) */
    counter += CODEC_IO_Write(0x610, 0x00C0);
 80057da:	21c0      	movs	r1, #192	; 0xc0
 80057dc:	f44f 60c2 	mov.w	r0, #1552	; 0x610
 80057e0:	f000 fa2e 	bl	8005c40 <CODEC_IO_Write>
 80057e4:	4603      	mov	r3, r0
 80057e6:	461a      	mov	r2, r3
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	4413      	add	r3, r2
 80057ec:	617b      	str	r3, [r7, #20]

    /* Unmute DAC 1 (Right) */
    counter += CODEC_IO_Write(0x611, 0x00C0);
 80057ee:	21c0      	movs	r1, #192	; 0xc0
 80057f0:	f240 6011 	movw	r0, #1553	; 0x611
 80057f4:	f000 fa24 	bl	8005c40 <CODEC_IO_Write>
 80057f8:	4603      	mov	r3, r0
 80057fa:	461a      	mov	r2, r3
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	4413      	add	r3, r2
 8005800:	617b      	str	r3, [r7, #20]

    /* Unmute the AIF1 Timeslot 0 DAC path */
    counter += CODEC_IO_Write(0x420, 0x0010);
 8005802:	2110      	movs	r1, #16
 8005804:	f44f 6084 	mov.w	r0, #1056	; 0x420
 8005808:	f000 fa1a 	bl	8005c40 <CODEC_IO_Write>
 800580c:	4603      	mov	r3, r0
 800580e:	461a      	mov	r2, r3
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	4413      	add	r3, r2
 8005814:	617b      	str	r3, [r7, #20]

    /* Unmute DAC 2 (Left) */
    counter += CODEC_IO_Write(0x612, 0x00C0);
 8005816:	21c0      	movs	r1, #192	; 0xc0
 8005818:	f240 6012 	movw	r0, #1554	; 0x612
 800581c:	f000 fa10 	bl	8005c40 <CODEC_IO_Write>
 8005820:	4603      	mov	r3, r0
 8005822:	461a      	mov	r2, r3
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	4413      	add	r3, r2
 8005828:	617b      	str	r3, [r7, #20]

    /* Unmute DAC 2 (Right) */
    counter += CODEC_IO_Write(0x613, 0x00C0);
 800582a:	21c0      	movs	r1, #192	; 0xc0
 800582c:	f240 6013 	movw	r0, #1555	; 0x613
 8005830:	f000 fa06 	bl	8005c40 <CODEC_IO_Write>
 8005834:	4603      	mov	r3, r0
 8005836:	461a      	mov	r2, r3
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	4413      	add	r3, r2
 800583c:	617b      	str	r3, [r7, #20]

    /* Unmute the AIF1 Timeslot 1 DAC2 path */
    counter += CODEC_IO_Write(0x422, 0x0010);
 800583e:	2110      	movs	r1, #16
 8005840:	f240 4022 	movw	r0, #1058	; 0x422
 8005844:	f000 f9fc 	bl	8005c40 <CODEC_IO_Write>
 8005848:	4603      	mov	r3, r0
 800584a:	461a      	mov	r2, r3
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	4413      	add	r3, r2
 8005850:	617b      	str	r3, [r7, #20]

    /* Volume Control */
    wm8994_SetVolume(Volume);
 8005852:	797b      	ldrb	r3, [r7, #5]
 8005854:	4618      	mov	r0, r3
 8005856:	f000 f899 	bl	800598c <wm8994_SetVolume>
  }

  if (input_device > 0) /* Audio input selected */
 800585a:	89fb      	ldrh	r3, [r7, #14]
 800585c:	2b00      	cmp	r3, #0
 800585e:	f000 8088 	beq.w	8005972 <wm8994_Init+0xaba>
  {
    if ((input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_1) || (input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_2))
 8005862:	89fb      	ldrh	r3, [r7, #14]
 8005864:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005868:	d003      	beq.n	8005872 <wm8994_Init+0x9ba>
 800586a:	89fb      	ldrh	r3, [r7, #14]
 800586c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005870:	d123      	bne.n	80058ba <wm8994_Init+0xa02>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 8005872:	8a7b      	ldrh	r3, [r7, #18]
 8005874:	f043 0313 	orr.w	r3, r3, #19
 8005878:	827b      	strh	r3, [r7, #18]
      counter += CODEC_IO_Write(0x01, power_mgnt_reg_1);
 800587a:	8a7b      	ldrh	r3, [r7, #18]
 800587c:	4619      	mov	r1, r3
 800587e:	2001      	movs	r0, #1
 8005880:	f000 f9de 	bl	8005c40 <CODEC_IO_Write>
 8005884:	4603      	mov	r3, r0
 8005886:	461a      	mov	r2, r3
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	4413      	add	r3, r2
 800588c:	617b      	str	r3, [r7, #20]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(0x620, 0x0002);
 800588e:	2102      	movs	r1, #2
 8005890:	f44f 60c4 	mov.w	r0, #1568	; 0x620
 8005894:	f000 f9d4 	bl	8005c40 <CODEC_IO_Write>
 8005898:	4603      	mov	r3, r0
 800589a:	461a      	mov	r2, r3
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	4413      	add	r3, r2
 80058a0:	617b      	str	r3, [r7, #20]

      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(0x411, 0x3800);
 80058a2:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 80058a6:	f240 4011 	movw	r0, #1041	; 0x411
 80058aa:	f000 f9c9 	bl	8005c40 <CODEC_IO_Write>
 80058ae:	4603      	mov	r3, r0
 80058b0:	461a      	mov	r2, r3
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	4413      	add	r3, r2
 80058b6:	617b      	str	r3, [r7, #20]
 80058b8:	e057      	b.n	800596a <wm8994_Init+0xab2>
    }
    else if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 80058ba:	89fb      	ldrh	r3, [r7, #14]
 80058bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80058c0:	d12e      	bne.n	8005920 <wm8994_Init+0xa68>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 80058c2:	8a7b      	ldrh	r3, [r7, #18]
 80058c4:	f043 0313 	orr.w	r3, r3, #19
 80058c8:	827b      	strh	r3, [r7, #18]
      counter += CODEC_IO_Write(0x01, power_mgnt_reg_1);
 80058ca:	8a7b      	ldrh	r3, [r7, #18]
 80058cc:	4619      	mov	r1, r3
 80058ce:	2001      	movs	r0, #1
 80058d0:	f000 f9b6 	bl	8005c40 <CODEC_IO_Write>
 80058d4:	4603      	mov	r3, r0
 80058d6:	461a      	mov	r2, r3
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	4413      	add	r3, r2
 80058dc:	617b      	str	r3, [r7, #20]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(0x620, 0x0002);
 80058de:	2102      	movs	r1, #2
 80058e0:	f44f 60c4 	mov.w	r0, #1568	; 0x620
 80058e4:	f000 f9ac 	bl	8005c40 <CODEC_IO_Write>
 80058e8:	4603      	mov	r3, r0
 80058ea:	461a      	mov	r2, r3
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	4413      	add	r3, r2
 80058f0:	617b      	str	r3, [r7, #20]

      /* AIF ADC1 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(0x410, 0x1800);
 80058f2:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80058f6:	f44f 6082 	mov.w	r0, #1040	; 0x410
 80058fa:	f000 f9a1 	bl	8005c40 <CODEC_IO_Write>
 80058fe:	4603      	mov	r3, r0
 8005900:	461a      	mov	r2, r3
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	4413      	add	r3, r2
 8005906:	617b      	str	r3, [r7, #20]

      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(0x411, 0x1800);
 8005908:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800590c:	f240 4011 	movw	r0, #1041	; 0x411
 8005910:	f000 f996 	bl	8005c40 <CODEC_IO_Write>
 8005914:	4603      	mov	r3, r0
 8005916:	461a      	mov	r2, r3
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	4413      	add	r3, r2
 800591c:	617b      	str	r3, [r7, #20]
 800591e:	e024      	b.n	800596a <wm8994_Init+0xab2>
    }
    else if ((input_device == INPUT_DEVICE_INPUT_LINE_1) || (input_device == INPUT_DEVICE_INPUT_LINE_2))
 8005920:	89fb      	ldrh	r3, [r7, #14]
 8005922:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005926:	d003      	beq.n	8005930 <wm8994_Init+0xa78>
 8005928:	89fb      	ldrh	r3, [r7, #14]
 800592a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800592e:	d11c      	bne.n	800596a <wm8994_Init+0xab2>
    {

      /* Disable mute on IN1L, IN1L Volume = +0dB */
      counter += CODEC_IO_Write(0x18, 0x000B);
 8005930:	210b      	movs	r1, #11
 8005932:	2018      	movs	r0, #24
 8005934:	f000 f984 	bl	8005c40 <CODEC_IO_Write>
 8005938:	4603      	mov	r3, r0
 800593a:	461a      	mov	r2, r3
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	4413      	add	r3, r2
 8005940:	617b      	str	r3, [r7, #20]

      /* Disable mute on IN1R, IN1R Volume = +0dB */
      counter += CODEC_IO_Write(0x1A, 0x000B);
 8005942:	210b      	movs	r1, #11
 8005944:	201a      	movs	r0, #26
 8005946:	f000 f97b 	bl	8005c40 <CODEC_IO_Write>
 800594a:	4603      	mov	r3, r0
 800594c:	461a      	mov	r2, r3
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	4413      	add	r3, r2
 8005952:	617b      	str	r3, [r7, #20]

      /* AIF ADC1 HPF enable, HPF cut = hifi mode fc=4Hz at fs=48kHz */
      counter += CODEC_IO_Write(0x410, 0x1800);
 8005954:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005958:	f44f 6082 	mov.w	r0, #1040	; 0x410
 800595c:	f000 f970 	bl	8005c40 <CODEC_IO_Write>
 8005960:	4603      	mov	r3, r0
 8005962:	461a      	mov	r2, r3
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	4413      	add	r3, r2
 8005968:	617b      	str	r3, [r7, #20]
    }
    /* Volume Control */
    wm8994_SetVolume(Volume);
 800596a:	797b      	ldrb	r3, [r7, #5]
 800596c:	4618      	mov	r0, r3
 800596e:	f000 f80d 	bl	800598c <wm8994_SetVolume>
  }
  /* Return communication control value */
  return counter;
 8005972:	697b      	ldr	r3, [r7, #20]
}
 8005974:	4618      	mov	r0, r3
 8005976:	3718      	adds	r7, #24
 8005978:	46bd      	mov	sp, r7
 800597a:	bd80      	pop	{r7, pc}

0800597c <wm8994_ReadID>:
/**
  * @brief  Get the WM8994 ID.
  * @retval The WM8994 ID
  */
uint32_t wm8994_ReadID()
{
 800597c:	b580      	push	{r7, lr}
 800597e:	af00      	add	r7, sp, #0
  /* Initialize the Control interface of the Audio Codec */
  //AUDIO_IO_Init(); // done in main.c

  return ((uint32_t)AUDIO_I2C_Read(WM8994_CHIPID_ADDR));
 8005980:	2000      	movs	r0, #0
 8005982:	f7fe fcf1 	bl	8004368 <AUDIO_I2C_Read>
 8005986:	4603      	mov	r3, r0
}
 8005988:	4618      	mov	r0, r3
 800598a:	bd80      	pop	{r7, pc}

0800598c <wm8994_SetVolume>:
  * @param Volume: a byte value from 0 to 255 (refer to codec registers
  *         description for more details).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetVolume(uint8_t Volume)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b084      	sub	sp, #16
 8005990:	af00      	add	r7, sp, #0
 8005992:	4603      	mov	r3, r0
 8005994:	71fb      	strb	r3, [r7, #7]
  uint32_t counter = 0;
 8005996:	2300      	movs	r3, #0
 8005998:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 800599a:	79fb      	ldrb	r3, [r7, #7]
 800599c:	2b64      	cmp	r3, #100	; 0x64
 800599e:	d80b      	bhi.n	80059b8 <wm8994_SetVolume+0x2c>
 80059a0:	79fa      	ldrb	r2, [r7, #7]
 80059a2:	4613      	mov	r3, r2
 80059a4:	019b      	lsls	r3, r3, #6
 80059a6:	1a9b      	subs	r3, r3, r2
 80059a8:	4a75      	ldr	r2, [pc, #468]	; (8005b80 <wm8994_SetVolume+0x1f4>)
 80059aa:	fb82 1203 	smull	r1, r2, r2, r3
 80059ae:	1152      	asrs	r2, r2, #5
 80059b0:	17db      	asrs	r3, r3, #31
 80059b2:	1ad3      	subs	r3, r2, r3
 80059b4:	b2db      	uxtb	r3, r3
 80059b6:	e000      	b.n	80059ba <wm8994_SetVolume+0x2e>
 80059b8:	233f      	movs	r3, #63	; 0x3f
 80059ba:	72fb      	strb	r3, [r7, #11]

  /* Output volume */
  if (outputEnabled != 0)
 80059bc:	4b71      	ldr	r3, [pc, #452]	; (8005b84 <wm8994_SetVolume+0x1f8>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	f000 8081 	beq.w	8005ac8 <wm8994_SetVolume+0x13c>
  {
    if(convertedvol > 0x3E)
 80059c6:	7afb      	ldrb	r3, [r7, #11]
 80059c8:	2b3e      	cmp	r3, #62	; 0x3e
 80059ca:	d92f      	bls.n	8005a2c <wm8994_SetVolume+0xa0>
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(AUDIO_MUTE_OFF);
 80059cc:	2000      	movs	r0, #0
 80059ce:	f000 f8dd 	bl	8005b8c <wm8994_SetMute>
 80059d2:	4602      	mov	r2, r0
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	4413      	add	r3, r2
 80059d8:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(0x1C, 0x3F | 0x140);
 80059da:	f240 117f 	movw	r1, #383	; 0x17f
 80059de:	201c      	movs	r0, #28
 80059e0:	f000 f92e 	bl	8005c40 <CODEC_IO_Write>
 80059e4:	4603      	mov	r3, r0
 80059e6:	461a      	mov	r2, r3
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	4413      	add	r3, r2
 80059ec:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(0x1D, 0x3F | 0x140);
 80059ee:	f240 117f 	movw	r1, #383	; 0x17f
 80059f2:	201d      	movs	r0, #29
 80059f4:	f000 f924 	bl	8005c40 <CODEC_IO_Write>
 80059f8:	4603      	mov	r3, r0
 80059fa:	461a      	mov	r2, r3
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	4413      	add	r3, r2
 8005a00:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(0x26, 0x3F | 0x140);
 8005a02:	f240 117f 	movw	r1, #383	; 0x17f
 8005a06:	2026      	movs	r0, #38	; 0x26
 8005a08:	f000 f91a 	bl	8005c40 <CODEC_IO_Write>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	461a      	mov	r2, r3
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	4413      	add	r3, r2
 8005a14:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(0x27, 0x3F | 0x140);
 8005a16:	f240 117f 	movw	r1, #383	; 0x17f
 8005a1a:	2027      	movs	r0, #39	; 0x27
 8005a1c:	f000 f910 	bl	8005c40 <CODEC_IO_Write>
 8005a20:	4603      	mov	r3, r0
 8005a22:	461a      	mov	r2, r3
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	4413      	add	r3, r2
 8005a28:	60fb      	str	r3, [r7, #12]
 8005a2a:	e04d      	b.n	8005ac8 <wm8994_SetVolume+0x13c>
    }
    else if (Volume == 0)
 8005a2c:	79fb      	ldrb	r3, [r7, #7]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d107      	bne.n	8005a42 <wm8994_SetVolume+0xb6>
    {
      /* Mute audio codec */
      counter += wm8994_SetMute(AUDIO_MUTE_ON);
 8005a32:	2001      	movs	r0, #1
 8005a34:	f000 f8aa 	bl	8005b8c <wm8994_SetMute>
 8005a38:	4602      	mov	r2, r0
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	4413      	add	r3, r2
 8005a3e:	60fb      	str	r3, [r7, #12]
 8005a40:	e042      	b.n	8005ac8 <wm8994_SetVolume+0x13c>
    }
    else
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(AUDIO_MUTE_OFF);
 8005a42:	2000      	movs	r0, #0
 8005a44:	f000 f8a2 	bl	8005b8c <wm8994_SetMute>
 8005a48:	4602      	mov	r2, r0
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	4413      	add	r3, r2
 8005a4e:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(0x1C, convertedvol | 0x140);
 8005a50:	7afb      	ldrb	r3, [r7, #11]
 8005a52:	b21b      	sxth	r3, r3
 8005a54:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8005a58:	b21b      	sxth	r3, r3
 8005a5a:	b29b      	uxth	r3, r3
 8005a5c:	4619      	mov	r1, r3
 8005a5e:	201c      	movs	r0, #28
 8005a60:	f000 f8ee 	bl	8005c40 <CODEC_IO_Write>
 8005a64:	4603      	mov	r3, r0
 8005a66:	461a      	mov	r2, r3
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	4413      	add	r3, r2
 8005a6c:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(0x1D, convertedvol | 0x140);
 8005a6e:	7afb      	ldrb	r3, [r7, #11]
 8005a70:	b21b      	sxth	r3, r3
 8005a72:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8005a76:	b21b      	sxth	r3, r3
 8005a78:	b29b      	uxth	r3, r3
 8005a7a:	4619      	mov	r1, r3
 8005a7c:	201d      	movs	r0, #29
 8005a7e:	f000 f8df 	bl	8005c40 <CODEC_IO_Write>
 8005a82:	4603      	mov	r3, r0
 8005a84:	461a      	mov	r2, r3
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	4413      	add	r3, r2
 8005a8a:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(0x26, convertedvol | 0x140);
 8005a8c:	7afb      	ldrb	r3, [r7, #11]
 8005a8e:	b21b      	sxth	r3, r3
 8005a90:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8005a94:	b21b      	sxth	r3, r3
 8005a96:	b29b      	uxth	r3, r3
 8005a98:	4619      	mov	r1, r3
 8005a9a:	2026      	movs	r0, #38	; 0x26
 8005a9c:	f000 f8d0 	bl	8005c40 <CODEC_IO_Write>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	461a      	mov	r2, r3
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	4413      	add	r3, r2
 8005aa8:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(0x27, convertedvol | 0x140);
 8005aaa:	7afb      	ldrb	r3, [r7, #11]
 8005aac:	b21b      	sxth	r3, r3
 8005aae:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8005ab2:	b21b      	sxth	r3, r3
 8005ab4:	b29b      	uxth	r3, r3
 8005ab6:	4619      	mov	r1, r3
 8005ab8:	2027      	movs	r0, #39	; 0x27
 8005aba:	f000 f8c1 	bl	8005c40 <CODEC_IO_Write>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	461a      	mov	r2, r3
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	4413      	add	r3, r2
 8005ac6:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Input volume */
  if (inputEnabled != 0)
 8005ac8:	4b2f      	ldr	r3, [pc, #188]	; (8005b88 <wm8994_SetVolume+0x1fc>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d051      	beq.n	8005b74 <wm8994_SetVolume+0x1e8>
  {
    convertedvol = VOLUME_IN_CONVERT(Volume);
 8005ad0:	79fb      	ldrb	r3, [r7, #7]
 8005ad2:	2b63      	cmp	r3, #99	; 0x63
 8005ad4:	d80c      	bhi.n	8005af0 <wm8994_SetVolume+0x164>
 8005ad6:	79fa      	ldrb	r2, [r7, #7]
 8005ad8:	4613      	mov	r3, r2
 8005ada:	011b      	lsls	r3, r3, #4
 8005adc:	1a9b      	subs	r3, r3, r2
 8005ade:	011b      	lsls	r3, r3, #4
 8005ae0:	4a27      	ldr	r2, [pc, #156]	; (8005b80 <wm8994_SetVolume+0x1f4>)
 8005ae2:	fb82 1203 	smull	r1, r2, r2, r3
 8005ae6:	1152      	asrs	r2, r2, #5
 8005ae8:	17db      	asrs	r3, r3, #31
 8005aea:	1ad3      	subs	r3, r2, r3
 8005aec:	b2db      	uxtb	r3, r3
 8005aee:	e000      	b.n	8005af2 <wm8994_SetVolume+0x166>
 8005af0:	23ef      	movs	r3, #239	; 0xef
 8005af2:	72fb      	strb	r3, [r7, #11]

    /* Left AIF1 ADC1 volume */
    counter += CODEC_IO_Write(0x400, convertedvol | 0x100);
 8005af4:	7afb      	ldrb	r3, [r7, #11]
 8005af6:	b21b      	sxth	r3, r3
 8005af8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005afc:	b21b      	sxth	r3, r3
 8005afe:	b29b      	uxth	r3, r3
 8005b00:	4619      	mov	r1, r3
 8005b02:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8005b06:	f000 f89b 	bl	8005c40 <CODEC_IO_Write>
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	461a      	mov	r2, r3
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	4413      	add	r3, r2
 8005b12:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC1 volume */
    counter += CODEC_IO_Write(0x401, convertedvol | 0x100);
 8005b14:	7afb      	ldrb	r3, [r7, #11]
 8005b16:	b21b      	sxth	r3, r3
 8005b18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b1c:	b21b      	sxth	r3, r3
 8005b1e:	b29b      	uxth	r3, r3
 8005b20:	4619      	mov	r1, r3
 8005b22:	f240 4001 	movw	r0, #1025	; 0x401
 8005b26:	f000 f88b 	bl	8005c40 <CODEC_IO_Write>
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	461a      	mov	r2, r3
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	4413      	add	r3, r2
 8005b32:	60fb      	str	r3, [r7, #12]

    /* Left AIF1 ADC2 volume */
    counter += CODEC_IO_Write(0x404, convertedvol | 0x100);
 8005b34:	7afb      	ldrb	r3, [r7, #11]
 8005b36:	b21b      	sxth	r3, r3
 8005b38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b3c:	b21b      	sxth	r3, r3
 8005b3e:	b29b      	uxth	r3, r3
 8005b40:	4619      	mov	r1, r3
 8005b42:	f240 4004 	movw	r0, #1028	; 0x404
 8005b46:	f000 f87b 	bl	8005c40 <CODEC_IO_Write>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	461a      	mov	r2, r3
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	4413      	add	r3, r2
 8005b52:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC2 volume */
    counter += CODEC_IO_Write(0x405, convertedvol | 0x100);
 8005b54:	7afb      	ldrb	r3, [r7, #11]
 8005b56:	b21b      	sxth	r3, r3
 8005b58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b5c:	b21b      	sxth	r3, r3
 8005b5e:	b29b      	uxth	r3, r3
 8005b60:	4619      	mov	r1, r3
 8005b62:	f240 4005 	movw	r0, #1029	; 0x405
 8005b66:	f000 f86b 	bl	8005c40 <CODEC_IO_Write>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	461a      	mov	r2, r3
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	4413      	add	r3, r2
 8005b72:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 8005b74:	68fb      	ldr	r3, [r7, #12]
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	3710      	adds	r7, #16
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}
 8005b7e:	bf00      	nop
 8005b80:	51eb851f 	.word	0x51eb851f
 8005b84:	200004fc 	.word	0x200004fc
 8005b88:	20000500 	.word	0x20000500

08005b8c <wm8994_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetMute(uint32_t Cmd)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b084      	sub	sp, #16
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
  uint32_t counter = 0;
 8005b94:	2300      	movs	r3, #0
 8005b96:	60fb      	str	r3, [r7, #12]

  if (outputEnabled != 0)
 8005b98:	4b1b      	ldr	r3, [pc, #108]	; (8005c08 <wm8994_SetMute+0x7c>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d02d      	beq.n	8005bfc <wm8994_SetMute+0x70>
  {
    /* Set the Mute mode */
    if(Cmd == AUDIO_MUTE_ON)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2b01      	cmp	r3, #1
 8005ba4:	d116      	bne.n	8005bd4 <wm8994_SetMute+0x48>
    {
      /* Soft Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(0x420, 0x0200);
 8005ba6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005baa:	f44f 6084 	mov.w	r0, #1056	; 0x420
 8005bae:	f000 f847 	bl	8005c40 <CODEC_IO_Write>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	461a      	mov	r2, r3
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	4413      	add	r3, r2
 8005bba:	60fb      	str	r3, [r7, #12]

      /* Soft Mute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(0x422, 0x0200);
 8005bbc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005bc0:	f240 4022 	movw	r0, #1058	; 0x422
 8005bc4:	f000 f83c 	bl	8005c40 <CODEC_IO_Write>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	461a      	mov	r2, r3
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	4413      	add	r3, r2
 8005bd0:	60fb      	str	r3, [r7, #12]
 8005bd2:	e013      	b.n	8005bfc <wm8994_SetMute+0x70>
    }
    else /* AUDIO_MUTE_OFF Disable the Mute */
    {
      /* Unmute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(0x420, 0x0010);
 8005bd4:	2110      	movs	r1, #16
 8005bd6:	f44f 6084 	mov.w	r0, #1056	; 0x420
 8005bda:	f000 f831 	bl	8005c40 <CODEC_IO_Write>
 8005bde:	4603      	mov	r3, r0
 8005be0:	461a      	mov	r2, r3
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	4413      	add	r3, r2
 8005be6:	60fb      	str	r3, [r7, #12]

      /* Unmute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(0x422, 0x0010);
 8005be8:	2110      	movs	r1, #16
 8005bea:	f240 4022 	movw	r0, #1058	; 0x422
 8005bee:	f000 f827 	bl	8005c40 <CODEC_IO_Write>
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	461a      	mov	r2, r3
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	4413      	add	r3, r2
 8005bfa:	60fb      	str	r3, [r7, #12]
    }
  }
  return counter;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	3710      	adds	r7, #16
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}
 8005c06:	bf00      	nop
 8005c08:	200004fc 	.word	0x200004fc

08005c0c <wm8994_Reset>:
/**
  * @brief Resets wm8994 registers.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Reset()
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b082      	sub	sp, #8
 8005c10:	af00      	add	r7, sp, #0
  uint32_t counter = 0;
 8005c12:	2300      	movs	r3, #0
 8005c14:	607b      	str	r3, [r7, #4]

  /* Reset Codec by writing in 0x0000 address register */
  counter = CODEC_IO_Write(0x0000, 0x0000);
 8005c16:	2100      	movs	r1, #0
 8005c18:	2000      	movs	r0, #0
 8005c1a:	f000 f811 	bl	8005c40 <CODEC_IO_Write>
 8005c1e:	4603      	mov	r3, r0
 8005c20:	607b      	str	r3, [r7, #4]
  outputEnabled = 0;
 8005c22:	4b05      	ldr	r3, [pc, #20]	; (8005c38 <wm8994_Reset+0x2c>)
 8005c24:	2200      	movs	r2, #0
 8005c26:	601a      	str	r2, [r3, #0]
  inputEnabled=0;
 8005c28:	4b04      	ldr	r3, [pc, #16]	; (8005c3c <wm8994_Reset+0x30>)
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	601a      	str	r2, [r3, #0]

  return counter;
 8005c2e:	687b      	ldr	r3, [r7, #4]
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	3708      	adds	r7, #8
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bd80      	pop	{r7, pc}
 8005c38:	200004fc 	.word	0x200004fc
 8005c3c:	20000500 	.word	0x20000500

08005c40 <CODEC_IO_Write>:
  * @brief  Writes/Read a single data to the onboard WM8994 audio Codec
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint16_t Reg, uint16_t Value){
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b082      	sub	sp, #8
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	4603      	mov	r3, r0
 8005c48:	460a      	mov	r2, r1
 8005c4a:	80fb      	strh	r3, [r7, #6]
 8005c4c:	4613      	mov	r3, r2
 8005c4e:	80bb      	strh	r3, [r7, #4]

  AUDIO_I2C_Write(Reg, Value);
 8005c50:	88ba      	ldrh	r2, [r7, #4]
 8005c52:	88fb      	ldrh	r3, [r7, #6]
 8005c54:	4611      	mov	r1, r2
 8005c56:	4618      	mov	r0, r3
 8005c58:	f7fe fb5e 	bl	8004318 <AUDIO_I2C_Write>

#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */
  return (AUDIO_I2C_Read(Reg) == Value)? 0:1;
#else
  return 0;
 8005c5c:	2300      	movs	r3, #0
#endif /* VERIFY_WRITTENDATA */
}
 8005c5e:	4618      	mov	r0, r3
 8005c60:	3708      	adds	r7, #8
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bd80      	pop	{r7, pc}
	...

08005c68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005c68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005ca0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005c6c:	480d      	ldr	r0, [pc, #52]	; (8005ca4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8005c6e:	490e      	ldr	r1, [pc, #56]	; (8005ca8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005c70:	4a0e      	ldr	r2, [pc, #56]	; (8005cac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005c72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005c74:	e002      	b.n	8005c7c <LoopCopyDataInit>

08005c76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005c76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005c78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005c7a:	3304      	adds	r3, #4

08005c7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005c7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005c7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005c80:	d3f9      	bcc.n	8005c76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005c82:	4a0b      	ldr	r2, [pc, #44]	; (8005cb0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005c84:	4c0b      	ldr	r4, [pc, #44]	; (8005cb4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8005c86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005c88:	e001      	b.n	8005c8e <LoopFillZerobss>

08005c8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005c8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005c8c:	3204      	adds	r2, #4

08005c8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005c8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005c90:	d3fb      	bcc.n	8005c8a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005c92:	f7fe f9d7 	bl	8004044 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005c96:	f012 fa3b 	bl	8018110 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005c9a:	f7fb fcb5 	bl	8001608 <main>
  bx  lr    
 8005c9e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005ca0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8005ca4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005ca8:	2000022c 	.word	0x2000022c
  ldr r2, =_sidata
 8005cac:	0801db38 	.word	0x0801db38
  ldr r2, =_sbss
 8005cb0:	20000230 	.word	0x20000230
  ldr r4, =_ebss
 8005cb4:	2004a730 	.word	0x2004a730

08005cb8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005cb8:	e7fe      	b.n	8005cb8 <ADC_IRQHandler>

08005cba <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005cba:	b580      	push	{r7, lr}
 8005cbc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005cbe:	2003      	movs	r0, #3
 8005cc0:	f000 fba5 	bl	800640e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005cc4:	2000      	movs	r0, #0
 8005cc6:	f7fe f827 	bl	8003d18 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8005cca:	f7fd f80b 	bl	8002ce4 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8005cce:	2300      	movs	r3, #0
}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	bd80      	pop	{r7, pc}

08005cd4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005cd8:	4b06      	ldr	r3, [pc, #24]	; (8005cf4 <HAL_IncTick+0x20>)
 8005cda:	781b      	ldrb	r3, [r3, #0]
 8005cdc:	461a      	mov	r2, r3
 8005cde:	4b06      	ldr	r3, [pc, #24]	; (8005cf8 <HAL_IncTick+0x24>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4413      	add	r3, r2
 8005ce4:	4a04      	ldr	r2, [pc, #16]	; (8005cf8 <HAL_IncTick+0x24>)
 8005ce6:	6013      	str	r3, [r2, #0]
}
 8005ce8:	bf00      	nop
 8005cea:	46bd      	mov	sp, r7
 8005cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf0:	4770      	bx	lr
 8005cf2:	bf00      	nop
 8005cf4:	20000030 	.word	0x20000030
 8005cf8:	20049bc8 	.word	0x20049bc8

08005cfc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	af00      	add	r7, sp, #0
  return uwTick;
 8005d00:	4b03      	ldr	r3, [pc, #12]	; (8005d10 <HAL_GetTick+0x14>)
 8005d02:	681b      	ldr	r3, [r3, #0]
}
 8005d04:	4618      	mov	r0, r3
 8005d06:	46bd      	mov	sp, r7
 8005d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0c:	4770      	bx	lr
 8005d0e:	bf00      	nop
 8005d10:	20049bc8 	.word	0x20049bc8

08005d14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b084      	sub	sp, #16
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005d1c:	f7ff ffee 	bl	8005cfc <HAL_GetTick>
 8005d20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d2c:	d005      	beq.n	8005d3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005d2e:	4b0a      	ldr	r3, [pc, #40]	; (8005d58 <HAL_Delay+0x44>)
 8005d30:	781b      	ldrb	r3, [r3, #0]
 8005d32:	461a      	mov	r2, r3
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	4413      	add	r3, r2
 8005d38:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005d3a:	bf00      	nop
 8005d3c:	f7ff ffde 	bl	8005cfc <HAL_GetTick>
 8005d40:	4602      	mov	r2, r0
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	1ad3      	subs	r3, r2, r3
 8005d46:	68fa      	ldr	r2, [r7, #12]
 8005d48:	429a      	cmp	r2, r3
 8005d4a:	d8f7      	bhi.n	8005d3c <HAL_Delay+0x28>
  {
  }
}
 8005d4c:	bf00      	nop
 8005d4e:	bf00      	nop
 8005d50:	3710      	adds	r7, #16
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}
 8005d56:	bf00      	nop
 8005d58:	20000030 	.word	0x20000030

08005d5c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b084      	sub	sp, #16
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005d64:	2300      	movs	r3, #0
 8005d66:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d101      	bne.n	8005d72 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005d6e:	2301      	movs	r3, #1
 8005d70:	e031      	b.n	8005dd6 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d109      	bne.n	8005d8e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f7fc ffda 	bl	8002d34 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2200      	movs	r2, #0
 8005d84:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d92:	f003 0310 	and.w	r3, r3, #16
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d116      	bne.n	8005dc8 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d9e:	4b10      	ldr	r3, [pc, #64]	; (8005de0 <HAL_ADC_Init+0x84>)
 8005da0:	4013      	ands	r3, r2
 8005da2:	f043 0202 	orr.w	r2, r3, #2
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f000 f964 	bl	8006078 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2200      	movs	r2, #0
 8005db4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dba:	f023 0303 	bic.w	r3, r3, #3
 8005dbe:	f043 0201 	orr.w	r2, r3, #1
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	641a      	str	r2, [r3, #64]	; 0x40
 8005dc6:	e001      	b.n	8005dcc <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005dc8:	2301      	movs	r3, #1
 8005dca:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005dd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	3710      	adds	r7, #16
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bd80      	pop	{r7, pc}
 8005dde:	bf00      	nop
 8005de0:	ffffeefd 	.word	0xffffeefd

08005de4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b085      	sub	sp, #20
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
 8005dec:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8005dee:	2300      	movs	r3, #0
 8005df0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005df8:	2b01      	cmp	r3, #1
 8005dfa:	d101      	bne.n	8005e00 <HAL_ADC_ConfigChannel+0x1c>
 8005dfc:	2302      	movs	r3, #2
 8005dfe:	e12a      	b.n	8006056 <HAL_ADC_ConfigChannel+0x272>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2201      	movs	r2, #1
 8005e04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	2b09      	cmp	r3, #9
 8005e0e:	d93a      	bls.n	8005e86 <HAL_ADC_ConfigChannel+0xa2>
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e18:	d035      	beq.n	8005e86 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	68d9      	ldr	r1, [r3, #12]
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	b29b      	uxth	r3, r3
 8005e26:	461a      	mov	r2, r3
 8005e28:	4613      	mov	r3, r2
 8005e2a:	005b      	lsls	r3, r3, #1
 8005e2c:	4413      	add	r3, r2
 8005e2e:	3b1e      	subs	r3, #30
 8005e30:	2207      	movs	r2, #7
 8005e32:	fa02 f303 	lsl.w	r3, r2, r3
 8005e36:	43da      	mvns	r2, r3
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	400a      	ands	r2, r1
 8005e3e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a87      	ldr	r2, [pc, #540]	; (8006064 <HAL_ADC_ConfigChannel+0x280>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d10a      	bne.n	8005e60 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	68d9      	ldr	r1, [r3, #12]
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	689b      	ldr	r3, [r3, #8]
 8005e54:	061a      	lsls	r2, r3, #24
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	430a      	orrs	r2, r1
 8005e5c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005e5e:	e035      	b.n	8005ecc <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	68d9      	ldr	r1, [r3, #12]
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	689a      	ldr	r2, [r3, #8]
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	b29b      	uxth	r3, r3
 8005e70:	4618      	mov	r0, r3
 8005e72:	4603      	mov	r3, r0
 8005e74:	005b      	lsls	r3, r3, #1
 8005e76:	4403      	add	r3, r0
 8005e78:	3b1e      	subs	r3, #30
 8005e7a:	409a      	lsls	r2, r3
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	430a      	orrs	r2, r1
 8005e82:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005e84:	e022      	b.n	8005ecc <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	6919      	ldr	r1, [r3, #16]
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	b29b      	uxth	r3, r3
 8005e92:	461a      	mov	r2, r3
 8005e94:	4613      	mov	r3, r2
 8005e96:	005b      	lsls	r3, r3, #1
 8005e98:	4413      	add	r3, r2
 8005e9a:	2207      	movs	r2, #7
 8005e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8005ea0:	43da      	mvns	r2, r3
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	400a      	ands	r2, r1
 8005ea8:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	6919      	ldr	r1, [r3, #16]
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	689a      	ldr	r2, [r3, #8]
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	b29b      	uxth	r3, r3
 8005eba:	4618      	mov	r0, r3
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	005b      	lsls	r3, r3, #1
 8005ec0:	4403      	add	r3, r0
 8005ec2:	409a      	lsls	r2, r3
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	430a      	orrs	r2, r1
 8005eca:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	685b      	ldr	r3, [r3, #4]
 8005ed0:	2b06      	cmp	r3, #6
 8005ed2:	d824      	bhi.n	8005f1e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	685a      	ldr	r2, [r3, #4]
 8005ede:	4613      	mov	r3, r2
 8005ee0:	009b      	lsls	r3, r3, #2
 8005ee2:	4413      	add	r3, r2
 8005ee4:	3b05      	subs	r3, #5
 8005ee6:	221f      	movs	r2, #31
 8005ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8005eec:	43da      	mvns	r2, r3
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	400a      	ands	r2, r1
 8005ef4:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	b29b      	uxth	r3, r3
 8005f02:	4618      	mov	r0, r3
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	685a      	ldr	r2, [r3, #4]
 8005f08:	4613      	mov	r3, r2
 8005f0a:	009b      	lsls	r3, r3, #2
 8005f0c:	4413      	add	r3, r2
 8005f0e:	3b05      	subs	r3, #5
 8005f10:	fa00 f203 	lsl.w	r2, r0, r3
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	430a      	orrs	r2, r1
 8005f1a:	635a      	str	r2, [r3, #52]	; 0x34
 8005f1c:	e04c      	b.n	8005fb8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	2b0c      	cmp	r3, #12
 8005f24:	d824      	bhi.n	8005f70 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	685a      	ldr	r2, [r3, #4]
 8005f30:	4613      	mov	r3, r2
 8005f32:	009b      	lsls	r3, r3, #2
 8005f34:	4413      	add	r3, r2
 8005f36:	3b23      	subs	r3, #35	; 0x23
 8005f38:	221f      	movs	r2, #31
 8005f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f3e:	43da      	mvns	r2, r3
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	400a      	ands	r2, r1
 8005f46:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	b29b      	uxth	r3, r3
 8005f54:	4618      	mov	r0, r3
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	685a      	ldr	r2, [r3, #4]
 8005f5a:	4613      	mov	r3, r2
 8005f5c:	009b      	lsls	r3, r3, #2
 8005f5e:	4413      	add	r3, r2
 8005f60:	3b23      	subs	r3, #35	; 0x23
 8005f62:	fa00 f203 	lsl.w	r2, r0, r3
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	430a      	orrs	r2, r1
 8005f6c:	631a      	str	r2, [r3, #48]	; 0x30
 8005f6e:	e023      	b.n	8005fb8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	685a      	ldr	r2, [r3, #4]
 8005f7a:	4613      	mov	r3, r2
 8005f7c:	009b      	lsls	r3, r3, #2
 8005f7e:	4413      	add	r3, r2
 8005f80:	3b41      	subs	r3, #65	; 0x41
 8005f82:	221f      	movs	r2, #31
 8005f84:	fa02 f303 	lsl.w	r3, r2, r3
 8005f88:	43da      	mvns	r2, r3
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	400a      	ands	r2, r1
 8005f90:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	b29b      	uxth	r3, r3
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	685a      	ldr	r2, [r3, #4]
 8005fa4:	4613      	mov	r3, r2
 8005fa6:	009b      	lsls	r3, r3, #2
 8005fa8:	4413      	add	r3, r2
 8005faa:	3b41      	subs	r3, #65	; 0x41
 8005fac:	fa00 f203 	lsl.w	r2, r0, r3
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	430a      	orrs	r2, r1
 8005fb6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4a2a      	ldr	r2, [pc, #168]	; (8006068 <HAL_ADC_ConfigChannel+0x284>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d10a      	bne.n	8005fd8 <HAL_ADC_ConfigChannel+0x1f4>
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005fca:	d105      	bne.n	8005fd8 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8005fcc:	4b27      	ldr	r3, [pc, #156]	; (800606c <HAL_ADC_ConfigChannel+0x288>)
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	4a26      	ldr	r2, [pc, #152]	; (800606c <HAL_ADC_ConfigChannel+0x288>)
 8005fd2:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8005fd6:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a22      	ldr	r2, [pc, #136]	; (8006068 <HAL_ADC_ConfigChannel+0x284>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d109      	bne.n	8005ff6 <HAL_ADC_ConfigChannel+0x212>
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	2b12      	cmp	r3, #18
 8005fe8:	d105      	bne.n	8005ff6 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8005fea:	4b20      	ldr	r3, [pc, #128]	; (800606c <HAL_ADC_ConfigChannel+0x288>)
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	4a1f      	ldr	r2, [pc, #124]	; (800606c <HAL_ADC_ConfigChannel+0x288>)
 8005ff0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005ff4:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a1b      	ldr	r2, [pc, #108]	; (8006068 <HAL_ADC_ConfigChannel+0x284>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d125      	bne.n	800604c <HAL_ADC_ConfigChannel+0x268>
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a17      	ldr	r2, [pc, #92]	; (8006064 <HAL_ADC_ConfigChannel+0x280>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d003      	beq.n	8006012 <HAL_ADC_ConfigChannel+0x22e>
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	2b11      	cmp	r3, #17
 8006010:	d11c      	bne.n	800604c <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8006012:	4b16      	ldr	r3, [pc, #88]	; (800606c <HAL_ADC_ConfigChannel+0x288>)
 8006014:	685b      	ldr	r3, [r3, #4]
 8006016:	4a15      	ldr	r2, [pc, #84]	; (800606c <HAL_ADC_ConfigChannel+0x288>)
 8006018:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800601c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4a10      	ldr	r2, [pc, #64]	; (8006064 <HAL_ADC_ConfigChannel+0x280>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d111      	bne.n	800604c <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8006028:	4b11      	ldr	r3, [pc, #68]	; (8006070 <HAL_ADC_ConfigChannel+0x28c>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4a11      	ldr	r2, [pc, #68]	; (8006074 <HAL_ADC_ConfigChannel+0x290>)
 800602e:	fba2 2303 	umull	r2, r3, r2, r3
 8006032:	0c9a      	lsrs	r2, r3, #18
 8006034:	4613      	mov	r3, r2
 8006036:	009b      	lsls	r3, r3, #2
 8006038:	4413      	add	r3, r2
 800603a:	005b      	lsls	r3, r3, #1
 800603c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800603e:	e002      	b.n	8006046 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	3b01      	subs	r3, #1
 8006044:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d1f9      	bne.n	8006040 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2200      	movs	r2, #0
 8006050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006054:	2300      	movs	r3, #0
}
 8006056:	4618      	mov	r0, r3
 8006058:	3714      	adds	r7, #20
 800605a:	46bd      	mov	sp, r7
 800605c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006060:	4770      	bx	lr
 8006062:	bf00      	nop
 8006064:	10000012 	.word	0x10000012
 8006068:	40012000 	.word	0x40012000
 800606c:	40012300 	.word	0x40012300
 8006070:	20000010 	.word	0x20000010
 8006074:	431bde83 	.word	0x431bde83

08006078 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006078:	b480      	push	{r7}
 800607a:	b083      	sub	sp, #12
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8006080:	4b78      	ldr	r3, [pc, #480]	; (8006264 <ADC_Init+0x1ec>)
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	4a77      	ldr	r2, [pc, #476]	; (8006264 <ADC_Init+0x1ec>)
 8006086:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800608a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800608c:	4b75      	ldr	r3, [pc, #468]	; (8006264 <ADC_Init+0x1ec>)
 800608e:	685a      	ldr	r2, [r3, #4]
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	685b      	ldr	r3, [r3, #4]
 8006094:	4973      	ldr	r1, [pc, #460]	; (8006264 <ADC_Init+0x1ec>)
 8006096:	4313      	orrs	r3, r2
 8006098:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	685a      	ldr	r2, [r3, #4]
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80060a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	6859      	ldr	r1, [r3, #4]
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	691b      	ldr	r3, [r3, #16]
 80060b4:	021a      	lsls	r2, r3, #8
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	430a      	orrs	r2, r1
 80060bc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	685a      	ldr	r2, [r3, #4]
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80060cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	6859      	ldr	r1, [r3, #4]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	689a      	ldr	r2, [r3, #8]
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	430a      	orrs	r2, r1
 80060de:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	689a      	ldr	r2, [r3, #8]
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80060ee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	6899      	ldr	r1, [r3, #8]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	68da      	ldr	r2, [r3, #12]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	430a      	orrs	r2, r1
 8006100:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006106:	4a58      	ldr	r2, [pc, #352]	; (8006268 <ADC_Init+0x1f0>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d022      	beq.n	8006152 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	689a      	ldr	r2, [r3, #8]
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800611a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	6899      	ldr	r1, [r3, #8]
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	430a      	orrs	r2, r1
 800612c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	689a      	ldr	r2, [r3, #8]
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800613c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	6899      	ldr	r1, [r3, #8]
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	430a      	orrs	r2, r1
 800614e:	609a      	str	r2, [r3, #8]
 8006150:	e00f      	b.n	8006172 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	689a      	ldr	r2, [r3, #8]
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006160:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	689a      	ldr	r2, [r3, #8]
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006170:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	689a      	ldr	r2, [r3, #8]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f022 0202 	bic.w	r2, r2, #2
 8006180:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	6899      	ldr	r1, [r3, #8]
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	699b      	ldr	r3, [r3, #24]
 800618c:	005a      	lsls	r2, r3, #1
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	430a      	orrs	r2, r1
 8006194:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	f893 3020 	ldrb.w	r3, [r3, #32]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d01b      	beq.n	80061d8 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	685a      	ldr	r2, [r3, #4]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80061ae:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	685a      	ldr	r2, [r3, #4]
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80061be:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	6859      	ldr	r1, [r3, #4]
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ca:	3b01      	subs	r3, #1
 80061cc:	035a      	lsls	r2, r3, #13
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	430a      	orrs	r2, r1
 80061d4:	605a      	str	r2, [r3, #4]
 80061d6:	e007      	b.n	80061e8 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	685a      	ldr	r2, [r3, #4]
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80061e6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80061f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	69db      	ldr	r3, [r3, #28]
 8006202:	3b01      	subs	r3, #1
 8006204:	051a      	lsls	r2, r3, #20
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	430a      	orrs	r2, r1
 800620c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	689a      	ldr	r2, [r3, #8]
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800621c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	6899      	ldr	r1, [r3, #8]
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800622a:	025a      	lsls	r2, r3, #9
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	430a      	orrs	r2, r1
 8006232:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	689a      	ldr	r2, [r3, #8]
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006242:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	6899      	ldr	r1, [r3, #8]
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	695b      	ldr	r3, [r3, #20]
 800624e:	029a      	lsls	r2, r3, #10
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	430a      	orrs	r2, r1
 8006256:	609a      	str	r2, [r3, #8]
}
 8006258:	bf00      	nop
 800625a:	370c      	adds	r7, #12
 800625c:	46bd      	mov	sp, r7
 800625e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006262:	4770      	bx	lr
 8006264:	40012300 	.word	0x40012300
 8006268:	0f000001 	.word	0x0f000001

0800626c <__NVIC_SetPriorityGrouping>:
{
 800626c:	b480      	push	{r7}
 800626e:	b085      	sub	sp, #20
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	f003 0307 	and.w	r3, r3, #7
 800627a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800627c:	4b0b      	ldr	r3, [pc, #44]	; (80062ac <__NVIC_SetPriorityGrouping+0x40>)
 800627e:	68db      	ldr	r3, [r3, #12]
 8006280:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006282:	68ba      	ldr	r2, [r7, #8]
 8006284:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006288:	4013      	ands	r3, r2
 800628a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006294:	4b06      	ldr	r3, [pc, #24]	; (80062b0 <__NVIC_SetPriorityGrouping+0x44>)
 8006296:	4313      	orrs	r3, r2
 8006298:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800629a:	4a04      	ldr	r2, [pc, #16]	; (80062ac <__NVIC_SetPriorityGrouping+0x40>)
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	60d3      	str	r3, [r2, #12]
}
 80062a0:	bf00      	nop
 80062a2:	3714      	adds	r7, #20
 80062a4:	46bd      	mov	sp, r7
 80062a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062aa:	4770      	bx	lr
 80062ac:	e000ed00 	.word	0xe000ed00
 80062b0:	05fa0000 	.word	0x05fa0000

080062b4 <__NVIC_GetPriorityGrouping>:
{
 80062b4:	b480      	push	{r7}
 80062b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80062b8:	4b04      	ldr	r3, [pc, #16]	; (80062cc <__NVIC_GetPriorityGrouping+0x18>)
 80062ba:	68db      	ldr	r3, [r3, #12]
 80062bc:	0a1b      	lsrs	r3, r3, #8
 80062be:	f003 0307 	and.w	r3, r3, #7
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	46bd      	mov	sp, r7
 80062c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ca:	4770      	bx	lr
 80062cc:	e000ed00 	.word	0xe000ed00

080062d0 <__NVIC_EnableIRQ>:
{
 80062d0:	b480      	push	{r7}
 80062d2:	b083      	sub	sp, #12
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	4603      	mov	r3, r0
 80062d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80062da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	db0b      	blt.n	80062fa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80062e2:	79fb      	ldrb	r3, [r7, #7]
 80062e4:	f003 021f 	and.w	r2, r3, #31
 80062e8:	4907      	ldr	r1, [pc, #28]	; (8006308 <__NVIC_EnableIRQ+0x38>)
 80062ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062ee:	095b      	lsrs	r3, r3, #5
 80062f0:	2001      	movs	r0, #1
 80062f2:	fa00 f202 	lsl.w	r2, r0, r2
 80062f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80062fa:	bf00      	nop
 80062fc:	370c      	adds	r7, #12
 80062fe:	46bd      	mov	sp, r7
 8006300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006304:	4770      	bx	lr
 8006306:	bf00      	nop
 8006308:	e000e100 	.word	0xe000e100

0800630c <__NVIC_DisableIRQ>:
{
 800630c:	b480      	push	{r7}
 800630e:	b083      	sub	sp, #12
 8006310:	af00      	add	r7, sp, #0
 8006312:	4603      	mov	r3, r0
 8006314:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800631a:	2b00      	cmp	r3, #0
 800631c:	db12      	blt.n	8006344 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800631e:	79fb      	ldrb	r3, [r7, #7]
 8006320:	f003 021f 	and.w	r2, r3, #31
 8006324:	490a      	ldr	r1, [pc, #40]	; (8006350 <__NVIC_DisableIRQ+0x44>)
 8006326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800632a:	095b      	lsrs	r3, r3, #5
 800632c:	2001      	movs	r0, #1
 800632e:	fa00 f202 	lsl.w	r2, r0, r2
 8006332:	3320      	adds	r3, #32
 8006334:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8006338:	f3bf 8f4f 	dsb	sy
}
 800633c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800633e:	f3bf 8f6f 	isb	sy
}
 8006342:	bf00      	nop
}
 8006344:	bf00      	nop
 8006346:	370c      	adds	r7, #12
 8006348:	46bd      	mov	sp, r7
 800634a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634e:	4770      	bx	lr
 8006350:	e000e100 	.word	0xe000e100

08006354 <__NVIC_SetPriority>:
{
 8006354:	b480      	push	{r7}
 8006356:	b083      	sub	sp, #12
 8006358:	af00      	add	r7, sp, #0
 800635a:	4603      	mov	r3, r0
 800635c:	6039      	str	r1, [r7, #0]
 800635e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006360:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006364:	2b00      	cmp	r3, #0
 8006366:	db0a      	blt.n	800637e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	b2da      	uxtb	r2, r3
 800636c:	490c      	ldr	r1, [pc, #48]	; (80063a0 <__NVIC_SetPriority+0x4c>)
 800636e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006372:	0112      	lsls	r2, r2, #4
 8006374:	b2d2      	uxtb	r2, r2
 8006376:	440b      	add	r3, r1
 8006378:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800637c:	e00a      	b.n	8006394 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	b2da      	uxtb	r2, r3
 8006382:	4908      	ldr	r1, [pc, #32]	; (80063a4 <__NVIC_SetPriority+0x50>)
 8006384:	79fb      	ldrb	r3, [r7, #7]
 8006386:	f003 030f 	and.w	r3, r3, #15
 800638a:	3b04      	subs	r3, #4
 800638c:	0112      	lsls	r2, r2, #4
 800638e:	b2d2      	uxtb	r2, r2
 8006390:	440b      	add	r3, r1
 8006392:	761a      	strb	r2, [r3, #24]
}
 8006394:	bf00      	nop
 8006396:	370c      	adds	r7, #12
 8006398:	46bd      	mov	sp, r7
 800639a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639e:	4770      	bx	lr
 80063a0:	e000e100 	.word	0xe000e100
 80063a4:	e000ed00 	.word	0xe000ed00

080063a8 <NVIC_EncodePriority>:
{
 80063a8:	b480      	push	{r7}
 80063aa:	b089      	sub	sp, #36	; 0x24
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	60f8      	str	r0, [r7, #12]
 80063b0:	60b9      	str	r1, [r7, #8]
 80063b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	f003 0307 	and.w	r3, r3, #7
 80063ba:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80063bc:	69fb      	ldr	r3, [r7, #28]
 80063be:	f1c3 0307 	rsb	r3, r3, #7
 80063c2:	2b04      	cmp	r3, #4
 80063c4:	bf28      	it	cs
 80063c6:	2304      	movcs	r3, #4
 80063c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80063ca:	69fb      	ldr	r3, [r7, #28]
 80063cc:	3304      	adds	r3, #4
 80063ce:	2b06      	cmp	r3, #6
 80063d0:	d902      	bls.n	80063d8 <NVIC_EncodePriority+0x30>
 80063d2:	69fb      	ldr	r3, [r7, #28]
 80063d4:	3b03      	subs	r3, #3
 80063d6:	e000      	b.n	80063da <NVIC_EncodePriority+0x32>
 80063d8:	2300      	movs	r3, #0
 80063da:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80063dc:	f04f 32ff 	mov.w	r2, #4294967295
 80063e0:	69bb      	ldr	r3, [r7, #24]
 80063e2:	fa02 f303 	lsl.w	r3, r2, r3
 80063e6:	43da      	mvns	r2, r3
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	401a      	ands	r2, r3
 80063ec:	697b      	ldr	r3, [r7, #20]
 80063ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80063f0:	f04f 31ff 	mov.w	r1, #4294967295
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	fa01 f303 	lsl.w	r3, r1, r3
 80063fa:	43d9      	mvns	r1, r3
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006400:	4313      	orrs	r3, r2
}
 8006402:	4618      	mov	r0, r3
 8006404:	3724      	adds	r7, #36	; 0x24
 8006406:	46bd      	mov	sp, r7
 8006408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640c:	4770      	bx	lr

0800640e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800640e:	b580      	push	{r7, lr}
 8006410:	b082      	sub	sp, #8
 8006412:	af00      	add	r7, sp, #0
 8006414:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	f7ff ff28 	bl	800626c <__NVIC_SetPriorityGrouping>
}
 800641c:	bf00      	nop
 800641e:	3708      	adds	r7, #8
 8006420:	46bd      	mov	sp, r7
 8006422:	bd80      	pop	{r7, pc}

08006424 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006424:	b580      	push	{r7, lr}
 8006426:	b086      	sub	sp, #24
 8006428:	af00      	add	r7, sp, #0
 800642a:	4603      	mov	r3, r0
 800642c:	60b9      	str	r1, [r7, #8]
 800642e:	607a      	str	r2, [r7, #4]
 8006430:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8006432:	2300      	movs	r3, #0
 8006434:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006436:	f7ff ff3d 	bl	80062b4 <__NVIC_GetPriorityGrouping>
 800643a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800643c:	687a      	ldr	r2, [r7, #4]
 800643e:	68b9      	ldr	r1, [r7, #8]
 8006440:	6978      	ldr	r0, [r7, #20]
 8006442:	f7ff ffb1 	bl	80063a8 <NVIC_EncodePriority>
 8006446:	4602      	mov	r2, r0
 8006448:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800644c:	4611      	mov	r1, r2
 800644e:	4618      	mov	r0, r3
 8006450:	f7ff ff80 	bl	8006354 <__NVIC_SetPriority>
}
 8006454:	bf00      	nop
 8006456:	3718      	adds	r7, #24
 8006458:	46bd      	mov	sp, r7
 800645a:	bd80      	pop	{r7, pc}

0800645c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b082      	sub	sp, #8
 8006460:	af00      	add	r7, sp, #0
 8006462:	4603      	mov	r3, r0
 8006464:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800646a:	4618      	mov	r0, r3
 800646c:	f7ff ff30 	bl	80062d0 <__NVIC_EnableIRQ>
}
 8006470:	bf00      	nop
 8006472:	3708      	adds	r7, #8
 8006474:	46bd      	mov	sp, r7
 8006476:	bd80      	pop	{r7, pc}

08006478 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b082      	sub	sp, #8
 800647c:	af00      	add	r7, sp, #0
 800647e:	4603      	mov	r3, r0
 8006480:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8006482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006486:	4618      	mov	r0, r3
 8006488:	f7ff ff40 	bl	800630c <__NVIC_DisableIRQ>
}
 800648c:	bf00      	nop
 800648e:	3708      	adds	r7, #8
 8006490:	46bd      	mov	sp, r7
 8006492:	bd80      	pop	{r7, pc}

08006494 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b082      	sub	sp, #8
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d101      	bne.n	80064a6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80064a2:	2301      	movs	r3, #1
 80064a4:	e054      	b.n	8006550 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	7f5b      	ldrb	r3, [r3, #29]
 80064aa:	b2db      	uxtb	r3, r3
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d105      	bne.n	80064bc <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2200      	movs	r2, #0
 80064b4:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	f7fc fc96 	bl	8002de8 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2202      	movs	r2, #2
 80064c0:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	791b      	ldrb	r3, [r3, #4]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d10c      	bne.n	80064e4 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4a22      	ldr	r2, [pc, #136]	; (8006558 <HAL_CRC_Init+0xc4>)
 80064d0:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	689a      	ldr	r2, [r3, #8]
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f022 0218 	bic.w	r2, r2, #24
 80064e0:	609a      	str	r2, [r3, #8]
 80064e2:	e00c      	b.n	80064fe <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6899      	ldr	r1, [r3, #8]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	68db      	ldr	r3, [r3, #12]
 80064ec:	461a      	mov	r2, r3
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f000 f834 	bl	800655c <HAL_CRCEx_Polynomial_Set>
 80064f4:	4603      	mov	r3, r0
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d001      	beq.n	80064fe <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80064fa:	2301      	movs	r3, #1
 80064fc:	e028      	b.n	8006550 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	795b      	ldrb	r3, [r3, #5]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d105      	bne.n	8006512 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f04f 32ff 	mov.w	r2, #4294967295
 800650e:	611a      	str	r2, [r3, #16]
 8006510:	e004      	b.n	800651c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	687a      	ldr	r2, [r7, #4]
 8006518:	6912      	ldr	r2, [r2, #16]
 800651a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	689b      	ldr	r3, [r3, #8]
 8006522:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	695a      	ldr	r2, [r3, #20]
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	430a      	orrs	r2, r1
 8006530:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	689b      	ldr	r3, [r3, #8]
 8006538:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	699a      	ldr	r2, [r3, #24]
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	430a      	orrs	r2, r1
 8006546:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2201      	movs	r2, #1
 800654c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800654e:	2300      	movs	r3, #0
}
 8006550:	4618      	mov	r0, r3
 8006552:	3708      	adds	r7, #8
 8006554:	46bd      	mov	sp, r7
 8006556:	bd80      	pop	{r7, pc}
 8006558:	04c11db7 	.word	0x04c11db7

0800655c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800655c:	b480      	push	{r7}
 800655e:	b087      	sub	sp, #28
 8006560:	af00      	add	r7, sp, #0
 8006562:	60f8      	str	r0, [r7, #12]
 8006564:	60b9      	str	r1, [r7, #8]
 8006566:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006568:	2300      	movs	r3, #0
 800656a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800656c:	231f      	movs	r3, #31
 800656e:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8006570:	bf00      	nop
 8006572:	693b      	ldr	r3, [r7, #16]
 8006574:	1e5a      	subs	r2, r3, #1
 8006576:	613a      	str	r2, [r7, #16]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d009      	beq.n	8006590 <HAL_CRCEx_Polynomial_Set+0x34>
 800657c:	693b      	ldr	r3, [r7, #16]
 800657e:	f003 031f 	and.w	r3, r3, #31
 8006582:	68ba      	ldr	r2, [r7, #8]
 8006584:	fa22 f303 	lsr.w	r3, r2, r3
 8006588:	f003 0301 	and.w	r3, r3, #1
 800658c:	2b00      	cmp	r3, #0
 800658e:	d0f0      	beq.n	8006572 <HAL_CRCEx_Polynomial_Set+0x16>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2b18      	cmp	r3, #24
 8006594:	d846      	bhi.n	8006624 <HAL_CRCEx_Polynomial_Set+0xc8>
 8006596:	a201      	add	r2, pc, #4	; (adr r2, 800659c <HAL_CRCEx_Polynomial_Set+0x40>)
 8006598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800659c:	0800662b 	.word	0x0800662b
 80065a0:	08006625 	.word	0x08006625
 80065a4:	08006625 	.word	0x08006625
 80065a8:	08006625 	.word	0x08006625
 80065ac:	08006625 	.word	0x08006625
 80065b0:	08006625 	.word	0x08006625
 80065b4:	08006625 	.word	0x08006625
 80065b8:	08006625 	.word	0x08006625
 80065bc:	08006619 	.word	0x08006619
 80065c0:	08006625 	.word	0x08006625
 80065c4:	08006625 	.word	0x08006625
 80065c8:	08006625 	.word	0x08006625
 80065cc:	08006625 	.word	0x08006625
 80065d0:	08006625 	.word	0x08006625
 80065d4:	08006625 	.word	0x08006625
 80065d8:	08006625 	.word	0x08006625
 80065dc:	0800660d 	.word	0x0800660d
 80065e0:	08006625 	.word	0x08006625
 80065e4:	08006625 	.word	0x08006625
 80065e8:	08006625 	.word	0x08006625
 80065ec:	08006625 	.word	0x08006625
 80065f0:	08006625 	.word	0x08006625
 80065f4:	08006625 	.word	0x08006625
 80065f8:	08006625 	.word	0x08006625
 80065fc:	08006601 	.word	0x08006601
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8006600:	693b      	ldr	r3, [r7, #16]
 8006602:	2b06      	cmp	r3, #6
 8006604:	d913      	bls.n	800662e <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8006606:	2301      	movs	r3, #1
 8006608:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800660a:	e010      	b.n	800662e <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 800660c:	693b      	ldr	r3, [r7, #16]
 800660e:	2b07      	cmp	r3, #7
 8006610:	d90f      	bls.n	8006632 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8006612:	2301      	movs	r3, #1
 8006614:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006616:	e00c      	b.n	8006632 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8006618:	693b      	ldr	r3, [r7, #16]
 800661a:	2b0f      	cmp	r3, #15
 800661c:	d90b      	bls.n	8006636 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800661e:	2301      	movs	r3, #1
 8006620:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006622:	e008      	b.n	8006636 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8006624:	2301      	movs	r3, #1
 8006626:	75fb      	strb	r3, [r7, #23]
      break;
 8006628:	e006      	b.n	8006638 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800662a:	bf00      	nop
 800662c:	e004      	b.n	8006638 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800662e:	bf00      	nop
 8006630:	e002      	b.n	8006638 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8006632:	bf00      	nop
 8006634:	e000      	b.n	8006638 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8006636:	bf00      	nop
  }
  if (status == HAL_OK)
 8006638:	7dfb      	ldrb	r3, [r7, #23]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d10d      	bne.n	800665a <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	68ba      	ldr	r2, [r7, #8]
 8006644:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	689b      	ldr	r3, [r3, #8]
 800664c:	f023 0118 	bic.w	r1, r3, #24
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	687a      	ldr	r2, [r7, #4]
 8006656:	430a      	orrs	r2, r1
 8006658:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800665a:	7dfb      	ldrb	r3, [r7, #23]
}
 800665c:	4618      	mov	r0, r3
 800665e:	371c      	adds	r7, #28
 8006660:	46bd      	mov	sp, r7
 8006662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006666:	4770      	bx	lr

08006668 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b082      	sub	sp, #8
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d101      	bne.n	800667a <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 8006676:	2301      	movs	r3, #1
 8006678:	e069      	b.n	800674e <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006680:	b2db      	uxtb	r3, r3
 8006682:	2b00      	cmp	r3, #0
 8006684:	d102      	bne.n	800668c <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f7fc fbce 	bl	8002e28 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2202      	movs	r2, #2
 8006690:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	699b      	ldr	r3, [r3, #24]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d002      	beq.n	80066a2 <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2200      	movs	r2, #0
 80066a0:	625a      	str	r2, [r3, #36]	; 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	6819      	ldr	r1, [r3, #0]
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681a      	ldr	r2, [r3, #0]
 80066ac:	4b2a      	ldr	r3, [pc, #168]	; (8006758 <HAL_DCMI_Init+0xf0>)
 80066ae:	400b      	ands	r3, r1
 80066b0:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	6819      	ldr	r1, [r3, #0]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	685a      	ldr	r2, [r3, #4]
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	695b      	ldr	r3, [r3, #20]
 80066c0:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80066c6:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	691b      	ldr	r3, [r3, #16]
 80066cc:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80066d2:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	699b      	ldr	r3, [r3, #24]
 80066d8:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80066de:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066e4:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80066ea:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066f0:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80066f6:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	430a      	orrs	r2, r1
 80066fe:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	2b10      	cmp	r3, #16
 8006706:	d112      	bne.n	800672e <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	7f1b      	ldrb	r3, [r3, #28]
 800670c:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	7f5b      	ldrb	r3, [r3, #29]
 8006712:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8006714:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	7f9b      	ldrb	r3, [r3, #30]
 800671a:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 800671c:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	7fdb      	ldrb	r3, [r3, #31]
 8006724:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 800672a:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 800672c:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	68da      	ldr	r2, [r3, #12]
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f042 021e 	orr.w	r2, r2, #30
 800673c:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2200      	movs	r2, #0
 8006742:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2201      	movs	r2, #1
 8006748:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800674c:	2300      	movs	r3, #0
}
 800674e:	4618      	mov	r0, r3
 8006750:	3708      	adds	r7, #8
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}
 8006756:	bf00      	nop
 8006758:	ffe0f007 	.word	0xffe0f007

0800675c <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b084      	sub	sp, #16
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	691b      	ldr	r3, [r3, #16]
 800676a:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	f003 0304 	and.w	r3, r3, #4
 8006772:	2b00      	cmp	r3, #0
 8006774:	d016      	beq.n	80067a4 <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	2204      	movs	r2, #4
 800677c:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006782:	f043 0202 	orr.w	r2, r3, #2
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2204      	movs	r2, #4
 800678e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006796:	4a35      	ldr	r2, [pc, #212]	; (800686c <HAL_DCMI_IRQHandler+0x110>)
 8006798:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800679e:	4618      	mov	r0, r3
 80067a0:	f000 fa2a 	bl	8006bf8 <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	f003 0302 	and.w	r3, r3, #2
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d01e      	beq.n	80067ec <HAL_DCMI_IRQHandler+0x90>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	2202      	movs	r2, #2
 80067b4:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067ba:	f043 0201 	orr.w	r2, r3, #1
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2204      	movs	r2, #4
 80067c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067ce:	4a27      	ldr	r2, [pc, #156]	; (800686c <HAL_DCMI_IRQHandler+0x110>)
 80067d0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    if (HAL_DMA_Abort_IT(hdcmi->DMA_Handle) != HAL_OK)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067d6:	4618      	mov	r0, r3
 80067d8:	f000 fa0e 	bl	8006bf8 <HAL_DMA_Abort_IT>
 80067dc:	4603      	mov	r3, r0
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d004      	beq.n	80067ec <HAL_DCMI_IRQHandler+0x90>
    {
      DCMI_DMAError(hdcmi->DMA_Handle);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067e6:	4618      	mov	r0, r3
 80067e8:	f000 f86a 	bl	80068c0 <DCMI_DMAError>
    }
  }
  /* Line Interrupt management ************************************************/
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	f003 0310 	and.w	r3, r3, #16
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d006      	beq.n	8006804 <HAL_DCMI_IRQHandler+0xa8>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	2210      	movs	r2, #16
 80067fc:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	f000 f840 	bl	8006884 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* VSYNC interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	f003 0308 	and.w	r3, r3, #8
 800680a:	2b00      	cmp	r3, #0
 800680c:	d006      	beq.n	800681c <HAL_DCMI_IRQHandler+0xc0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	2208      	movs	r2, #8
 8006814:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f000 f83e 	bl	8006898 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* FRAME interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	f003 0301 	and.w	r3, r3, #1
 8006822:	2b00      	cmp	r3, #0
 8006824:	d01d      	beq.n	8006862 <HAL_DCMI_IRQHandler+0x106>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f003 0302 	and.w	r3, r3, #2
 8006830:	2b02      	cmp	r3, #2
 8006832:	d107      	bne.n	8006844 <HAL_DCMI_IRQHandler+0xe8>
    {
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	68da      	ldr	r2, [r3, #12]
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f022 021e 	bic.w	r2, r2, #30
 8006842:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	68da      	ldr	r2, [r3, #12]
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f022 0201 	bic.w	r2, r2, #1
 8006852:	60da      	str	r2, [r3, #12]

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	2201      	movs	r2, #1
 800685a:	615a      	str	r2, [r3, #20]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	f000 f825 	bl	80068ac <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
}
 8006862:	bf00      	nop
 8006864:	3710      	adds	r7, #16
 8006866:	46bd      	mov	sp, r7
 8006868:	bd80      	pop	{r7, pc}
 800686a:	bf00      	nop
 800686c:	080068c1 	.word	0x080068c1

08006870 <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8006870:	b480      	push	{r7}
 8006872:	b083      	sub	sp, #12
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 8006878:	bf00      	nop
 800687a:	370c      	adds	r7, #12
 800687c:	46bd      	mov	sp, r7
 800687e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006882:	4770      	bx	lr

08006884 <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8006884:	b480      	push	{r7}
 8006886:	b083      	sub	sp, #12
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 800688c:	bf00      	nop
 800688e:	370c      	adds	r7, #12
 8006890:	46bd      	mov	sp, r7
 8006892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006896:	4770      	bx	lr

08006898 <HAL_DCMI_VsyncEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8006898:	b480      	push	{r7}
 800689a:	b083      	sub	sp, #12
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_VsyncEventCallback could be implemented in the user file
   */
}
 80068a0:	bf00      	nop
 80068a2:	370c      	adds	r7, #12
 80068a4:	46bd      	mov	sp, r7
 80068a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068aa:	4770      	bx	lr

080068ac <HAL_DCMI_FrameEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 80068ac:	b480      	push	{r7}
 80068ae:	b083      	sub	sp, #12
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_FrameEventCallback could be implemented in the user file
   */
}
 80068b4:	bf00      	nop
 80068b6:	370c      	adds	r7, #12
 80068b8:	46bd      	mov	sp, r7
 80068ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068be:	4770      	bx	lr

080068c0 <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b084      	sub	sp, #16
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068cc:	60fb      	str	r3, [r7, #12]

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068d4:	2b02      	cmp	r3, #2
 80068d6:	d009      	beq.n	80068ec <DCMI_DMAError+0x2c>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	2201      	movs	r2, #1
 80068dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068e4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	64da      	str	r2, [r3, #76]	; 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 80068ec:	68f8      	ldr	r0, [r7, #12]
 80068ee:	f7ff ffbf 	bl	8006870 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */

}
 80068f2:	bf00      	nop
 80068f4:	3710      	adds	r7, #16
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bd80      	pop	{r7, pc}
	...

080068fc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b086      	sub	sp, #24
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006904:	2300      	movs	r3, #0
 8006906:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006908:	f7ff f9f8 	bl	8005cfc <HAL_GetTick>
 800690c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d101      	bne.n	8006918 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006914:	2301      	movs	r3, #1
 8006916:	e099      	b.n	8006a4c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2200      	movs	r2, #0
 800691c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2202      	movs	r2, #2
 8006924:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	681a      	ldr	r2, [r3, #0]
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f022 0201 	bic.w	r2, r2, #1
 8006936:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006938:	e00f      	b.n	800695a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800693a:	f7ff f9df 	bl	8005cfc <HAL_GetTick>
 800693e:	4602      	mov	r2, r0
 8006940:	693b      	ldr	r3, [r7, #16]
 8006942:	1ad3      	subs	r3, r2, r3
 8006944:	2b05      	cmp	r3, #5
 8006946:	d908      	bls.n	800695a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2220      	movs	r2, #32
 800694c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2203      	movs	r2, #3
 8006952:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8006956:	2303      	movs	r3, #3
 8006958:	e078      	b.n	8006a4c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f003 0301 	and.w	r3, r3, #1
 8006964:	2b00      	cmp	r3, #0
 8006966:	d1e8      	bne.n	800693a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006970:	697a      	ldr	r2, [r7, #20]
 8006972:	4b38      	ldr	r3, [pc, #224]	; (8006a54 <HAL_DMA_Init+0x158>)
 8006974:	4013      	ands	r3, r2
 8006976:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	685a      	ldr	r2, [r3, #4]
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	689b      	ldr	r3, [r3, #8]
 8006980:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006986:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	691b      	ldr	r3, [r3, #16]
 800698c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006992:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	699b      	ldr	r3, [r3, #24]
 8006998:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800699e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6a1b      	ldr	r3, [r3, #32]
 80069a4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80069a6:	697a      	ldr	r2, [r7, #20]
 80069a8:	4313      	orrs	r3, r2
 80069aa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069b0:	2b04      	cmp	r3, #4
 80069b2:	d107      	bne.n	80069c4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069bc:	4313      	orrs	r3, r2
 80069be:	697a      	ldr	r2, [r7, #20]
 80069c0:	4313      	orrs	r3, r2
 80069c2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	697a      	ldr	r2, [r7, #20]
 80069ca:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	695b      	ldr	r3, [r3, #20]
 80069d2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80069d4:	697b      	ldr	r3, [r7, #20]
 80069d6:	f023 0307 	bic.w	r3, r3, #7
 80069da:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069e0:	697a      	ldr	r2, [r7, #20]
 80069e2:	4313      	orrs	r3, r2
 80069e4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ea:	2b04      	cmp	r3, #4
 80069ec:	d117      	bne.n	8006a1e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069f2:	697a      	ldr	r2, [r7, #20]
 80069f4:	4313      	orrs	r3, r2
 80069f6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d00e      	beq.n	8006a1e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006a00:	6878      	ldr	r0, [r7, #4]
 8006a02:	f000 fb15 	bl	8007030 <DMA_CheckFifoParam>
 8006a06:	4603      	mov	r3, r0
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d008      	beq.n	8006a1e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2240      	movs	r2, #64	; 0x40
 8006a10:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2201      	movs	r2, #1
 8006a16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	e016      	b.n	8006a4c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	697a      	ldr	r2, [r7, #20]
 8006a24:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f000 facc 	bl	8006fc4 <DMA_CalcBaseAndBitshift>
 8006a2c:	4603      	mov	r3, r0
 8006a2e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a34:	223f      	movs	r2, #63	; 0x3f
 8006a36:	409a      	lsls	r2, r3
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2201      	movs	r2, #1
 8006a46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006a4a:	2300      	movs	r3, #0
}
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	3718      	adds	r7, #24
 8006a50:	46bd      	mov	sp, r7
 8006a52:	bd80      	pop	{r7, pc}
 8006a54:	f010803f 	.word	0xf010803f

08006a58 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b086      	sub	sp, #24
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	60f8      	str	r0, [r7, #12]
 8006a60:	60b9      	str	r1, [r7, #8]
 8006a62:	607a      	str	r2, [r7, #4]
 8006a64:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006a66:	2300      	movs	r3, #0
 8006a68:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a6e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006a76:	2b01      	cmp	r3, #1
 8006a78:	d101      	bne.n	8006a7e <HAL_DMA_Start_IT+0x26>
 8006a7a:	2302      	movs	r3, #2
 8006a7c:	e048      	b.n	8006b10 <HAL_DMA_Start_IT+0xb8>
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	2201      	movs	r2, #1
 8006a82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006a8c:	b2db      	uxtb	r3, r3
 8006a8e:	2b01      	cmp	r3, #1
 8006a90:	d137      	bne.n	8006b02 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	2202      	movs	r2, #2
 8006a96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	687a      	ldr	r2, [r7, #4]
 8006aa4:	68b9      	ldr	r1, [r7, #8]
 8006aa6:	68f8      	ldr	r0, [r7, #12]
 8006aa8:	f000 fa5e 	bl	8006f68 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ab0:	223f      	movs	r2, #63	; 0x3f
 8006ab2:	409a      	lsls	r2, r3
 8006ab4:	693b      	ldr	r3, [r7, #16]
 8006ab6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	681a      	ldr	r2, [r3, #0]
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f042 0216 	orr.w	r2, r2, #22
 8006ac6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	695a      	ldr	r2, [r3, #20]
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006ad6:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d007      	beq.n	8006af0 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	681a      	ldr	r2, [r3, #0]
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f042 0208 	orr.w	r2, r2, #8
 8006aee:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	681a      	ldr	r2, [r3, #0]
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f042 0201 	orr.w	r2, r2, #1
 8006afe:	601a      	str	r2, [r3, #0]
 8006b00:	e005      	b.n	8006b0e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	2200      	movs	r2, #0
 8006b06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006b0a:	2302      	movs	r3, #2
 8006b0c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8006b0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b10:	4618      	mov	r0, r3
 8006b12:	3718      	adds	r7, #24
 8006b14:	46bd      	mov	sp, r7
 8006b16:	bd80      	pop	{r7, pc}

08006b18 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b084      	sub	sp, #16
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b24:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006b26:	f7ff f8e9 	bl	8005cfc <HAL_GetTick>
 8006b2a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006b32:	b2db      	uxtb	r3, r3
 8006b34:	2b02      	cmp	r3, #2
 8006b36:	d008      	beq.n	8006b4a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2280      	movs	r2, #128	; 0x80
 8006b3c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2200      	movs	r2, #0
 8006b42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8006b46:	2301      	movs	r3, #1
 8006b48:	e052      	b.n	8006bf0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	681a      	ldr	r2, [r3, #0]
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f022 0216 	bic.w	r2, r2, #22
 8006b58:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	695a      	ldr	r2, [r3, #20]
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006b68:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d103      	bne.n	8006b7a <HAL_DMA_Abort+0x62>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d007      	beq.n	8006b8a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	681a      	ldr	r2, [r3, #0]
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f022 0208 	bic.w	r2, r2, #8
 8006b88:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	681a      	ldr	r2, [r3, #0]
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f022 0201 	bic.w	r2, r2, #1
 8006b98:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006b9a:	e013      	b.n	8006bc4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006b9c:	f7ff f8ae 	bl	8005cfc <HAL_GetTick>
 8006ba0:	4602      	mov	r2, r0
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	1ad3      	subs	r3, r2, r3
 8006ba6:	2b05      	cmp	r3, #5
 8006ba8:	d90c      	bls.n	8006bc4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2220      	movs	r2, #32
 8006bae:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2203      	movs	r2, #3
 8006bbc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8006bc0:	2303      	movs	r3, #3
 8006bc2:	e015      	b.n	8006bf0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f003 0301 	and.w	r3, r3, #1
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d1e4      	bne.n	8006b9c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bd6:	223f      	movs	r2, #63	; 0x3f
 8006bd8:	409a      	lsls	r2, r3
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2200      	movs	r2, #0
 8006be2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2201      	movs	r2, #1
 8006bea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8006bee:	2300      	movs	r3, #0
}
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	3710      	adds	r7, #16
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	bd80      	pop	{r7, pc}

08006bf8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006bf8:	b480      	push	{r7}
 8006bfa:	b083      	sub	sp, #12
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006c06:	b2db      	uxtb	r3, r3
 8006c08:	2b02      	cmp	r3, #2
 8006c0a:	d004      	beq.n	8006c16 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2280      	movs	r2, #128	; 0x80
 8006c10:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006c12:	2301      	movs	r3, #1
 8006c14:	e00c      	b.n	8006c30 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2205      	movs	r2, #5
 8006c1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	681a      	ldr	r2, [r3, #0]
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f022 0201 	bic.w	r2, r2, #1
 8006c2c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006c2e:	2300      	movs	r3, #0
}
 8006c30:	4618      	mov	r0, r3
 8006c32:	370c      	adds	r7, #12
 8006c34:	46bd      	mov	sp, r7
 8006c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3a:	4770      	bx	lr

08006c3c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b086      	sub	sp, #24
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8006c44:	2300      	movs	r3, #0
 8006c46:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8006c48:	4b92      	ldr	r3, [pc, #584]	; (8006e94 <HAL_DMA_IRQHandler+0x258>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	4a92      	ldr	r2, [pc, #584]	; (8006e98 <HAL_DMA_IRQHandler+0x25c>)
 8006c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8006c52:	0a9b      	lsrs	r3, r3, #10
 8006c54:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c5a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006c5c:	693b      	ldr	r3, [r7, #16]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c66:	2208      	movs	r2, #8
 8006c68:	409a      	lsls	r2, r3
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	4013      	ands	r3, r2
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d01a      	beq.n	8006ca8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f003 0304 	and.w	r3, r3, #4
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d013      	beq.n	8006ca8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	681a      	ldr	r2, [r3, #0]
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f022 0204 	bic.w	r2, r2, #4
 8006c8e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c94:	2208      	movs	r2, #8
 8006c96:	409a      	lsls	r2, r3
 8006c98:	693b      	ldr	r3, [r7, #16]
 8006c9a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ca0:	f043 0201 	orr.w	r2, r3, #1
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cac:	2201      	movs	r2, #1
 8006cae:	409a      	lsls	r2, r3
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	4013      	ands	r3, r2
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d012      	beq.n	8006cde <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	695b      	ldr	r3, [r3, #20]
 8006cbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d00b      	beq.n	8006cde <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cca:	2201      	movs	r2, #1
 8006ccc:	409a      	lsls	r2, r3
 8006cce:	693b      	ldr	r3, [r7, #16]
 8006cd0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cd6:	f043 0202 	orr.w	r2, r3, #2
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ce2:	2204      	movs	r2, #4
 8006ce4:	409a      	lsls	r2, r3
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	4013      	ands	r3, r2
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d012      	beq.n	8006d14 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f003 0302 	and.w	r3, r3, #2
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d00b      	beq.n	8006d14 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d00:	2204      	movs	r2, #4
 8006d02:	409a      	lsls	r2, r3
 8006d04:	693b      	ldr	r3, [r7, #16]
 8006d06:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d0c:	f043 0204 	orr.w	r2, r3, #4
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d18:	2210      	movs	r2, #16
 8006d1a:	409a      	lsls	r2, r3
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	4013      	ands	r3, r2
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d043      	beq.n	8006dac <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f003 0308 	and.w	r3, r3, #8
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d03c      	beq.n	8006dac <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d36:	2210      	movs	r2, #16
 8006d38:	409a      	lsls	r2, r3
 8006d3a:	693b      	ldr	r3, [r7, #16]
 8006d3c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d018      	beq.n	8006d7e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d108      	bne.n	8006d6c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d024      	beq.n	8006dac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d66:	6878      	ldr	r0, [r7, #4]
 8006d68:	4798      	blx	r3
 8006d6a:	e01f      	b.n	8006dac <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d01b      	beq.n	8006dac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d78:	6878      	ldr	r0, [r7, #4]
 8006d7a:	4798      	blx	r3
 8006d7c:	e016      	b.n	8006dac <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d107      	bne.n	8006d9c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	681a      	ldr	r2, [r3, #0]
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f022 0208 	bic.w	r2, r2, #8
 8006d9a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d003      	beq.n	8006dac <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006da8:	6878      	ldr	r0, [r7, #4]
 8006daa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006db0:	2220      	movs	r2, #32
 8006db2:	409a      	lsls	r2, r3
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	4013      	ands	r3, r2
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	f000 808e 	beq.w	8006eda <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f003 0310 	and.w	r3, r3, #16
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	f000 8086 	beq.w	8006eda <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006dd2:	2220      	movs	r2, #32
 8006dd4:	409a      	lsls	r2, r3
 8006dd6:	693b      	ldr	r3, [r7, #16]
 8006dd8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006de0:	b2db      	uxtb	r3, r3
 8006de2:	2b05      	cmp	r3, #5
 8006de4:	d136      	bne.n	8006e54 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	681a      	ldr	r2, [r3, #0]
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f022 0216 	bic.w	r2, r2, #22
 8006df4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	695a      	ldr	r2, [r3, #20]
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006e04:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d103      	bne.n	8006e16 <HAL_DMA_IRQHandler+0x1da>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d007      	beq.n	8006e26 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	681a      	ldr	r2, [r3, #0]
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f022 0208 	bic.w	r2, r2, #8
 8006e24:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e2a:	223f      	movs	r2, #63	; 0x3f
 8006e2c:	409a      	lsls	r2, r3
 8006e2e:	693b      	ldr	r3, [r7, #16]
 8006e30:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2200      	movs	r2, #0
 8006e36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2201      	movs	r2, #1
 8006e3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d07d      	beq.n	8006f46 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	4798      	blx	r3
        }
        return;
 8006e52:	e078      	b.n	8006f46 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d01c      	beq.n	8006e9c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d108      	bne.n	8006e82 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d030      	beq.n	8006eda <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	4798      	blx	r3
 8006e80:	e02b      	b.n	8006eda <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d027      	beq.n	8006eda <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	4798      	blx	r3
 8006e92:	e022      	b.n	8006eda <HAL_DMA_IRQHandler+0x29e>
 8006e94:	20000010 	.word	0x20000010
 8006e98:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d10f      	bne.n	8006eca <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	681a      	ldr	r2, [r3, #0]
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f022 0210 	bic.w	r2, r2, #16
 8006eb8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2201      	movs	r2, #1
 8006ec6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d003      	beq.n	8006eda <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d032      	beq.n	8006f48 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ee6:	f003 0301 	and.w	r3, r3, #1
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d022      	beq.n	8006f34 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2205      	movs	r2, #5
 8006ef2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	681a      	ldr	r2, [r3, #0]
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f022 0201 	bic.w	r2, r2, #1
 8006f04:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006f06:	68bb      	ldr	r3, [r7, #8]
 8006f08:	3301      	adds	r3, #1
 8006f0a:	60bb      	str	r3, [r7, #8]
 8006f0c:	697a      	ldr	r2, [r7, #20]
 8006f0e:	429a      	cmp	r2, r3
 8006f10:	d307      	bcc.n	8006f22 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f003 0301 	and.w	r3, r3, #1
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d1f2      	bne.n	8006f06 <HAL_DMA_IRQHandler+0x2ca>
 8006f20:	e000      	b.n	8006f24 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8006f22:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2200      	movs	r2, #0
 8006f28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2201      	movs	r2, #1
 8006f30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d005      	beq.n	8006f48 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f40:	6878      	ldr	r0, [r7, #4]
 8006f42:	4798      	blx	r3
 8006f44:	e000      	b.n	8006f48 <HAL_DMA_IRQHandler+0x30c>
        return;
 8006f46:	bf00      	nop
    }
  }
}
 8006f48:	3718      	adds	r7, #24
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	bd80      	pop	{r7, pc}
 8006f4e:	bf00      	nop

08006f50 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8006f50:	b480      	push	{r7}
 8006f52:	b083      	sub	sp, #12
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	370c      	adds	r7, #12
 8006f60:	46bd      	mov	sp, r7
 8006f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f66:	4770      	bx	lr

08006f68 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006f68:	b480      	push	{r7}
 8006f6a:	b085      	sub	sp, #20
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	60f8      	str	r0, [r7, #12]
 8006f70:	60b9      	str	r1, [r7, #8]
 8006f72:	607a      	str	r2, [r7, #4]
 8006f74:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	681a      	ldr	r2, [r3, #0]
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006f84:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	683a      	ldr	r2, [r7, #0]
 8006f8c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	689b      	ldr	r3, [r3, #8]
 8006f92:	2b40      	cmp	r3, #64	; 0x40
 8006f94:	d108      	bne.n	8006fa8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	687a      	ldr	r2, [r7, #4]
 8006f9c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	68ba      	ldr	r2, [r7, #8]
 8006fa4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006fa6:	e007      	b.n	8006fb8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	68ba      	ldr	r2, [r7, #8]
 8006fae:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	687a      	ldr	r2, [r7, #4]
 8006fb6:	60da      	str	r2, [r3, #12]
}
 8006fb8:	bf00      	nop
 8006fba:	3714      	adds	r7, #20
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc2:	4770      	bx	lr

08006fc4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006fc4:	b480      	push	{r7}
 8006fc6:	b085      	sub	sp, #20
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	b2db      	uxtb	r3, r3
 8006fd2:	3b10      	subs	r3, #16
 8006fd4:	4a13      	ldr	r2, [pc, #76]	; (8007024 <DMA_CalcBaseAndBitshift+0x60>)
 8006fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8006fda:	091b      	lsrs	r3, r3, #4
 8006fdc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006fde:	4a12      	ldr	r2, [pc, #72]	; (8007028 <DMA_CalcBaseAndBitshift+0x64>)
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	4413      	add	r3, r2
 8006fe4:	781b      	ldrb	r3, [r3, #0]
 8006fe6:	461a      	mov	r2, r3
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	2b03      	cmp	r3, #3
 8006ff0:	d908      	bls.n	8007004 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	461a      	mov	r2, r3
 8006ff8:	4b0c      	ldr	r3, [pc, #48]	; (800702c <DMA_CalcBaseAndBitshift+0x68>)
 8006ffa:	4013      	ands	r3, r2
 8006ffc:	1d1a      	adds	r2, r3, #4
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	659a      	str	r2, [r3, #88]	; 0x58
 8007002:	e006      	b.n	8007012 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	461a      	mov	r2, r3
 800700a:	4b08      	ldr	r3, [pc, #32]	; (800702c <DMA_CalcBaseAndBitshift+0x68>)
 800700c:	4013      	ands	r3, r2
 800700e:	687a      	ldr	r2, [r7, #4]
 8007010:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007016:	4618      	mov	r0, r3
 8007018:	3714      	adds	r7, #20
 800701a:	46bd      	mov	sp, r7
 800701c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007020:	4770      	bx	lr
 8007022:	bf00      	nop
 8007024:	aaaaaaab 	.word	0xaaaaaaab
 8007028:	0801d728 	.word	0x0801d728
 800702c:	fffffc00 	.word	0xfffffc00

08007030 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007030:	b480      	push	{r7}
 8007032:	b085      	sub	sp, #20
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007038:	2300      	movs	r3, #0
 800703a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007040:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	699b      	ldr	r3, [r3, #24]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d11f      	bne.n	800708a <DMA_CheckFifoParam+0x5a>
 800704a:	68bb      	ldr	r3, [r7, #8]
 800704c:	2b03      	cmp	r3, #3
 800704e:	d856      	bhi.n	80070fe <DMA_CheckFifoParam+0xce>
 8007050:	a201      	add	r2, pc, #4	; (adr r2, 8007058 <DMA_CheckFifoParam+0x28>)
 8007052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007056:	bf00      	nop
 8007058:	08007069 	.word	0x08007069
 800705c:	0800707b 	.word	0x0800707b
 8007060:	08007069 	.word	0x08007069
 8007064:	080070ff 	.word	0x080070ff
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800706c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007070:	2b00      	cmp	r3, #0
 8007072:	d046      	beq.n	8007102 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8007074:	2301      	movs	r3, #1
 8007076:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007078:	e043      	b.n	8007102 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800707e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007082:	d140      	bne.n	8007106 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8007084:	2301      	movs	r3, #1
 8007086:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007088:	e03d      	b.n	8007106 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	699b      	ldr	r3, [r3, #24]
 800708e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007092:	d121      	bne.n	80070d8 <DMA_CheckFifoParam+0xa8>
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	2b03      	cmp	r3, #3
 8007098:	d837      	bhi.n	800710a <DMA_CheckFifoParam+0xda>
 800709a:	a201      	add	r2, pc, #4	; (adr r2, 80070a0 <DMA_CheckFifoParam+0x70>)
 800709c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070a0:	080070b1 	.word	0x080070b1
 80070a4:	080070b7 	.word	0x080070b7
 80070a8:	080070b1 	.word	0x080070b1
 80070ac:	080070c9 	.word	0x080070c9
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80070b0:	2301      	movs	r3, #1
 80070b2:	73fb      	strb	r3, [r7, #15]
      break;
 80070b4:	e030      	b.n	8007118 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d025      	beq.n	800710e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80070c2:	2301      	movs	r3, #1
 80070c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80070c6:	e022      	b.n	800710e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070cc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80070d0:	d11f      	bne.n	8007112 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80070d2:	2301      	movs	r3, #1
 80070d4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80070d6:	e01c      	b.n	8007112 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	2b02      	cmp	r3, #2
 80070dc:	d903      	bls.n	80070e6 <DMA_CheckFifoParam+0xb6>
 80070de:	68bb      	ldr	r3, [r7, #8]
 80070e0:	2b03      	cmp	r3, #3
 80070e2:	d003      	beq.n	80070ec <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80070e4:	e018      	b.n	8007118 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80070e6:	2301      	movs	r3, #1
 80070e8:	73fb      	strb	r3, [r7, #15]
      break;
 80070ea:	e015      	b.n	8007118 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d00e      	beq.n	8007116 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80070f8:	2301      	movs	r3, #1
 80070fa:	73fb      	strb	r3, [r7, #15]
      break;
 80070fc:	e00b      	b.n	8007116 <DMA_CheckFifoParam+0xe6>
      break;
 80070fe:	bf00      	nop
 8007100:	e00a      	b.n	8007118 <DMA_CheckFifoParam+0xe8>
      break;
 8007102:	bf00      	nop
 8007104:	e008      	b.n	8007118 <DMA_CheckFifoParam+0xe8>
      break;
 8007106:	bf00      	nop
 8007108:	e006      	b.n	8007118 <DMA_CheckFifoParam+0xe8>
      break;
 800710a:	bf00      	nop
 800710c:	e004      	b.n	8007118 <DMA_CheckFifoParam+0xe8>
      break;
 800710e:	bf00      	nop
 8007110:	e002      	b.n	8007118 <DMA_CheckFifoParam+0xe8>
      break;   
 8007112:	bf00      	nop
 8007114:	e000      	b.n	8007118 <DMA_CheckFifoParam+0xe8>
      break;
 8007116:	bf00      	nop
    }
  } 
  
  return status; 
 8007118:	7bfb      	ldrb	r3, [r7, #15]
}
 800711a:	4618      	mov	r0, r3
 800711c:	3714      	adds	r7, #20
 800711e:	46bd      	mov	sp, r7
 8007120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007124:	4770      	bx	lr
 8007126:	bf00      	nop

08007128 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b082      	sub	sp, #8
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d101      	bne.n	800713a <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8007136:	2301      	movs	r3, #1
 8007138:	e039      	b.n	80071ae <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007140:	b2db      	uxtb	r3, r3
 8007142:	2b00      	cmp	r3, #0
 8007144:	d106      	bne.n	8007154 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2200      	movs	r2, #0
 800714a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f7fb ff64 	bl	800301c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2202      	movs	r2, #2
 8007158:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	685a      	ldr	r2, [r3, #4]
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	430a      	orrs	r2, r1
 8007170:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007178:	f023 0107 	bic.w	r1, r3, #7
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	689a      	ldr	r2, [r3, #8]
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	430a      	orrs	r2, r1
 8007186:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800718e:	4b0a      	ldr	r3, [pc, #40]	; (80071b8 <HAL_DMA2D_Init+0x90>)
 8007190:	4013      	ands	r3, r2
 8007192:	687a      	ldr	r2, [r7, #4]
 8007194:	68d1      	ldr	r1, [r2, #12]
 8007196:	687a      	ldr	r2, [r7, #4]
 8007198:	6812      	ldr	r2, [r2, #0]
 800719a:	430b      	orrs	r3, r1
 800719c:	6413      	str	r3, [r2, #64]	; 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2200      	movs	r2, #0
 80071a2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2201      	movs	r2, #1
 80071a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80071ac:	2300      	movs	r3, #0
}
 80071ae:	4618      	mov	r0, r3
 80071b0:	3708      	adds	r7, #8
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bd80      	pop	{r7, pc}
 80071b6:	bf00      	nop
 80071b8:	ffffc000 	.word	0xffffc000

080071bc <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b086      	sub	sp, #24
 80071c0:	af02      	add	r7, sp, #8
 80071c2:	60f8      	str	r0, [r7, #12]
 80071c4:	60b9      	str	r1, [r7, #8]
 80071c6:	607a      	str	r2, [r7, #4]
 80071c8:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80071d0:	2b01      	cmp	r3, #1
 80071d2:	d101      	bne.n	80071d8 <HAL_DMA2D_Start+0x1c>
 80071d4:	2302      	movs	r3, #2
 80071d6:	e018      	b.n	800720a <HAL_DMA2D_Start+0x4e>
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	2201      	movs	r2, #1
 80071dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	2202      	movs	r2, #2
 80071e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80071e8:	69bb      	ldr	r3, [r7, #24]
 80071ea:	9300      	str	r3, [sp, #0]
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	687a      	ldr	r2, [r7, #4]
 80071f0:	68b9      	ldr	r1, [r7, #8]
 80071f2:	68f8      	ldr	r0, [r7, #12]
 80071f4:	f000 fa98 	bl	8007728 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	681a      	ldr	r2, [r3, #0]
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f042 0201 	orr.w	r2, r2, #1
 8007206:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8007208:	2300      	movs	r3, #0
}
 800720a:	4618      	mov	r0, r3
 800720c:	3710      	adds	r7, #16
 800720e:	46bd      	mov	sp, r7
 8007210:	bd80      	pop	{r7, pc}

08007212 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8007212:	b580      	push	{r7, lr}
 8007214:	b086      	sub	sp, #24
 8007216:	af00      	add	r7, sp, #0
 8007218:	6078      	str	r0, [r7, #4]
 800721a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 800721c:	2300      	movs	r3, #0
 800721e:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f003 0301 	and.w	r3, r3, #1
 800722a:	2b00      	cmp	r3, #0
 800722c:	d056      	beq.n	80072dc <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800722e:	f7fe fd65 	bl	8005cfc <HAL_GetTick>
 8007232:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8007234:	e04b      	b.n	80072ce <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	685b      	ldr	r3, [r3, #4]
 800723c:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8007244:	2b00      	cmp	r3, #0
 8007246:	d023      	beq.n	8007290 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	f003 0320 	and.w	r3, r3, #32
 800724e:	2b00      	cmp	r3, #0
 8007250:	d005      	beq.n	800725e <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007256:	f043 0202 	orr.w	r2, r3, #2
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	f003 0301 	and.w	r3, r3, #1
 8007264:	2b00      	cmp	r3, #0
 8007266:	d005      	beq.n	8007274 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800726c:	f043 0201 	orr.w	r2, r3, #1
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	2221      	movs	r2, #33	; 0x21
 800727a:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2204      	movs	r2, #4
 8007280:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2200      	movs	r2, #0
 8007288:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 800728c:	2301      	movs	r3, #1
 800728e:	e0a5      	b.n	80073dc <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007296:	d01a      	beq.n	80072ce <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007298:	f7fe fd30 	bl	8005cfc <HAL_GetTick>
 800729c:	4602      	mov	r2, r0
 800729e:	697b      	ldr	r3, [r7, #20]
 80072a0:	1ad3      	subs	r3, r2, r3
 80072a2:	683a      	ldr	r2, [r7, #0]
 80072a4:	429a      	cmp	r2, r3
 80072a6:	d302      	bcc.n	80072ae <HAL_DMA2D_PollForTransfer+0x9c>
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d10f      	bne.n	80072ce <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072b2:	f043 0220 	orr.w	r2, r3, #32
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2203      	movs	r2, #3
 80072be:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2200      	movs	r2, #0
 80072c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 80072ca:	2303      	movs	r3, #3
 80072cc:	e086      	b.n	80073dc <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	685b      	ldr	r3, [r3, #4]
 80072d4:	f003 0302 	and.w	r3, r3, #2
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d0ac      	beq.n	8007236 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	69db      	ldr	r3, [r3, #28]
 80072e2:	f003 0320 	and.w	r3, r3, #32
 80072e6:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ee:	f003 0320 	and.w	r3, r3, #32
 80072f2:	693a      	ldr	r2, [r7, #16]
 80072f4:	4313      	orrs	r3, r2
 80072f6:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 80072f8:	693b      	ldr	r3, [r7, #16]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d061      	beq.n	80073c2 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80072fe:	f7fe fcfd 	bl	8005cfc <HAL_GetTick>
 8007302:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8007304:	e056      	b.n	80073b4 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	685b      	ldr	r3, [r3, #4]
 800730c:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8007314:	2b00      	cmp	r3, #0
 8007316:	d02e      	beq.n	8007376 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	f003 0308 	and.w	r3, r3, #8
 800731e:	2b00      	cmp	r3, #0
 8007320:	d005      	beq.n	800732e <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007326:	f043 0204 	orr.w	r2, r3, #4
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	f003 0320 	and.w	r3, r3, #32
 8007334:	2b00      	cmp	r3, #0
 8007336:	d005      	beq.n	8007344 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800733c:	f043 0202 	orr.w	r2, r3, #2
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	f003 0301 	and.w	r3, r3, #1
 800734a:	2b00      	cmp	r3, #0
 800734c:	d005      	beq.n	800735a <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007352:	f043 0201 	orr.w	r2, r3, #1
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	2229      	movs	r2, #41	; 0x29
 8007360:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2204      	movs	r2, #4
 8007366:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2200      	movs	r2, #0
 800736e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8007372:	2301      	movs	r3, #1
 8007374:	e032      	b.n	80073dc <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800737c:	d01a      	beq.n	80073b4 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800737e:	f7fe fcbd 	bl	8005cfc <HAL_GetTick>
 8007382:	4602      	mov	r2, r0
 8007384:	697b      	ldr	r3, [r7, #20]
 8007386:	1ad3      	subs	r3, r2, r3
 8007388:	683a      	ldr	r2, [r7, #0]
 800738a:	429a      	cmp	r2, r3
 800738c:	d302      	bcc.n	8007394 <HAL_DMA2D_PollForTransfer+0x182>
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d10f      	bne.n	80073b4 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007398:	f043 0220 	orr.w	r2, r3, #32
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2203      	movs	r2, #3
 80073a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2200      	movs	r2, #0
 80073ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 80073b0:	2303      	movs	r3, #3
 80073b2:	e013      	b.n	80073dc <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	685b      	ldr	r3, [r3, #4]
 80073ba:	f003 0310 	and.w	r3, r3, #16
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d0a1      	beq.n	8007306 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	2212      	movs	r2, #18
 80073c8:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2201      	movs	r2, #1
 80073ce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2200      	movs	r2, #0
 80073d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80073da:	2300      	movs	r3, #0
}
 80073dc:	4618      	mov	r0, r3
 80073de:	3718      	adds	r7, #24
 80073e0:	46bd      	mov	sp, r7
 80073e2:	bd80      	pop	{r7, pc}

080073e4 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b084      	sub	sp, #16
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	685b      	ldr	r3, [r3, #4]
 80073f2:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	f003 0301 	and.w	r3, r3, #1
 8007402:	2b00      	cmp	r3, #0
 8007404:	d026      	beq.n	8007454 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800740c:	2b00      	cmp	r3, #0
 800740e:	d021      	beq.n	8007454 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	681a      	ldr	r2, [r3, #0]
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800741e:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007424:	f043 0201 	orr.w	r2, r3, #1
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	2201      	movs	r2, #1
 8007432:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2204      	movs	r2, #4
 8007438:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2200      	movs	r2, #0
 8007440:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	695b      	ldr	r3, [r3, #20]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d003      	beq.n	8007454 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	695b      	ldr	r3, [r3, #20]
 8007450:	6878      	ldr	r0, [r7, #4]
 8007452:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	f003 0320 	and.w	r3, r3, #32
 800745a:	2b00      	cmp	r3, #0
 800745c:	d026      	beq.n	80074ac <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 800745e:	68bb      	ldr	r3, [r7, #8]
 8007460:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007464:	2b00      	cmp	r3, #0
 8007466:	d021      	beq.n	80074ac <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	681a      	ldr	r2, [r3, #0]
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007476:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	2220      	movs	r2, #32
 800747e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007484:	f043 0202 	orr.w	r2, r3, #2
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2204      	movs	r2, #4
 8007490:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2200      	movs	r2, #0
 8007498:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	695b      	ldr	r3, [r3, #20]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d003      	beq.n	80074ac <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	695b      	ldr	r3, [r3, #20]
 80074a8:	6878      	ldr	r0, [r7, #4]
 80074aa:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	f003 0308 	and.w	r3, r3, #8
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d026      	beq.n	8007504 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80074b6:	68bb      	ldr	r3, [r7, #8]
 80074b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d021      	beq.n	8007504 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	681a      	ldr	r2, [r3, #0]
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80074ce:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	2208      	movs	r2, #8
 80074d6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074dc:	f043 0204 	orr.w	r2, r3, #4
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2204      	movs	r2, #4
 80074e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2200      	movs	r2, #0
 80074f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	695b      	ldr	r3, [r3, #20]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d003      	beq.n	8007504 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	695b      	ldr	r3, [r3, #20]
 8007500:	6878      	ldr	r0, [r7, #4]
 8007502:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	f003 0304 	and.w	r3, r3, #4
 800750a:	2b00      	cmp	r3, #0
 800750c:	d013      	beq.n	8007536 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 800750e:	68bb      	ldr	r3, [r7, #8]
 8007510:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007514:	2b00      	cmp	r3, #0
 8007516:	d00e      	beq.n	8007536 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	681a      	ldr	r2, [r3, #0]
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007526:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	2204      	movs	r2, #4
 800752e:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8007530:	6878      	ldr	r0, [r7, #4]
 8007532:	f000 f853 	bl	80075dc <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	f003 0302 	and.w	r3, r3, #2
 800753c:	2b00      	cmp	r3, #0
 800753e:	d024      	beq.n	800758a <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8007540:	68bb      	ldr	r3, [r7, #8]
 8007542:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007546:	2b00      	cmp	r3, #0
 8007548:	d01f      	beq.n	800758a <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	681a      	ldr	r2, [r3, #0]
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007558:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	2202      	movs	r2, #2
 8007560:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2201      	movs	r2, #1
 800756e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2200      	movs	r2, #0
 8007576:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	691b      	ldr	r3, [r3, #16]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d003      	beq.n	800758a <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	691b      	ldr	r3, [r3, #16]
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	f003 0310 	and.w	r3, r3, #16
 8007590:	2b00      	cmp	r3, #0
 8007592:	d01f      	beq.n	80075d4 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8007594:	68bb      	ldr	r3, [r7, #8]
 8007596:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800759a:	2b00      	cmp	r3, #0
 800759c:	d01a      	beq.n	80075d4 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	681a      	ldr	r2, [r3, #0]
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80075ac:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	2210      	movs	r2, #16
 80075b4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2201      	movs	r2, #1
 80075c2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2200      	movs	r2, #0
 80075ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80075ce:	6878      	ldr	r0, [r7, #4]
 80075d0:	f000 f80e 	bl	80075f0 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80075d4:	bf00      	nop
 80075d6:	3710      	adds	r7, #16
 80075d8:	46bd      	mov	sp, r7
 80075da:	bd80      	pop	{r7, pc}

080075dc <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80075dc:	b480      	push	{r7}
 80075de:	b083      	sub	sp, #12
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80075e4:	bf00      	nop
 80075e6:	370c      	adds	r7, #12
 80075e8:	46bd      	mov	sp, r7
 80075ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ee:	4770      	bx	lr

080075f0 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80075f0:	b480      	push	{r7}
 80075f2:	b083      	sub	sp, #12
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 80075f8:	bf00      	nop
 80075fa:	370c      	adds	r7, #12
 80075fc:	46bd      	mov	sp, r7
 80075fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007602:	4770      	bx	lr

08007604 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8007604:	b480      	push	{r7}
 8007606:	b087      	sub	sp, #28
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
 800760c:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	685b      	ldr	r3, [r3, #4]
 8007612:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800761c:	2b01      	cmp	r3, #1
 800761e:	d101      	bne.n	8007624 <HAL_DMA2D_ConfigLayer+0x20>
 8007620:	2302      	movs	r3, #2
 8007622:	e079      	b.n	8007718 <HAL_DMA2D_ConfigLayer+0x114>
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2201      	movs	r2, #1
 8007628:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2202      	movs	r2, #2
 8007630:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	011b      	lsls	r3, r3, #4
 8007638:	3318      	adds	r3, #24
 800763a:	687a      	ldr	r2, [r7, #4]
 800763c:	4413      	add	r3, r2
 800763e:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8007640:	693b      	ldr	r3, [r7, #16]
 8007642:	685a      	ldr	r2, [r3, #4]
 8007644:	693b      	ldr	r3, [r7, #16]
 8007646:	689b      	ldr	r3, [r3, #8]
 8007648:	041b      	lsls	r3, r3, #16
 800764a:	4313      	orrs	r3, r2
 800764c:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800764e:	4b35      	ldr	r3, [pc, #212]	; (8007724 <HAL_DMA2D_ConfigLayer+0x120>)
 8007650:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007652:	693b      	ldr	r3, [r7, #16]
 8007654:	685b      	ldr	r3, [r3, #4]
 8007656:	2b0a      	cmp	r3, #10
 8007658:	d003      	beq.n	8007662 <HAL_DMA2D_ConfigLayer+0x5e>
 800765a:	693b      	ldr	r3, [r7, #16]
 800765c:	685b      	ldr	r3, [r3, #4]
 800765e:	2b09      	cmp	r3, #9
 8007660:	d107      	bne.n	8007672 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8007662:	693b      	ldr	r3, [r7, #16]
 8007664:	68db      	ldr	r3, [r3, #12]
 8007666:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800766a:	697a      	ldr	r2, [r7, #20]
 800766c:	4313      	orrs	r3, r2
 800766e:	617b      	str	r3, [r7, #20]
 8007670:	e005      	b.n	800767e <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8007672:	693b      	ldr	r3, [r7, #16]
 8007674:	68db      	ldr	r3, [r3, #12]
 8007676:	061b      	lsls	r3, r3, #24
 8007678:	697a      	ldr	r2, [r7, #20]
 800767a:	4313      	orrs	r3, r2
 800767c:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d120      	bne.n	80076c6 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	43db      	mvns	r3, r3
 800768e:	ea02 0103 	and.w	r1, r2, r3
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	697a      	ldr	r2, [r7, #20]
 8007698:	430a      	orrs	r2, r1
 800769a:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	693a      	ldr	r2, [r7, #16]
 80076a2:	6812      	ldr	r2, [r2, #0]
 80076a4:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80076a6:	693b      	ldr	r3, [r7, #16]
 80076a8:	685b      	ldr	r3, [r3, #4]
 80076aa:	2b0a      	cmp	r3, #10
 80076ac:	d003      	beq.n	80076b6 <HAL_DMA2D_ConfigLayer+0xb2>
 80076ae:	693b      	ldr	r3, [r7, #16]
 80076b0:	685b      	ldr	r3, [r3, #4]
 80076b2:	2b09      	cmp	r3, #9
 80076b4:	d127      	bne.n	8007706 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80076b6:	693b      	ldr	r3, [r7, #16]
 80076b8:	68da      	ldr	r2, [r3, #12]
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80076c2:	629a      	str	r2, [r3, #40]	; 0x28
 80076c4:	e01f      	b.n	8007706 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	69da      	ldr	r2, [r3, #28]
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	43db      	mvns	r3, r3
 80076d0:	ea02 0103 	and.w	r1, r2, r3
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	697a      	ldr	r2, [r7, #20]
 80076da:	430a      	orrs	r2, r1
 80076dc:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	693a      	ldr	r2, [r7, #16]
 80076e4:	6812      	ldr	r2, [r2, #0]
 80076e6:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80076e8:	693b      	ldr	r3, [r7, #16]
 80076ea:	685b      	ldr	r3, [r3, #4]
 80076ec:	2b0a      	cmp	r3, #10
 80076ee:	d003      	beq.n	80076f8 <HAL_DMA2D_ConfigLayer+0xf4>
 80076f0:	693b      	ldr	r3, [r7, #16]
 80076f2:	685b      	ldr	r3, [r3, #4]
 80076f4:	2b09      	cmp	r3, #9
 80076f6:	d106      	bne.n	8007706 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80076f8:	693b      	ldr	r3, [r7, #16]
 80076fa:	68da      	ldr	r2, [r3, #12]
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8007704:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2201      	movs	r2, #1
 800770a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2200      	movs	r2, #0
 8007712:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8007716:	2300      	movs	r3, #0
}
 8007718:	4618      	mov	r0, r3
 800771a:	371c      	adds	r7, #28
 800771c:	46bd      	mov	sp, r7
 800771e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007722:	4770      	bx	lr
 8007724:	ff03000f 	.word	0xff03000f

08007728 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8007728:	b480      	push	{r7}
 800772a:	b08b      	sub	sp, #44	; 0x2c
 800772c:	af00      	add	r7, sp, #0
 800772e:	60f8      	str	r0, [r7, #12]
 8007730:	60b9      	str	r1, [r7, #8]
 8007732:	607a      	str	r2, [r7, #4]
 8007734:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800773c:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	041a      	lsls	r2, r3, #16
 8007744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007746:	431a      	orrs	r2, r3
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	430a      	orrs	r2, r1
 800774e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	687a      	ldr	r2, [r7, #4]
 8007756:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	685b      	ldr	r3, [r3, #4]
 800775c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007760:	d174      	bne.n	800784c <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8007762:	68bb      	ldr	r3, [r7, #8]
 8007764:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007768:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800776a:	68bb      	ldr	r3, [r7, #8]
 800776c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007770:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8007772:	68bb      	ldr	r3, [r7, #8]
 8007774:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007778:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800777a:	68bb      	ldr	r3, [r7, #8]
 800777c:	b2db      	uxtb	r3, r3
 800777e:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	689b      	ldr	r3, [r3, #8]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d108      	bne.n	800779a <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8007788:	69ba      	ldr	r2, [r7, #24]
 800778a:	69fb      	ldr	r3, [r7, #28]
 800778c:	431a      	orrs	r2, r3
 800778e:	6a3b      	ldr	r3, [r7, #32]
 8007790:	4313      	orrs	r3, r2
 8007792:	697a      	ldr	r2, [r7, #20]
 8007794:	4313      	orrs	r3, r2
 8007796:	627b      	str	r3, [r7, #36]	; 0x24
 8007798:	e053      	b.n	8007842 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	689b      	ldr	r3, [r3, #8]
 800779e:	2b01      	cmp	r3, #1
 80077a0:	d106      	bne.n	80077b0 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80077a2:	69ba      	ldr	r2, [r7, #24]
 80077a4:	69fb      	ldr	r3, [r7, #28]
 80077a6:	4313      	orrs	r3, r2
 80077a8:	697a      	ldr	r2, [r7, #20]
 80077aa:	4313      	orrs	r3, r2
 80077ac:	627b      	str	r3, [r7, #36]	; 0x24
 80077ae:	e048      	b.n	8007842 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	689b      	ldr	r3, [r3, #8]
 80077b4:	2b02      	cmp	r3, #2
 80077b6:	d111      	bne.n	80077dc <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 80077b8:	69fb      	ldr	r3, [r7, #28]
 80077ba:	0cdb      	lsrs	r3, r3, #19
 80077bc:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 80077be:	69bb      	ldr	r3, [r7, #24]
 80077c0:	0a9b      	lsrs	r3, r3, #10
 80077c2:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80077c4:	697b      	ldr	r3, [r7, #20]
 80077c6:	08db      	lsrs	r3, r3, #3
 80077c8:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80077ca:	69bb      	ldr	r3, [r7, #24]
 80077cc:	015a      	lsls	r2, r3, #5
 80077ce:	69fb      	ldr	r3, [r7, #28]
 80077d0:	02db      	lsls	r3, r3, #11
 80077d2:	4313      	orrs	r3, r2
 80077d4:	697a      	ldr	r2, [r7, #20]
 80077d6:	4313      	orrs	r3, r2
 80077d8:	627b      	str	r3, [r7, #36]	; 0x24
 80077da:	e032      	b.n	8007842 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	689b      	ldr	r3, [r3, #8]
 80077e0:	2b03      	cmp	r3, #3
 80077e2:	d117      	bne.n	8007814 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 80077e4:	6a3b      	ldr	r3, [r7, #32]
 80077e6:	0fdb      	lsrs	r3, r3, #31
 80077e8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 80077ea:	69fb      	ldr	r3, [r7, #28]
 80077ec:	0cdb      	lsrs	r3, r3, #19
 80077ee:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 80077f0:	69bb      	ldr	r3, [r7, #24]
 80077f2:	0adb      	lsrs	r3, r3, #11
 80077f4:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80077f6:	697b      	ldr	r3, [r7, #20]
 80077f8:	08db      	lsrs	r3, r3, #3
 80077fa:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80077fc:	69bb      	ldr	r3, [r7, #24]
 80077fe:	015a      	lsls	r2, r3, #5
 8007800:	69fb      	ldr	r3, [r7, #28]
 8007802:	029b      	lsls	r3, r3, #10
 8007804:	431a      	orrs	r2, r3
 8007806:	6a3b      	ldr	r3, [r7, #32]
 8007808:	03db      	lsls	r3, r3, #15
 800780a:	4313      	orrs	r3, r2
 800780c:	697a      	ldr	r2, [r7, #20]
 800780e:	4313      	orrs	r3, r2
 8007810:	627b      	str	r3, [r7, #36]	; 0x24
 8007812:	e016      	b.n	8007842 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8007814:	6a3b      	ldr	r3, [r7, #32]
 8007816:	0f1b      	lsrs	r3, r3, #28
 8007818:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 800781a:	69fb      	ldr	r3, [r7, #28]
 800781c:	0d1b      	lsrs	r3, r3, #20
 800781e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8007820:	69bb      	ldr	r3, [r7, #24]
 8007822:	0b1b      	lsrs	r3, r3, #12
 8007824:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8007826:	697b      	ldr	r3, [r7, #20]
 8007828:	091b      	lsrs	r3, r3, #4
 800782a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 800782c:	69bb      	ldr	r3, [r7, #24]
 800782e:	011a      	lsls	r2, r3, #4
 8007830:	69fb      	ldr	r3, [r7, #28]
 8007832:	021b      	lsls	r3, r3, #8
 8007834:	431a      	orrs	r2, r3
 8007836:	6a3b      	ldr	r3, [r7, #32]
 8007838:	031b      	lsls	r3, r3, #12
 800783a:	4313      	orrs	r3, r2
 800783c:	697a      	ldr	r2, [r7, #20]
 800783e:	4313      	orrs	r3, r2
 8007840:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007848:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 800784a:	e003      	b.n	8007854 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	68ba      	ldr	r2, [r7, #8]
 8007852:	60da      	str	r2, [r3, #12]
}
 8007854:	bf00      	nop
 8007856:	372c      	adds	r7, #44	; 0x2c
 8007858:	46bd      	mov	sp, r7
 800785a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785e:	4770      	bx	lr

08007860 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007860:	b480      	push	{r7}
 8007862:	b089      	sub	sp, #36	; 0x24
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
 8007868:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800786a:	2300      	movs	r3, #0
 800786c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800786e:	2300      	movs	r3, #0
 8007870:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8007872:	2300      	movs	r3, #0
 8007874:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8007876:	2300      	movs	r3, #0
 8007878:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800787a:	2300      	movs	r3, #0
 800787c:	61fb      	str	r3, [r7, #28]
 800787e:	e175      	b.n	8007b6c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8007880:	2201      	movs	r2, #1
 8007882:	69fb      	ldr	r3, [r7, #28]
 8007884:	fa02 f303 	lsl.w	r3, r2, r3
 8007888:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	697a      	ldr	r2, [r7, #20]
 8007890:	4013      	ands	r3, r2
 8007892:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007894:	693a      	ldr	r2, [r7, #16]
 8007896:	697b      	ldr	r3, [r7, #20]
 8007898:	429a      	cmp	r2, r3
 800789a:	f040 8164 	bne.w	8007b66 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	685b      	ldr	r3, [r3, #4]
 80078a2:	2b01      	cmp	r3, #1
 80078a4:	d00b      	beq.n	80078be <HAL_GPIO_Init+0x5e>
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	685b      	ldr	r3, [r3, #4]
 80078aa:	2b02      	cmp	r3, #2
 80078ac:	d007      	beq.n	80078be <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80078b2:	2b11      	cmp	r3, #17
 80078b4:	d003      	beq.n	80078be <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	685b      	ldr	r3, [r3, #4]
 80078ba:	2b12      	cmp	r3, #18
 80078bc:	d130      	bne.n	8007920 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	689b      	ldr	r3, [r3, #8]
 80078c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80078c4:	69fb      	ldr	r3, [r7, #28]
 80078c6:	005b      	lsls	r3, r3, #1
 80078c8:	2203      	movs	r2, #3
 80078ca:	fa02 f303 	lsl.w	r3, r2, r3
 80078ce:	43db      	mvns	r3, r3
 80078d0:	69ba      	ldr	r2, [r7, #24]
 80078d2:	4013      	ands	r3, r2
 80078d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	68da      	ldr	r2, [r3, #12]
 80078da:	69fb      	ldr	r3, [r7, #28]
 80078dc:	005b      	lsls	r3, r3, #1
 80078de:	fa02 f303 	lsl.w	r3, r2, r3
 80078e2:	69ba      	ldr	r2, [r7, #24]
 80078e4:	4313      	orrs	r3, r2
 80078e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	69ba      	ldr	r2, [r7, #24]
 80078ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	685b      	ldr	r3, [r3, #4]
 80078f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80078f4:	2201      	movs	r2, #1
 80078f6:	69fb      	ldr	r3, [r7, #28]
 80078f8:	fa02 f303 	lsl.w	r3, r2, r3
 80078fc:	43db      	mvns	r3, r3
 80078fe:	69ba      	ldr	r2, [r7, #24]
 8007900:	4013      	ands	r3, r2
 8007902:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	685b      	ldr	r3, [r3, #4]
 8007908:	091b      	lsrs	r3, r3, #4
 800790a:	f003 0201 	and.w	r2, r3, #1
 800790e:	69fb      	ldr	r3, [r7, #28]
 8007910:	fa02 f303 	lsl.w	r3, r2, r3
 8007914:	69ba      	ldr	r2, [r7, #24]
 8007916:	4313      	orrs	r3, r2
 8007918:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	69ba      	ldr	r2, [r7, #24]
 800791e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	68db      	ldr	r3, [r3, #12]
 8007924:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8007926:	69fb      	ldr	r3, [r7, #28]
 8007928:	005b      	lsls	r3, r3, #1
 800792a:	2203      	movs	r2, #3
 800792c:	fa02 f303 	lsl.w	r3, r2, r3
 8007930:	43db      	mvns	r3, r3
 8007932:	69ba      	ldr	r2, [r7, #24]
 8007934:	4013      	ands	r3, r2
 8007936:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	689a      	ldr	r2, [r3, #8]
 800793c:	69fb      	ldr	r3, [r7, #28]
 800793e:	005b      	lsls	r3, r3, #1
 8007940:	fa02 f303 	lsl.w	r3, r2, r3
 8007944:	69ba      	ldr	r2, [r7, #24]
 8007946:	4313      	orrs	r3, r2
 8007948:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	69ba      	ldr	r2, [r7, #24]
 800794e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	685b      	ldr	r3, [r3, #4]
 8007954:	2b02      	cmp	r3, #2
 8007956:	d003      	beq.n	8007960 <HAL_GPIO_Init+0x100>
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	685b      	ldr	r3, [r3, #4]
 800795c:	2b12      	cmp	r3, #18
 800795e:	d123      	bne.n	80079a8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8007960:	69fb      	ldr	r3, [r7, #28]
 8007962:	08da      	lsrs	r2, r3, #3
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	3208      	adds	r2, #8
 8007968:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800796c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800796e:	69fb      	ldr	r3, [r7, #28]
 8007970:	f003 0307 	and.w	r3, r3, #7
 8007974:	009b      	lsls	r3, r3, #2
 8007976:	220f      	movs	r2, #15
 8007978:	fa02 f303 	lsl.w	r3, r2, r3
 800797c:	43db      	mvns	r3, r3
 800797e:	69ba      	ldr	r2, [r7, #24]
 8007980:	4013      	ands	r3, r2
 8007982:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	691a      	ldr	r2, [r3, #16]
 8007988:	69fb      	ldr	r3, [r7, #28]
 800798a:	f003 0307 	and.w	r3, r3, #7
 800798e:	009b      	lsls	r3, r3, #2
 8007990:	fa02 f303 	lsl.w	r3, r2, r3
 8007994:	69ba      	ldr	r2, [r7, #24]
 8007996:	4313      	orrs	r3, r2
 8007998:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800799a:	69fb      	ldr	r3, [r7, #28]
 800799c:	08da      	lsrs	r2, r3, #3
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	3208      	adds	r2, #8
 80079a2:	69b9      	ldr	r1, [r7, #24]
 80079a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80079ae:	69fb      	ldr	r3, [r7, #28]
 80079b0:	005b      	lsls	r3, r3, #1
 80079b2:	2203      	movs	r2, #3
 80079b4:	fa02 f303 	lsl.w	r3, r2, r3
 80079b8:	43db      	mvns	r3, r3
 80079ba:	69ba      	ldr	r2, [r7, #24]
 80079bc:	4013      	ands	r3, r2
 80079be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	685b      	ldr	r3, [r3, #4]
 80079c4:	f003 0203 	and.w	r2, r3, #3
 80079c8:	69fb      	ldr	r3, [r7, #28]
 80079ca:	005b      	lsls	r3, r3, #1
 80079cc:	fa02 f303 	lsl.w	r3, r2, r3
 80079d0:	69ba      	ldr	r2, [r7, #24]
 80079d2:	4313      	orrs	r3, r2
 80079d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	69ba      	ldr	r2, [r7, #24]
 80079da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	685b      	ldr	r3, [r3, #4]
 80079e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	f000 80be 	beq.w	8007b66 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80079ea:	4b66      	ldr	r3, [pc, #408]	; (8007b84 <HAL_GPIO_Init+0x324>)
 80079ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079ee:	4a65      	ldr	r2, [pc, #404]	; (8007b84 <HAL_GPIO_Init+0x324>)
 80079f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80079f4:	6453      	str	r3, [r2, #68]	; 0x44
 80079f6:	4b63      	ldr	r3, [pc, #396]	; (8007b84 <HAL_GPIO_Init+0x324>)
 80079f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80079fe:	60fb      	str	r3, [r7, #12]
 8007a00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8007a02:	4a61      	ldr	r2, [pc, #388]	; (8007b88 <HAL_GPIO_Init+0x328>)
 8007a04:	69fb      	ldr	r3, [r7, #28]
 8007a06:	089b      	lsrs	r3, r3, #2
 8007a08:	3302      	adds	r3, #2
 8007a0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8007a10:	69fb      	ldr	r3, [r7, #28]
 8007a12:	f003 0303 	and.w	r3, r3, #3
 8007a16:	009b      	lsls	r3, r3, #2
 8007a18:	220f      	movs	r2, #15
 8007a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8007a1e:	43db      	mvns	r3, r3
 8007a20:	69ba      	ldr	r2, [r7, #24]
 8007a22:	4013      	ands	r3, r2
 8007a24:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	4a58      	ldr	r2, [pc, #352]	; (8007b8c <HAL_GPIO_Init+0x32c>)
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d037      	beq.n	8007a9e <HAL_GPIO_Init+0x23e>
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	4a57      	ldr	r2, [pc, #348]	; (8007b90 <HAL_GPIO_Init+0x330>)
 8007a32:	4293      	cmp	r3, r2
 8007a34:	d031      	beq.n	8007a9a <HAL_GPIO_Init+0x23a>
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	4a56      	ldr	r2, [pc, #344]	; (8007b94 <HAL_GPIO_Init+0x334>)
 8007a3a:	4293      	cmp	r3, r2
 8007a3c:	d02b      	beq.n	8007a96 <HAL_GPIO_Init+0x236>
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	4a55      	ldr	r2, [pc, #340]	; (8007b98 <HAL_GPIO_Init+0x338>)
 8007a42:	4293      	cmp	r3, r2
 8007a44:	d025      	beq.n	8007a92 <HAL_GPIO_Init+0x232>
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	4a54      	ldr	r2, [pc, #336]	; (8007b9c <HAL_GPIO_Init+0x33c>)
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d01f      	beq.n	8007a8e <HAL_GPIO_Init+0x22e>
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	4a53      	ldr	r2, [pc, #332]	; (8007ba0 <HAL_GPIO_Init+0x340>)
 8007a52:	4293      	cmp	r3, r2
 8007a54:	d019      	beq.n	8007a8a <HAL_GPIO_Init+0x22a>
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	4a52      	ldr	r2, [pc, #328]	; (8007ba4 <HAL_GPIO_Init+0x344>)
 8007a5a:	4293      	cmp	r3, r2
 8007a5c:	d013      	beq.n	8007a86 <HAL_GPIO_Init+0x226>
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	4a51      	ldr	r2, [pc, #324]	; (8007ba8 <HAL_GPIO_Init+0x348>)
 8007a62:	4293      	cmp	r3, r2
 8007a64:	d00d      	beq.n	8007a82 <HAL_GPIO_Init+0x222>
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	4a50      	ldr	r2, [pc, #320]	; (8007bac <HAL_GPIO_Init+0x34c>)
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	d007      	beq.n	8007a7e <HAL_GPIO_Init+0x21e>
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	4a4f      	ldr	r2, [pc, #316]	; (8007bb0 <HAL_GPIO_Init+0x350>)
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d101      	bne.n	8007a7a <HAL_GPIO_Init+0x21a>
 8007a76:	2309      	movs	r3, #9
 8007a78:	e012      	b.n	8007aa0 <HAL_GPIO_Init+0x240>
 8007a7a:	230a      	movs	r3, #10
 8007a7c:	e010      	b.n	8007aa0 <HAL_GPIO_Init+0x240>
 8007a7e:	2308      	movs	r3, #8
 8007a80:	e00e      	b.n	8007aa0 <HAL_GPIO_Init+0x240>
 8007a82:	2307      	movs	r3, #7
 8007a84:	e00c      	b.n	8007aa0 <HAL_GPIO_Init+0x240>
 8007a86:	2306      	movs	r3, #6
 8007a88:	e00a      	b.n	8007aa0 <HAL_GPIO_Init+0x240>
 8007a8a:	2305      	movs	r3, #5
 8007a8c:	e008      	b.n	8007aa0 <HAL_GPIO_Init+0x240>
 8007a8e:	2304      	movs	r3, #4
 8007a90:	e006      	b.n	8007aa0 <HAL_GPIO_Init+0x240>
 8007a92:	2303      	movs	r3, #3
 8007a94:	e004      	b.n	8007aa0 <HAL_GPIO_Init+0x240>
 8007a96:	2302      	movs	r3, #2
 8007a98:	e002      	b.n	8007aa0 <HAL_GPIO_Init+0x240>
 8007a9a:	2301      	movs	r3, #1
 8007a9c:	e000      	b.n	8007aa0 <HAL_GPIO_Init+0x240>
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	69fa      	ldr	r2, [r7, #28]
 8007aa2:	f002 0203 	and.w	r2, r2, #3
 8007aa6:	0092      	lsls	r2, r2, #2
 8007aa8:	4093      	lsls	r3, r2
 8007aaa:	69ba      	ldr	r2, [r7, #24]
 8007aac:	4313      	orrs	r3, r2
 8007aae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8007ab0:	4935      	ldr	r1, [pc, #212]	; (8007b88 <HAL_GPIO_Init+0x328>)
 8007ab2:	69fb      	ldr	r3, [r7, #28]
 8007ab4:	089b      	lsrs	r3, r3, #2
 8007ab6:	3302      	adds	r3, #2
 8007ab8:	69ba      	ldr	r2, [r7, #24]
 8007aba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007abe:	4b3d      	ldr	r3, [pc, #244]	; (8007bb4 <HAL_GPIO_Init+0x354>)
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007ac4:	693b      	ldr	r3, [r7, #16]
 8007ac6:	43db      	mvns	r3, r3
 8007ac8:	69ba      	ldr	r2, [r7, #24]
 8007aca:	4013      	ands	r3, r2
 8007acc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	685b      	ldr	r3, [r3, #4]
 8007ad2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d003      	beq.n	8007ae2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8007ada:	69ba      	ldr	r2, [r7, #24]
 8007adc:	693b      	ldr	r3, [r7, #16]
 8007ade:	4313      	orrs	r3, r2
 8007ae0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007ae2:	4a34      	ldr	r2, [pc, #208]	; (8007bb4 <HAL_GPIO_Init+0x354>)
 8007ae4:	69bb      	ldr	r3, [r7, #24]
 8007ae6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8007ae8:	4b32      	ldr	r3, [pc, #200]	; (8007bb4 <HAL_GPIO_Init+0x354>)
 8007aea:	685b      	ldr	r3, [r3, #4]
 8007aec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007aee:	693b      	ldr	r3, [r7, #16]
 8007af0:	43db      	mvns	r3, r3
 8007af2:	69ba      	ldr	r2, [r7, #24]
 8007af4:	4013      	ands	r3, r2
 8007af6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	685b      	ldr	r3, [r3, #4]
 8007afc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d003      	beq.n	8007b0c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8007b04:	69ba      	ldr	r2, [r7, #24]
 8007b06:	693b      	ldr	r3, [r7, #16]
 8007b08:	4313      	orrs	r3, r2
 8007b0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007b0c:	4a29      	ldr	r2, [pc, #164]	; (8007bb4 <HAL_GPIO_Init+0x354>)
 8007b0e:	69bb      	ldr	r3, [r7, #24]
 8007b10:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007b12:	4b28      	ldr	r3, [pc, #160]	; (8007bb4 <HAL_GPIO_Init+0x354>)
 8007b14:	689b      	ldr	r3, [r3, #8]
 8007b16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007b18:	693b      	ldr	r3, [r7, #16]
 8007b1a:	43db      	mvns	r3, r3
 8007b1c:	69ba      	ldr	r2, [r7, #24]
 8007b1e:	4013      	ands	r3, r2
 8007b20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	685b      	ldr	r3, [r3, #4]
 8007b26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d003      	beq.n	8007b36 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8007b2e:	69ba      	ldr	r2, [r7, #24]
 8007b30:	693b      	ldr	r3, [r7, #16]
 8007b32:	4313      	orrs	r3, r2
 8007b34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007b36:	4a1f      	ldr	r2, [pc, #124]	; (8007bb4 <HAL_GPIO_Init+0x354>)
 8007b38:	69bb      	ldr	r3, [r7, #24]
 8007b3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007b3c:	4b1d      	ldr	r3, [pc, #116]	; (8007bb4 <HAL_GPIO_Init+0x354>)
 8007b3e:	68db      	ldr	r3, [r3, #12]
 8007b40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007b42:	693b      	ldr	r3, [r7, #16]
 8007b44:	43db      	mvns	r3, r3
 8007b46:	69ba      	ldr	r2, [r7, #24]
 8007b48:	4013      	ands	r3, r2
 8007b4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	685b      	ldr	r3, [r3, #4]
 8007b50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d003      	beq.n	8007b60 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8007b58:	69ba      	ldr	r2, [r7, #24]
 8007b5a:	693b      	ldr	r3, [r7, #16]
 8007b5c:	4313      	orrs	r3, r2
 8007b5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007b60:	4a14      	ldr	r2, [pc, #80]	; (8007bb4 <HAL_GPIO_Init+0x354>)
 8007b62:	69bb      	ldr	r3, [r7, #24]
 8007b64:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8007b66:	69fb      	ldr	r3, [r7, #28]
 8007b68:	3301      	adds	r3, #1
 8007b6a:	61fb      	str	r3, [r7, #28]
 8007b6c:	69fb      	ldr	r3, [r7, #28]
 8007b6e:	2b0f      	cmp	r3, #15
 8007b70:	f67f ae86 	bls.w	8007880 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8007b74:	bf00      	nop
 8007b76:	bf00      	nop
 8007b78:	3724      	adds	r7, #36	; 0x24
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b80:	4770      	bx	lr
 8007b82:	bf00      	nop
 8007b84:	40023800 	.word	0x40023800
 8007b88:	40013800 	.word	0x40013800
 8007b8c:	40020000 	.word	0x40020000
 8007b90:	40020400 	.word	0x40020400
 8007b94:	40020800 	.word	0x40020800
 8007b98:	40020c00 	.word	0x40020c00
 8007b9c:	40021000 	.word	0x40021000
 8007ba0:	40021400 	.word	0x40021400
 8007ba4:	40021800 	.word	0x40021800
 8007ba8:	40021c00 	.word	0x40021c00
 8007bac:	40022000 	.word	0x40022000
 8007bb0:	40022400 	.word	0x40022400
 8007bb4:	40013c00 	.word	0x40013c00

08007bb8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8007bb8:	b480      	push	{r7}
 8007bba:	b087      	sub	sp, #28
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
 8007bc0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8007bca:	2300      	movs	r3, #0
 8007bcc:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8007bce:	2300      	movs	r3, #0
 8007bd0:	617b      	str	r3, [r7, #20]
 8007bd2:	e0d9      	b.n	8007d88 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8007bd4:	2201      	movs	r2, #1
 8007bd6:	697b      	ldr	r3, [r7, #20]
 8007bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8007bdc:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8007bde:	683a      	ldr	r2, [r7, #0]
 8007be0:	693b      	ldr	r3, [r7, #16]
 8007be2:	4013      	ands	r3, r2
 8007be4:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8007be6:	68fa      	ldr	r2, [r7, #12]
 8007be8:	693b      	ldr	r3, [r7, #16]
 8007bea:	429a      	cmp	r2, r3
 8007bec:	f040 80c9 	bne.w	8007d82 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8007bf0:	4a6b      	ldr	r2, [pc, #428]	; (8007da0 <HAL_GPIO_DeInit+0x1e8>)
 8007bf2:	697b      	ldr	r3, [r7, #20]
 8007bf4:	089b      	lsrs	r3, r3, #2
 8007bf6:	3302      	adds	r3, #2
 8007bf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007bfc:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8007bfe:	697b      	ldr	r3, [r7, #20]
 8007c00:	f003 0303 	and.w	r3, r3, #3
 8007c04:	009b      	lsls	r3, r3, #2
 8007c06:	220f      	movs	r2, #15
 8007c08:	fa02 f303 	lsl.w	r3, r2, r3
 8007c0c:	68ba      	ldr	r2, [r7, #8]
 8007c0e:	4013      	ands	r3, r2
 8007c10:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	4a63      	ldr	r2, [pc, #396]	; (8007da4 <HAL_GPIO_DeInit+0x1ec>)
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d037      	beq.n	8007c8a <HAL_GPIO_DeInit+0xd2>
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	4a62      	ldr	r2, [pc, #392]	; (8007da8 <HAL_GPIO_DeInit+0x1f0>)
 8007c1e:	4293      	cmp	r3, r2
 8007c20:	d031      	beq.n	8007c86 <HAL_GPIO_DeInit+0xce>
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	4a61      	ldr	r2, [pc, #388]	; (8007dac <HAL_GPIO_DeInit+0x1f4>)
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d02b      	beq.n	8007c82 <HAL_GPIO_DeInit+0xca>
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	4a60      	ldr	r2, [pc, #384]	; (8007db0 <HAL_GPIO_DeInit+0x1f8>)
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	d025      	beq.n	8007c7e <HAL_GPIO_DeInit+0xc6>
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	4a5f      	ldr	r2, [pc, #380]	; (8007db4 <HAL_GPIO_DeInit+0x1fc>)
 8007c36:	4293      	cmp	r3, r2
 8007c38:	d01f      	beq.n	8007c7a <HAL_GPIO_DeInit+0xc2>
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	4a5e      	ldr	r2, [pc, #376]	; (8007db8 <HAL_GPIO_DeInit+0x200>)
 8007c3e:	4293      	cmp	r3, r2
 8007c40:	d019      	beq.n	8007c76 <HAL_GPIO_DeInit+0xbe>
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	4a5d      	ldr	r2, [pc, #372]	; (8007dbc <HAL_GPIO_DeInit+0x204>)
 8007c46:	4293      	cmp	r3, r2
 8007c48:	d013      	beq.n	8007c72 <HAL_GPIO_DeInit+0xba>
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	4a5c      	ldr	r2, [pc, #368]	; (8007dc0 <HAL_GPIO_DeInit+0x208>)
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	d00d      	beq.n	8007c6e <HAL_GPIO_DeInit+0xb6>
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	4a5b      	ldr	r2, [pc, #364]	; (8007dc4 <HAL_GPIO_DeInit+0x20c>)
 8007c56:	4293      	cmp	r3, r2
 8007c58:	d007      	beq.n	8007c6a <HAL_GPIO_DeInit+0xb2>
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	4a5a      	ldr	r2, [pc, #360]	; (8007dc8 <HAL_GPIO_DeInit+0x210>)
 8007c5e:	4293      	cmp	r3, r2
 8007c60:	d101      	bne.n	8007c66 <HAL_GPIO_DeInit+0xae>
 8007c62:	2309      	movs	r3, #9
 8007c64:	e012      	b.n	8007c8c <HAL_GPIO_DeInit+0xd4>
 8007c66:	230a      	movs	r3, #10
 8007c68:	e010      	b.n	8007c8c <HAL_GPIO_DeInit+0xd4>
 8007c6a:	2308      	movs	r3, #8
 8007c6c:	e00e      	b.n	8007c8c <HAL_GPIO_DeInit+0xd4>
 8007c6e:	2307      	movs	r3, #7
 8007c70:	e00c      	b.n	8007c8c <HAL_GPIO_DeInit+0xd4>
 8007c72:	2306      	movs	r3, #6
 8007c74:	e00a      	b.n	8007c8c <HAL_GPIO_DeInit+0xd4>
 8007c76:	2305      	movs	r3, #5
 8007c78:	e008      	b.n	8007c8c <HAL_GPIO_DeInit+0xd4>
 8007c7a:	2304      	movs	r3, #4
 8007c7c:	e006      	b.n	8007c8c <HAL_GPIO_DeInit+0xd4>
 8007c7e:	2303      	movs	r3, #3
 8007c80:	e004      	b.n	8007c8c <HAL_GPIO_DeInit+0xd4>
 8007c82:	2302      	movs	r3, #2
 8007c84:	e002      	b.n	8007c8c <HAL_GPIO_DeInit+0xd4>
 8007c86:	2301      	movs	r3, #1
 8007c88:	e000      	b.n	8007c8c <HAL_GPIO_DeInit+0xd4>
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	697a      	ldr	r2, [r7, #20]
 8007c8e:	f002 0203 	and.w	r2, r2, #3
 8007c92:	0092      	lsls	r2, r2, #2
 8007c94:	4093      	lsls	r3, r2
 8007c96:	68ba      	ldr	r2, [r7, #8]
 8007c98:	429a      	cmp	r2, r3
 8007c9a:	d132      	bne.n	8007d02 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8007c9c:	4b4b      	ldr	r3, [pc, #300]	; (8007dcc <HAL_GPIO_DeInit+0x214>)
 8007c9e:	681a      	ldr	r2, [r3, #0]
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	43db      	mvns	r3, r3
 8007ca4:	4949      	ldr	r1, [pc, #292]	; (8007dcc <HAL_GPIO_DeInit+0x214>)
 8007ca6:	4013      	ands	r3, r2
 8007ca8:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8007caa:	4b48      	ldr	r3, [pc, #288]	; (8007dcc <HAL_GPIO_DeInit+0x214>)
 8007cac:	685a      	ldr	r2, [r3, #4]
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	43db      	mvns	r3, r3
 8007cb2:	4946      	ldr	r1, [pc, #280]	; (8007dcc <HAL_GPIO_DeInit+0x214>)
 8007cb4:	4013      	ands	r3, r2
 8007cb6:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8007cb8:	4b44      	ldr	r3, [pc, #272]	; (8007dcc <HAL_GPIO_DeInit+0x214>)
 8007cba:	689a      	ldr	r2, [r3, #8]
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	43db      	mvns	r3, r3
 8007cc0:	4942      	ldr	r1, [pc, #264]	; (8007dcc <HAL_GPIO_DeInit+0x214>)
 8007cc2:	4013      	ands	r3, r2
 8007cc4:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8007cc6:	4b41      	ldr	r3, [pc, #260]	; (8007dcc <HAL_GPIO_DeInit+0x214>)
 8007cc8:	68da      	ldr	r2, [r3, #12]
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	43db      	mvns	r3, r3
 8007cce:	493f      	ldr	r1, [pc, #252]	; (8007dcc <HAL_GPIO_DeInit+0x214>)
 8007cd0:	4013      	ands	r3, r2
 8007cd2:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8007cd4:	697b      	ldr	r3, [r7, #20]
 8007cd6:	f003 0303 	and.w	r3, r3, #3
 8007cda:	009b      	lsls	r3, r3, #2
 8007cdc:	220f      	movs	r2, #15
 8007cde:	fa02 f303 	lsl.w	r3, r2, r3
 8007ce2:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8007ce4:	4a2e      	ldr	r2, [pc, #184]	; (8007da0 <HAL_GPIO_DeInit+0x1e8>)
 8007ce6:	697b      	ldr	r3, [r7, #20]
 8007ce8:	089b      	lsrs	r3, r3, #2
 8007cea:	3302      	adds	r3, #2
 8007cec:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007cf0:	68bb      	ldr	r3, [r7, #8]
 8007cf2:	43da      	mvns	r2, r3
 8007cf4:	482a      	ldr	r0, [pc, #168]	; (8007da0 <HAL_GPIO_DeInit+0x1e8>)
 8007cf6:	697b      	ldr	r3, [r7, #20]
 8007cf8:	089b      	lsrs	r3, r3, #2
 8007cfa:	400a      	ands	r2, r1
 8007cfc:	3302      	adds	r3, #2
 8007cfe:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681a      	ldr	r2, [r3, #0]
 8007d06:	697b      	ldr	r3, [r7, #20]
 8007d08:	005b      	lsls	r3, r3, #1
 8007d0a:	2103      	movs	r1, #3
 8007d0c:	fa01 f303 	lsl.w	r3, r1, r3
 8007d10:	43db      	mvns	r3, r3
 8007d12:	401a      	ands	r2, r3
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8007d18:	697b      	ldr	r3, [r7, #20]
 8007d1a:	08da      	lsrs	r2, r3, #3
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	3208      	adds	r2, #8
 8007d20:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007d24:	697b      	ldr	r3, [r7, #20]
 8007d26:	f003 0307 	and.w	r3, r3, #7
 8007d2a:	009b      	lsls	r3, r3, #2
 8007d2c:	220f      	movs	r2, #15
 8007d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8007d32:	43db      	mvns	r3, r3
 8007d34:	697a      	ldr	r2, [r7, #20]
 8007d36:	08d2      	lsrs	r2, r2, #3
 8007d38:	4019      	ands	r1, r3
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	3208      	adds	r2, #8
 8007d3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	68da      	ldr	r2, [r3, #12]
 8007d46:	697b      	ldr	r3, [r7, #20]
 8007d48:	005b      	lsls	r3, r3, #1
 8007d4a:	2103      	movs	r1, #3
 8007d4c:	fa01 f303 	lsl.w	r3, r1, r3
 8007d50:	43db      	mvns	r3, r3
 8007d52:	401a      	ands	r2, r3
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	685a      	ldr	r2, [r3, #4]
 8007d5c:	2101      	movs	r1, #1
 8007d5e:	697b      	ldr	r3, [r7, #20]
 8007d60:	fa01 f303 	lsl.w	r3, r1, r3
 8007d64:	43db      	mvns	r3, r3
 8007d66:	401a      	ands	r2, r3
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	689a      	ldr	r2, [r3, #8]
 8007d70:	697b      	ldr	r3, [r7, #20]
 8007d72:	005b      	lsls	r3, r3, #1
 8007d74:	2103      	movs	r1, #3
 8007d76:	fa01 f303 	lsl.w	r3, r1, r3
 8007d7a:	43db      	mvns	r3, r3
 8007d7c:	401a      	ands	r2, r3
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 8007d82:	697b      	ldr	r3, [r7, #20]
 8007d84:	3301      	adds	r3, #1
 8007d86:	617b      	str	r3, [r7, #20]
 8007d88:	697b      	ldr	r3, [r7, #20]
 8007d8a:	2b0f      	cmp	r3, #15
 8007d8c:	f67f af22 	bls.w	8007bd4 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8007d90:	bf00      	nop
 8007d92:	bf00      	nop
 8007d94:	371c      	adds	r7, #28
 8007d96:	46bd      	mov	sp, r7
 8007d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9c:	4770      	bx	lr
 8007d9e:	bf00      	nop
 8007da0:	40013800 	.word	0x40013800
 8007da4:	40020000 	.word	0x40020000
 8007da8:	40020400 	.word	0x40020400
 8007dac:	40020800 	.word	0x40020800
 8007db0:	40020c00 	.word	0x40020c00
 8007db4:	40021000 	.word	0x40021000
 8007db8:	40021400 	.word	0x40021400
 8007dbc:	40021800 	.word	0x40021800
 8007dc0:	40021c00 	.word	0x40021c00
 8007dc4:	40022000 	.word	0x40022000
 8007dc8:	40022400 	.word	0x40022400
 8007dcc:	40013c00 	.word	0x40013c00

08007dd0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007dd0:	b480      	push	{r7}
 8007dd2:	b085      	sub	sp, #20
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
 8007dd8:	460b      	mov	r3, r1
 8007dda:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	691a      	ldr	r2, [r3, #16]
 8007de0:	887b      	ldrh	r3, [r7, #2]
 8007de2:	4013      	ands	r3, r2
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d002      	beq.n	8007dee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007de8:	2301      	movs	r3, #1
 8007dea:	73fb      	strb	r3, [r7, #15]
 8007dec:	e001      	b.n	8007df2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007dee:	2300      	movs	r3, #0
 8007df0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007df2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007df4:	4618      	mov	r0, r3
 8007df6:	3714      	adds	r7, #20
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfe:	4770      	bx	lr

08007e00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007e00:	b480      	push	{r7}
 8007e02:	b083      	sub	sp, #12
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
 8007e08:	460b      	mov	r3, r1
 8007e0a:	807b      	strh	r3, [r7, #2]
 8007e0c:	4613      	mov	r3, r2
 8007e0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007e10:	787b      	ldrb	r3, [r7, #1]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d003      	beq.n	8007e1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007e16:	887a      	ldrh	r2, [r7, #2]
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8007e1c:	e003      	b.n	8007e26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8007e1e:	887b      	ldrh	r3, [r7, #2]
 8007e20:	041a      	lsls	r2, r3, #16
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	619a      	str	r2, [r3, #24]
}
 8007e26:	bf00      	nop
 8007e28:	370c      	adds	r7, #12
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e30:	4770      	bx	lr

08007e32 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007e32:	b480      	push	{r7}
 8007e34:	b085      	sub	sp, #20
 8007e36:	af00      	add	r7, sp, #0
 8007e38:	6078      	str	r0, [r7, #4]
 8007e3a:	460b      	mov	r3, r1
 8007e3c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	695b      	ldr	r3, [r3, #20]
 8007e42:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007e44:	887a      	ldrh	r2, [r7, #2]
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	4013      	ands	r3, r2
 8007e4a:	041a      	lsls	r2, r3, #16
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	43d9      	mvns	r1, r3
 8007e50:	887b      	ldrh	r3, [r7, #2]
 8007e52:	400b      	ands	r3, r1
 8007e54:	431a      	orrs	r2, r3
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	619a      	str	r2, [r3, #24]
}
 8007e5a:	bf00      	nop
 8007e5c:	3714      	adds	r7, #20
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e64:	4770      	bx	lr
	...

08007e68 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b082      	sub	sp, #8
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	4603      	mov	r3, r0
 8007e70:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8007e72:	4b08      	ldr	r3, [pc, #32]	; (8007e94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007e74:	695a      	ldr	r2, [r3, #20]
 8007e76:	88fb      	ldrh	r3, [r7, #6]
 8007e78:	4013      	ands	r3, r2
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d006      	beq.n	8007e8c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007e7e:	4a05      	ldr	r2, [pc, #20]	; (8007e94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007e80:	88fb      	ldrh	r3, [r7, #6]
 8007e82:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007e84:	88fb      	ldrh	r3, [r7, #6]
 8007e86:	4618      	mov	r0, r3
 8007e88:	f000 f806 	bl	8007e98 <HAL_GPIO_EXTI_Callback>
  }
}
 8007e8c:	bf00      	nop
 8007e8e:	3708      	adds	r7, #8
 8007e90:	46bd      	mov	sp, r7
 8007e92:	bd80      	pop	{r7, pc}
 8007e94:	40013c00 	.word	0x40013c00

08007e98 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8007e98:	b480      	push	{r7}
 8007e9a:	b083      	sub	sp, #12
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8007ea2:	bf00      	nop
 8007ea4:	370c      	adds	r7, #12
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eac:	4770      	bx	lr

08007eae <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8007eae:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007eb0:	b08f      	sub	sp, #60	; 0x3c
 8007eb2:	af0a      	add	r7, sp, #40	; 0x28
 8007eb4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d101      	bne.n	8007ec0 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8007ebc:	2301      	movs	r3, #1
 8007ebe:	e054      	b.n	8007f6a <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8007ecc:	b2db      	uxtb	r3, r3
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d106      	bne.n	8007ee0 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8007eda:	6878      	ldr	r0, [r7, #4]
 8007edc:	f00f fe70 	bl	8017bc0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2203      	movs	r2, #3
 8007ee4:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007eec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d102      	bne.n	8007efa <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	4618      	mov	r0, r3
 8007f00:	f009 fd7d 	bl	80119fe <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	603b      	str	r3, [r7, #0]
 8007f0a:	687e      	ldr	r6, [r7, #4]
 8007f0c:	466d      	mov	r5, sp
 8007f0e:	f106 0410 	add.w	r4, r6, #16
 8007f12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007f14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007f16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007f18:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007f1a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007f1e:	e885 0003 	stmia.w	r5, {r0, r1}
 8007f22:	1d33      	adds	r3, r6, #4
 8007f24:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007f26:	6838      	ldr	r0, [r7, #0]
 8007f28:	f009 fd00 	bl	801192c <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	2101      	movs	r1, #1
 8007f32:	4618      	mov	r0, r3
 8007f34:	f009 fd74 	bl	8011a20 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	603b      	str	r3, [r7, #0]
 8007f3e:	687e      	ldr	r6, [r7, #4]
 8007f40:	466d      	mov	r5, sp
 8007f42:	f106 0410 	add.w	r4, r6, #16
 8007f46:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007f48:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007f4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007f4c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007f4e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007f52:	e885 0003 	stmia.w	r5, {r0, r1}
 8007f56:	1d33      	adds	r3, r6, #4
 8007f58:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007f5a:	6838      	ldr	r0, [r7, #0]
 8007f5c:	f009 fe86 	bl	8011c6c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2201      	movs	r2, #1
 8007f64:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8007f68:	2300      	movs	r3, #0
}
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	3714      	adds	r7, #20
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007f72 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8007f72:	b590      	push	{r4, r7, lr}
 8007f74:	b089      	sub	sp, #36	; 0x24
 8007f76:	af04      	add	r7, sp, #16
 8007f78:	6078      	str	r0, [r7, #4]
 8007f7a:	4608      	mov	r0, r1
 8007f7c:	4611      	mov	r1, r2
 8007f7e:	461a      	mov	r2, r3
 8007f80:	4603      	mov	r3, r0
 8007f82:	70fb      	strb	r3, [r7, #3]
 8007f84:	460b      	mov	r3, r1
 8007f86:	70bb      	strb	r3, [r7, #2]
 8007f88:	4613      	mov	r3, r2
 8007f8a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8007f92:	2b01      	cmp	r3, #1
 8007f94:	d101      	bne.n	8007f9a <HAL_HCD_HC_Init+0x28>
 8007f96:	2302      	movs	r3, #2
 8007f98:	e076      	b.n	8008088 <HAL_HCD_HC_Init+0x116>
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2201      	movs	r2, #1
 8007f9e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8007fa2:	78fb      	ldrb	r3, [r7, #3]
 8007fa4:	687a      	ldr	r2, [r7, #4]
 8007fa6:	212c      	movs	r1, #44	; 0x2c
 8007fa8:	fb01 f303 	mul.w	r3, r1, r3
 8007fac:	4413      	add	r3, r2
 8007fae:	333d      	adds	r3, #61	; 0x3d
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8007fb4:	78fb      	ldrb	r3, [r7, #3]
 8007fb6:	687a      	ldr	r2, [r7, #4]
 8007fb8:	212c      	movs	r1, #44	; 0x2c
 8007fba:	fb01 f303 	mul.w	r3, r1, r3
 8007fbe:	4413      	add	r3, r2
 8007fc0:	3338      	adds	r3, #56	; 0x38
 8007fc2:	787a      	ldrb	r2, [r7, #1]
 8007fc4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8007fc6:	78fb      	ldrb	r3, [r7, #3]
 8007fc8:	687a      	ldr	r2, [r7, #4]
 8007fca:	212c      	movs	r1, #44	; 0x2c
 8007fcc:	fb01 f303 	mul.w	r3, r1, r3
 8007fd0:	4413      	add	r3, r2
 8007fd2:	3340      	adds	r3, #64	; 0x40
 8007fd4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8007fd6:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8007fd8:	78fb      	ldrb	r3, [r7, #3]
 8007fda:	687a      	ldr	r2, [r7, #4]
 8007fdc:	212c      	movs	r1, #44	; 0x2c
 8007fde:	fb01 f303 	mul.w	r3, r1, r3
 8007fe2:	4413      	add	r3, r2
 8007fe4:	3339      	adds	r3, #57	; 0x39
 8007fe6:	78fa      	ldrb	r2, [r7, #3]
 8007fe8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8007fea:	78fb      	ldrb	r3, [r7, #3]
 8007fec:	687a      	ldr	r2, [r7, #4]
 8007fee:	212c      	movs	r1, #44	; 0x2c
 8007ff0:	fb01 f303 	mul.w	r3, r1, r3
 8007ff4:	4413      	add	r3, r2
 8007ff6:	333f      	adds	r3, #63	; 0x3f
 8007ff8:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8007ffc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8007ffe:	78fb      	ldrb	r3, [r7, #3]
 8008000:	78ba      	ldrb	r2, [r7, #2]
 8008002:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008006:	b2d0      	uxtb	r0, r2
 8008008:	687a      	ldr	r2, [r7, #4]
 800800a:	212c      	movs	r1, #44	; 0x2c
 800800c:	fb01 f303 	mul.w	r3, r1, r3
 8008010:	4413      	add	r3, r2
 8008012:	333a      	adds	r3, #58	; 0x3a
 8008014:	4602      	mov	r2, r0
 8008016:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8008018:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800801c:	2b00      	cmp	r3, #0
 800801e:	da09      	bge.n	8008034 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8008020:	78fb      	ldrb	r3, [r7, #3]
 8008022:	687a      	ldr	r2, [r7, #4]
 8008024:	212c      	movs	r1, #44	; 0x2c
 8008026:	fb01 f303 	mul.w	r3, r1, r3
 800802a:	4413      	add	r3, r2
 800802c:	333b      	adds	r3, #59	; 0x3b
 800802e:	2201      	movs	r2, #1
 8008030:	701a      	strb	r2, [r3, #0]
 8008032:	e008      	b.n	8008046 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8008034:	78fb      	ldrb	r3, [r7, #3]
 8008036:	687a      	ldr	r2, [r7, #4]
 8008038:	212c      	movs	r1, #44	; 0x2c
 800803a:	fb01 f303 	mul.w	r3, r1, r3
 800803e:	4413      	add	r3, r2
 8008040:	333b      	adds	r3, #59	; 0x3b
 8008042:	2200      	movs	r2, #0
 8008044:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8008046:	78fb      	ldrb	r3, [r7, #3]
 8008048:	687a      	ldr	r2, [r7, #4]
 800804a:	212c      	movs	r1, #44	; 0x2c
 800804c:	fb01 f303 	mul.w	r3, r1, r3
 8008050:	4413      	add	r3, r2
 8008052:	333c      	adds	r3, #60	; 0x3c
 8008054:	f897 2020 	ldrb.w	r2, [r7, #32]
 8008058:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6818      	ldr	r0, [r3, #0]
 800805e:	787c      	ldrb	r4, [r7, #1]
 8008060:	78ba      	ldrb	r2, [r7, #2]
 8008062:	78f9      	ldrb	r1, [r7, #3]
 8008064:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008066:	9302      	str	r3, [sp, #8]
 8008068:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800806c:	9301      	str	r3, [sp, #4]
 800806e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008072:	9300      	str	r3, [sp, #0]
 8008074:	4623      	mov	r3, r4
 8008076:	f009 ff6f 	bl	8011f58 <USB_HC_Init>
 800807a:	4603      	mov	r3, r0
 800807c:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2200      	movs	r2, #0
 8008082:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8008086:	7bfb      	ldrb	r3, [r7, #15]
}
 8008088:	4618      	mov	r0, r3
 800808a:	3714      	adds	r7, #20
 800808c:	46bd      	mov	sp, r7
 800808e:	bd90      	pop	{r4, r7, pc}

08008090 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b084      	sub	sp, #16
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
 8008098:	460b      	mov	r3, r1
 800809a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800809c:	2300      	movs	r3, #0
 800809e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80080a6:	2b01      	cmp	r3, #1
 80080a8:	d101      	bne.n	80080ae <HAL_HCD_HC_Halt+0x1e>
 80080aa:	2302      	movs	r3, #2
 80080ac:	e00f      	b.n	80080ce <HAL_HCD_HC_Halt+0x3e>
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2201      	movs	r2, #1
 80080b2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	78fa      	ldrb	r2, [r7, #3]
 80080bc:	4611      	mov	r1, r2
 80080be:	4618      	mov	r0, r3
 80080c0:	f00a f9ab 	bl	801241a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2200      	movs	r2, #0
 80080c8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80080cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80080ce:	4618      	mov	r0, r3
 80080d0:	3710      	adds	r7, #16
 80080d2:	46bd      	mov	sp, r7
 80080d4:	bd80      	pop	{r7, pc}
	...

080080d8 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b082      	sub	sp, #8
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
 80080e0:	4608      	mov	r0, r1
 80080e2:	4611      	mov	r1, r2
 80080e4:	461a      	mov	r2, r3
 80080e6:	4603      	mov	r3, r0
 80080e8:	70fb      	strb	r3, [r7, #3]
 80080ea:	460b      	mov	r3, r1
 80080ec:	70bb      	strb	r3, [r7, #2]
 80080ee:	4613      	mov	r3, r2
 80080f0:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80080f2:	78fb      	ldrb	r3, [r7, #3]
 80080f4:	687a      	ldr	r2, [r7, #4]
 80080f6:	212c      	movs	r1, #44	; 0x2c
 80080f8:	fb01 f303 	mul.w	r3, r1, r3
 80080fc:	4413      	add	r3, r2
 80080fe:	333b      	adds	r3, #59	; 0x3b
 8008100:	78ba      	ldrb	r2, [r7, #2]
 8008102:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8008104:	78fb      	ldrb	r3, [r7, #3]
 8008106:	687a      	ldr	r2, [r7, #4]
 8008108:	212c      	movs	r1, #44	; 0x2c
 800810a:	fb01 f303 	mul.w	r3, r1, r3
 800810e:	4413      	add	r3, r2
 8008110:	333f      	adds	r3, #63	; 0x3f
 8008112:	787a      	ldrb	r2, [r7, #1]
 8008114:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8008116:	7c3b      	ldrb	r3, [r7, #16]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d112      	bne.n	8008142 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800811c:	78fb      	ldrb	r3, [r7, #3]
 800811e:	687a      	ldr	r2, [r7, #4]
 8008120:	212c      	movs	r1, #44	; 0x2c
 8008122:	fb01 f303 	mul.w	r3, r1, r3
 8008126:	4413      	add	r3, r2
 8008128:	3342      	adds	r3, #66	; 0x42
 800812a:	2203      	movs	r2, #3
 800812c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800812e:	78fb      	ldrb	r3, [r7, #3]
 8008130:	687a      	ldr	r2, [r7, #4]
 8008132:	212c      	movs	r1, #44	; 0x2c
 8008134:	fb01 f303 	mul.w	r3, r1, r3
 8008138:	4413      	add	r3, r2
 800813a:	333d      	adds	r3, #61	; 0x3d
 800813c:	7f3a      	ldrb	r2, [r7, #28]
 800813e:	701a      	strb	r2, [r3, #0]
 8008140:	e008      	b.n	8008154 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8008142:	78fb      	ldrb	r3, [r7, #3]
 8008144:	687a      	ldr	r2, [r7, #4]
 8008146:	212c      	movs	r1, #44	; 0x2c
 8008148:	fb01 f303 	mul.w	r3, r1, r3
 800814c:	4413      	add	r3, r2
 800814e:	3342      	adds	r3, #66	; 0x42
 8008150:	2202      	movs	r2, #2
 8008152:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8008154:	787b      	ldrb	r3, [r7, #1]
 8008156:	2b03      	cmp	r3, #3
 8008158:	f200 80c6 	bhi.w	80082e8 <HAL_HCD_HC_SubmitRequest+0x210>
 800815c:	a201      	add	r2, pc, #4	; (adr r2, 8008164 <HAL_HCD_HC_SubmitRequest+0x8c>)
 800815e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008162:	bf00      	nop
 8008164:	08008175 	.word	0x08008175
 8008168:	080082d5 	.word	0x080082d5
 800816c:	080081d9 	.word	0x080081d9
 8008170:	08008257 	.word	0x08008257
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8008174:	7c3b      	ldrb	r3, [r7, #16]
 8008176:	2b01      	cmp	r3, #1
 8008178:	f040 80b8 	bne.w	80082ec <HAL_HCD_HC_SubmitRequest+0x214>
 800817c:	78bb      	ldrb	r3, [r7, #2]
 800817e:	2b00      	cmp	r3, #0
 8008180:	f040 80b4 	bne.w	80082ec <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8008184:	8b3b      	ldrh	r3, [r7, #24]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d108      	bne.n	800819c <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800818a:	78fb      	ldrb	r3, [r7, #3]
 800818c:	687a      	ldr	r2, [r7, #4]
 800818e:	212c      	movs	r1, #44	; 0x2c
 8008190:	fb01 f303 	mul.w	r3, r1, r3
 8008194:	4413      	add	r3, r2
 8008196:	3355      	adds	r3, #85	; 0x55
 8008198:	2201      	movs	r2, #1
 800819a:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800819c:	78fb      	ldrb	r3, [r7, #3]
 800819e:	687a      	ldr	r2, [r7, #4]
 80081a0:	212c      	movs	r1, #44	; 0x2c
 80081a2:	fb01 f303 	mul.w	r3, r1, r3
 80081a6:	4413      	add	r3, r2
 80081a8:	3355      	adds	r3, #85	; 0x55
 80081aa:	781b      	ldrb	r3, [r3, #0]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d109      	bne.n	80081c4 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80081b0:	78fb      	ldrb	r3, [r7, #3]
 80081b2:	687a      	ldr	r2, [r7, #4]
 80081b4:	212c      	movs	r1, #44	; 0x2c
 80081b6:	fb01 f303 	mul.w	r3, r1, r3
 80081ba:	4413      	add	r3, r2
 80081bc:	3342      	adds	r3, #66	; 0x42
 80081be:	2200      	movs	r2, #0
 80081c0:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80081c2:	e093      	b.n	80082ec <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80081c4:	78fb      	ldrb	r3, [r7, #3]
 80081c6:	687a      	ldr	r2, [r7, #4]
 80081c8:	212c      	movs	r1, #44	; 0x2c
 80081ca:	fb01 f303 	mul.w	r3, r1, r3
 80081ce:	4413      	add	r3, r2
 80081d0:	3342      	adds	r3, #66	; 0x42
 80081d2:	2202      	movs	r2, #2
 80081d4:	701a      	strb	r2, [r3, #0]
      break;
 80081d6:	e089      	b.n	80082ec <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80081d8:	78bb      	ldrb	r3, [r7, #2]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d11d      	bne.n	800821a <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80081de:	78fb      	ldrb	r3, [r7, #3]
 80081e0:	687a      	ldr	r2, [r7, #4]
 80081e2:	212c      	movs	r1, #44	; 0x2c
 80081e4:	fb01 f303 	mul.w	r3, r1, r3
 80081e8:	4413      	add	r3, r2
 80081ea:	3355      	adds	r3, #85	; 0x55
 80081ec:	781b      	ldrb	r3, [r3, #0]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d109      	bne.n	8008206 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80081f2:	78fb      	ldrb	r3, [r7, #3]
 80081f4:	687a      	ldr	r2, [r7, #4]
 80081f6:	212c      	movs	r1, #44	; 0x2c
 80081f8:	fb01 f303 	mul.w	r3, r1, r3
 80081fc:	4413      	add	r3, r2
 80081fe:	3342      	adds	r3, #66	; 0x42
 8008200:	2200      	movs	r2, #0
 8008202:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8008204:	e073      	b.n	80082ee <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8008206:	78fb      	ldrb	r3, [r7, #3]
 8008208:	687a      	ldr	r2, [r7, #4]
 800820a:	212c      	movs	r1, #44	; 0x2c
 800820c:	fb01 f303 	mul.w	r3, r1, r3
 8008210:	4413      	add	r3, r2
 8008212:	3342      	adds	r3, #66	; 0x42
 8008214:	2202      	movs	r2, #2
 8008216:	701a      	strb	r2, [r3, #0]
      break;
 8008218:	e069      	b.n	80082ee <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800821a:	78fb      	ldrb	r3, [r7, #3]
 800821c:	687a      	ldr	r2, [r7, #4]
 800821e:	212c      	movs	r1, #44	; 0x2c
 8008220:	fb01 f303 	mul.w	r3, r1, r3
 8008224:	4413      	add	r3, r2
 8008226:	3354      	adds	r3, #84	; 0x54
 8008228:	781b      	ldrb	r3, [r3, #0]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d109      	bne.n	8008242 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800822e:	78fb      	ldrb	r3, [r7, #3]
 8008230:	687a      	ldr	r2, [r7, #4]
 8008232:	212c      	movs	r1, #44	; 0x2c
 8008234:	fb01 f303 	mul.w	r3, r1, r3
 8008238:	4413      	add	r3, r2
 800823a:	3342      	adds	r3, #66	; 0x42
 800823c:	2200      	movs	r2, #0
 800823e:	701a      	strb	r2, [r3, #0]
      break;
 8008240:	e055      	b.n	80082ee <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8008242:	78fb      	ldrb	r3, [r7, #3]
 8008244:	687a      	ldr	r2, [r7, #4]
 8008246:	212c      	movs	r1, #44	; 0x2c
 8008248:	fb01 f303 	mul.w	r3, r1, r3
 800824c:	4413      	add	r3, r2
 800824e:	3342      	adds	r3, #66	; 0x42
 8008250:	2202      	movs	r2, #2
 8008252:	701a      	strb	r2, [r3, #0]
      break;
 8008254:	e04b      	b.n	80082ee <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8008256:	78bb      	ldrb	r3, [r7, #2]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d11d      	bne.n	8008298 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800825c:	78fb      	ldrb	r3, [r7, #3]
 800825e:	687a      	ldr	r2, [r7, #4]
 8008260:	212c      	movs	r1, #44	; 0x2c
 8008262:	fb01 f303 	mul.w	r3, r1, r3
 8008266:	4413      	add	r3, r2
 8008268:	3355      	adds	r3, #85	; 0x55
 800826a:	781b      	ldrb	r3, [r3, #0]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d109      	bne.n	8008284 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8008270:	78fb      	ldrb	r3, [r7, #3]
 8008272:	687a      	ldr	r2, [r7, #4]
 8008274:	212c      	movs	r1, #44	; 0x2c
 8008276:	fb01 f303 	mul.w	r3, r1, r3
 800827a:	4413      	add	r3, r2
 800827c:	3342      	adds	r3, #66	; 0x42
 800827e:	2200      	movs	r2, #0
 8008280:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8008282:	e034      	b.n	80082ee <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8008284:	78fb      	ldrb	r3, [r7, #3]
 8008286:	687a      	ldr	r2, [r7, #4]
 8008288:	212c      	movs	r1, #44	; 0x2c
 800828a:	fb01 f303 	mul.w	r3, r1, r3
 800828e:	4413      	add	r3, r2
 8008290:	3342      	adds	r3, #66	; 0x42
 8008292:	2202      	movs	r2, #2
 8008294:	701a      	strb	r2, [r3, #0]
      break;
 8008296:	e02a      	b.n	80082ee <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8008298:	78fb      	ldrb	r3, [r7, #3]
 800829a:	687a      	ldr	r2, [r7, #4]
 800829c:	212c      	movs	r1, #44	; 0x2c
 800829e:	fb01 f303 	mul.w	r3, r1, r3
 80082a2:	4413      	add	r3, r2
 80082a4:	3354      	adds	r3, #84	; 0x54
 80082a6:	781b      	ldrb	r3, [r3, #0]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d109      	bne.n	80082c0 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80082ac:	78fb      	ldrb	r3, [r7, #3]
 80082ae:	687a      	ldr	r2, [r7, #4]
 80082b0:	212c      	movs	r1, #44	; 0x2c
 80082b2:	fb01 f303 	mul.w	r3, r1, r3
 80082b6:	4413      	add	r3, r2
 80082b8:	3342      	adds	r3, #66	; 0x42
 80082ba:	2200      	movs	r2, #0
 80082bc:	701a      	strb	r2, [r3, #0]
      break;
 80082be:	e016      	b.n	80082ee <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80082c0:	78fb      	ldrb	r3, [r7, #3]
 80082c2:	687a      	ldr	r2, [r7, #4]
 80082c4:	212c      	movs	r1, #44	; 0x2c
 80082c6:	fb01 f303 	mul.w	r3, r1, r3
 80082ca:	4413      	add	r3, r2
 80082cc:	3342      	adds	r3, #66	; 0x42
 80082ce:	2202      	movs	r2, #2
 80082d0:	701a      	strb	r2, [r3, #0]
      break;
 80082d2:	e00c      	b.n	80082ee <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80082d4:	78fb      	ldrb	r3, [r7, #3]
 80082d6:	687a      	ldr	r2, [r7, #4]
 80082d8:	212c      	movs	r1, #44	; 0x2c
 80082da:	fb01 f303 	mul.w	r3, r1, r3
 80082de:	4413      	add	r3, r2
 80082e0:	3342      	adds	r3, #66	; 0x42
 80082e2:	2200      	movs	r2, #0
 80082e4:	701a      	strb	r2, [r3, #0]
      break;
 80082e6:	e002      	b.n	80082ee <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80082e8:	bf00      	nop
 80082ea:	e000      	b.n	80082ee <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80082ec:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80082ee:	78fb      	ldrb	r3, [r7, #3]
 80082f0:	687a      	ldr	r2, [r7, #4]
 80082f2:	212c      	movs	r1, #44	; 0x2c
 80082f4:	fb01 f303 	mul.w	r3, r1, r3
 80082f8:	4413      	add	r3, r2
 80082fa:	3344      	adds	r3, #68	; 0x44
 80082fc:	697a      	ldr	r2, [r7, #20]
 80082fe:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8008300:	78fb      	ldrb	r3, [r7, #3]
 8008302:	8b3a      	ldrh	r2, [r7, #24]
 8008304:	6879      	ldr	r1, [r7, #4]
 8008306:	202c      	movs	r0, #44	; 0x2c
 8008308:	fb00 f303 	mul.w	r3, r0, r3
 800830c:	440b      	add	r3, r1
 800830e:	334c      	adds	r3, #76	; 0x4c
 8008310:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8008312:	78fb      	ldrb	r3, [r7, #3]
 8008314:	687a      	ldr	r2, [r7, #4]
 8008316:	212c      	movs	r1, #44	; 0x2c
 8008318:	fb01 f303 	mul.w	r3, r1, r3
 800831c:	4413      	add	r3, r2
 800831e:	3360      	adds	r3, #96	; 0x60
 8008320:	2200      	movs	r2, #0
 8008322:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8008324:	78fb      	ldrb	r3, [r7, #3]
 8008326:	687a      	ldr	r2, [r7, #4]
 8008328:	212c      	movs	r1, #44	; 0x2c
 800832a:	fb01 f303 	mul.w	r3, r1, r3
 800832e:	4413      	add	r3, r2
 8008330:	3350      	adds	r3, #80	; 0x50
 8008332:	2200      	movs	r2, #0
 8008334:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8008336:	78fb      	ldrb	r3, [r7, #3]
 8008338:	687a      	ldr	r2, [r7, #4]
 800833a:	212c      	movs	r1, #44	; 0x2c
 800833c:	fb01 f303 	mul.w	r3, r1, r3
 8008340:	4413      	add	r3, r2
 8008342:	3339      	adds	r3, #57	; 0x39
 8008344:	78fa      	ldrb	r2, [r7, #3]
 8008346:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8008348:	78fb      	ldrb	r3, [r7, #3]
 800834a:	687a      	ldr	r2, [r7, #4]
 800834c:	212c      	movs	r1, #44	; 0x2c
 800834e:	fb01 f303 	mul.w	r3, r1, r3
 8008352:	4413      	add	r3, r2
 8008354:	3361      	adds	r3, #97	; 0x61
 8008356:	2200      	movs	r2, #0
 8008358:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6818      	ldr	r0, [r3, #0]
 800835e:	78fb      	ldrb	r3, [r7, #3]
 8008360:	222c      	movs	r2, #44	; 0x2c
 8008362:	fb02 f303 	mul.w	r3, r2, r3
 8008366:	3338      	adds	r3, #56	; 0x38
 8008368:	687a      	ldr	r2, [r7, #4]
 800836a:	18d1      	adds	r1, r2, r3
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	691b      	ldr	r3, [r3, #16]
 8008370:	b2db      	uxtb	r3, r3
 8008372:	461a      	mov	r2, r3
 8008374:	f009 fefe 	bl	8012174 <USB_HC_StartXfer>
 8008378:	4603      	mov	r3, r0
}
 800837a:	4618      	mov	r0, r3
 800837c:	3708      	adds	r7, #8
 800837e:	46bd      	mov	sp, r7
 8008380:	bd80      	pop	{r7, pc}
 8008382:	bf00      	nop

08008384 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8008384:	b580      	push	{r7, lr}
 8008386:	b086      	sub	sp, #24
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008392:	693b      	ldr	r3, [r7, #16]
 8008394:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	4618      	mov	r0, r3
 800839c:	f009 fc23 	bl	8011be6 <USB_GetMode>
 80083a0:	4603      	mov	r3, r0
 80083a2:	2b01      	cmp	r3, #1
 80083a4:	f040 80ef 	bne.w	8008586 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	4618      	mov	r0, r3
 80083ae:	f009 fc07 	bl	8011bc0 <USB_ReadInterrupts>
 80083b2:	4603      	mov	r3, r0
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	f000 80e5 	beq.w	8008584 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	4618      	mov	r0, r3
 80083c0:	f009 fbfe 	bl	8011bc0 <USB_ReadInterrupts>
 80083c4:	4603      	mov	r3, r0
 80083c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80083ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80083ce:	d104      	bne.n	80083da <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80083d8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	4618      	mov	r0, r3
 80083e0:	f009 fbee 	bl	8011bc0 <USB_ReadInterrupts>
 80083e4:	4603      	mov	r3, r0
 80083e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80083ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80083ee:	d104      	bne.n	80083fa <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80083f8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	4618      	mov	r0, r3
 8008400:	f009 fbde 	bl	8011bc0 <USB_ReadInterrupts>
 8008404:	4603      	mov	r3, r0
 8008406:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800840a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800840e:	d104      	bne.n	800841a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8008418:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	4618      	mov	r0, r3
 8008420:	f009 fbce 	bl	8011bc0 <USB_ReadInterrupts>
 8008424:	4603      	mov	r3, r0
 8008426:	f003 0302 	and.w	r3, r3, #2
 800842a:	2b02      	cmp	r3, #2
 800842c:	d103      	bne.n	8008436 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	2202      	movs	r2, #2
 8008434:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	4618      	mov	r0, r3
 800843c:	f009 fbc0 	bl	8011bc0 <USB_ReadInterrupts>
 8008440:	4603      	mov	r3, r0
 8008442:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008446:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800844a:	d115      	bne.n	8008478 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8008454:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f003 0301 	and.w	r3, r3, #1
 8008462:	2b00      	cmp	r3, #0
 8008464:	d108      	bne.n	8008478 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8008466:	6878      	ldr	r0, [r7, #4]
 8008468:	f00f fc1c 	bl	8017ca4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	2101      	movs	r1, #1
 8008472:	4618      	mov	r0, r3
 8008474:	f009 fcaa 	bl	8011dcc <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	4618      	mov	r0, r3
 800847e:	f009 fb9f 	bl	8011bc0 <USB_ReadInterrupts>
 8008482:	4603      	mov	r3, r0
 8008484:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008488:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800848c:	d102      	bne.n	8008494 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 800848e:	6878      	ldr	r0, [r7, #4]
 8008490:	f001 f9ff 	bl	8009892 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	4618      	mov	r0, r3
 800849a:	f009 fb91 	bl	8011bc0 <USB_ReadInterrupts>
 800849e:	4603      	mov	r3, r0
 80084a0:	f003 0308 	and.w	r3, r3, #8
 80084a4:	2b08      	cmp	r3, #8
 80084a6:	d106      	bne.n	80084b6 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80084a8:	6878      	ldr	r0, [r7, #4]
 80084aa:	f00f fbdf 	bl	8017c6c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	2208      	movs	r2, #8
 80084b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	4618      	mov	r0, r3
 80084bc:	f009 fb80 	bl	8011bc0 <USB_ReadInterrupts>
 80084c0:	4603      	mov	r3, r0
 80084c2:	f003 0310 	and.w	r3, r3, #16
 80084c6:	2b10      	cmp	r3, #16
 80084c8:	d101      	bne.n	80084ce <HAL_HCD_IRQHandler+0x14a>
 80084ca:	2301      	movs	r3, #1
 80084cc:	e000      	b.n	80084d0 <HAL_HCD_IRQHandler+0x14c>
 80084ce:	2300      	movs	r3, #0
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d012      	beq.n	80084fa <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	699a      	ldr	r2, [r3, #24]
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	f022 0210 	bic.w	r2, r2, #16
 80084e2:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80084e4:	6878      	ldr	r0, [r7, #4]
 80084e6:	f001 f902 	bl	80096ee <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	699a      	ldr	r2, [r3, #24]
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	f042 0210 	orr.w	r2, r2, #16
 80084f8:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	4618      	mov	r0, r3
 8008500:	f009 fb5e 	bl	8011bc0 <USB_ReadInterrupts>
 8008504:	4603      	mov	r3, r0
 8008506:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800850a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800850e:	d13a      	bne.n	8008586 <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	4618      	mov	r0, r3
 8008516:	f009 ff6f 	bl	80123f8 <USB_HC_ReadInterrupt>
 800851a:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800851c:	2300      	movs	r3, #0
 800851e:	617b      	str	r3, [r7, #20]
 8008520:	e025      	b.n	800856e <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8008522:	697b      	ldr	r3, [r7, #20]
 8008524:	f003 030f 	and.w	r3, r3, #15
 8008528:	68ba      	ldr	r2, [r7, #8]
 800852a:	fa22 f303 	lsr.w	r3, r2, r3
 800852e:	f003 0301 	and.w	r3, r3, #1
 8008532:	2b00      	cmp	r3, #0
 8008534:	d018      	beq.n	8008568 <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8008536:	697b      	ldr	r3, [r7, #20]
 8008538:	015a      	lsls	r2, r3, #5
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	4413      	add	r3, r2
 800853e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008548:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800854c:	d106      	bne.n	800855c <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800854e:	697b      	ldr	r3, [r7, #20]
 8008550:	b2db      	uxtb	r3, r3
 8008552:	4619      	mov	r1, r3
 8008554:	6878      	ldr	r0, [r7, #4]
 8008556:	f000 f8ab 	bl	80086b0 <HCD_HC_IN_IRQHandler>
 800855a:	e005      	b.n	8008568 <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800855c:	697b      	ldr	r3, [r7, #20]
 800855e:	b2db      	uxtb	r3, r3
 8008560:	4619      	mov	r1, r3
 8008562:	6878      	ldr	r0, [r7, #4]
 8008564:	f000 fcc6 	bl	8008ef4 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8008568:	697b      	ldr	r3, [r7, #20]
 800856a:	3301      	adds	r3, #1
 800856c:	617b      	str	r3, [r7, #20]
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	689b      	ldr	r3, [r3, #8]
 8008572:	697a      	ldr	r2, [r7, #20]
 8008574:	429a      	cmp	r2, r3
 8008576:	d3d4      	bcc.n	8008522 <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008580:	615a      	str	r2, [r3, #20]
 8008582:	e000      	b.n	8008586 <HAL_HCD_IRQHandler+0x202>
      return;
 8008584:	bf00      	nop
    }
  }
}
 8008586:	3718      	adds	r7, #24
 8008588:	46bd      	mov	sp, r7
 800858a:	bd80      	pop	{r7, pc}

0800858c <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b082      	sub	sp, #8
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800859a:	2b01      	cmp	r3, #1
 800859c:	d101      	bne.n	80085a2 <HAL_HCD_Start+0x16>
 800859e:	2302      	movs	r3, #2
 80085a0:	e013      	b.n	80085ca <HAL_HCD_Start+0x3e>
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	2201      	movs	r2, #1
 80085a6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  __HAL_HCD_ENABLE(hhcd);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	4618      	mov	r0, r3
 80085b0:	f009 fa14 	bl	80119dc <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	2101      	movs	r1, #1
 80085ba:	4618      	mov	r0, r3
 80085bc:	f009 fc6a 	bl	8011e94 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2200      	movs	r2, #0
 80085c4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80085c8:	2300      	movs	r3, #0
}
 80085ca:	4618      	mov	r0, r3
 80085cc:	3708      	adds	r7, #8
 80085ce:	46bd      	mov	sp, r7
 80085d0:	bd80      	pop	{r7, pc}

080085d2 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80085d2:	b580      	push	{r7, lr}
 80085d4:	b082      	sub	sp, #8
 80085d6:	af00      	add	r7, sp, #0
 80085d8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80085e0:	2b01      	cmp	r3, #1
 80085e2:	d101      	bne.n	80085e8 <HAL_HCD_Stop+0x16>
 80085e4:	2302      	movs	r3, #2
 80085e6:	e00d      	b.n	8008604 <HAL_HCD_Stop+0x32>
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2201      	movs	r2, #1
 80085ec:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	4618      	mov	r0, r3
 80085f6:	f00a f869 	bl	80126cc <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	2200      	movs	r2, #0
 80085fe:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8008602:	2300      	movs	r3, #0
}
 8008604:	4618      	mov	r0, r3
 8008606:	3708      	adds	r7, #8
 8008608:	46bd      	mov	sp, r7
 800860a:	bd80      	pop	{r7, pc}

0800860c <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800860c:	b580      	push	{r7, lr}
 800860e:	b082      	sub	sp, #8
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	4618      	mov	r0, r3
 800861a:	f009 fc11 	bl	8011e40 <USB_ResetPort>
 800861e:	4603      	mov	r3, r0
}
 8008620:	4618      	mov	r0, r3
 8008622:	3708      	adds	r7, #8
 8008624:	46bd      	mov	sp, r7
 8008626:	bd80      	pop	{r7, pc}

08008628 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8008628:	b480      	push	{r7}
 800862a:	b083      	sub	sp, #12
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
 8008630:	460b      	mov	r3, r1
 8008632:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8008634:	78fb      	ldrb	r3, [r7, #3]
 8008636:	687a      	ldr	r2, [r7, #4]
 8008638:	212c      	movs	r1, #44	; 0x2c
 800863a:	fb01 f303 	mul.w	r3, r1, r3
 800863e:	4413      	add	r3, r2
 8008640:	3360      	adds	r3, #96	; 0x60
 8008642:	781b      	ldrb	r3, [r3, #0]
}
 8008644:	4618      	mov	r0, r3
 8008646:	370c      	adds	r7, #12
 8008648:	46bd      	mov	sp, r7
 800864a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864e:	4770      	bx	lr

08008650 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8008650:	b480      	push	{r7}
 8008652:	b083      	sub	sp, #12
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
 8008658:	460b      	mov	r3, r1
 800865a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800865c:	78fb      	ldrb	r3, [r7, #3]
 800865e:	687a      	ldr	r2, [r7, #4]
 8008660:	212c      	movs	r1, #44	; 0x2c
 8008662:	fb01 f303 	mul.w	r3, r1, r3
 8008666:	4413      	add	r3, r2
 8008668:	3350      	adds	r3, #80	; 0x50
 800866a:	681b      	ldr	r3, [r3, #0]
}
 800866c:	4618      	mov	r0, r3
 800866e:	370c      	adds	r7, #12
 8008670:	46bd      	mov	sp, r7
 8008672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008676:	4770      	bx	lr

08008678 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8008678:	b580      	push	{r7, lr}
 800867a:	b082      	sub	sp, #8
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	4618      	mov	r0, r3
 8008686:	f009 fc55 	bl	8011f34 <USB_GetCurrentFrame>
 800868a:	4603      	mov	r3, r0
}
 800868c:	4618      	mov	r0, r3
 800868e:	3708      	adds	r7, #8
 8008690:	46bd      	mov	sp, r7
 8008692:	bd80      	pop	{r7, pc}

08008694 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8008694:	b580      	push	{r7, lr}
 8008696:	b082      	sub	sp, #8
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	4618      	mov	r0, r3
 80086a2:	f009 fc30 	bl	8011f06 <USB_GetHostSpeed>
 80086a6:	4603      	mov	r3, r0
}
 80086a8:	4618      	mov	r0, r3
 80086aa:	3708      	adds	r7, #8
 80086ac:	46bd      	mov	sp, r7
 80086ae:	bd80      	pop	{r7, pc}

080086b0 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b086      	sub	sp, #24
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
 80086b8:	460b      	mov	r3, r1
 80086ba:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086c2:	697b      	ldr	r3, [r7, #20]
 80086c4:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80086c6:	78fb      	ldrb	r3, [r7, #3]
 80086c8:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	015a      	lsls	r2, r3, #5
 80086ce:	693b      	ldr	r3, [r7, #16]
 80086d0:	4413      	add	r3, r2
 80086d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086d6:	689b      	ldr	r3, [r3, #8]
 80086d8:	f003 0304 	and.w	r3, r3, #4
 80086dc:	2b04      	cmp	r3, #4
 80086de:	d119      	bne.n	8008714 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	015a      	lsls	r2, r3, #5
 80086e4:	693b      	ldr	r3, [r7, #16]
 80086e6:	4413      	add	r3, r2
 80086e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086ec:	461a      	mov	r2, r3
 80086ee:	2304      	movs	r3, #4
 80086f0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	015a      	lsls	r2, r3, #5
 80086f6:	693b      	ldr	r3, [r7, #16]
 80086f8:	4413      	add	r3, r2
 80086fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086fe:	68db      	ldr	r3, [r3, #12]
 8008700:	68fa      	ldr	r2, [r7, #12]
 8008702:	0151      	lsls	r1, r2, #5
 8008704:	693a      	ldr	r2, [r7, #16]
 8008706:	440a      	add	r2, r1
 8008708:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800870c:	f043 0302 	orr.w	r3, r3, #2
 8008710:	60d3      	str	r3, [r2, #12]
 8008712:	e101      	b.n	8008918 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	015a      	lsls	r2, r3, #5
 8008718:	693b      	ldr	r3, [r7, #16]
 800871a:	4413      	add	r3, r2
 800871c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008720:	689b      	ldr	r3, [r3, #8]
 8008722:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008726:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800872a:	d12b      	bne.n	8008784 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	015a      	lsls	r2, r3, #5
 8008730:	693b      	ldr	r3, [r7, #16]
 8008732:	4413      	add	r3, r2
 8008734:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008738:	461a      	mov	r2, r3
 800873a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800873e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8008740:	687a      	ldr	r2, [r7, #4]
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	212c      	movs	r1, #44	; 0x2c
 8008746:	fb01 f303 	mul.w	r3, r1, r3
 800874a:	4413      	add	r3, r2
 800874c:	3361      	adds	r3, #97	; 0x61
 800874e:	2207      	movs	r2, #7
 8008750:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	015a      	lsls	r2, r3, #5
 8008756:	693b      	ldr	r3, [r7, #16]
 8008758:	4413      	add	r3, r2
 800875a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800875e:	68db      	ldr	r3, [r3, #12]
 8008760:	68fa      	ldr	r2, [r7, #12]
 8008762:	0151      	lsls	r1, r2, #5
 8008764:	693a      	ldr	r2, [r7, #16]
 8008766:	440a      	add	r2, r1
 8008768:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800876c:	f043 0302 	orr.w	r3, r3, #2
 8008770:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	68fa      	ldr	r2, [r7, #12]
 8008778:	b2d2      	uxtb	r2, r2
 800877a:	4611      	mov	r1, r2
 800877c:	4618      	mov	r0, r3
 800877e:	f009 fe4c 	bl	801241a <USB_HC_Halt>
 8008782:	e0c9      	b.n	8008918 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	015a      	lsls	r2, r3, #5
 8008788:	693b      	ldr	r3, [r7, #16]
 800878a:	4413      	add	r3, r2
 800878c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008790:	689b      	ldr	r3, [r3, #8]
 8008792:	f003 0320 	and.w	r3, r3, #32
 8008796:	2b20      	cmp	r3, #32
 8008798:	d109      	bne.n	80087ae <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	015a      	lsls	r2, r3, #5
 800879e:	693b      	ldr	r3, [r7, #16]
 80087a0:	4413      	add	r3, r2
 80087a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087a6:	461a      	mov	r2, r3
 80087a8:	2320      	movs	r3, #32
 80087aa:	6093      	str	r3, [r2, #8]
 80087ac:	e0b4      	b.n	8008918 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	015a      	lsls	r2, r3, #5
 80087b2:	693b      	ldr	r3, [r7, #16]
 80087b4:	4413      	add	r3, r2
 80087b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087ba:	689b      	ldr	r3, [r3, #8]
 80087bc:	f003 0308 	and.w	r3, r3, #8
 80087c0:	2b08      	cmp	r3, #8
 80087c2:	d133      	bne.n	800882c <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	015a      	lsls	r2, r3, #5
 80087c8:	693b      	ldr	r3, [r7, #16]
 80087ca:	4413      	add	r3, r2
 80087cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087d0:	68db      	ldr	r3, [r3, #12]
 80087d2:	68fa      	ldr	r2, [r7, #12]
 80087d4:	0151      	lsls	r1, r2, #5
 80087d6:	693a      	ldr	r2, [r7, #16]
 80087d8:	440a      	add	r2, r1
 80087da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80087de:	f043 0302 	orr.w	r3, r3, #2
 80087e2:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80087e4:	687a      	ldr	r2, [r7, #4]
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	212c      	movs	r1, #44	; 0x2c
 80087ea:	fb01 f303 	mul.w	r3, r1, r3
 80087ee:	4413      	add	r3, r2
 80087f0:	3361      	adds	r3, #97	; 0x61
 80087f2:	2205      	movs	r2, #5
 80087f4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	015a      	lsls	r2, r3, #5
 80087fa:	693b      	ldr	r3, [r7, #16]
 80087fc:	4413      	add	r3, r2
 80087fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008802:	461a      	mov	r2, r3
 8008804:	2310      	movs	r3, #16
 8008806:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	015a      	lsls	r2, r3, #5
 800880c:	693b      	ldr	r3, [r7, #16]
 800880e:	4413      	add	r3, r2
 8008810:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008814:	461a      	mov	r2, r3
 8008816:	2308      	movs	r3, #8
 8008818:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	68fa      	ldr	r2, [r7, #12]
 8008820:	b2d2      	uxtb	r2, r2
 8008822:	4611      	mov	r1, r2
 8008824:	4618      	mov	r0, r3
 8008826:	f009 fdf8 	bl	801241a <USB_HC_Halt>
 800882a:	e075      	b.n	8008918 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	015a      	lsls	r2, r3, #5
 8008830:	693b      	ldr	r3, [r7, #16]
 8008832:	4413      	add	r3, r2
 8008834:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008838:	689b      	ldr	r3, [r3, #8]
 800883a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800883e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008842:	d134      	bne.n	80088ae <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	015a      	lsls	r2, r3, #5
 8008848:	693b      	ldr	r3, [r7, #16]
 800884a:	4413      	add	r3, r2
 800884c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008850:	68db      	ldr	r3, [r3, #12]
 8008852:	68fa      	ldr	r2, [r7, #12]
 8008854:	0151      	lsls	r1, r2, #5
 8008856:	693a      	ldr	r2, [r7, #16]
 8008858:	440a      	add	r2, r1
 800885a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800885e:	f043 0302 	orr.w	r3, r3, #2
 8008862:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8008864:	687a      	ldr	r2, [r7, #4]
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	212c      	movs	r1, #44	; 0x2c
 800886a:	fb01 f303 	mul.w	r3, r1, r3
 800886e:	4413      	add	r3, r2
 8008870:	3361      	adds	r3, #97	; 0x61
 8008872:	2208      	movs	r2, #8
 8008874:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	015a      	lsls	r2, r3, #5
 800887a:	693b      	ldr	r3, [r7, #16]
 800887c:	4413      	add	r3, r2
 800887e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008882:	461a      	mov	r2, r3
 8008884:	2310      	movs	r3, #16
 8008886:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	015a      	lsls	r2, r3, #5
 800888c:	693b      	ldr	r3, [r7, #16]
 800888e:	4413      	add	r3, r2
 8008890:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008894:	461a      	mov	r2, r3
 8008896:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800889a:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	68fa      	ldr	r2, [r7, #12]
 80088a2:	b2d2      	uxtb	r2, r2
 80088a4:	4611      	mov	r1, r2
 80088a6:	4618      	mov	r0, r3
 80088a8:	f009 fdb7 	bl	801241a <USB_HC_Halt>
 80088ac:	e034      	b.n	8008918 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	015a      	lsls	r2, r3, #5
 80088b2:	693b      	ldr	r3, [r7, #16]
 80088b4:	4413      	add	r3, r2
 80088b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088ba:	689b      	ldr	r3, [r3, #8]
 80088bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088c0:	2b80      	cmp	r3, #128	; 0x80
 80088c2:	d129      	bne.n	8008918 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	015a      	lsls	r2, r3, #5
 80088c8:	693b      	ldr	r3, [r7, #16]
 80088ca:	4413      	add	r3, r2
 80088cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088d0:	68db      	ldr	r3, [r3, #12]
 80088d2:	68fa      	ldr	r2, [r7, #12]
 80088d4:	0151      	lsls	r1, r2, #5
 80088d6:	693a      	ldr	r2, [r7, #16]
 80088d8:	440a      	add	r2, r1
 80088da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80088de:	f043 0302 	orr.w	r3, r3, #2
 80088e2:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80088e4:	687a      	ldr	r2, [r7, #4]
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	212c      	movs	r1, #44	; 0x2c
 80088ea:	fb01 f303 	mul.w	r3, r1, r3
 80088ee:	4413      	add	r3, r2
 80088f0:	3361      	adds	r3, #97	; 0x61
 80088f2:	2206      	movs	r2, #6
 80088f4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	68fa      	ldr	r2, [r7, #12]
 80088fc:	b2d2      	uxtb	r2, r2
 80088fe:	4611      	mov	r1, r2
 8008900:	4618      	mov	r0, r3
 8008902:	f009 fd8a 	bl	801241a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	015a      	lsls	r2, r3, #5
 800890a:	693b      	ldr	r3, [r7, #16]
 800890c:	4413      	add	r3, r2
 800890e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008912:	461a      	mov	r2, r3
 8008914:	2380      	movs	r3, #128	; 0x80
 8008916:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	015a      	lsls	r2, r3, #5
 800891c:	693b      	ldr	r3, [r7, #16]
 800891e:	4413      	add	r3, r2
 8008920:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008924:	689b      	ldr	r3, [r3, #8]
 8008926:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800892a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800892e:	d122      	bne.n	8008976 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	015a      	lsls	r2, r3, #5
 8008934:	693b      	ldr	r3, [r7, #16]
 8008936:	4413      	add	r3, r2
 8008938:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800893c:	68db      	ldr	r3, [r3, #12]
 800893e:	68fa      	ldr	r2, [r7, #12]
 8008940:	0151      	lsls	r1, r2, #5
 8008942:	693a      	ldr	r2, [r7, #16]
 8008944:	440a      	add	r2, r1
 8008946:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800894a:	f043 0302 	orr.w	r3, r3, #2
 800894e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	68fa      	ldr	r2, [r7, #12]
 8008956:	b2d2      	uxtb	r2, r2
 8008958:	4611      	mov	r1, r2
 800895a:	4618      	mov	r0, r3
 800895c:	f009 fd5d 	bl	801241a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	015a      	lsls	r2, r3, #5
 8008964:	693b      	ldr	r3, [r7, #16]
 8008966:	4413      	add	r3, r2
 8008968:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800896c:	461a      	mov	r2, r3
 800896e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008972:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8008974:	e2ba      	b.n	8008eec <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	015a      	lsls	r2, r3, #5
 800897a:	693b      	ldr	r3, [r7, #16]
 800897c:	4413      	add	r3, r2
 800897e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008982:	689b      	ldr	r3, [r3, #8]
 8008984:	f003 0301 	and.w	r3, r3, #1
 8008988:	2b01      	cmp	r3, #1
 800898a:	f040 811b 	bne.w	8008bc4 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	691b      	ldr	r3, [r3, #16]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d019      	beq.n	80089ca <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8008996:	687a      	ldr	r2, [r7, #4]
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	212c      	movs	r1, #44	; 0x2c
 800899c:	fb01 f303 	mul.w	r3, r1, r3
 80089a0:	4413      	add	r3, r2
 80089a2:	3348      	adds	r3, #72	; 0x48
 80089a4:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	0159      	lsls	r1, r3, #5
 80089aa:	693b      	ldr	r3, [r7, #16]
 80089ac:	440b      	add	r3, r1
 80089ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089b2:	691b      	ldr	r3, [r3, #16]
 80089b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80089b8:	1ad2      	subs	r2, r2, r3
 80089ba:	6879      	ldr	r1, [r7, #4]
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	202c      	movs	r0, #44	; 0x2c
 80089c0:	fb00 f303 	mul.w	r3, r0, r3
 80089c4:	440b      	add	r3, r1
 80089c6:	3350      	adds	r3, #80	; 0x50
 80089c8:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80089ca:	687a      	ldr	r2, [r7, #4]
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	212c      	movs	r1, #44	; 0x2c
 80089d0:	fb01 f303 	mul.w	r3, r1, r3
 80089d4:	4413      	add	r3, r2
 80089d6:	3361      	adds	r3, #97	; 0x61
 80089d8:	2201      	movs	r2, #1
 80089da:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80089dc:	687a      	ldr	r2, [r7, #4]
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	212c      	movs	r1, #44	; 0x2c
 80089e2:	fb01 f303 	mul.w	r3, r1, r3
 80089e6:	4413      	add	r3, r2
 80089e8:	335c      	adds	r3, #92	; 0x5c
 80089ea:	2200      	movs	r2, #0
 80089ec:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	015a      	lsls	r2, r3, #5
 80089f2:	693b      	ldr	r3, [r7, #16]
 80089f4:	4413      	add	r3, r2
 80089f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089fa:	461a      	mov	r2, r3
 80089fc:	2301      	movs	r3, #1
 80089fe:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8008a00:	687a      	ldr	r2, [r7, #4]
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	212c      	movs	r1, #44	; 0x2c
 8008a06:	fb01 f303 	mul.w	r3, r1, r3
 8008a0a:	4413      	add	r3, r2
 8008a0c:	333f      	adds	r3, #63	; 0x3f
 8008a0e:	781b      	ldrb	r3, [r3, #0]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d009      	beq.n	8008a28 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8008a14:	687a      	ldr	r2, [r7, #4]
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	212c      	movs	r1, #44	; 0x2c
 8008a1a:	fb01 f303 	mul.w	r3, r1, r3
 8008a1e:	4413      	add	r3, r2
 8008a20:	333f      	adds	r3, #63	; 0x3f
 8008a22:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8008a24:	2b02      	cmp	r3, #2
 8008a26:	d121      	bne.n	8008a6c <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	015a      	lsls	r2, r3, #5
 8008a2c:	693b      	ldr	r3, [r7, #16]
 8008a2e:	4413      	add	r3, r2
 8008a30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a34:	68db      	ldr	r3, [r3, #12]
 8008a36:	68fa      	ldr	r2, [r7, #12]
 8008a38:	0151      	lsls	r1, r2, #5
 8008a3a:	693a      	ldr	r2, [r7, #16]
 8008a3c:	440a      	add	r2, r1
 8008a3e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008a42:	f043 0302 	orr.w	r3, r3, #2
 8008a46:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	68fa      	ldr	r2, [r7, #12]
 8008a4e:	b2d2      	uxtb	r2, r2
 8008a50:	4611      	mov	r1, r2
 8008a52:	4618      	mov	r0, r3
 8008a54:	f009 fce1 	bl	801241a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	015a      	lsls	r2, r3, #5
 8008a5c:	693b      	ldr	r3, [r7, #16]
 8008a5e:	4413      	add	r3, r2
 8008a60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a64:	461a      	mov	r2, r3
 8008a66:	2310      	movs	r3, #16
 8008a68:	6093      	str	r3, [r2, #8]
 8008a6a:	e066      	b.n	8008b3a <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8008a6c:	687a      	ldr	r2, [r7, #4]
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	212c      	movs	r1, #44	; 0x2c
 8008a72:	fb01 f303 	mul.w	r3, r1, r3
 8008a76:	4413      	add	r3, r2
 8008a78:	333f      	adds	r3, #63	; 0x3f
 8008a7a:	781b      	ldrb	r3, [r3, #0]
 8008a7c:	2b03      	cmp	r3, #3
 8008a7e:	d127      	bne.n	8008ad0 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	015a      	lsls	r2, r3, #5
 8008a84:	693b      	ldr	r3, [r7, #16]
 8008a86:	4413      	add	r3, r2
 8008a88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	68fa      	ldr	r2, [r7, #12]
 8008a90:	0151      	lsls	r1, r2, #5
 8008a92:	693a      	ldr	r2, [r7, #16]
 8008a94:	440a      	add	r2, r1
 8008a96:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008a9a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008a9e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8008aa0:	687a      	ldr	r2, [r7, #4]
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	212c      	movs	r1, #44	; 0x2c
 8008aa6:	fb01 f303 	mul.w	r3, r1, r3
 8008aaa:	4413      	add	r3, r2
 8008aac:	3360      	adds	r3, #96	; 0x60
 8008aae:	2201      	movs	r2, #1
 8008ab0:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	b2d9      	uxtb	r1, r3
 8008ab6:	687a      	ldr	r2, [r7, #4]
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	202c      	movs	r0, #44	; 0x2c
 8008abc:	fb00 f303 	mul.w	r3, r0, r3
 8008ac0:	4413      	add	r3, r2
 8008ac2:	3360      	adds	r3, #96	; 0x60
 8008ac4:	781b      	ldrb	r3, [r3, #0]
 8008ac6:	461a      	mov	r2, r3
 8008ac8:	6878      	ldr	r0, [r7, #4]
 8008aca:	f00f f8f9 	bl	8017cc0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8008ace:	e034      	b.n	8008b3a <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8008ad0:	687a      	ldr	r2, [r7, #4]
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	212c      	movs	r1, #44	; 0x2c
 8008ad6:	fb01 f303 	mul.w	r3, r1, r3
 8008ada:	4413      	add	r3, r2
 8008adc:	333f      	adds	r3, #63	; 0x3f
 8008ade:	781b      	ldrb	r3, [r3, #0]
 8008ae0:	2b01      	cmp	r3, #1
 8008ae2:	d12a      	bne.n	8008b3a <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8008ae4:	687a      	ldr	r2, [r7, #4]
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	212c      	movs	r1, #44	; 0x2c
 8008aea:	fb01 f303 	mul.w	r3, r1, r3
 8008aee:	4413      	add	r3, r2
 8008af0:	3360      	adds	r3, #96	; 0x60
 8008af2:	2201      	movs	r2, #1
 8008af4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8008af6:	687a      	ldr	r2, [r7, #4]
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	212c      	movs	r1, #44	; 0x2c
 8008afc:	fb01 f303 	mul.w	r3, r1, r3
 8008b00:	4413      	add	r3, r2
 8008b02:	3354      	adds	r3, #84	; 0x54
 8008b04:	781b      	ldrb	r3, [r3, #0]
 8008b06:	f083 0301 	eor.w	r3, r3, #1
 8008b0a:	b2d8      	uxtb	r0, r3
 8008b0c:	687a      	ldr	r2, [r7, #4]
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	212c      	movs	r1, #44	; 0x2c
 8008b12:	fb01 f303 	mul.w	r3, r1, r3
 8008b16:	4413      	add	r3, r2
 8008b18:	3354      	adds	r3, #84	; 0x54
 8008b1a:	4602      	mov	r2, r0
 8008b1c:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	b2d9      	uxtb	r1, r3
 8008b22:	687a      	ldr	r2, [r7, #4]
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	202c      	movs	r0, #44	; 0x2c
 8008b28:	fb00 f303 	mul.w	r3, r0, r3
 8008b2c:	4413      	add	r3, r2
 8008b2e:	3360      	adds	r3, #96	; 0x60
 8008b30:	781b      	ldrb	r3, [r3, #0]
 8008b32:	461a      	mov	r2, r3
 8008b34:	6878      	ldr	r0, [r7, #4]
 8008b36:	f00f f8c3 	bl	8017cc0 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	691b      	ldr	r3, [r3, #16]
 8008b3e:	2b01      	cmp	r3, #1
 8008b40:	d12b      	bne.n	8008b9a <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8008b42:	687a      	ldr	r2, [r7, #4]
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	212c      	movs	r1, #44	; 0x2c
 8008b48:	fb01 f303 	mul.w	r3, r1, r3
 8008b4c:	4413      	add	r3, r2
 8008b4e:	3348      	adds	r3, #72	; 0x48
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	6879      	ldr	r1, [r7, #4]
 8008b54:	68fa      	ldr	r2, [r7, #12]
 8008b56:	202c      	movs	r0, #44	; 0x2c
 8008b58:	fb00 f202 	mul.w	r2, r0, r2
 8008b5c:	440a      	add	r2, r1
 8008b5e:	3240      	adds	r2, #64	; 0x40
 8008b60:	8812      	ldrh	r2, [r2, #0]
 8008b62:	fbb3 f3f2 	udiv	r3, r3, r2
 8008b66:	f003 0301 	and.w	r3, r3, #1
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	f000 81be 	beq.w	8008eec <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8008b70:	687a      	ldr	r2, [r7, #4]
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	212c      	movs	r1, #44	; 0x2c
 8008b76:	fb01 f303 	mul.w	r3, r1, r3
 8008b7a:	4413      	add	r3, r2
 8008b7c:	3354      	adds	r3, #84	; 0x54
 8008b7e:	781b      	ldrb	r3, [r3, #0]
 8008b80:	f083 0301 	eor.w	r3, r3, #1
 8008b84:	b2d8      	uxtb	r0, r3
 8008b86:	687a      	ldr	r2, [r7, #4]
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	212c      	movs	r1, #44	; 0x2c
 8008b8c:	fb01 f303 	mul.w	r3, r1, r3
 8008b90:	4413      	add	r3, r2
 8008b92:	3354      	adds	r3, #84	; 0x54
 8008b94:	4602      	mov	r2, r0
 8008b96:	701a      	strb	r2, [r3, #0]
}
 8008b98:	e1a8      	b.n	8008eec <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8008b9a:	687a      	ldr	r2, [r7, #4]
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	212c      	movs	r1, #44	; 0x2c
 8008ba0:	fb01 f303 	mul.w	r3, r1, r3
 8008ba4:	4413      	add	r3, r2
 8008ba6:	3354      	adds	r3, #84	; 0x54
 8008ba8:	781b      	ldrb	r3, [r3, #0]
 8008baa:	f083 0301 	eor.w	r3, r3, #1
 8008bae:	b2d8      	uxtb	r0, r3
 8008bb0:	687a      	ldr	r2, [r7, #4]
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	212c      	movs	r1, #44	; 0x2c
 8008bb6:	fb01 f303 	mul.w	r3, r1, r3
 8008bba:	4413      	add	r3, r2
 8008bbc:	3354      	adds	r3, #84	; 0x54
 8008bbe:	4602      	mov	r2, r0
 8008bc0:	701a      	strb	r2, [r3, #0]
}
 8008bc2:	e193      	b.n	8008eec <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	015a      	lsls	r2, r3, #5
 8008bc8:	693b      	ldr	r3, [r7, #16]
 8008bca:	4413      	add	r3, r2
 8008bcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008bd0:	689b      	ldr	r3, [r3, #8]
 8008bd2:	f003 0302 	and.w	r3, r3, #2
 8008bd6:	2b02      	cmp	r3, #2
 8008bd8:	f040 8106 	bne.w	8008de8 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	015a      	lsls	r2, r3, #5
 8008be0:	693b      	ldr	r3, [r7, #16]
 8008be2:	4413      	add	r3, r2
 8008be4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008be8:	68db      	ldr	r3, [r3, #12]
 8008bea:	68fa      	ldr	r2, [r7, #12]
 8008bec:	0151      	lsls	r1, r2, #5
 8008bee:	693a      	ldr	r2, [r7, #16]
 8008bf0:	440a      	add	r2, r1
 8008bf2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008bf6:	f023 0302 	bic.w	r3, r3, #2
 8008bfa:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8008bfc:	687a      	ldr	r2, [r7, #4]
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	212c      	movs	r1, #44	; 0x2c
 8008c02:	fb01 f303 	mul.w	r3, r1, r3
 8008c06:	4413      	add	r3, r2
 8008c08:	3361      	adds	r3, #97	; 0x61
 8008c0a:	781b      	ldrb	r3, [r3, #0]
 8008c0c:	2b01      	cmp	r3, #1
 8008c0e:	d109      	bne.n	8008c24 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8008c10:	687a      	ldr	r2, [r7, #4]
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	212c      	movs	r1, #44	; 0x2c
 8008c16:	fb01 f303 	mul.w	r3, r1, r3
 8008c1a:	4413      	add	r3, r2
 8008c1c:	3360      	adds	r3, #96	; 0x60
 8008c1e:	2201      	movs	r2, #1
 8008c20:	701a      	strb	r2, [r3, #0]
 8008c22:	e0c9      	b.n	8008db8 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8008c24:	687a      	ldr	r2, [r7, #4]
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	212c      	movs	r1, #44	; 0x2c
 8008c2a:	fb01 f303 	mul.w	r3, r1, r3
 8008c2e:	4413      	add	r3, r2
 8008c30:	3361      	adds	r3, #97	; 0x61
 8008c32:	781b      	ldrb	r3, [r3, #0]
 8008c34:	2b05      	cmp	r3, #5
 8008c36:	d109      	bne.n	8008c4c <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8008c38:	687a      	ldr	r2, [r7, #4]
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	212c      	movs	r1, #44	; 0x2c
 8008c3e:	fb01 f303 	mul.w	r3, r1, r3
 8008c42:	4413      	add	r3, r2
 8008c44:	3360      	adds	r3, #96	; 0x60
 8008c46:	2205      	movs	r2, #5
 8008c48:	701a      	strb	r2, [r3, #0]
 8008c4a:	e0b5      	b.n	8008db8 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8008c4c:	687a      	ldr	r2, [r7, #4]
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	212c      	movs	r1, #44	; 0x2c
 8008c52:	fb01 f303 	mul.w	r3, r1, r3
 8008c56:	4413      	add	r3, r2
 8008c58:	3361      	adds	r3, #97	; 0x61
 8008c5a:	781b      	ldrb	r3, [r3, #0]
 8008c5c:	2b06      	cmp	r3, #6
 8008c5e:	d009      	beq.n	8008c74 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8008c60:	687a      	ldr	r2, [r7, #4]
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	212c      	movs	r1, #44	; 0x2c
 8008c66:	fb01 f303 	mul.w	r3, r1, r3
 8008c6a:	4413      	add	r3, r2
 8008c6c:	3361      	adds	r3, #97	; 0x61
 8008c6e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8008c70:	2b08      	cmp	r3, #8
 8008c72:	d150      	bne.n	8008d16 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8008c74:	687a      	ldr	r2, [r7, #4]
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	212c      	movs	r1, #44	; 0x2c
 8008c7a:	fb01 f303 	mul.w	r3, r1, r3
 8008c7e:	4413      	add	r3, r2
 8008c80:	335c      	adds	r3, #92	; 0x5c
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	1c5a      	adds	r2, r3, #1
 8008c86:	6879      	ldr	r1, [r7, #4]
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	202c      	movs	r0, #44	; 0x2c
 8008c8c:	fb00 f303 	mul.w	r3, r0, r3
 8008c90:	440b      	add	r3, r1
 8008c92:	335c      	adds	r3, #92	; 0x5c
 8008c94:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8008c96:	687a      	ldr	r2, [r7, #4]
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	212c      	movs	r1, #44	; 0x2c
 8008c9c:	fb01 f303 	mul.w	r3, r1, r3
 8008ca0:	4413      	add	r3, r2
 8008ca2:	335c      	adds	r3, #92	; 0x5c
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	2b02      	cmp	r3, #2
 8008ca8:	d912      	bls.n	8008cd0 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8008caa:	687a      	ldr	r2, [r7, #4]
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	212c      	movs	r1, #44	; 0x2c
 8008cb0:	fb01 f303 	mul.w	r3, r1, r3
 8008cb4:	4413      	add	r3, r2
 8008cb6:	335c      	adds	r3, #92	; 0x5c
 8008cb8:	2200      	movs	r2, #0
 8008cba:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8008cbc:	687a      	ldr	r2, [r7, #4]
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	212c      	movs	r1, #44	; 0x2c
 8008cc2:	fb01 f303 	mul.w	r3, r1, r3
 8008cc6:	4413      	add	r3, r2
 8008cc8:	3360      	adds	r3, #96	; 0x60
 8008cca:	2204      	movs	r2, #4
 8008ccc:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8008cce:	e073      	b.n	8008db8 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8008cd0:	687a      	ldr	r2, [r7, #4]
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	212c      	movs	r1, #44	; 0x2c
 8008cd6:	fb01 f303 	mul.w	r3, r1, r3
 8008cda:	4413      	add	r3, r2
 8008cdc:	3360      	adds	r3, #96	; 0x60
 8008cde:	2202      	movs	r2, #2
 8008ce0:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	015a      	lsls	r2, r3, #5
 8008ce6:	693b      	ldr	r3, [r7, #16]
 8008ce8:	4413      	add	r3, r2
 8008cea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008cf2:	68bb      	ldr	r3, [r7, #8]
 8008cf4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008cf8:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008cfa:	68bb      	ldr	r3, [r7, #8]
 8008cfc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008d00:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	015a      	lsls	r2, r3, #5
 8008d06:	693b      	ldr	r3, [r7, #16]
 8008d08:	4413      	add	r3, r2
 8008d0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d0e:	461a      	mov	r2, r3
 8008d10:	68bb      	ldr	r3, [r7, #8]
 8008d12:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8008d14:	e050      	b.n	8008db8 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8008d16:	687a      	ldr	r2, [r7, #4]
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	212c      	movs	r1, #44	; 0x2c
 8008d1c:	fb01 f303 	mul.w	r3, r1, r3
 8008d20:	4413      	add	r3, r2
 8008d22:	3361      	adds	r3, #97	; 0x61
 8008d24:	781b      	ldrb	r3, [r3, #0]
 8008d26:	2b03      	cmp	r3, #3
 8008d28:	d122      	bne.n	8008d70 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8008d2a:	687a      	ldr	r2, [r7, #4]
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	212c      	movs	r1, #44	; 0x2c
 8008d30:	fb01 f303 	mul.w	r3, r1, r3
 8008d34:	4413      	add	r3, r2
 8008d36:	3360      	adds	r3, #96	; 0x60
 8008d38:	2202      	movs	r2, #2
 8008d3a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	015a      	lsls	r2, r3, #5
 8008d40:	693b      	ldr	r3, [r7, #16]
 8008d42:	4413      	add	r3, r2
 8008d44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008d4c:	68bb      	ldr	r3, [r7, #8]
 8008d4e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008d52:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008d54:	68bb      	ldr	r3, [r7, #8]
 8008d56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008d5a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	015a      	lsls	r2, r3, #5
 8008d60:	693b      	ldr	r3, [r7, #16]
 8008d62:	4413      	add	r3, r2
 8008d64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d68:	461a      	mov	r2, r3
 8008d6a:	68bb      	ldr	r3, [r7, #8]
 8008d6c:	6013      	str	r3, [r2, #0]
 8008d6e:	e023      	b.n	8008db8 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8008d70:	687a      	ldr	r2, [r7, #4]
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	212c      	movs	r1, #44	; 0x2c
 8008d76:	fb01 f303 	mul.w	r3, r1, r3
 8008d7a:	4413      	add	r3, r2
 8008d7c:	3361      	adds	r3, #97	; 0x61
 8008d7e:	781b      	ldrb	r3, [r3, #0]
 8008d80:	2b07      	cmp	r3, #7
 8008d82:	d119      	bne.n	8008db8 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8008d84:	687a      	ldr	r2, [r7, #4]
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	212c      	movs	r1, #44	; 0x2c
 8008d8a:	fb01 f303 	mul.w	r3, r1, r3
 8008d8e:	4413      	add	r3, r2
 8008d90:	335c      	adds	r3, #92	; 0x5c
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	1c5a      	adds	r2, r3, #1
 8008d96:	6879      	ldr	r1, [r7, #4]
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	202c      	movs	r0, #44	; 0x2c
 8008d9c:	fb00 f303 	mul.w	r3, r0, r3
 8008da0:	440b      	add	r3, r1
 8008da2:	335c      	adds	r3, #92	; 0x5c
 8008da4:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8008da6:	687a      	ldr	r2, [r7, #4]
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	212c      	movs	r1, #44	; 0x2c
 8008dac:	fb01 f303 	mul.w	r3, r1, r3
 8008db0:	4413      	add	r3, r2
 8008db2:	3360      	adds	r3, #96	; 0x60
 8008db4:	2204      	movs	r2, #4
 8008db6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	015a      	lsls	r2, r3, #5
 8008dbc:	693b      	ldr	r3, [r7, #16]
 8008dbe:	4413      	add	r3, r2
 8008dc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008dc4:	461a      	mov	r2, r3
 8008dc6:	2302      	movs	r3, #2
 8008dc8:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	b2d9      	uxtb	r1, r3
 8008dce:	687a      	ldr	r2, [r7, #4]
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	202c      	movs	r0, #44	; 0x2c
 8008dd4:	fb00 f303 	mul.w	r3, r0, r3
 8008dd8:	4413      	add	r3, r2
 8008dda:	3360      	adds	r3, #96	; 0x60
 8008ddc:	781b      	ldrb	r3, [r3, #0]
 8008dde:	461a      	mov	r2, r3
 8008de0:	6878      	ldr	r0, [r7, #4]
 8008de2:	f00e ff6d 	bl	8017cc0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8008de6:	e081      	b.n	8008eec <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	015a      	lsls	r2, r3, #5
 8008dec:	693b      	ldr	r3, [r7, #16]
 8008dee:	4413      	add	r3, r2
 8008df0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008df4:	689b      	ldr	r3, [r3, #8]
 8008df6:	f003 0310 	and.w	r3, r3, #16
 8008dfa:	2b10      	cmp	r3, #16
 8008dfc:	d176      	bne.n	8008eec <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8008dfe:	687a      	ldr	r2, [r7, #4]
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	212c      	movs	r1, #44	; 0x2c
 8008e04:	fb01 f303 	mul.w	r3, r1, r3
 8008e08:	4413      	add	r3, r2
 8008e0a:	333f      	adds	r3, #63	; 0x3f
 8008e0c:	781b      	ldrb	r3, [r3, #0]
 8008e0e:	2b03      	cmp	r3, #3
 8008e10:	d121      	bne.n	8008e56 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8008e12:	687a      	ldr	r2, [r7, #4]
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	212c      	movs	r1, #44	; 0x2c
 8008e18:	fb01 f303 	mul.w	r3, r1, r3
 8008e1c:	4413      	add	r3, r2
 8008e1e:	335c      	adds	r3, #92	; 0x5c
 8008e20:	2200      	movs	r2, #0
 8008e22:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	015a      	lsls	r2, r3, #5
 8008e28:	693b      	ldr	r3, [r7, #16]
 8008e2a:	4413      	add	r3, r2
 8008e2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e30:	68db      	ldr	r3, [r3, #12]
 8008e32:	68fa      	ldr	r2, [r7, #12]
 8008e34:	0151      	lsls	r1, r2, #5
 8008e36:	693a      	ldr	r2, [r7, #16]
 8008e38:	440a      	add	r2, r1
 8008e3a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008e3e:	f043 0302 	orr.w	r3, r3, #2
 8008e42:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	68fa      	ldr	r2, [r7, #12]
 8008e4a:	b2d2      	uxtb	r2, r2
 8008e4c:	4611      	mov	r1, r2
 8008e4e:	4618      	mov	r0, r3
 8008e50:	f009 fae3 	bl	801241a <USB_HC_Halt>
 8008e54:	e041      	b.n	8008eda <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8008e56:	687a      	ldr	r2, [r7, #4]
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	212c      	movs	r1, #44	; 0x2c
 8008e5c:	fb01 f303 	mul.w	r3, r1, r3
 8008e60:	4413      	add	r3, r2
 8008e62:	333f      	adds	r3, #63	; 0x3f
 8008e64:	781b      	ldrb	r3, [r3, #0]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d009      	beq.n	8008e7e <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8008e6a:	687a      	ldr	r2, [r7, #4]
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	212c      	movs	r1, #44	; 0x2c
 8008e70:	fb01 f303 	mul.w	r3, r1, r3
 8008e74:	4413      	add	r3, r2
 8008e76:	333f      	adds	r3, #63	; 0x3f
 8008e78:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8008e7a:	2b02      	cmp	r3, #2
 8008e7c:	d12d      	bne.n	8008eda <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8008e7e:	687a      	ldr	r2, [r7, #4]
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	212c      	movs	r1, #44	; 0x2c
 8008e84:	fb01 f303 	mul.w	r3, r1, r3
 8008e88:	4413      	add	r3, r2
 8008e8a:	335c      	adds	r3, #92	; 0x5c
 8008e8c:	2200      	movs	r2, #0
 8008e8e:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	691b      	ldr	r3, [r3, #16]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d120      	bne.n	8008eda <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8008e98:	687a      	ldr	r2, [r7, #4]
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	212c      	movs	r1, #44	; 0x2c
 8008e9e:	fb01 f303 	mul.w	r3, r1, r3
 8008ea2:	4413      	add	r3, r2
 8008ea4:	3361      	adds	r3, #97	; 0x61
 8008ea6:	2203      	movs	r2, #3
 8008ea8:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	015a      	lsls	r2, r3, #5
 8008eae:	693b      	ldr	r3, [r7, #16]
 8008eb0:	4413      	add	r3, r2
 8008eb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008eb6:	68db      	ldr	r3, [r3, #12]
 8008eb8:	68fa      	ldr	r2, [r7, #12]
 8008eba:	0151      	lsls	r1, r2, #5
 8008ebc:	693a      	ldr	r2, [r7, #16]
 8008ebe:	440a      	add	r2, r1
 8008ec0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008ec4:	f043 0302 	orr.w	r3, r3, #2
 8008ec8:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	68fa      	ldr	r2, [r7, #12]
 8008ed0:	b2d2      	uxtb	r2, r2
 8008ed2:	4611      	mov	r1, r2
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	f009 faa0 	bl	801241a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	015a      	lsls	r2, r3, #5
 8008ede:	693b      	ldr	r3, [r7, #16]
 8008ee0:	4413      	add	r3, r2
 8008ee2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ee6:	461a      	mov	r2, r3
 8008ee8:	2310      	movs	r3, #16
 8008eea:	6093      	str	r3, [r2, #8]
}
 8008eec:	bf00      	nop
 8008eee:	3718      	adds	r7, #24
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	bd80      	pop	{r7, pc}

08008ef4 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b088      	sub	sp, #32
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
 8008efc:	460b      	mov	r3, r1
 8008efe:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f06:	69fb      	ldr	r3, [r7, #28]
 8008f08:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8008f0a:	78fb      	ldrb	r3, [r7, #3]
 8008f0c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8008f0e:	697b      	ldr	r3, [r7, #20]
 8008f10:	015a      	lsls	r2, r3, #5
 8008f12:	69bb      	ldr	r3, [r7, #24]
 8008f14:	4413      	add	r3, r2
 8008f16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f1a:	689b      	ldr	r3, [r3, #8]
 8008f1c:	f003 0304 	and.w	r3, r3, #4
 8008f20:	2b04      	cmp	r3, #4
 8008f22:	d119      	bne.n	8008f58 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8008f24:	697b      	ldr	r3, [r7, #20]
 8008f26:	015a      	lsls	r2, r3, #5
 8008f28:	69bb      	ldr	r3, [r7, #24]
 8008f2a:	4413      	add	r3, r2
 8008f2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f30:	461a      	mov	r2, r3
 8008f32:	2304      	movs	r3, #4
 8008f34:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008f36:	697b      	ldr	r3, [r7, #20]
 8008f38:	015a      	lsls	r2, r3, #5
 8008f3a:	69bb      	ldr	r3, [r7, #24]
 8008f3c:	4413      	add	r3, r2
 8008f3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f42:	68db      	ldr	r3, [r3, #12]
 8008f44:	697a      	ldr	r2, [r7, #20]
 8008f46:	0151      	lsls	r1, r2, #5
 8008f48:	69ba      	ldr	r2, [r7, #24]
 8008f4a:	440a      	add	r2, r1
 8008f4c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008f50:	f043 0302 	orr.w	r3, r3, #2
 8008f54:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8008f56:	e3c6      	b.n	80096e6 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8008f58:	697b      	ldr	r3, [r7, #20]
 8008f5a:	015a      	lsls	r2, r3, #5
 8008f5c:	69bb      	ldr	r3, [r7, #24]
 8008f5e:	4413      	add	r3, r2
 8008f60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f64:	689b      	ldr	r3, [r3, #8]
 8008f66:	f003 0320 	and.w	r3, r3, #32
 8008f6a:	2b20      	cmp	r3, #32
 8008f6c:	d13e      	bne.n	8008fec <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8008f6e:	697b      	ldr	r3, [r7, #20]
 8008f70:	015a      	lsls	r2, r3, #5
 8008f72:	69bb      	ldr	r3, [r7, #24]
 8008f74:	4413      	add	r3, r2
 8008f76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f7a:	461a      	mov	r2, r3
 8008f7c:	2320      	movs	r3, #32
 8008f7e:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8008f80:	687a      	ldr	r2, [r7, #4]
 8008f82:	697b      	ldr	r3, [r7, #20]
 8008f84:	212c      	movs	r1, #44	; 0x2c
 8008f86:	fb01 f303 	mul.w	r3, r1, r3
 8008f8a:	4413      	add	r3, r2
 8008f8c:	333d      	adds	r3, #61	; 0x3d
 8008f8e:	781b      	ldrb	r3, [r3, #0]
 8008f90:	2b01      	cmp	r3, #1
 8008f92:	f040 83a8 	bne.w	80096e6 <HCD_HC_OUT_IRQHandler+0x7f2>
      hhcd->hc[ch_num].do_ping = 0U;
 8008f96:	687a      	ldr	r2, [r7, #4]
 8008f98:	697b      	ldr	r3, [r7, #20]
 8008f9a:	212c      	movs	r1, #44	; 0x2c
 8008f9c:	fb01 f303 	mul.w	r3, r1, r3
 8008fa0:	4413      	add	r3, r2
 8008fa2:	333d      	adds	r3, #61	; 0x3d
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8008fa8:	687a      	ldr	r2, [r7, #4]
 8008faa:	697b      	ldr	r3, [r7, #20]
 8008fac:	212c      	movs	r1, #44	; 0x2c
 8008fae:	fb01 f303 	mul.w	r3, r1, r3
 8008fb2:	4413      	add	r3, r2
 8008fb4:	3360      	adds	r3, #96	; 0x60
 8008fb6:	2202      	movs	r2, #2
 8008fb8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008fba:	697b      	ldr	r3, [r7, #20]
 8008fbc:	015a      	lsls	r2, r3, #5
 8008fbe:	69bb      	ldr	r3, [r7, #24]
 8008fc0:	4413      	add	r3, r2
 8008fc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008fc6:	68db      	ldr	r3, [r3, #12]
 8008fc8:	697a      	ldr	r2, [r7, #20]
 8008fca:	0151      	lsls	r1, r2, #5
 8008fcc:	69ba      	ldr	r2, [r7, #24]
 8008fce:	440a      	add	r2, r1
 8008fd0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008fd4:	f043 0302 	orr.w	r3, r3, #2
 8008fd8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	697a      	ldr	r2, [r7, #20]
 8008fe0:	b2d2      	uxtb	r2, r2
 8008fe2:	4611      	mov	r1, r2
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	f009 fa18 	bl	801241a <USB_HC_Halt>
}
 8008fea:	e37c      	b.n	80096e6 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8008fec:	697b      	ldr	r3, [r7, #20]
 8008fee:	015a      	lsls	r2, r3, #5
 8008ff0:	69bb      	ldr	r3, [r7, #24]
 8008ff2:	4413      	add	r3, r2
 8008ff4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ff8:	689b      	ldr	r3, [r3, #8]
 8008ffa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008ffe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009002:	d122      	bne.n	800904a <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8009004:	697b      	ldr	r3, [r7, #20]
 8009006:	015a      	lsls	r2, r3, #5
 8009008:	69bb      	ldr	r3, [r7, #24]
 800900a:	4413      	add	r3, r2
 800900c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009010:	68db      	ldr	r3, [r3, #12]
 8009012:	697a      	ldr	r2, [r7, #20]
 8009014:	0151      	lsls	r1, r2, #5
 8009016:	69ba      	ldr	r2, [r7, #24]
 8009018:	440a      	add	r2, r1
 800901a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800901e:	f043 0302 	orr.w	r3, r3, #2
 8009022:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	697a      	ldr	r2, [r7, #20]
 800902a:	b2d2      	uxtb	r2, r2
 800902c:	4611      	mov	r1, r2
 800902e:	4618      	mov	r0, r3
 8009030:	f009 f9f3 	bl	801241a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8009034:	697b      	ldr	r3, [r7, #20]
 8009036:	015a      	lsls	r2, r3, #5
 8009038:	69bb      	ldr	r3, [r7, #24]
 800903a:	4413      	add	r3, r2
 800903c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009040:	461a      	mov	r2, r3
 8009042:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009046:	6093      	str	r3, [r2, #8]
}
 8009048:	e34d      	b.n	80096e6 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800904a:	697b      	ldr	r3, [r7, #20]
 800904c:	015a      	lsls	r2, r3, #5
 800904e:	69bb      	ldr	r3, [r7, #24]
 8009050:	4413      	add	r3, r2
 8009052:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009056:	689b      	ldr	r3, [r3, #8]
 8009058:	f003 0301 	and.w	r3, r3, #1
 800905c:	2b01      	cmp	r3, #1
 800905e:	d150      	bne.n	8009102 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8009060:	687a      	ldr	r2, [r7, #4]
 8009062:	697b      	ldr	r3, [r7, #20]
 8009064:	212c      	movs	r1, #44	; 0x2c
 8009066:	fb01 f303 	mul.w	r3, r1, r3
 800906a:	4413      	add	r3, r2
 800906c:	335c      	adds	r3, #92	; 0x5c
 800906e:	2200      	movs	r2, #0
 8009070:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8009072:	697b      	ldr	r3, [r7, #20]
 8009074:	015a      	lsls	r2, r3, #5
 8009076:	69bb      	ldr	r3, [r7, #24]
 8009078:	4413      	add	r3, r2
 800907a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800907e:	689b      	ldr	r3, [r3, #8]
 8009080:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009084:	2b40      	cmp	r3, #64	; 0x40
 8009086:	d111      	bne.n	80090ac <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8009088:	687a      	ldr	r2, [r7, #4]
 800908a:	697b      	ldr	r3, [r7, #20]
 800908c:	212c      	movs	r1, #44	; 0x2c
 800908e:	fb01 f303 	mul.w	r3, r1, r3
 8009092:	4413      	add	r3, r2
 8009094:	333d      	adds	r3, #61	; 0x3d
 8009096:	2201      	movs	r2, #1
 8009098:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800909a:	697b      	ldr	r3, [r7, #20]
 800909c:	015a      	lsls	r2, r3, #5
 800909e:	69bb      	ldr	r3, [r7, #24]
 80090a0:	4413      	add	r3, r2
 80090a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80090a6:	461a      	mov	r2, r3
 80090a8:	2340      	movs	r3, #64	; 0x40
 80090aa:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80090ac:	697b      	ldr	r3, [r7, #20]
 80090ae:	015a      	lsls	r2, r3, #5
 80090b0:	69bb      	ldr	r3, [r7, #24]
 80090b2:	4413      	add	r3, r2
 80090b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80090b8:	68db      	ldr	r3, [r3, #12]
 80090ba:	697a      	ldr	r2, [r7, #20]
 80090bc:	0151      	lsls	r1, r2, #5
 80090be:	69ba      	ldr	r2, [r7, #24]
 80090c0:	440a      	add	r2, r1
 80090c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80090c6:	f043 0302 	orr.w	r3, r3, #2
 80090ca:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	697a      	ldr	r2, [r7, #20]
 80090d2:	b2d2      	uxtb	r2, r2
 80090d4:	4611      	mov	r1, r2
 80090d6:	4618      	mov	r0, r3
 80090d8:	f009 f99f 	bl	801241a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80090dc:	697b      	ldr	r3, [r7, #20]
 80090de:	015a      	lsls	r2, r3, #5
 80090e0:	69bb      	ldr	r3, [r7, #24]
 80090e2:	4413      	add	r3, r2
 80090e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80090e8:	461a      	mov	r2, r3
 80090ea:	2301      	movs	r3, #1
 80090ec:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80090ee:	687a      	ldr	r2, [r7, #4]
 80090f0:	697b      	ldr	r3, [r7, #20]
 80090f2:	212c      	movs	r1, #44	; 0x2c
 80090f4:	fb01 f303 	mul.w	r3, r1, r3
 80090f8:	4413      	add	r3, r2
 80090fa:	3361      	adds	r3, #97	; 0x61
 80090fc:	2201      	movs	r2, #1
 80090fe:	701a      	strb	r2, [r3, #0]
}
 8009100:	e2f1      	b.n	80096e6 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8009102:	697b      	ldr	r3, [r7, #20]
 8009104:	015a      	lsls	r2, r3, #5
 8009106:	69bb      	ldr	r3, [r7, #24]
 8009108:	4413      	add	r3, r2
 800910a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800910e:	689b      	ldr	r3, [r3, #8]
 8009110:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009114:	2b40      	cmp	r3, #64	; 0x40
 8009116:	d13c      	bne.n	8009192 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8009118:	687a      	ldr	r2, [r7, #4]
 800911a:	697b      	ldr	r3, [r7, #20]
 800911c:	212c      	movs	r1, #44	; 0x2c
 800911e:	fb01 f303 	mul.w	r3, r1, r3
 8009122:	4413      	add	r3, r2
 8009124:	3361      	adds	r3, #97	; 0x61
 8009126:	2204      	movs	r2, #4
 8009128:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800912a:	687a      	ldr	r2, [r7, #4]
 800912c:	697b      	ldr	r3, [r7, #20]
 800912e:	212c      	movs	r1, #44	; 0x2c
 8009130:	fb01 f303 	mul.w	r3, r1, r3
 8009134:	4413      	add	r3, r2
 8009136:	333d      	adds	r3, #61	; 0x3d
 8009138:	2201      	movs	r2, #1
 800913a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800913c:	687a      	ldr	r2, [r7, #4]
 800913e:	697b      	ldr	r3, [r7, #20]
 8009140:	212c      	movs	r1, #44	; 0x2c
 8009142:	fb01 f303 	mul.w	r3, r1, r3
 8009146:	4413      	add	r3, r2
 8009148:	335c      	adds	r3, #92	; 0x5c
 800914a:	2200      	movs	r2, #0
 800914c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800914e:	697b      	ldr	r3, [r7, #20]
 8009150:	015a      	lsls	r2, r3, #5
 8009152:	69bb      	ldr	r3, [r7, #24]
 8009154:	4413      	add	r3, r2
 8009156:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800915a:	68db      	ldr	r3, [r3, #12]
 800915c:	697a      	ldr	r2, [r7, #20]
 800915e:	0151      	lsls	r1, r2, #5
 8009160:	69ba      	ldr	r2, [r7, #24]
 8009162:	440a      	add	r2, r1
 8009164:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009168:	f043 0302 	orr.w	r3, r3, #2
 800916c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	697a      	ldr	r2, [r7, #20]
 8009174:	b2d2      	uxtb	r2, r2
 8009176:	4611      	mov	r1, r2
 8009178:	4618      	mov	r0, r3
 800917a:	f009 f94e 	bl	801241a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800917e:	697b      	ldr	r3, [r7, #20]
 8009180:	015a      	lsls	r2, r3, #5
 8009182:	69bb      	ldr	r3, [r7, #24]
 8009184:	4413      	add	r3, r2
 8009186:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800918a:	461a      	mov	r2, r3
 800918c:	2340      	movs	r3, #64	; 0x40
 800918e:	6093      	str	r3, [r2, #8]
}
 8009190:	e2a9      	b.n	80096e6 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8009192:	697b      	ldr	r3, [r7, #20]
 8009194:	015a      	lsls	r2, r3, #5
 8009196:	69bb      	ldr	r3, [r7, #24]
 8009198:	4413      	add	r3, r2
 800919a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800919e:	689b      	ldr	r3, [r3, #8]
 80091a0:	f003 0308 	and.w	r3, r3, #8
 80091a4:	2b08      	cmp	r3, #8
 80091a6:	d12a      	bne.n	80091fe <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80091a8:	697b      	ldr	r3, [r7, #20]
 80091aa:	015a      	lsls	r2, r3, #5
 80091ac:	69bb      	ldr	r3, [r7, #24]
 80091ae:	4413      	add	r3, r2
 80091b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80091b4:	461a      	mov	r2, r3
 80091b6:	2308      	movs	r3, #8
 80091b8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80091ba:	697b      	ldr	r3, [r7, #20]
 80091bc:	015a      	lsls	r2, r3, #5
 80091be:	69bb      	ldr	r3, [r7, #24]
 80091c0:	4413      	add	r3, r2
 80091c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80091c6:	68db      	ldr	r3, [r3, #12]
 80091c8:	697a      	ldr	r2, [r7, #20]
 80091ca:	0151      	lsls	r1, r2, #5
 80091cc:	69ba      	ldr	r2, [r7, #24]
 80091ce:	440a      	add	r2, r1
 80091d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80091d4:	f043 0302 	orr.w	r3, r3, #2
 80091d8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	697a      	ldr	r2, [r7, #20]
 80091e0:	b2d2      	uxtb	r2, r2
 80091e2:	4611      	mov	r1, r2
 80091e4:	4618      	mov	r0, r3
 80091e6:	f009 f918 	bl	801241a <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80091ea:	687a      	ldr	r2, [r7, #4]
 80091ec:	697b      	ldr	r3, [r7, #20]
 80091ee:	212c      	movs	r1, #44	; 0x2c
 80091f0:	fb01 f303 	mul.w	r3, r1, r3
 80091f4:	4413      	add	r3, r2
 80091f6:	3361      	adds	r3, #97	; 0x61
 80091f8:	2205      	movs	r2, #5
 80091fa:	701a      	strb	r2, [r3, #0]
}
 80091fc:	e273      	b.n	80096e6 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80091fe:	697b      	ldr	r3, [r7, #20]
 8009200:	015a      	lsls	r2, r3, #5
 8009202:	69bb      	ldr	r3, [r7, #24]
 8009204:	4413      	add	r3, r2
 8009206:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800920a:	689b      	ldr	r3, [r3, #8]
 800920c:	f003 0310 	and.w	r3, r3, #16
 8009210:	2b10      	cmp	r3, #16
 8009212:	d150      	bne.n	80092b6 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8009214:	687a      	ldr	r2, [r7, #4]
 8009216:	697b      	ldr	r3, [r7, #20]
 8009218:	212c      	movs	r1, #44	; 0x2c
 800921a:	fb01 f303 	mul.w	r3, r1, r3
 800921e:	4413      	add	r3, r2
 8009220:	335c      	adds	r3, #92	; 0x5c
 8009222:	2200      	movs	r2, #0
 8009224:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8009226:	687a      	ldr	r2, [r7, #4]
 8009228:	697b      	ldr	r3, [r7, #20]
 800922a:	212c      	movs	r1, #44	; 0x2c
 800922c:	fb01 f303 	mul.w	r3, r1, r3
 8009230:	4413      	add	r3, r2
 8009232:	3361      	adds	r3, #97	; 0x61
 8009234:	2203      	movs	r2, #3
 8009236:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8009238:	687a      	ldr	r2, [r7, #4]
 800923a:	697b      	ldr	r3, [r7, #20]
 800923c:	212c      	movs	r1, #44	; 0x2c
 800923e:	fb01 f303 	mul.w	r3, r1, r3
 8009242:	4413      	add	r3, r2
 8009244:	333d      	adds	r3, #61	; 0x3d
 8009246:	781b      	ldrb	r3, [r3, #0]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d112      	bne.n	8009272 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800924c:	687a      	ldr	r2, [r7, #4]
 800924e:	697b      	ldr	r3, [r7, #20]
 8009250:	212c      	movs	r1, #44	; 0x2c
 8009252:	fb01 f303 	mul.w	r3, r1, r3
 8009256:	4413      	add	r3, r2
 8009258:	333c      	adds	r3, #60	; 0x3c
 800925a:	781b      	ldrb	r3, [r3, #0]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d108      	bne.n	8009272 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8009260:	687a      	ldr	r2, [r7, #4]
 8009262:	697b      	ldr	r3, [r7, #20]
 8009264:	212c      	movs	r1, #44	; 0x2c
 8009266:	fb01 f303 	mul.w	r3, r1, r3
 800926a:	4413      	add	r3, r2
 800926c:	333d      	adds	r3, #61	; 0x3d
 800926e:	2201      	movs	r2, #1
 8009270:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8009272:	697b      	ldr	r3, [r7, #20]
 8009274:	015a      	lsls	r2, r3, #5
 8009276:	69bb      	ldr	r3, [r7, #24]
 8009278:	4413      	add	r3, r2
 800927a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800927e:	68db      	ldr	r3, [r3, #12]
 8009280:	697a      	ldr	r2, [r7, #20]
 8009282:	0151      	lsls	r1, r2, #5
 8009284:	69ba      	ldr	r2, [r7, #24]
 8009286:	440a      	add	r2, r1
 8009288:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800928c:	f043 0302 	orr.w	r3, r3, #2
 8009290:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	697a      	ldr	r2, [r7, #20]
 8009298:	b2d2      	uxtb	r2, r2
 800929a:	4611      	mov	r1, r2
 800929c:	4618      	mov	r0, r3
 800929e:	f009 f8bc 	bl	801241a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80092a2:	697b      	ldr	r3, [r7, #20]
 80092a4:	015a      	lsls	r2, r3, #5
 80092a6:	69bb      	ldr	r3, [r7, #24]
 80092a8:	4413      	add	r3, r2
 80092aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80092ae:	461a      	mov	r2, r3
 80092b0:	2310      	movs	r3, #16
 80092b2:	6093      	str	r3, [r2, #8]
}
 80092b4:	e217      	b.n	80096e6 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80092b6:	697b      	ldr	r3, [r7, #20]
 80092b8:	015a      	lsls	r2, r3, #5
 80092ba:	69bb      	ldr	r3, [r7, #24]
 80092bc:	4413      	add	r3, r2
 80092be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80092c2:	689b      	ldr	r3, [r3, #8]
 80092c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092c8:	2b80      	cmp	r3, #128	; 0x80
 80092ca:	d174      	bne.n	80093b6 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	691b      	ldr	r3, [r3, #16]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d121      	bne.n	8009318 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80092d4:	687a      	ldr	r2, [r7, #4]
 80092d6:	697b      	ldr	r3, [r7, #20]
 80092d8:	212c      	movs	r1, #44	; 0x2c
 80092da:	fb01 f303 	mul.w	r3, r1, r3
 80092de:	4413      	add	r3, r2
 80092e0:	3361      	adds	r3, #97	; 0x61
 80092e2:	2206      	movs	r2, #6
 80092e4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80092e6:	697b      	ldr	r3, [r7, #20]
 80092e8:	015a      	lsls	r2, r3, #5
 80092ea:	69bb      	ldr	r3, [r7, #24]
 80092ec:	4413      	add	r3, r2
 80092ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80092f2:	68db      	ldr	r3, [r3, #12]
 80092f4:	697a      	ldr	r2, [r7, #20]
 80092f6:	0151      	lsls	r1, r2, #5
 80092f8:	69ba      	ldr	r2, [r7, #24]
 80092fa:	440a      	add	r2, r1
 80092fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009300:	f043 0302 	orr.w	r3, r3, #2
 8009304:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	697a      	ldr	r2, [r7, #20]
 800930c:	b2d2      	uxtb	r2, r2
 800930e:	4611      	mov	r1, r2
 8009310:	4618      	mov	r0, r3
 8009312:	f009 f882 	bl	801241a <USB_HC_Halt>
 8009316:	e044      	b.n	80093a2 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8009318:	687a      	ldr	r2, [r7, #4]
 800931a:	697b      	ldr	r3, [r7, #20]
 800931c:	212c      	movs	r1, #44	; 0x2c
 800931e:	fb01 f303 	mul.w	r3, r1, r3
 8009322:	4413      	add	r3, r2
 8009324:	335c      	adds	r3, #92	; 0x5c
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	1c5a      	adds	r2, r3, #1
 800932a:	6879      	ldr	r1, [r7, #4]
 800932c:	697b      	ldr	r3, [r7, #20]
 800932e:	202c      	movs	r0, #44	; 0x2c
 8009330:	fb00 f303 	mul.w	r3, r0, r3
 8009334:	440b      	add	r3, r1
 8009336:	335c      	adds	r3, #92	; 0x5c
 8009338:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800933a:	687a      	ldr	r2, [r7, #4]
 800933c:	697b      	ldr	r3, [r7, #20]
 800933e:	212c      	movs	r1, #44	; 0x2c
 8009340:	fb01 f303 	mul.w	r3, r1, r3
 8009344:	4413      	add	r3, r2
 8009346:	335c      	adds	r3, #92	; 0x5c
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	2b02      	cmp	r3, #2
 800934c:	d920      	bls.n	8009390 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800934e:	687a      	ldr	r2, [r7, #4]
 8009350:	697b      	ldr	r3, [r7, #20]
 8009352:	212c      	movs	r1, #44	; 0x2c
 8009354:	fb01 f303 	mul.w	r3, r1, r3
 8009358:	4413      	add	r3, r2
 800935a:	335c      	adds	r3, #92	; 0x5c
 800935c:	2200      	movs	r2, #0
 800935e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8009360:	687a      	ldr	r2, [r7, #4]
 8009362:	697b      	ldr	r3, [r7, #20]
 8009364:	212c      	movs	r1, #44	; 0x2c
 8009366:	fb01 f303 	mul.w	r3, r1, r3
 800936a:	4413      	add	r3, r2
 800936c:	3360      	adds	r3, #96	; 0x60
 800936e:	2204      	movs	r2, #4
 8009370:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8009372:	697b      	ldr	r3, [r7, #20]
 8009374:	b2d9      	uxtb	r1, r3
 8009376:	687a      	ldr	r2, [r7, #4]
 8009378:	697b      	ldr	r3, [r7, #20]
 800937a:	202c      	movs	r0, #44	; 0x2c
 800937c:	fb00 f303 	mul.w	r3, r0, r3
 8009380:	4413      	add	r3, r2
 8009382:	3360      	adds	r3, #96	; 0x60
 8009384:	781b      	ldrb	r3, [r3, #0]
 8009386:	461a      	mov	r2, r3
 8009388:	6878      	ldr	r0, [r7, #4]
 800938a:	f00e fc99 	bl	8017cc0 <HAL_HCD_HC_NotifyURBChange_Callback>
 800938e:	e008      	b.n	80093a2 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8009390:	687a      	ldr	r2, [r7, #4]
 8009392:	697b      	ldr	r3, [r7, #20]
 8009394:	212c      	movs	r1, #44	; 0x2c
 8009396:	fb01 f303 	mul.w	r3, r1, r3
 800939a:	4413      	add	r3, r2
 800939c:	3360      	adds	r3, #96	; 0x60
 800939e:	2202      	movs	r2, #2
 80093a0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80093a2:	697b      	ldr	r3, [r7, #20]
 80093a4:	015a      	lsls	r2, r3, #5
 80093a6:	69bb      	ldr	r3, [r7, #24]
 80093a8:	4413      	add	r3, r2
 80093aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80093ae:	461a      	mov	r2, r3
 80093b0:	2380      	movs	r3, #128	; 0x80
 80093b2:	6093      	str	r3, [r2, #8]
}
 80093b4:	e197      	b.n	80096e6 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80093b6:	697b      	ldr	r3, [r7, #20]
 80093b8:	015a      	lsls	r2, r3, #5
 80093ba:	69bb      	ldr	r3, [r7, #24]
 80093bc:	4413      	add	r3, r2
 80093be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80093c2:	689b      	ldr	r3, [r3, #8]
 80093c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80093c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80093cc:	d134      	bne.n	8009438 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80093ce:	697b      	ldr	r3, [r7, #20]
 80093d0:	015a      	lsls	r2, r3, #5
 80093d2:	69bb      	ldr	r3, [r7, #24]
 80093d4:	4413      	add	r3, r2
 80093d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80093da:	68db      	ldr	r3, [r3, #12]
 80093dc:	697a      	ldr	r2, [r7, #20]
 80093de:	0151      	lsls	r1, r2, #5
 80093e0:	69ba      	ldr	r2, [r7, #24]
 80093e2:	440a      	add	r2, r1
 80093e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80093e8:	f043 0302 	orr.w	r3, r3, #2
 80093ec:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	697a      	ldr	r2, [r7, #20]
 80093f4:	b2d2      	uxtb	r2, r2
 80093f6:	4611      	mov	r1, r2
 80093f8:	4618      	mov	r0, r3
 80093fa:	f009 f80e 	bl	801241a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80093fe:	697b      	ldr	r3, [r7, #20]
 8009400:	015a      	lsls	r2, r3, #5
 8009402:	69bb      	ldr	r3, [r7, #24]
 8009404:	4413      	add	r3, r2
 8009406:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800940a:	461a      	mov	r2, r3
 800940c:	2310      	movs	r3, #16
 800940e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8009410:	697b      	ldr	r3, [r7, #20]
 8009412:	015a      	lsls	r2, r3, #5
 8009414:	69bb      	ldr	r3, [r7, #24]
 8009416:	4413      	add	r3, r2
 8009418:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800941c:	461a      	mov	r2, r3
 800941e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009422:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8009424:	687a      	ldr	r2, [r7, #4]
 8009426:	697b      	ldr	r3, [r7, #20]
 8009428:	212c      	movs	r1, #44	; 0x2c
 800942a:	fb01 f303 	mul.w	r3, r1, r3
 800942e:	4413      	add	r3, r2
 8009430:	3361      	adds	r3, #97	; 0x61
 8009432:	2208      	movs	r2, #8
 8009434:	701a      	strb	r2, [r3, #0]
}
 8009436:	e156      	b.n	80096e6 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8009438:	697b      	ldr	r3, [r7, #20]
 800943a:	015a      	lsls	r2, r3, #5
 800943c:	69bb      	ldr	r3, [r7, #24]
 800943e:	4413      	add	r3, r2
 8009440:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009444:	689b      	ldr	r3, [r3, #8]
 8009446:	f003 0302 	and.w	r3, r3, #2
 800944a:	2b02      	cmp	r3, #2
 800944c:	f040 814b 	bne.w	80096e6 <HCD_HC_OUT_IRQHandler+0x7f2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8009450:	697b      	ldr	r3, [r7, #20]
 8009452:	015a      	lsls	r2, r3, #5
 8009454:	69bb      	ldr	r3, [r7, #24]
 8009456:	4413      	add	r3, r2
 8009458:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800945c:	68db      	ldr	r3, [r3, #12]
 800945e:	697a      	ldr	r2, [r7, #20]
 8009460:	0151      	lsls	r1, r2, #5
 8009462:	69ba      	ldr	r2, [r7, #24]
 8009464:	440a      	add	r2, r1
 8009466:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800946a:	f023 0302 	bic.w	r3, r3, #2
 800946e:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8009470:	687a      	ldr	r2, [r7, #4]
 8009472:	697b      	ldr	r3, [r7, #20]
 8009474:	212c      	movs	r1, #44	; 0x2c
 8009476:	fb01 f303 	mul.w	r3, r1, r3
 800947a:	4413      	add	r3, r2
 800947c:	3361      	adds	r3, #97	; 0x61
 800947e:	781b      	ldrb	r3, [r3, #0]
 8009480:	2b01      	cmp	r3, #1
 8009482:	d179      	bne.n	8009578 <HCD_HC_OUT_IRQHandler+0x684>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8009484:	687a      	ldr	r2, [r7, #4]
 8009486:	697b      	ldr	r3, [r7, #20]
 8009488:	212c      	movs	r1, #44	; 0x2c
 800948a:	fb01 f303 	mul.w	r3, r1, r3
 800948e:	4413      	add	r3, r2
 8009490:	3360      	adds	r3, #96	; 0x60
 8009492:	2201      	movs	r2, #1
 8009494:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8009496:	687a      	ldr	r2, [r7, #4]
 8009498:	697b      	ldr	r3, [r7, #20]
 800949a:	212c      	movs	r1, #44	; 0x2c
 800949c:	fb01 f303 	mul.w	r3, r1, r3
 80094a0:	4413      	add	r3, r2
 80094a2:	333f      	adds	r3, #63	; 0x3f
 80094a4:	781b      	ldrb	r3, [r3, #0]
 80094a6:	2b02      	cmp	r3, #2
 80094a8:	d00a      	beq.n	80094c0 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80094aa:	687a      	ldr	r2, [r7, #4]
 80094ac:	697b      	ldr	r3, [r7, #20]
 80094ae:	212c      	movs	r1, #44	; 0x2c
 80094b0:	fb01 f303 	mul.w	r3, r1, r3
 80094b4:	4413      	add	r3, r2
 80094b6:	333f      	adds	r3, #63	; 0x3f
 80094b8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80094ba:	2b03      	cmp	r3, #3
 80094bc:	f040 80fc 	bne.w	80096b8 <HCD_HC_OUT_IRQHandler+0x7c4>
        if (hhcd->Init.dma_enable == 1U)
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	691b      	ldr	r3, [r3, #16]
 80094c4:	2b01      	cmp	r3, #1
 80094c6:	d142      	bne.n	800954e <HCD_HC_OUT_IRQHandler+0x65a>
          if (hhcd->hc[ch_num].xfer_len > 0U)
 80094c8:	687a      	ldr	r2, [r7, #4]
 80094ca:	697b      	ldr	r3, [r7, #20]
 80094cc:	212c      	movs	r1, #44	; 0x2c
 80094ce:	fb01 f303 	mul.w	r3, r1, r3
 80094d2:	4413      	add	r3, r2
 80094d4:	334c      	adds	r3, #76	; 0x4c
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	f000 80ed 	beq.w	80096b8 <HCD_HC_OUT_IRQHandler+0x7c4>
            num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80094de:	687a      	ldr	r2, [r7, #4]
 80094e0:	697b      	ldr	r3, [r7, #20]
 80094e2:	212c      	movs	r1, #44	; 0x2c
 80094e4:	fb01 f303 	mul.w	r3, r1, r3
 80094e8:	4413      	add	r3, r2
 80094ea:	334c      	adds	r3, #76	; 0x4c
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	6879      	ldr	r1, [r7, #4]
 80094f0:	697a      	ldr	r2, [r7, #20]
 80094f2:	202c      	movs	r0, #44	; 0x2c
 80094f4:	fb00 f202 	mul.w	r2, r0, r2
 80094f8:	440a      	add	r2, r1
 80094fa:	3240      	adds	r2, #64	; 0x40
 80094fc:	8812      	ldrh	r2, [r2, #0]
 80094fe:	4413      	add	r3, r2
 8009500:	3b01      	subs	r3, #1
 8009502:	6879      	ldr	r1, [r7, #4]
 8009504:	697a      	ldr	r2, [r7, #20]
 8009506:	202c      	movs	r0, #44	; 0x2c
 8009508:	fb00 f202 	mul.w	r2, r0, r2
 800950c:	440a      	add	r2, r1
 800950e:	3240      	adds	r2, #64	; 0x40
 8009510:	8812      	ldrh	r2, [r2, #0]
 8009512:	fbb3 f3f2 	udiv	r3, r3, r2
 8009516:	60fb      	str	r3, [r7, #12]
            if ((num_packets & 1U) != 0U)
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	f003 0301 	and.w	r3, r3, #1
 800951e:	2b00      	cmp	r3, #0
 8009520:	f000 80ca 	beq.w	80096b8 <HCD_HC_OUT_IRQHandler+0x7c4>
              hhcd->hc[ch_num].toggle_out ^= 1U;
 8009524:	687a      	ldr	r2, [r7, #4]
 8009526:	697b      	ldr	r3, [r7, #20]
 8009528:	212c      	movs	r1, #44	; 0x2c
 800952a:	fb01 f303 	mul.w	r3, r1, r3
 800952e:	4413      	add	r3, r2
 8009530:	3355      	adds	r3, #85	; 0x55
 8009532:	781b      	ldrb	r3, [r3, #0]
 8009534:	f083 0301 	eor.w	r3, r3, #1
 8009538:	b2d8      	uxtb	r0, r3
 800953a:	687a      	ldr	r2, [r7, #4]
 800953c:	697b      	ldr	r3, [r7, #20]
 800953e:	212c      	movs	r1, #44	; 0x2c
 8009540:	fb01 f303 	mul.w	r3, r1, r3
 8009544:	4413      	add	r3, r2
 8009546:	3355      	adds	r3, #85	; 0x55
 8009548:	4602      	mov	r2, r0
 800954a:	701a      	strb	r2, [r3, #0]
 800954c:	e0b4      	b.n	80096b8 <HCD_HC_OUT_IRQHandler+0x7c4>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 800954e:	687a      	ldr	r2, [r7, #4]
 8009550:	697b      	ldr	r3, [r7, #20]
 8009552:	212c      	movs	r1, #44	; 0x2c
 8009554:	fb01 f303 	mul.w	r3, r1, r3
 8009558:	4413      	add	r3, r2
 800955a:	3355      	adds	r3, #85	; 0x55
 800955c:	781b      	ldrb	r3, [r3, #0]
 800955e:	f083 0301 	eor.w	r3, r3, #1
 8009562:	b2d8      	uxtb	r0, r3
 8009564:	687a      	ldr	r2, [r7, #4]
 8009566:	697b      	ldr	r3, [r7, #20]
 8009568:	212c      	movs	r1, #44	; 0x2c
 800956a:	fb01 f303 	mul.w	r3, r1, r3
 800956e:	4413      	add	r3, r2
 8009570:	3355      	adds	r3, #85	; 0x55
 8009572:	4602      	mov	r2, r0
 8009574:	701a      	strb	r2, [r3, #0]
 8009576:	e09f      	b.n	80096b8 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8009578:	687a      	ldr	r2, [r7, #4]
 800957a:	697b      	ldr	r3, [r7, #20]
 800957c:	212c      	movs	r1, #44	; 0x2c
 800957e:	fb01 f303 	mul.w	r3, r1, r3
 8009582:	4413      	add	r3, r2
 8009584:	3361      	adds	r3, #97	; 0x61
 8009586:	781b      	ldrb	r3, [r3, #0]
 8009588:	2b03      	cmp	r3, #3
 800958a:	d109      	bne.n	80095a0 <HCD_HC_OUT_IRQHandler+0x6ac>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800958c:	687a      	ldr	r2, [r7, #4]
 800958e:	697b      	ldr	r3, [r7, #20]
 8009590:	212c      	movs	r1, #44	; 0x2c
 8009592:	fb01 f303 	mul.w	r3, r1, r3
 8009596:	4413      	add	r3, r2
 8009598:	3360      	adds	r3, #96	; 0x60
 800959a:	2202      	movs	r2, #2
 800959c:	701a      	strb	r2, [r3, #0]
 800959e:	e08b      	b.n	80096b8 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80095a0:	687a      	ldr	r2, [r7, #4]
 80095a2:	697b      	ldr	r3, [r7, #20]
 80095a4:	212c      	movs	r1, #44	; 0x2c
 80095a6:	fb01 f303 	mul.w	r3, r1, r3
 80095aa:	4413      	add	r3, r2
 80095ac:	3361      	adds	r3, #97	; 0x61
 80095ae:	781b      	ldrb	r3, [r3, #0]
 80095b0:	2b04      	cmp	r3, #4
 80095b2:	d109      	bne.n	80095c8 <HCD_HC_OUT_IRQHandler+0x6d4>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80095b4:	687a      	ldr	r2, [r7, #4]
 80095b6:	697b      	ldr	r3, [r7, #20]
 80095b8:	212c      	movs	r1, #44	; 0x2c
 80095ba:	fb01 f303 	mul.w	r3, r1, r3
 80095be:	4413      	add	r3, r2
 80095c0:	3360      	adds	r3, #96	; 0x60
 80095c2:	2202      	movs	r2, #2
 80095c4:	701a      	strb	r2, [r3, #0]
 80095c6:	e077      	b.n	80096b8 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80095c8:	687a      	ldr	r2, [r7, #4]
 80095ca:	697b      	ldr	r3, [r7, #20]
 80095cc:	212c      	movs	r1, #44	; 0x2c
 80095ce:	fb01 f303 	mul.w	r3, r1, r3
 80095d2:	4413      	add	r3, r2
 80095d4:	3361      	adds	r3, #97	; 0x61
 80095d6:	781b      	ldrb	r3, [r3, #0]
 80095d8:	2b05      	cmp	r3, #5
 80095da:	d109      	bne.n	80095f0 <HCD_HC_OUT_IRQHandler+0x6fc>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80095dc:	687a      	ldr	r2, [r7, #4]
 80095de:	697b      	ldr	r3, [r7, #20]
 80095e0:	212c      	movs	r1, #44	; 0x2c
 80095e2:	fb01 f303 	mul.w	r3, r1, r3
 80095e6:	4413      	add	r3, r2
 80095e8:	3360      	adds	r3, #96	; 0x60
 80095ea:	2205      	movs	r2, #5
 80095ec:	701a      	strb	r2, [r3, #0]
 80095ee:	e063      	b.n	80096b8 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80095f0:	687a      	ldr	r2, [r7, #4]
 80095f2:	697b      	ldr	r3, [r7, #20]
 80095f4:	212c      	movs	r1, #44	; 0x2c
 80095f6:	fb01 f303 	mul.w	r3, r1, r3
 80095fa:	4413      	add	r3, r2
 80095fc:	3361      	adds	r3, #97	; 0x61
 80095fe:	781b      	ldrb	r3, [r3, #0]
 8009600:	2b06      	cmp	r3, #6
 8009602:	d009      	beq.n	8009618 <HCD_HC_OUT_IRQHandler+0x724>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8009604:	687a      	ldr	r2, [r7, #4]
 8009606:	697b      	ldr	r3, [r7, #20]
 8009608:	212c      	movs	r1, #44	; 0x2c
 800960a:	fb01 f303 	mul.w	r3, r1, r3
 800960e:	4413      	add	r3, r2
 8009610:	3361      	adds	r3, #97	; 0x61
 8009612:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8009614:	2b08      	cmp	r3, #8
 8009616:	d14f      	bne.n	80096b8 <HCD_HC_OUT_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt++;
 8009618:	687a      	ldr	r2, [r7, #4]
 800961a:	697b      	ldr	r3, [r7, #20]
 800961c:	212c      	movs	r1, #44	; 0x2c
 800961e:	fb01 f303 	mul.w	r3, r1, r3
 8009622:	4413      	add	r3, r2
 8009624:	335c      	adds	r3, #92	; 0x5c
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	1c5a      	adds	r2, r3, #1
 800962a:	6879      	ldr	r1, [r7, #4]
 800962c:	697b      	ldr	r3, [r7, #20]
 800962e:	202c      	movs	r0, #44	; 0x2c
 8009630:	fb00 f303 	mul.w	r3, r0, r3
 8009634:	440b      	add	r3, r1
 8009636:	335c      	adds	r3, #92	; 0x5c
 8009638:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800963a:	687a      	ldr	r2, [r7, #4]
 800963c:	697b      	ldr	r3, [r7, #20]
 800963e:	212c      	movs	r1, #44	; 0x2c
 8009640:	fb01 f303 	mul.w	r3, r1, r3
 8009644:	4413      	add	r3, r2
 8009646:	335c      	adds	r3, #92	; 0x5c
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	2b02      	cmp	r3, #2
 800964c:	d912      	bls.n	8009674 <HCD_HC_OUT_IRQHandler+0x780>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800964e:	687a      	ldr	r2, [r7, #4]
 8009650:	697b      	ldr	r3, [r7, #20]
 8009652:	212c      	movs	r1, #44	; 0x2c
 8009654:	fb01 f303 	mul.w	r3, r1, r3
 8009658:	4413      	add	r3, r2
 800965a:	335c      	adds	r3, #92	; 0x5c
 800965c:	2200      	movs	r2, #0
 800965e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8009660:	687a      	ldr	r2, [r7, #4]
 8009662:	697b      	ldr	r3, [r7, #20]
 8009664:	212c      	movs	r1, #44	; 0x2c
 8009666:	fb01 f303 	mul.w	r3, r1, r3
 800966a:	4413      	add	r3, r2
 800966c:	3360      	adds	r3, #96	; 0x60
 800966e:	2204      	movs	r2, #4
 8009670:	701a      	strb	r2, [r3, #0]
 8009672:	e021      	b.n	80096b8 <HCD_HC_OUT_IRQHandler+0x7c4>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8009674:	687a      	ldr	r2, [r7, #4]
 8009676:	697b      	ldr	r3, [r7, #20]
 8009678:	212c      	movs	r1, #44	; 0x2c
 800967a:	fb01 f303 	mul.w	r3, r1, r3
 800967e:	4413      	add	r3, r2
 8009680:	3360      	adds	r3, #96	; 0x60
 8009682:	2202      	movs	r2, #2
 8009684:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8009686:	697b      	ldr	r3, [r7, #20]
 8009688:	015a      	lsls	r2, r3, #5
 800968a:	69bb      	ldr	r3, [r7, #24]
 800968c:	4413      	add	r3, r2
 800968e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009696:	693b      	ldr	r3, [r7, #16]
 8009698:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800969c:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800969e:	693b      	ldr	r3, [r7, #16]
 80096a0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80096a4:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80096a6:	697b      	ldr	r3, [r7, #20]
 80096a8:	015a      	lsls	r2, r3, #5
 80096aa:	69bb      	ldr	r3, [r7, #24]
 80096ac:	4413      	add	r3, r2
 80096ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80096b2:	461a      	mov	r2, r3
 80096b4:	693b      	ldr	r3, [r7, #16]
 80096b6:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80096b8:	697b      	ldr	r3, [r7, #20]
 80096ba:	015a      	lsls	r2, r3, #5
 80096bc:	69bb      	ldr	r3, [r7, #24]
 80096be:	4413      	add	r3, r2
 80096c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80096c4:	461a      	mov	r2, r3
 80096c6:	2302      	movs	r3, #2
 80096c8:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80096ca:	697b      	ldr	r3, [r7, #20]
 80096cc:	b2d9      	uxtb	r1, r3
 80096ce:	687a      	ldr	r2, [r7, #4]
 80096d0:	697b      	ldr	r3, [r7, #20]
 80096d2:	202c      	movs	r0, #44	; 0x2c
 80096d4:	fb00 f303 	mul.w	r3, r0, r3
 80096d8:	4413      	add	r3, r2
 80096da:	3360      	adds	r3, #96	; 0x60
 80096dc:	781b      	ldrb	r3, [r3, #0]
 80096de:	461a      	mov	r2, r3
 80096e0:	6878      	ldr	r0, [r7, #4]
 80096e2:	f00e faed 	bl	8017cc0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80096e6:	bf00      	nop
 80096e8:	3720      	adds	r7, #32
 80096ea:	46bd      	mov	sp, r7
 80096ec:	bd80      	pop	{r7, pc}

080096ee <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80096ee:	b580      	push	{r7, lr}
 80096f0:	b08a      	sub	sp, #40	; 0x28
 80096f2:	af00      	add	r7, sp, #0
 80096f4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096fe:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	6a1b      	ldr	r3, [r3, #32]
 8009706:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8009708:	69fb      	ldr	r3, [r7, #28]
 800970a:	f003 030f 	and.w	r3, r3, #15
 800970e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8009710:	69fb      	ldr	r3, [r7, #28]
 8009712:	0c5b      	lsrs	r3, r3, #17
 8009714:	f003 030f 	and.w	r3, r3, #15
 8009718:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800971a:	69fb      	ldr	r3, [r7, #28]
 800971c:	091b      	lsrs	r3, r3, #4
 800971e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009722:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8009724:	697b      	ldr	r3, [r7, #20]
 8009726:	2b02      	cmp	r3, #2
 8009728:	d004      	beq.n	8009734 <HCD_RXQLVL_IRQHandler+0x46>
 800972a:	697b      	ldr	r3, [r7, #20]
 800972c:	2b05      	cmp	r3, #5
 800972e:	f000 80a9 	beq.w	8009884 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8009732:	e0aa      	b.n	800988a <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8009734:	693b      	ldr	r3, [r7, #16]
 8009736:	2b00      	cmp	r3, #0
 8009738:	f000 80a6 	beq.w	8009888 <HCD_RXQLVL_IRQHandler+0x19a>
 800973c:	687a      	ldr	r2, [r7, #4]
 800973e:	69bb      	ldr	r3, [r7, #24]
 8009740:	212c      	movs	r1, #44	; 0x2c
 8009742:	fb01 f303 	mul.w	r3, r1, r3
 8009746:	4413      	add	r3, r2
 8009748:	3344      	adds	r3, #68	; 0x44
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	2b00      	cmp	r3, #0
 800974e:	f000 809b 	beq.w	8009888 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8009752:	687a      	ldr	r2, [r7, #4]
 8009754:	69bb      	ldr	r3, [r7, #24]
 8009756:	212c      	movs	r1, #44	; 0x2c
 8009758:	fb01 f303 	mul.w	r3, r1, r3
 800975c:	4413      	add	r3, r2
 800975e:	3350      	adds	r3, #80	; 0x50
 8009760:	681a      	ldr	r2, [r3, #0]
 8009762:	693b      	ldr	r3, [r7, #16]
 8009764:	441a      	add	r2, r3
 8009766:	6879      	ldr	r1, [r7, #4]
 8009768:	69bb      	ldr	r3, [r7, #24]
 800976a:	202c      	movs	r0, #44	; 0x2c
 800976c:	fb00 f303 	mul.w	r3, r0, r3
 8009770:	440b      	add	r3, r1
 8009772:	334c      	adds	r3, #76	; 0x4c
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	429a      	cmp	r2, r3
 8009778:	d87a      	bhi.n	8009870 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	6818      	ldr	r0, [r3, #0]
 800977e:	687a      	ldr	r2, [r7, #4]
 8009780:	69bb      	ldr	r3, [r7, #24]
 8009782:	212c      	movs	r1, #44	; 0x2c
 8009784:	fb01 f303 	mul.w	r3, r1, r3
 8009788:	4413      	add	r3, r2
 800978a:	3344      	adds	r3, #68	; 0x44
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	693a      	ldr	r2, [r7, #16]
 8009790:	b292      	uxth	r2, r2
 8009792:	4619      	mov	r1, r3
 8009794:	f008 f9eb 	bl	8011b6e <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8009798:	687a      	ldr	r2, [r7, #4]
 800979a:	69bb      	ldr	r3, [r7, #24]
 800979c:	212c      	movs	r1, #44	; 0x2c
 800979e:	fb01 f303 	mul.w	r3, r1, r3
 80097a2:	4413      	add	r3, r2
 80097a4:	3344      	adds	r3, #68	; 0x44
 80097a6:	681a      	ldr	r2, [r3, #0]
 80097a8:	693b      	ldr	r3, [r7, #16]
 80097aa:	441a      	add	r2, r3
 80097ac:	6879      	ldr	r1, [r7, #4]
 80097ae:	69bb      	ldr	r3, [r7, #24]
 80097b0:	202c      	movs	r0, #44	; 0x2c
 80097b2:	fb00 f303 	mul.w	r3, r0, r3
 80097b6:	440b      	add	r3, r1
 80097b8:	3344      	adds	r3, #68	; 0x44
 80097ba:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80097bc:	687a      	ldr	r2, [r7, #4]
 80097be:	69bb      	ldr	r3, [r7, #24]
 80097c0:	212c      	movs	r1, #44	; 0x2c
 80097c2:	fb01 f303 	mul.w	r3, r1, r3
 80097c6:	4413      	add	r3, r2
 80097c8:	3350      	adds	r3, #80	; 0x50
 80097ca:	681a      	ldr	r2, [r3, #0]
 80097cc:	693b      	ldr	r3, [r7, #16]
 80097ce:	441a      	add	r2, r3
 80097d0:	6879      	ldr	r1, [r7, #4]
 80097d2:	69bb      	ldr	r3, [r7, #24]
 80097d4:	202c      	movs	r0, #44	; 0x2c
 80097d6:	fb00 f303 	mul.w	r3, r0, r3
 80097da:	440b      	add	r3, r1
 80097dc:	3350      	adds	r3, #80	; 0x50
 80097de:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80097e0:	69bb      	ldr	r3, [r7, #24]
 80097e2:	015a      	lsls	r2, r3, #5
 80097e4:	6a3b      	ldr	r3, [r7, #32]
 80097e6:	4413      	add	r3, r2
 80097e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80097ec:	691b      	ldr	r3, [r3, #16]
 80097ee:	0cdb      	lsrs	r3, r3, #19
 80097f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80097f4:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80097f6:	687a      	ldr	r2, [r7, #4]
 80097f8:	69bb      	ldr	r3, [r7, #24]
 80097fa:	212c      	movs	r1, #44	; 0x2c
 80097fc:	fb01 f303 	mul.w	r3, r1, r3
 8009800:	4413      	add	r3, r2
 8009802:	3340      	adds	r3, #64	; 0x40
 8009804:	881b      	ldrh	r3, [r3, #0]
 8009806:	461a      	mov	r2, r3
 8009808:	693b      	ldr	r3, [r7, #16]
 800980a:	4293      	cmp	r3, r2
 800980c:	d13c      	bne.n	8009888 <HCD_RXQLVL_IRQHandler+0x19a>
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	2b00      	cmp	r3, #0
 8009812:	d039      	beq.n	8009888 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8009814:	69bb      	ldr	r3, [r7, #24]
 8009816:	015a      	lsls	r2, r3, #5
 8009818:	6a3b      	ldr	r3, [r7, #32]
 800981a:	4413      	add	r3, r2
 800981c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009824:	68bb      	ldr	r3, [r7, #8]
 8009826:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800982a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800982c:	68bb      	ldr	r3, [r7, #8]
 800982e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009832:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8009834:	69bb      	ldr	r3, [r7, #24]
 8009836:	015a      	lsls	r2, r3, #5
 8009838:	6a3b      	ldr	r3, [r7, #32]
 800983a:	4413      	add	r3, r2
 800983c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009840:	461a      	mov	r2, r3
 8009842:	68bb      	ldr	r3, [r7, #8]
 8009844:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8009846:	687a      	ldr	r2, [r7, #4]
 8009848:	69bb      	ldr	r3, [r7, #24]
 800984a:	212c      	movs	r1, #44	; 0x2c
 800984c:	fb01 f303 	mul.w	r3, r1, r3
 8009850:	4413      	add	r3, r2
 8009852:	3354      	adds	r3, #84	; 0x54
 8009854:	781b      	ldrb	r3, [r3, #0]
 8009856:	f083 0301 	eor.w	r3, r3, #1
 800985a:	b2d8      	uxtb	r0, r3
 800985c:	687a      	ldr	r2, [r7, #4]
 800985e:	69bb      	ldr	r3, [r7, #24]
 8009860:	212c      	movs	r1, #44	; 0x2c
 8009862:	fb01 f303 	mul.w	r3, r1, r3
 8009866:	4413      	add	r3, r2
 8009868:	3354      	adds	r3, #84	; 0x54
 800986a:	4602      	mov	r2, r0
 800986c:	701a      	strb	r2, [r3, #0]
      break;
 800986e:	e00b      	b.n	8009888 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8009870:	687a      	ldr	r2, [r7, #4]
 8009872:	69bb      	ldr	r3, [r7, #24]
 8009874:	212c      	movs	r1, #44	; 0x2c
 8009876:	fb01 f303 	mul.w	r3, r1, r3
 800987a:	4413      	add	r3, r2
 800987c:	3360      	adds	r3, #96	; 0x60
 800987e:	2204      	movs	r2, #4
 8009880:	701a      	strb	r2, [r3, #0]
      break;
 8009882:	e001      	b.n	8009888 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8009884:	bf00      	nop
 8009886:	e000      	b.n	800988a <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8009888:	bf00      	nop
  }
}
 800988a:	bf00      	nop
 800988c:	3728      	adds	r7, #40	; 0x28
 800988e:	46bd      	mov	sp, r7
 8009890:	bd80      	pop	{r7, pc}

08009892 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8009892:	b580      	push	{r7, lr}
 8009894:	b086      	sub	sp, #24
 8009896:	af00      	add	r7, sp, #0
 8009898:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098a0:	697b      	ldr	r3, [r7, #20]
 80098a2:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80098a4:	693b      	ldr	r3, [r7, #16]
 80098a6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80098ae:	693b      	ldr	r3, [r7, #16]
 80098b0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80098b8:	68bb      	ldr	r3, [r7, #8]
 80098ba:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80098be:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	f003 0302 	and.w	r3, r3, #2
 80098c6:	2b02      	cmp	r3, #2
 80098c8:	d10b      	bne.n	80098e2 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	f003 0301 	and.w	r3, r3, #1
 80098d0:	2b01      	cmp	r3, #1
 80098d2:	d102      	bne.n	80098da <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80098d4:	6878      	ldr	r0, [r7, #4]
 80098d6:	f00e f9d7 	bl	8017c88 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 80098da:	68bb      	ldr	r3, [r7, #8]
 80098dc:	f043 0302 	orr.w	r3, r3, #2
 80098e0:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	f003 0308 	and.w	r3, r3, #8
 80098e8:	2b08      	cmp	r3, #8
 80098ea:	d132      	bne.n	8009952 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80098ec:	68bb      	ldr	r3, [r7, #8]
 80098ee:	f043 0308 	orr.w	r3, r3, #8
 80098f2:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	f003 0304 	and.w	r3, r3, #4
 80098fa:	2b04      	cmp	r3, #4
 80098fc:	d126      	bne.n	800994c <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	699b      	ldr	r3, [r3, #24]
 8009902:	2b02      	cmp	r3, #2
 8009904:	d113      	bne.n	800992e <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800990c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009910:	d106      	bne.n	8009920 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	2102      	movs	r1, #2
 8009918:	4618      	mov	r0, r3
 800991a:	f008 fa57 	bl	8011dcc <USB_InitFSLSPClkSel>
 800991e:	e011      	b.n	8009944 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	2101      	movs	r1, #1
 8009926:	4618      	mov	r0, r3
 8009928:	f008 fa50 	bl	8011dcc <USB_InitFSLSPClkSel>
 800992c:	e00a      	b.n	8009944 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	68db      	ldr	r3, [r3, #12]
 8009932:	2b01      	cmp	r3, #1
 8009934:	d106      	bne.n	8009944 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8009936:	693b      	ldr	r3, [r7, #16]
 8009938:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800993c:	461a      	mov	r2, r3
 800993e:	f64e 2360 	movw	r3, #60000	; 0xea60
 8009942:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8009944:	6878      	ldr	r0, [r7, #4]
 8009946:	f00e f9cd 	bl	8017ce4 <HAL_HCD_PortEnabled_Callback>
 800994a:	e002      	b.n	8009952 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800994c:	6878      	ldr	r0, [r7, #4]
 800994e:	f00e f9d7 	bl	8017d00 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	f003 0320 	and.w	r3, r3, #32
 8009958:	2b20      	cmp	r3, #32
 800995a:	d103      	bne.n	8009964 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800995c:	68bb      	ldr	r3, [r7, #8]
 800995e:	f043 0320 	orr.w	r3, r3, #32
 8009962:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8009964:	693b      	ldr	r3, [r7, #16]
 8009966:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800996a:	461a      	mov	r2, r3
 800996c:	68bb      	ldr	r3, [r7, #8]
 800996e:	6013      	str	r3, [r2, #0]
}
 8009970:	bf00      	nop
 8009972:	3718      	adds	r7, #24
 8009974:	46bd      	mov	sp, r7
 8009976:	bd80      	pop	{r7, pc}

08009978 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009978:	b580      	push	{r7, lr}
 800997a:	b082      	sub	sp, #8
 800997c:	af00      	add	r7, sp, #0
 800997e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	2b00      	cmp	r3, #0
 8009984:	d101      	bne.n	800998a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009986:	2301      	movs	r3, #1
 8009988:	e07f      	b.n	8009a8a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009990:	b2db      	uxtb	r3, r3
 8009992:	2b00      	cmp	r3, #0
 8009994:	d106      	bne.n	80099a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	2200      	movs	r2, #0
 800999a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800999e:	6878      	ldr	r0, [r7, #4]
 80099a0:	f7f9 fb62 	bl	8003068 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	2224      	movs	r2, #36	; 0x24
 80099a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	681a      	ldr	r2, [r3, #0]
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	f022 0201 	bic.w	r2, r2, #1
 80099ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	685a      	ldr	r2, [r3, #4]
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80099c8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	689a      	ldr	r2, [r3, #8]
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80099d8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	68db      	ldr	r3, [r3, #12]
 80099de:	2b01      	cmp	r3, #1
 80099e0:	d107      	bne.n	80099f2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	689a      	ldr	r2, [r3, #8]
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80099ee:	609a      	str	r2, [r3, #8]
 80099f0:	e006      	b.n	8009a00 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	689a      	ldr	r2, [r3, #8]
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80099fe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	68db      	ldr	r3, [r3, #12]
 8009a04:	2b02      	cmp	r3, #2
 8009a06:	d104      	bne.n	8009a12 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009a10:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	6859      	ldr	r1, [r3, #4]
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681a      	ldr	r2, [r3, #0]
 8009a1c:	4b1d      	ldr	r3, [pc, #116]	; (8009a94 <HAL_I2C_Init+0x11c>)
 8009a1e:	430b      	orrs	r3, r1
 8009a20:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	68da      	ldr	r2, [r3, #12]
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009a30:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	691a      	ldr	r2, [r3, #16]
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	695b      	ldr	r3, [r3, #20]
 8009a3a:	ea42 0103 	orr.w	r1, r2, r3
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	699b      	ldr	r3, [r3, #24]
 8009a42:	021a      	lsls	r2, r3, #8
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	430a      	orrs	r2, r1
 8009a4a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	69d9      	ldr	r1, [r3, #28]
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	6a1a      	ldr	r2, [r3, #32]
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	430a      	orrs	r2, r1
 8009a5a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	681a      	ldr	r2, [r3, #0]
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	f042 0201 	orr.w	r2, r2, #1
 8009a6a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	2200      	movs	r2, #0
 8009a70:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	2220      	movs	r2, #32
 8009a76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	2200      	movs	r2, #0
 8009a7e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	2200      	movs	r2, #0
 8009a84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8009a88:	2300      	movs	r3, #0
}
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	3708      	adds	r7, #8
 8009a8e:	46bd      	mov	sp, r7
 8009a90:	bd80      	pop	{r7, pc}
 8009a92:	bf00      	nop
 8009a94:	02008000 	.word	0x02008000

08009a98 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b082      	sub	sp, #8
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d101      	bne.n	8009aaa <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8009aa6:	2301      	movs	r3, #1
 8009aa8:	e021      	b.n	8009aee <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	2224      	movs	r2, #36	; 0x24
 8009aae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	681a      	ldr	r2, [r3, #0]
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	f022 0201 	bic.w	r2, r2, #1
 8009ac0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8009ac2:	6878      	ldr	r0, [r7, #4]
 8009ac4:	f7f9 fb48 	bl	8003158 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	2200      	movs	r2, #0
 8009acc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	2200      	movs	r2, #0
 8009ad2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	2200      	movs	r2, #0
 8009ada:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	2200      	movs	r2, #0
 8009ae0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	2200      	movs	r2, #0
 8009ae8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009aec:	2300      	movs	r3, #0
}
 8009aee:	4618      	mov	r0, r3
 8009af0:	3708      	adds	r7, #8
 8009af2:	46bd      	mov	sp, r7
 8009af4:	bd80      	pop	{r7, pc}
	...

08009af8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009af8:	b580      	push	{r7, lr}
 8009afa:	b088      	sub	sp, #32
 8009afc:	af02      	add	r7, sp, #8
 8009afe:	60f8      	str	r0, [r7, #12]
 8009b00:	4608      	mov	r0, r1
 8009b02:	4611      	mov	r1, r2
 8009b04:	461a      	mov	r2, r3
 8009b06:	4603      	mov	r3, r0
 8009b08:	817b      	strh	r3, [r7, #10]
 8009b0a:	460b      	mov	r3, r1
 8009b0c:	813b      	strh	r3, [r7, #8]
 8009b0e:	4613      	mov	r3, r2
 8009b10:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009b18:	b2db      	uxtb	r3, r3
 8009b1a:	2b20      	cmp	r3, #32
 8009b1c:	f040 80f9 	bne.w	8009d12 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009b20:	6a3b      	ldr	r3, [r7, #32]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d002      	beq.n	8009b2c <HAL_I2C_Mem_Write+0x34>
 8009b26:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d105      	bne.n	8009b38 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009b32:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8009b34:	2301      	movs	r3, #1
 8009b36:	e0ed      	b.n	8009d14 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009b3e:	2b01      	cmp	r3, #1
 8009b40:	d101      	bne.n	8009b46 <HAL_I2C_Mem_Write+0x4e>
 8009b42:	2302      	movs	r3, #2
 8009b44:	e0e6      	b.n	8009d14 <HAL_I2C_Mem_Write+0x21c>
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	2201      	movs	r2, #1
 8009b4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009b4e:	f7fc f8d5 	bl	8005cfc <HAL_GetTick>
 8009b52:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009b54:	697b      	ldr	r3, [r7, #20]
 8009b56:	9300      	str	r3, [sp, #0]
 8009b58:	2319      	movs	r3, #25
 8009b5a:	2201      	movs	r2, #1
 8009b5c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009b60:	68f8      	ldr	r0, [r7, #12]
 8009b62:	f000 fac3 	bl	800a0ec <I2C_WaitOnFlagUntilTimeout>
 8009b66:	4603      	mov	r3, r0
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d001      	beq.n	8009b70 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8009b6c:	2301      	movs	r3, #1
 8009b6e:	e0d1      	b.n	8009d14 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	2221      	movs	r2, #33	; 0x21
 8009b74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	2240      	movs	r2, #64	; 0x40
 8009b7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	2200      	movs	r2, #0
 8009b84:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	6a3a      	ldr	r2, [r7, #32]
 8009b8a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009b90:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	2200      	movs	r2, #0
 8009b96:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009b98:	88f8      	ldrh	r0, [r7, #6]
 8009b9a:	893a      	ldrh	r2, [r7, #8]
 8009b9c:	8979      	ldrh	r1, [r7, #10]
 8009b9e:	697b      	ldr	r3, [r7, #20]
 8009ba0:	9301      	str	r3, [sp, #4]
 8009ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ba4:	9300      	str	r3, [sp, #0]
 8009ba6:	4603      	mov	r3, r0
 8009ba8:	68f8      	ldr	r0, [r7, #12]
 8009baa:	f000 f9d3 	bl	8009f54 <I2C_RequestMemoryWrite>
 8009bae:	4603      	mov	r3, r0
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d005      	beq.n	8009bc0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8009bbc:	2301      	movs	r3, #1
 8009bbe:	e0a9      	b.n	8009d14 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009bc4:	b29b      	uxth	r3, r3
 8009bc6:	2bff      	cmp	r3, #255	; 0xff
 8009bc8:	d90e      	bls.n	8009be8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	22ff      	movs	r2, #255	; 0xff
 8009bce:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009bd4:	b2da      	uxtb	r2, r3
 8009bd6:	8979      	ldrh	r1, [r7, #10]
 8009bd8:	2300      	movs	r3, #0
 8009bda:	9300      	str	r3, [sp, #0]
 8009bdc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009be0:	68f8      	ldr	r0, [r7, #12]
 8009be2:	f000 fba5 	bl	800a330 <I2C_TransferConfig>
 8009be6:	e00f      	b.n	8009c08 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009bec:	b29a      	uxth	r2, r3
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009bf6:	b2da      	uxtb	r2, r3
 8009bf8:	8979      	ldrh	r1, [r7, #10]
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	9300      	str	r3, [sp, #0]
 8009bfe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009c02:	68f8      	ldr	r0, [r7, #12]
 8009c04:	f000 fb94 	bl	800a330 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009c08:	697a      	ldr	r2, [r7, #20]
 8009c0a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009c0c:	68f8      	ldr	r0, [r7, #12]
 8009c0e:	f000 faad 	bl	800a16c <I2C_WaitOnTXISFlagUntilTimeout>
 8009c12:	4603      	mov	r3, r0
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d001      	beq.n	8009c1c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8009c18:	2301      	movs	r3, #1
 8009c1a:	e07b      	b.n	8009d14 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c20:	781a      	ldrb	r2, [r3, #0]
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c2c:	1c5a      	adds	r2, r3, #1
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c36:	b29b      	uxth	r3, r3
 8009c38:	3b01      	subs	r3, #1
 8009c3a:	b29a      	uxth	r2, r3
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c44:	3b01      	subs	r3, #1
 8009c46:	b29a      	uxth	r2, r3
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c50:	b29b      	uxth	r3, r3
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d034      	beq.n	8009cc0 <HAL_I2C_Mem_Write+0x1c8>
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d130      	bne.n	8009cc0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009c5e:	697b      	ldr	r3, [r7, #20]
 8009c60:	9300      	str	r3, [sp, #0]
 8009c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c64:	2200      	movs	r2, #0
 8009c66:	2180      	movs	r1, #128	; 0x80
 8009c68:	68f8      	ldr	r0, [r7, #12]
 8009c6a:	f000 fa3f 	bl	800a0ec <I2C_WaitOnFlagUntilTimeout>
 8009c6e:	4603      	mov	r3, r0
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d001      	beq.n	8009c78 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8009c74:	2301      	movs	r3, #1
 8009c76:	e04d      	b.n	8009d14 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c7c:	b29b      	uxth	r3, r3
 8009c7e:	2bff      	cmp	r3, #255	; 0xff
 8009c80:	d90e      	bls.n	8009ca0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	22ff      	movs	r2, #255	; 0xff
 8009c86:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c8c:	b2da      	uxtb	r2, r3
 8009c8e:	8979      	ldrh	r1, [r7, #10]
 8009c90:	2300      	movs	r3, #0
 8009c92:	9300      	str	r3, [sp, #0]
 8009c94:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009c98:	68f8      	ldr	r0, [r7, #12]
 8009c9a:	f000 fb49 	bl	800a330 <I2C_TransferConfig>
 8009c9e:	e00f      	b.n	8009cc0 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ca4:	b29a      	uxth	r2, r3
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009cae:	b2da      	uxtb	r2, r3
 8009cb0:	8979      	ldrh	r1, [r7, #10]
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	9300      	str	r3, [sp, #0]
 8009cb6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009cba:	68f8      	ldr	r0, [r7, #12]
 8009cbc:	f000 fb38 	bl	800a330 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009cc4:	b29b      	uxth	r3, r3
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d19e      	bne.n	8009c08 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009cca:	697a      	ldr	r2, [r7, #20]
 8009ccc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009cce:	68f8      	ldr	r0, [r7, #12]
 8009cd0:	f000 fa8c 	bl	800a1ec <I2C_WaitOnSTOPFlagUntilTimeout>
 8009cd4:	4603      	mov	r3, r0
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d001      	beq.n	8009cde <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8009cda:	2301      	movs	r3, #1
 8009cdc:	e01a      	b.n	8009d14 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	2220      	movs	r2, #32
 8009ce4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	6859      	ldr	r1, [r3, #4]
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	681a      	ldr	r2, [r3, #0]
 8009cf0:	4b0a      	ldr	r3, [pc, #40]	; (8009d1c <HAL_I2C_Mem_Write+0x224>)
 8009cf2:	400b      	ands	r3, r1
 8009cf4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	2220      	movs	r2, #32
 8009cfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	2200      	movs	r2, #0
 8009d02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	2200      	movs	r2, #0
 8009d0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009d0e:	2300      	movs	r3, #0
 8009d10:	e000      	b.n	8009d14 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8009d12:	2302      	movs	r3, #2
  }
}
 8009d14:	4618      	mov	r0, r3
 8009d16:	3718      	adds	r7, #24
 8009d18:	46bd      	mov	sp, r7
 8009d1a:	bd80      	pop	{r7, pc}
 8009d1c:	fe00e800 	.word	0xfe00e800

08009d20 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b088      	sub	sp, #32
 8009d24:	af02      	add	r7, sp, #8
 8009d26:	60f8      	str	r0, [r7, #12]
 8009d28:	4608      	mov	r0, r1
 8009d2a:	4611      	mov	r1, r2
 8009d2c:	461a      	mov	r2, r3
 8009d2e:	4603      	mov	r3, r0
 8009d30:	817b      	strh	r3, [r7, #10]
 8009d32:	460b      	mov	r3, r1
 8009d34:	813b      	strh	r3, [r7, #8]
 8009d36:	4613      	mov	r3, r2
 8009d38:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009d40:	b2db      	uxtb	r3, r3
 8009d42:	2b20      	cmp	r3, #32
 8009d44:	f040 80fd 	bne.w	8009f42 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8009d48:	6a3b      	ldr	r3, [r7, #32]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d002      	beq.n	8009d54 <HAL_I2C_Mem_Read+0x34>
 8009d4e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d105      	bne.n	8009d60 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009d5a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8009d5c:	2301      	movs	r3, #1
 8009d5e:	e0f1      	b.n	8009f44 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009d66:	2b01      	cmp	r3, #1
 8009d68:	d101      	bne.n	8009d6e <HAL_I2C_Mem_Read+0x4e>
 8009d6a:	2302      	movs	r3, #2
 8009d6c:	e0ea      	b.n	8009f44 <HAL_I2C_Mem_Read+0x224>
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	2201      	movs	r2, #1
 8009d72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009d76:	f7fb ffc1 	bl	8005cfc <HAL_GetTick>
 8009d7a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009d7c:	697b      	ldr	r3, [r7, #20]
 8009d7e:	9300      	str	r3, [sp, #0]
 8009d80:	2319      	movs	r3, #25
 8009d82:	2201      	movs	r2, #1
 8009d84:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009d88:	68f8      	ldr	r0, [r7, #12]
 8009d8a:	f000 f9af 	bl	800a0ec <I2C_WaitOnFlagUntilTimeout>
 8009d8e:	4603      	mov	r3, r0
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d001      	beq.n	8009d98 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8009d94:	2301      	movs	r3, #1
 8009d96:	e0d5      	b.n	8009f44 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	2222      	movs	r2, #34	; 0x22
 8009d9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	2240      	movs	r2, #64	; 0x40
 8009da4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	2200      	movs	r2, #0
 8009dac:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	6a3a      	ldr	r2, [r7, #32]
 8009db2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009db8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	2200      	movs	r2, #0
 8009dbe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009dc0:	88f8      	ldrh	r0, [r7, #6]
 8009dc2:	893a      	ldrh	r2, [r7, #8]
 8009dc4:	8979      	ldrh	r1, [r7, #10]
 8009dc6:	697b      	ldr	r3, [r7, #20]
 8009dc8:	9301      	str	r3, [sp, #4]
 8009dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dcc:	9300      	str	r3, [sp, #0]
 8009dce:	4603      	mov	r3, r0
 8009dd0:	68f8      	ldr	r0, [r7, #12]
 8009dd2:	f000 f913 	bl	8009ffc <I2C_RequestMemoryRead>
 8009dd6:	4603      	mov	r3, r0
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d005      	beq.n	8009de8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	2200      	movs	r2, #0
 8009de0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8009de4:	2301      	movs	r3, #1
 8009de6:	e0ad      	b.n	8009f44 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009dec:	b29b      	uxth	r3, r3
 8009dee:	2bff      	cmp	r3, #255	; 0xff
 8009df0:	d90e      	bls.n	8009e10 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	22ff      	movs	r2, #255	; 0xff
 8009df6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009dfc:	b2da      	uxtb	r2, r3
 8009dfe:	8979      	ldrh	r1, [r7, #10]
 8009e00:	4b52      	ldr	r3, [pc, #328]	; (8009f4c <HAL_I2C_Mem_Read+0x22c>)
 8009e02:	9300      	str	r3, [sp, #0]
 8009e04:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009e08:	68f8      	ldr	r0, [r7, #12]
 8009e0a:	f000 fa91 	bl	800a330 <I2C_TransferConfig>
 8009e0e:	e00f      	b.n	8009e30 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009e14:	b29a      	uxth	r2, r3
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e1e:	b2da      	uxtb	r2, r3
 8009e20:	8979      	ldrh	r1, [r7, #10]
 8009e22:	4b4a      	ldr	r3, [pc, #296]	; (8009f4c <HAL_I2C_Mem_Read+0x22c>)
 8009e24:	9300      	str	r3, [sp, #0]
 8009e26:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009e2a:	68f8      	ldr	r0, [r7, #12]
 8009e2c:	f000 fa80 	bl	800a330 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8009e30:	697b      	ldr	r3, [r7, #20]
 8009e32:	9300      	str	r3, [sp, #0]
 8009e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e36:	2200      	movs	r2, #0
 8009e38:	2104      	movs	r1, #4
 8009e3a:	68f8      	ldr	r0, [r7, #12]
 8009e3c:	f000 f956 	bl	800a0ec <I2C_WaitOnFlagUntilTimeout>
 8009e40:	4603      	mov	r3, r0
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d001      	beq.n	8009e4a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8009e46:	2301      	movs	r3, #1
 8009e48:	e07c      	b.n	8009f44 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e54:	b2d2      	uxtb	r2, r2
 8009e56:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e5c:	1c5a      	adds	r2, r3, #1
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e66:	3b01      	subs	r3, #1
 8009e68:	b29a      	uxth	r2, r3
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009e72:	b29b      	uxth	r3, r3
 8009e74:	3b01      	subs	r3, #1
 8009e76:	b29a      	uxth	r2, r3
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009e80:	b29b      	uxth	r3, r3
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d034      	beq.n	8009ef0 <HAL_I2C_Mem_Read+0x1d0>
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d130      	bne.n	8009ef0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009e8e:	697b      	ldr	r3, [r7, #20]
 8009e90:	9300      	str	r3, [sp, #0]
 8009e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e94:	2200      	movs	r2, #0
 8009e96:	2180      	movs	r1, #128	; 0x80
 8009e98:	68f8      	ldr	r0, [r7, #12]
 8009e9a:	f000 f927 	bl	800a0ec <I2C_WaitOnFlagUntilTimeout>
 8009e9e:	4603      	mov	r3, r0
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d001      	beq.n	8009ea8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8009ea4:	2301      	movs	r3, #1
 8009ea6:	e04d      	b.n	8009f44 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009eac:	b29b      	uxth	r3, r3
 8009eae:	2bff      	cmp	r3, #255	; 0xff
 8009eb0:	d90e      	bls.n	8009ed0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	22ff      	movs	r2, #255	; 0xff
 8009eb6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ebc:	b2da      	uxtb	r2, r3
 8009ebe:	8979      	ldrh	r1, [r7, #10]
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	9300      	str	r3, [sp, #0]
 8009ec4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009ec8:	68f8      	ldr	r0, [r7, #12]
 8009eca:	f000 fa31 	bl	800a330 <I2C_TransferConfig>
 8009ece:	e00f      	b.n	8009ef0 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ed4:	b29a      	uxth	r2, r3
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ede:	b2da      	uxtb	r2, r3
 8009ee0:	8979      	ldrh	r1, [r7, #10]
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	9300      	str	r3, [sp, #0]
 8009ee6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009eea:	68f8      	ldr	r0, [r7, #12]
 8009eec:	f000 fa20 	bl	800a330 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ef4:	b29b      	uxth	r3, r3
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d19a      	bne.n	8009e30 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009efa:	697a      	ldr	r2, [r7, #20]
 8009efc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009efe:	68f8      	ldr	r0, [r7, #12]
 8009f00:	f000 f974 	bl	800a1ec <I2C_WaitOnSTOPFlagUntilTimeout>
 8009f04:	4603      	mov	r3, r0
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d001      	beq.n	8009f0e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8009f0a:	2301      	movs	r3, #1
 8009f0c:	e01a      	b.n	8009f44 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	2220      	movs	r2, #32
 8009f14:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	6859      	ldr	r1, [r3, #4]
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	681a      	ldr	r2, [r3, #0]
 8009f20:	4b0b      	ldr	r3, [pc, #44]	; (8009f50 <HAL_I2C_Mem_Read+0x230>)
 8009f22:	400b      	ands	r3, r1
 8009f24:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	2220      	movs	r2, #32
 8009f2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	2200      	movs	r2, #0
 8009f32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	2200      	movs	r2, #0
 8009f3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009f3e:	2300      	movs	r3, #0
 8009f40:	e000      	b.n	8009f44 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8009f42:	2302      	movs	r3, #2
  }
}
 8009f44:	4618      	mov	r0, r3
 8009f46:	3718      	adds	r7, #24
 8009f48:	46bd      	mov	sp, r7
 8009f4a:	bd80      	pop	{r7, pc}
 8009f4c:	80002400 	.word	0x80002400
 8009f50:	fe00e800 	.word	0xfe00e800

08009f54 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009f54:	b580      	push	{r7, lr}
 8009f56:	b086      	sub	sp, #24
 8009f58:	af02      	add	r7, sp, #8
 8009f5a:	60f8      	str	r0, [r7, #12]
 8009f5c:	4608      	mov	r0, r1
 8009f5e:	4611      	mov	r1, r2
 8009f60:	461a      	mov	r2, r3
 8009f62:	4603      	mov	r3, r0
 8009f64:	817b      	strh	r3, [r7, #10]
 8009f66:	460b      	mov	r3, r1
 8009f68:	813b      	strh	r3, [r7, #8]
 8009f6a:	4613      	mov	r3, r2
 8009f6c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8009f6e:	88fb      	ldrh	r3, [r7, #6]
 8009f70:	b2da      	uxtb	r2, r3
 8009f72:	8979      	ldrh	r1, [r7, #10]
 8009f74:	4b20      	ldr	r3, [pc, #128]	; (8009ff8 <I2C_RequestMemoryWrite+0xa4>)
 8009f76:	9300      	str	r3, [sp, #0]
 8009f78:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009f7c:	68f8      	ldr	r0, [r7, #12]
 8009f7e:	f000 f9d7 	bl	800a330 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009f82:	69fa      	ldr	r2, [r7, #28]
 8009f84:	69b9      	ldr	r1, [r7, #24]
 8009f86:	68f8      	ldr	r0, [r7, #12]
 8009f88:	f000 f8f0 	bl	800a16c <I2C_WaitOnTXISFlagUntilTimeout>
 8009f8c:	4603      	mov	r3, r0
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d001      	beq.n	8009f96 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8009f92:	2301      	movs	r3, #1
 8009f94:	e02c      	b.n	8009ff0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009f96:	88fb      	ldrh	r3, [r7, #6]
 8009f98:	2b01      	cmp	r3, #1
 8009f9a:	d105      	bne.n	8009fa8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009f9c:	893b      	ldrh	r3, [r7, #8]
 8009f9e:	b2da      	uxtb	r2, r3
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	629a      	str	r2, [r3, #40]	; 0x28
 8009fa6:	e015      	b.n	8009fd4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009fa8:	893b      	ldrh	r3, [r7, #8]
 8009faa:	0a1b      	lsrs	r3, r3, #8
 8009fac:	b29b      	uxth	r3, r3
 8009fae:	b2da      	uxtb	r2, r3
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009fb6:	69fa      	ldr	r2, [r7, #28]
 8009fb8:	69b9      	ldr	r1, [r7, #24]
 8009fba:	68f8      	ldr	r0, [r7, #12]
 8009fbc:	f000 f8d6 	bl	800a16c <I2C_WaitOnTXISFlagUntilTimeout>
 8009fc0:	4603      	mov	r3, r0
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d001      	beq.n	8009fca <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8009fc6:	2301      	movs	r3, #1
 8009fc8:	e012      	b.n	8009ff0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009fca:	893b      	ldrh	r3, [r7, #8]
 8009fcc:	b2da      	uxtb	r2, r3
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8009fd4:	69fb      	ldr	r3, [r7, #28]
 8009fd6:	9300      	str	r3, [sp, #0]
 8009fd8:	69bb      	ldr	r3, [r7, #24]
 8009fda:	2200      	movs	r2, #0
 8009fdc:	2180      	movs	r1, #128	; 0x80
 8009fde:	68f8      	ldr	r0, [r7, #12]
 8009fe0:	f000 f884 	bl	800a0ec <I2C_WaitOnFlagUntilTimeout>
 8009fe4:	4603      	mov	r3, r0
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d001      	beq.n	8009fee <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8009fea:	2301      	movs	r3, #1
 8009fec:	e000      	b.n	8009ff0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8009fee:	2300      	movs	r3, #0
}
 8009ff0:	4618      	mov	r0, r3
 8009ff2:	3710      	adds	r7, #16
 8009ff4:	46bd      	mov	sp, r7
 8009ff6:	bd80      	pop	{r7, pc}
 8009ff8:	80002000 	.word	0x80002000

08009ffc <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009ffc:	b580      	push	{r7, lr}
 8009ffe:	b086      	sub	sp, #24
 800a000:	af02      	add	r7, sp, #8
 800a002:	60f8      	str	r0, [r7, #12]
 800a004:	4608      	mov	r0, r1
 800a006:	4611      	mov	r1, r2
 800a008:	461a      	mov	r2, r3
 800a00a:	4603      	mov	r3, r0
 800a00c:	817b      	strh	r3, [r7, #10]
 800a00e:	460b      	mov	r3, r1
 800a010:	813b      	strh	r3, [r7, #8]
 800a012:	4613      	mov	r3, r2
 800a014:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800a016:	88fb      	ldrh	r3, [r7, #6]
 800a018:	b2da      	uxtb	r2, r3
 800a01a:	8979      	ldrh	r1, [r7, #10]
 800a01c:	4b20      	ldr	r3, [pc, #128]	; (800a0a0 <I2C_RequestMemoryRead+0xa4>)
 800a01e:	9300      	str	r3, [sp, #0]
 800a020:	2300      	movs	r3, #0
 800a022:	68f8      	ldr	r0, [r7, #12]
 800a024:	f000 f984 	bl	800a330 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a028:	69fa      	ldr	r2, [r7, #28]
 800a02a:	69b9      	ldr	r1, [r7, #24]
 800a02c:	68f8      	ldr	r0, [r7, #12]
 800a02e:	f000 f89d 	bl	800a16c <I2C_WaitOnTXISFlagUntilTimeout>
 800a032:	4603      	mov	r3, r0
 800a034:	2b00      	cmp	r3, #0
 800a036:	d001      	beq.n	800a03c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800a038:	2301      	movs	r3, #1
 800a03a:	e02c      	b.n	800a096 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a03c:	88fb      	ldrh	r3, [r7, #6]
 800a03e:	2b01      	cmp	r3, #1
 800a040:	d105      	bne.n	800a04e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a042:	893b      	ldrh	r3, [r7, #8]
 800a044:	b2da      	uxtb	r2, r3
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	629a      	str	r2, [r3, #40]	; 0x28
 800a04c:	e015      	b.n	800a07a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800a04e:	893b      	ldrh	r3, [r7, #8]
 800a050:	0a1b      	lsrs	r3, r3, #8
 800a052:	b29b      	uxth	r3, r3
 800a054:	b2da      	uxtb	r2, r3
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a05c:	69fa      	ldr	r2, [r7, #28]
 800a05e:	69b9      	ldr	r1, [r7, #24]
 800a060:	68f8      	ldr	r0, [r7, #12]
 800a062:	f000 f883 	bl	800a16c <I2C_WaitOnTXISFlagUntilTimeout>
 800a066:	4603      	mov	r3, r0
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d001      	beq.n	800a070 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800a06c:	2301      	movs	r3, #1
 800a06e:	e012      	b.n	800a096 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a070:	893b      	ldrh	r3, [r7, #8]
 800a072:	b2da      	uxtb	r2, r3
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800a07a:	69fb      	ldr	r3, [r7, #28]
 800a07c:	9300      	str	r3, [sp, #0]
 800a07e:	69bb      	ldr	r3, [r7, #24]
 800a080:	2200      	movs	r2, #0
 800a082:	2140      	movs	r1, #64	; 0x40
 800a084:	68f8      	ldr	r0, [r7, #12]
 800a086:	f000 f831 	bl	800a0ec <I2C_WaitOnFlagUntilTimeout>
 800a08a:	4603      	mov	r3, r0
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d001      	beq.n	800a094 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800a090:	2301      	movs	r3, #1
 800a092:	e000      	b.n	800a096 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800a094:	2300      	movs	r3, #0
}
 800a096:	4618      	mov	r0, r3
 800a098:	3710      	adds	r7, #16
 800a09a:	46bd      	mov	sp, r7
 800a09c:	bd80      	pop	{r7, pc}
 800a09e:	bf00      	nop
 800a0a0:	80002000 	.word	0x80002000

0800a0a4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800a0a4:	b480      	push	{r7}
 800a0a6:	b083      	sub	sp, #12
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	699b      	ldr	r3, [r3, #24]
 800a0b2:	f003 0302 	and.w	r3, r3, #2
 800a0b6:	2b02      	cmp	r3, #2
 800a0b8:	d103      	bne.n	800a0c2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	2200      	movs	r2, #0
 800a0c0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	699b      	ldr	r3, [r3, #24]
 800a0c8:	f003 0301 	and.w	r3, r3, #1
 800a0cc:	2b01      	cmp	r3, #1
 800a0ce:	d007      	beq.n	800a0e0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	699a      	ldr	r2, [r3, #24]
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	f042 0201 	orr.w	r2, r2, #1
 800a0de:	619a      	str	r2, [r3, #24]
  }
}
 800a0e0:	bf00      	nop
 800a0e2:	370c      	adds	r7, #12
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ea:	4770      	bx	lr

0800a0ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	b084      	sub	sp, #16
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	60f8      	str	r0, [r7, #12]
 800a0f4:	60b9      	str	r1, [r7, #8]
 800a0f6:	603b      	str	r3, [r7, #0]
 800a0f8:	4613      	mov	r3, r2
 800a0fa:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a0fc:	e022      	b.n	800a144 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a0fe:	683b      	ldr	r3, [r7, #0]
 800a100:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a104:	d01e      	beq.n	800a144 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a106:	f7fb fdf9 	bl	8005cfc <HAL_GetTick>
 800a10a:	4602      	mov	r2, r0
 800a10c:	69bb      	ldr	r3, [r7, #24]
 800a10e:	1ad3      	subs	r3, r2, r3
 800a110:	683a      	ldr	r2, [r7, #0]
 800a112:	429a      	cmp	r2, r3
 800a114:	d302      	bcc.n	800a11c <I2C_WaitOnFlagUntilTimeout+0x30>
 800a116:	683b      	ldr	r3, [r7, #0]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d113      	bne.n	800a144 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a120:	f043 0220 	orr.w	r2, r3, #32
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	2220      	movs	r2, #32
 800a12c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	2200      	movs	r2, #0
 800a134:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	2200      	movs	r2, #0
 800a13c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800a140:	2301      	movs	r3, #1
 800a142:	e00f      	b.n	800a164 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	699a      	ldr	r2, [r3, #24]
 800a14a:	68bb      	ldr	r3, [r7, #8]
 800a14c:	4013      	ands	r3, r2
 800a14e:	68ba      	ldr	r2, [r7, #8]
 800a150:	429a      	cmp	r2, r3
 800a152:	bf0c      	ite	eq
 800a154:	2301      	moveq	r3, #1
 800a156:	2300      	movne	r3, #0
 800a158:	b2db      	uxtb	r3, r3
 800a15a:	461a      	mov	r2, r3
 800a15c:	79fb      	ldrb	r3, [r7, #7]
 800a15e:	429a      	cmp	r2, r3
 800a160:	d0cd      	beq.n	800a0fe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a162:	2300      	movs	r3, #0
}
 800a164:	4618      	mov	r0, r3
 800a166:	3710      	adds	r7, #16
 800a168:	46bd      	mov	sp, r7
 800a16a:	bd80      	pop	{r7, pc}

0800a16c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a16c:	b580      	push	{r7, lr}
 800a16e:	b084      	sub	sp, #16
 800a170:	af00      	add	r7, sp, #0
 800a172:	60f8      	str	r0, [r7, #12]
 800a174:	60b9      	str	r1, [r7, #8]
 800a176:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a178:	e02c      	b.n	800a1d4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800a17a:	687a      	ldr	r2, [r7, #4]
 800a17c:	68b9      	ldr	r1, [r7, #8]
 800a17e:	68f8      	ldr	r0, [r7, #12]
 800a180:	f000 f870 	bl	800a264 <I2C_IsAcknowledgeFailed>
 800a184:	4603      	mov	r3, r0
 800a186:	2b00      	cmp	r3, #0
 800a188:	d001      	beq.n	800a18e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a18a:	2301      	movs	r3, #1
 800a18c:	e02a      	b.n	800a1e4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a18e:	68bb      	ldr	r3, [r7, #8]
 800a190:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a194:	d01e      	beq.n	800a1d4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a196:	f7fb fdb1 	bl	8005cfc <HAL_GetTick>
 800a19a:	4602      	mov	r2, r0
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	1ad3      	subs	r3, r2, r3
 800a1a0:	68ba      	ldr	r2, [r7, #8]
 800a1a2:	429a      	cmp	r2, r3
 800a1a4:	d302      	bcc.n	800a1ac <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800a1a6:	68bb      	ldr	r3, [r7, #8]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d113      	bne.n	800a1d4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1b0:	f043 0220 	orr.w	r2, r3, #32
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	2220      	movs	r2, #32
 800a1bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	2200      	movs	r2, #0
 800a1cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800a1d0:	2301      	movs	r3, #1
 800a1d2:	e007      	b.n	800a1e4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	699b      	ldr	r3, [r3, #24]
 800a1da:	f003 0302 	and.w	r3, r3, #2
 800a1de:	2b02      	cmp	r3, #2
 800a1e0:	d1cb      	bne.n	800a17a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a1e2:	2300      	movs	r3, #0
}
 800a1e4:	4618      	mov	r0, r3
 800a1e6:	3710      	adds	r7, #16
 800a1e8:	46bd      	mov	sp, r7
 800a1ea:	bd80      	pop	{r7, pc}

0800a1ec <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a1ec:	b580      	push	{r7, lr}
 800a1ee:	b084      	sub	sp, #16
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	60f8      	str	r0, [r7, #12]
 800a1f4:	60b9      	str	r1, [r7, #8]
 800a1f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a1f8:	e028      	b.n	800a24c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800a1fa:	687a      	ldr	r2, [r7, #4]
 800a1fc:	68b9      	ldr	r1, [r7, #8]
 800a1fe:	68f8      	ldr	r0, [r7, #12]
 800a200:	f000 f830 	bl	800a264 <I2C_IsAcknowledgeFailed>
 800a204:	4603      	mov	r3, r0
 800a206:	2b00      	cmp	r3, #0
 800a208:	d001      	beq.n	800a20e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a20a:	2301      	movs	r3, #1
 800a20c:	e026      	b.n	800a25c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a20e:	f7fb fd75 	bl	8005cfc <HAL_GetTick>
 800a212:	4602      	mov	r2, r0
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	1ad3      	subs	r3, r2, r3
 800a218:	68ba      	ldr	r2, [r7, #8]
 800a21a:	429a      	cmp	r2, r3
 800a21c:	d302      	bcc.n	800a224 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800a21e:	68bb      	ldr	r3, [r7, #8]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d113      	bne.n	800a24c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a228:	f043 0220 	orr.w	r2, r3, #32
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	2220      	movs	r2, #32
 800a234:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	2200      	movs	r2, #0
 800a23c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	2200      	movs	r2, #0
 800a244:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800a248:	2301      	movs	r3, #1
 800a24a:	e007      	b.n	800a25c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	699b      	ldr	r3, [r3, #24]
 800a252:	f003 0320 	and.w	r3, r3, #32
 800a256:	2b20      	cmp	r3, #32
 800a258:	d1cf      	bne.n	800a1fa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800a25a:	2300      	movs	r3, #0
}
 800a25c:	4618      	mov	r0, r3
 800a25e:	3710      	adds	r7, #16
 800a260:	46bd      	mov	sp, r7
 800a262:	bd80      	pop	{r7, pc}

0800a264 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a264:	b580      	push	{r7, lr}
 800a266:	b084      	sub	sp, #16
 800a268:	af00      	add	r7, sp, #0
 800a26a:	60f8      	str	r0, [r7, #12]
 800a26c:	60b9      	str	r1, [r7, #8]
 800a26e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	699b      	ldr	r3, [r3, #24]
 800a276:	f003 0310 	and.w	r3, r3, #16
 800a27a:	2b10      	cmp	r3, #16
 800a27c:	d151      	bne.n	800a322 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a27e:	e022      	b.n	800a2c6 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800a280:	68bb      	ldr	r3, [r7, #8]
 800a282:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a286:	d01e      	beq.n	800a2c6 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a288:	f7fb fd38 	bl	8005cfc <HAL_GetTick>
 800a28c:	4602      	mov	r2, r0
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	1ad3      	subs	r3, r2, r3
 800a292:	68ba      	ldr	r2, [r7, #8]
 800a294:	429a      	cmp	r2, r3
 800a296:	d302      	bcc.n	800a29e <I2C_IsAcknowledgeFailed+0x3a>
 800a298:	68bb      	ldr	r3, [r7, #8]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d113      	bne.n	800a2c6 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2a2:	f043 0220 	orr.w	r2, r3, #32
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	2220      	movs	r2, #32
 800a2ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	2200      	movs	r2, #0
 800a2b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	2200      	movs	r2, #0
 800a2be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800a2c2:	2301      	movs	r3, #1
 800a2c4:	e02e      	b.n	800a324 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	699b      	ldr	r3, [r3, #24]
 800a2cc:	f003 0320 	and.w	r3, r3, #32
 800a2d0:	2b20      	cmp	r3, #32
 800a2d2:	d1d5      	bne.n	800a280 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	2210      	movs	r2, #16
 800a2da:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	2220      	movs	r2, #32
 800a2e2:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800a2e4:	68f8      	ldr	r0, [r7, #12]
 800a2e6:	f7ff fedd 	bl	800a0a4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	6859      	ldr	r1, [r3, #4]
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	681a      	ldr	r2, [r3, #0]
 800a2f4:	4b0d      	ldr	r3, [pc, #52]	; (800a32c <I2C_IsAcknowledgeFailed+0xc8>)
 800a2f6:	400b      	ands	r3, r1
 800a2f8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2fe:	f043 0204 	orr.w	r2, r3, #4
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	2220      	movs	r2, #32
 800a30a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	2200      	movs	r2, #0
 800a312:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	2200      	movs	r2, #0
 800a31a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800a31e:	2301      	movs	r3, #1
 800a320:	e000      	b.n	800a324 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800a322:	2300      	movs	r3, #0
}
 800a324:	4618      	mov	r0, r3
 800a326:	3710      	adds	r7, #16
 800a328:	46bd      	mov	sp, r7
 800a32a:	bd80      	pop	{r7, pc}
 800a32c:	fe00e800 	.word	0xfe00e800

0800a330 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800a330:	b480      	push	{r7}
 800a332:	b085      	sub	sp, #20
 800a334:	af00      	add	r7, sp, #0
 800a336:	60f8      	str	r0, [r7, #12]
 800a338:	607b      	str	r3, [r7, #4]
 800a33a:	460b      	mov	r3, r1
 800a33c:	817b      	strh	r3, [r7, #10]
 800a33e:	4613      	mov	r3, r2
 800a340:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	685a      	ldr	r2, [r3, #4]
 800a348:	69bb      	ldr	r3, [r7, #24]
 800a34a:	0d5b      	lsrs	r3, r3, #21
 800a34c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800a350:	4b0d      	ldr	r3, [pc, #52]	; (800a388 <I2C_TransferConfig+0x58>)
 800a352:	430b      	orrs	r3, r1
 800a354:	43db      	mvns	r3, r3
 800a356:	ea02 0103 	and.w	r1, r2, r3
 800a35a:	897b      	ldrh	r3, [r7, #10]
 800a35c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800a360:	7a7b      	ldrb	r3, [r7, #9]
 800a362:	041b      	lsls	r3, r3, #16
 800a364:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a368:	431a      	orrs	r2, r3
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	431a      	orrs	r2, r3
 800a36e:	69bb      	ldr	r3, [r7, #24]
 800a370:	431a      	orrs	r2, r3
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	430a      	orrs	r2, r1
 800a378:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800a37a:	bf00      	nop
 800a37c:	3714      	adds	r7, #20
 800a37e:	46bd      	mov	sp, r7
 800a380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a384:	4770      	bx	lr
 800a386:	bf00      	nop
 800a388:	03ff63ff 	.word	0x03ff63ff

0800a38c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800a38c:	b480      	push	{r7}
 800a38e:	b083      	sub	sp, #12
 800a390:	af00      	add	r7, sp, #0
 800a392:	6078      	str	r0, [r7, #4]
 800a394:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a39c:	b2db      	uxtb	r3, r3
 800a39e:	2b20      	cmp	r3, #32
 800a3a0:	d138      	bne.n	800a414 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a3a8:	2b01      	cmp	r3, #1
 800a3aa:	d101      	bne.n	800a3b0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800a3ac:	2302      	movs	r3, #2
 800a3ae:	e032      	b.n	800a416 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	2201      	movs	r2, #1
 800a3b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	2224      	movs	r2, #36	; 0x24
 800a3bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	681a      	ldr	r2, [r3, #0]
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	f022 0201 	bic.w	r2, r2, #1
 800a3ce:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	681a      	ldr	r2, [r3, #0]
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a3de:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	6819      	ldr	r1, [r3, #0]
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	683a      	ldr	r2, [r7, #0]
 800a3ec:	430a      	orrs	r2, r1
 800a3ee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	681a      	ldr	r2, [r3, #0]
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	f042 0201 	orr.w	r2, r2, #1
 800a3fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	2220      	movs	r2, #32
 800a404:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	2200      	movs	r2, #0
 800a40c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a410:	2300      	movs	r3, #0
 800a412:	e000      	b.n	800a416 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a414:	2302      	movs	r3, #2
  }
}
 800a416:	4618      	mov	r0, r3
 800a418:	370c      	adds	r7, #12
 800a41a:	46bd      	mov	sp, r7
 800a41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a420:	4770      	bx	lr

0800a422 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800a422:	b480      	push	{r7}
 800a424:	b085      	sub	sp, #20
 800a426:	af00      	add	r7, sp, #0
 800a428:	6078      	str	r0, [r7, #4]
 800a42a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a432:	b2db      	uxtb	r3, r3
 800a434:	2b20      	cmp	r3, #32
 800a436:	d139      	bne.n	800a4ac <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a43e:	2b01      	cmp	r3, #1
 800a440:	d101      	bne.n	800a446 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800a442:	2302      	movs	r3, #2
 800a444:	e033      	b.n	800a4ae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	2201      	movs	r2, #1
 800a44a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	2224      	movs	r2, #36	; 0x24
 800a452:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	681a      	ldr	r2, [r3, #0]
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	f022 0201 	bic.w	r2, r2, #1
 800a464:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800a474:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800a476:	683b      	ldr	r3, [r7, #0]
 800a478:	021b      	lsls	r3, r3, #8
 800a47a:	68fa      	ldr	r2, [r7, #12]
 800a47c:	4313      	orrs	r3, r2
 800a47e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	68fa      	ldr	r2, [r7, #12]
 800a486:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	681a      	ldr	r2, [r3, #0]
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	f042 0201 	orr.w	r2, r2, #1
 800a496:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	2220      	movs	r2, #32
 800a49c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	2200      	movs	r2, #0
 800a4a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a4a8:	2300      	movs	r3, #0
 800a4aa:	e000      	b.n	800a4ae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800a4ac:	2302      	movs	r3, #2
  }
}
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	3714      	adds	r7, #20
 800a4b2:	46bd      	mov	sp, r7
 800a4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b8:	4770      	bx	lr
	...

0800a4bc <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800a4bc:	b580      	push	{r7, lr}
 800a4be:	b084      	sub	sp, #16
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d101      	bne.n	800a4ce <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800a4ca:	2301      	movs	r3, #1
 800a4cc:	e0bf      	b.n	800a64e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800a4d4:	b2db      	uxtb	r3, r3
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d106      	bne.n	800a4e8 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	2200      	movs	r2, #0
 800a4de:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800a4e2:	6878      	ldr	r0, [r7, #4]
 800a4e4:	f7f8 fe74 	bl	80031d0 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	2202      	movs	r2, #2
 800a4ec:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	699a      	ldr	r2, [r3, #24]
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800a4fe:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	6999      	ldr	r1, [r3, #24]
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	685a      	ldr	r2, [r3, #4]
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	689b      	ldr	r3, [r3, #8]
 800a50e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800a514:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	691b      	ldr	r3, [r3, #16]
 800a51a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	430a      	orrs	r2, r1
 800a522:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	6899      	ldr	r1, [r3, #8]
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	681a      	ldr	r2, [r3, #0]
 800a52e:	4b4a      	ldr	r3, [pc, #296]	; (800a658 <HAL_LTDC_Init+0x19c>)
 800a530:	400b      	ands	r3, r1
 800a532:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	695b      	ldr	r3, [r3, #20]
 800a538:	041b      	lsls	r3, r3, #16
 800a53a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	6899      	ldr	r1, [r3, #8]
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	699a      	ldr	r2, [r3, #24]
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	431a      	orrs	r2, r3
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	430a      	orrs	r2, r1
 800a550:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	68d9      	ldr	r1, [r3, #12]
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681a      	ldr	r2, [r3, #0]
 800a55c:	4b3e      	ldr	r3, [pc, #248]	; (800a658 <HAL_LTDC_Init+0x19c>)
 800a55e:	400b      	ands	r3, r1
 800a560:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	69db      	ldr	r3, [r3, #28]
 800a566:	041b      	lsls	r3, r3, #16
 800a568:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	68d9      	ldr	r1, [r3, #12]
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	6a1a      	ldr	r2, [r3, #32]
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	431a      	orrs	r2, r3
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	430a      	orrs	r2, r1
 800a57e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	6919      	ldr	r1, [r3, #16]
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	681a      	ldr	r2, [r3, #0]
 800a58a:	4b33      	ldr	r3, [pc, #204]	; (800a658 <HAL_LTDC_Init+0x19c>)
 800a58c:	400b      	ands	r3, r1
 800a58e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a594:	041b      	lsls	r3, r3, #16
 800a596:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	6919      	ldr	r1, [r3, #16]
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	431a      	orrs	r2, r3
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	430a      	orrs	r2, r1
 800a5ac:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	6959      	ldr	r1, [r3, #20]
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	681a      	ldr	r2, [r3, #0]
 800a5b8:	4b27      	ldr	r3, [pc, #156]	; (800a658 <HAL_LTDC_Init+0x19c>)
 800a5ba:	400b      	ands	r3, r1
 800a5bc:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5c2:	041b      	lsls	r3, r3, #16
 800a5c4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	6959      	ldr	r1, [r3, #20]
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	431a      	orrs	r2, r3
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	430a      	orrs	r2, r1
 800a5da:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a5e2:	021b      	lsls	r3, r3, #8
 800a5e4:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800a5ec:	041b      	lsls	r3, r3, #16
 800a5ee:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800a5fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a606:	68ba      	ldr	r2, [r7, #8]
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	4313      	orrs	r3, r2
 800a60c:	687a      	ldr	r2, [r7, #4]
 800a60e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800a612:	431a      	orrs	r2, r3
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	430a      	orrs	r2, r1
 800a61a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	f042 0206 	orr.w	r2, r2, #6
 800a62a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	699a      	ldr	r2, [r3, #24]
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	f042 0201 	orr.w	r2, r2, #1
 800a63a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	2200      	movs	r2, #0
 800a640:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	2201      	movs	r2, #1
 800a648:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800a64c:	2300      	movs	r3, #0
}
 800a64e:	4618      	mov	r0, r3
 800a650:	3710      	adds	r7, #16
 800a652:	46bd      	mov	sp, r7
 800a654:	bd80      	pop	{r7, pc}
 800a656:	bf00      	nop
 800a658:	f000f800 	.word	0xf000f800

0800a65c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800a65c:	b5b0      	push	{r4, r5, r7, lr}
 800a65e:	b084      	sub	sp, #16
 800a660:	af00      	add	r7, sp, #0
 800a662:	60f8      	str	r0, [r7, #12]
 800a664:	60b9      	str	r1, [r7, #8]
 800a666:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800a66e:	2b01      	cmp	r3, #1
 800a670:	d101      	bne.n	800a676 <HAL_LTDC_ConfigLayer+0x1a>
 800a672:	2302      	movs	r3, #2
 800a674:	e02c      	b.n	800a6d0 <HAL_LTDC_ConfigLayer+0x74>
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	2201      	movs	r2, #1
 800a67a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	2202      	movs	r2, #2
 800a682:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800a686:	68fa      	ldr	r2, [r7, #12]
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	2134      	movs	r1, #52	; 0x34
 800a68c:	fb01 f303 	mul.w	r3, r1, r3
 800a690:	4413      	add	r3, r2
 800a692:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800a696:	68bb      	ldr	r3, [r7, #8]
 800a698:	4614      	mov	r4, r2
 800a69a:	461d      	mov	r5, r3
 800a69c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a69e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a6a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a6a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a6a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a6a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a6a8:	682b      	ldr	r3, [r5, #0]
 800a6aa:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800a6ac:	687a      	ldr	r2, [r7, #4]
 800a6ae:	68b9      	ldr	r1, [r7, #8]
 800a6b0:	68f8      	ldr	r0, [r7, #12]
 800a6b2:	f000 f847 	bl	800a744 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	2201      	movs	r2, #1
 800a6bc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	2201      	movs	r2, #1
 800a6c2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	2200      	movs	r2, #0
 800a6ca:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800a6ce:	2300      	movs	r3, #0
}
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	3710      	adds	r7, #16
 800a6d4:	46bd      	mov	sp, r7
 800a6d6:	bdb0      	pop	{r4, r5, r7, pc}

0800a6d8 <HAL_LTDC_SetAddress>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1).
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetAddress(LTDC_HandleTypeDef *hltdc, uint32_t Address, uint32_t LayerIdx)
{
 800a6d8:	b580      	push	{r7, lr}
 800a6da:	b086      	sub	sp, #24
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	60f8      	str	r0, [r7, #12]
 800a6e0:	60b9      	str	r1, [r7, #8]
 800a6e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800a6ea:	2b01      	cmp	r3, #1
 800a6ec:	d101      	bne.n	800a6f2 <HAL_LTDC_SetAddress+0x1a>
 800a6ee:	2302      	movs	r3, #2
 800a6f0:	e024      	b.n	800a73c <HAL_LTDC_SetAddress+0x64>
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	2201      	movs	r2, #1
 800a6f6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	2202      	movs	r2, #2
 800a6fe:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	2234      	movs	r2, #52	; 0x34
 800a706:	fb02 f303 	mul.w	r3, r2, r3
 800a70a:	3338      	adds	r3, #56	; 0x38
 800a70c:	68fa      	ldr	r2, [r7, #12]
 800a70e:	4413      	add	r3, r2
 800a710:	617b      	str	r3, [r7, #20]

  /* Reconfigure the Address */
  pLayerCfg->FBStartAdress = Address;
 800a712:	697b      	ldr	r3, [r7, #20]
 800a714:	68ba      	ldr	r2, [r7, #8]
 800a716:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800a718:	687a      	ldr	r2, [r7, #4]
 800a71a:	6979      	ldr	r1, [r7, #20]
 800a71c:	68f8      	ldr	r0, [r7, #12]
 800a71e:	f000 f811 	bl	800a744 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	2201      	movs	r2, #1
 800a728:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	2201      	movs	r2, #1
 800a72e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	2200      	movs	r2, #0
 800a736:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800a73a:	2300      	movs	r3, #0
}
 800a73c:	4618      	mov	r0, r3
 800a73e:	3718      	adds	r7, #24
 800a740:	46bd      	mov	sp, r7
 800a742:	bd80      	pop	{r7, pc}

0800a744 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800a744:	b480      	push	{r7}
 800a746:	b089      	sub	sp, #36	; 0x24
 800a748:	af00      	add	r7, sp, #0
 800a74a:	60f8      	str	r0, [r7, #12]
 800a74c:	60b9      	str	r1, [r7, #8]
 800a74e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800a750:	68bb      	ldr	r3, [r7, #8]
 800a752:	685a      	ldr	r2, [r3, #4]
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	68db      	ldr	r3, [r3, #12]
 800a75a:	0c1b      	lsrs	r3, r3, #16
 800a75c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a760:	4413      	add	r3, r2
 800a762:	041b      	lsls	r3, r3, #16
 800a764:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	461a      	mov	r2, r3
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	01db      	lsls	r3, r3, #7
 800a770:	4413      	add	r3, r2
 800a772:	3384      	adds	r3, #132	; 0x84
 800a774:	685b      	ldr	r3, [r3, #4]
 800a776:	68fa      	ldr	r2, [r7, #12]
 800a778:	6812      	ldr	r2, [r2, #0]
 800a77a:	4611      	mov	r1, r2
 800a77c:	687a      	ldr	r2, [r7, #4]
 800a77e:	01d2      	lsls	r2, r2, #7
 800a780:	440a      	add	r2, r1
 800a782:	3284      	adds	r2, #132	; 0x84
 800a784:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800a788:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800a78a:	68bb      	ldr	r3, [r7, #8]
 800a78c:	681a      	ldr	r2, [r3, #0]
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	68db      	ldr	r3, [r3, #12]
 800a794:	0c1b      	lsrs	r3, r3, #16
 800a796:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a79a:	4413      	add	r3, r2
 800a79c:	1c5a      	adds	r2, r3, #1
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	4619      	mov	r1, r3
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	01db      	lsls	r3, r3, #7
 800a7a8:	440b      	add	r3, r1
 800a7aa:	3384      	adds	r3, #132	; 0x84
 800a7ac:	4619      	mov	r1, r3
 800a7ae:	69fb      	ldr	r3, [r7, #28]
 800a7b0:	4313      	orrs	r3, r2
 800a7b2:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800a7b4:	68bb      	ldr	r3, [r7, #8]
 800a7b6:	68da      	ldr	r2, [r3, #12]
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	68db      	ldr	r3, [r3, #12]
 800a7be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a7c2:	4413      	add	r3, r2
 800a7c4:	041b      	lsls	r3, r3, #16
 800a7c6:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	461a      	mov	r2, r3
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	01db      	lsls	r3, r3, #7
 800a7d2:	4413      	add	r3, r2
 800a7d4:	3384      	adds	r3, #132	; 0x84
 800a7d6:	689b      	ldr	r3, [r3, #8]
 800a7d8:	68fa      	ldr	r2, [r7, #12]
 800a7da:	6812      	ldr	r2, [r2, #0]
 800a7dc:	4611      	mov	r1, r2
 800a7de:	687a      	ldr	r2, [r7, #4]
 800a7e0:	01d2      	lsls	r2, r2, #7
 800a7e2:	440a      	add	r2, r1
 800a7e4:	3284      	adds	r2, #132	; 0x84
 800a7e6:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800a7ea:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800a7ec:	68bb      	ldr	r3, [r7, #8]
 800a7ee:	689a      	ldr	r2, [r3, #8]
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	68db      	ldr	r3, [r3, #12]
 800a7f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a7fa:	4413      	add	r3, r2
 800a7fc:	1c5a      	adds	r2, r3, #1
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	4619      	mov	r1, r3
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	01db      	lsls	r3, r3, #7
 800a808:	440b      	add	r3, r1
 800a80a:	3384      	adds	r3, #132	; 0x84
 800a80c:	4619      	mov	r1, r3
 800a80e:	69fb      	ldr	r3, [r7, #28]
 800a810:	4313      	orrs	r3, r2
 800a812:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	461a      	mov	r2, r3
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	01db      	lsls	r3, r3, #7
 800a81e:	4413      	add	r3, r2
 800a820:	3384      	adds	r3, #132	; 0x84
 800a822:	691b      	ldr	r3, [r3, #16]
 800a824:	68fa      	ldr	r2, [r7, #12]
 800a826:	6812      	ldr	r2, [r2, #0]
 800a828:	4611      	mov	r1, r2
 800a82a:	687a      	ldr	r2, [r7, #4]
 800a82c:	01d2      	lsls	r2, r2, #7
 800a82e:	440a      	add	r2, r1
 800a830:	3284      	adds	r2, #132	; 0x84
 800a832:	f023 0307 	bic.w	r3, r3, #7
 800a836:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	461a      	mov	r2, r3
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	01db      	lsls	r3, r3, #7
 800a842:	4413      	add	r3, r2
 800a844:	3384      	adds	r3, #132	; 0x84
 800a846:	461a      	mov	r2, r3
 800a848:	68bb      	ldr	r3, [r7, #8]
 800a84a:	691b      	ldr	r3, [r3, #16]
 800a84c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800a84e:	68bb      	ldr	r3, [r7, #8]
 800a850:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a854:	021b      	lsls	r3, r3, #8
 800a856:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800a858:	68bb      	ldr	r3, [r7, #8]
 800a85a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800a85e:	041b      	lsls	r3, r3, #16
 800a860:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800a862:	68bb      	ldr	r3, [r7, #8]
 800a864:	699b      	ldr	r3, [r3, #24]
 800a866:	061b      	lsls	r3, r3, #24
 800a868:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	461a      	mov	r2, r3
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	01db      	lsls	r3, r3, #7
 800a874:	4413      	add	r3, r2
 800a876:	3384      	adds	r3, #132	; 0x84
 800a878:	699b      	ldr	r3, [r3, #24]
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	461a      	mov	r2, r3
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	01db      	lsls	r3, r3, #7
 800a884:	4413      	add	r3, r2
 800a886:	3384      	adds	r3, #132	; 0x84
 800a888:	461a      	mov	r2, r3
 800a88a:	2300      	movs	r3, #0
 800a88c:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800a88e:	68bb      	ldr	r3, [r7, #8]
 800a890:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a894:	461a      	mov	r2, r3
 800a896:	69fb      	ldr	r3, [r7, #28]
 800a898:	431a      	orrs	r2, r3
 800a89a:	69bb      	ldr	r3, [r7, #24]
 800a89c:	431a      	orrs	r2, r3
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	4619      	mov	r1, r3
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	01db      	lsls	r3, r3, #7
 800a8a8:	440b      	add	r3, r1
 800a8aa:	3384      	adds	r3, #132	; 0x84
 800a8ac:	4619      	mov	r1, r3
 800a8ae:	697b      	ldr	r3, [r7, #20]
 800a8b0:	4313      	orrs	r3, r2
 800a8b2:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	461a      	mov	r2, r3
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	01db      	lsls	r3, r3, #7
 800a8be:	4413      	add	r3, r2
 800a8c0:	3384      	adds	r3, #132	; 0x84
 800a8c2:	695b      	ldr	r3, [r3, #20]
 800a8c4:	68fa      	ldr	r2, [r7, #12]
 800a8c6:	6812      	ldr	r2, [r2, #0]
 800a8c8:	4611      	mov	r1, r2
 800a8ca:	687a      	ldr	r2, [r7, #4]
 800a8cc:	01d2      	lsls	r2, r2, #7
 800a8ce:	440a      	add	r2, r1
 800a8d0:	3284      	adds	r2, #132	; 0x84
 800a8d2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a8d6:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	461a      	mov	r2, r3
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	01db      	lsls	r3, r3, #7
 800a8e2:	4413      	add	r3, r2
 800a8e4:	3384      	adds	r3, #132	; 0x84
 800a8e6:	461a      	mov	r2, r3
 800a8e8:	68bb      	ldr	r3, [r7, #8]
 800a8ea:	695b      	ldr	r3, [r3, #20]
 800a8ec:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	461a      	mov	r2, r3
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	01db      	lsls	r3, r3, #7
 800a8f8:	4413      	add	r3, r2
 800a8fa:	3384      	adds	r3, #132	; 0x84
 800a8fc:	69da      	ldr	r2, [r3, #28]
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	4619      	mov	r1, r3
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	01db      	lsls	r3, r3, #7
 800a908:	440b      	add	r3, r1
 800a90a:	3384      	adds	r3, #132	; 0x84
 800a90c:	4619      	mov	r1, r3
 800a90e:	4b58      	ldr	r3, [pc, #352]	; (800aa70 <LTDC_SetConfig+0x32c>)
 800a910:	4013      	ands	r3, r2
 800a912:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800a914:	68bb      	ldr	r3, [r7, #8]
 800a916:	69da      	ldr	r2, [r3, #28]
 800a918:	68bb      	ldr	r3, [r7, #8]
 800a91a:	6a1b      	ldr	r3, [r3, #32]
 800a91c:	68f9      	ldr	r1, [r7, #12]
 800a91e:	6809      	ldr	r1, [r1, #0]
 800a920:	4608      	mov	r0, r1
 800a922:	6879      	ldr	r1, [r7, #4]
 800a924:	01c9      	lsls	r1, r1, #7
 800a926:	4401      	add	r1, r0
 800a928:	3184      	adds	r1, #132	; 0x84
 800a92a:	4313      	orrs	r3, r2
 800a92c:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	461a      	mov	r2, r3
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	01db      	lsls	r3, r3, #7
 800a938:	4413      	add	r3, r2
 800a93a:	3384      	adds	r3, #132	; 0x84
 800a93c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	461a      	mov	r2, r3
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	01db      	lsls	r3, r3, #7
 800a948:	4413      	add	r3, r2
 800a94a:	3384      	adds	r3, #132	; 0x84
 800a94c:	461a      	mov	r2, r3
 800a94e:	2300      	movs	r3, #0
 800a950:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	461a      	mov	r2, r3
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	01db      	lsls	r3, r3, #7
 800a95c:	4413      	add	r3, r2
 800a95e:	3384      	adds	r3, #132	; 0x84
 800a960:	461a      	mov	r2, r3
 800a962:	68bb      	ldr	r3, [r7, #8]
 800a964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a966:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800a968:	68bb      	ldr	r3, [r7, #8]
 800a96a:	691b      	ldr	r3, [r3, #16]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d102      	bne.n	800a976 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 800a970:	2304      	movs	r3, #4
 800a972:	61fb      	str	r3, [r7, #28]
 800a974:	e01b      	b.n	800a9ae <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800a976:	68bb      	ldr	r3, [r7, #8]
 800a978:	691b      	ldr	r3, [r3, #16]
 800a97a:	2b01      	cmp	r3, #1
 800a97c:	d102      	bne.n	800a984 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800a97e:	2303      	movs	r3, #3
 800a980:	61fb      	str	r3, [r7, #28]
 800a982:	e014      	b.n	800a9ae <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800a984:	68bb      	ldr	r3, [r7, #8]
 800a986:	691b      	ldr	r3, [r3, #16]
 800a988:	2b04      	cmp	r3, #4
 800a98a:	d00b      	beq.n	800a9a4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800a98c:	68bb      	ldr	r3, [r7, #8]
 800a98e:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800a990:	2b02      	cmp	r3, #2
 800a992:	d007      	beq.n	800a9a4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800a994:	68bb      	ldr	r3, [r7, #8]
 800a996:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800a998:	2b03      	cmp	r3, #3
 800a99a:	d003      	beq.n	800a9a4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800a99c:	68bb      	ldr	r3, [r7, #8]
 800a99e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800a9a0:	2b07      	cmp	r3, #7
 800a9a2:	d102      	bne.n	800a9aa <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 800a9a4:	2302      	movs	r3, #2
 800a9a6:	61fb      	str	r3, [r7, #28]
 800a9a8:	e001      	b.n	800a9ae <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800a9aa:	2301      	movs	r3, #1
 800a9ac:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	461a      	mov	r2, r3
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	01db      	lsls	r3, r3, #7
 800a9b8:	4413      	add	r3, r2
 800a9ba:	3384      	adds	r3, #132	; 0x84
 800a9bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9be:	68fa      	ldr	r2, [r7, #12]
 800a9c0:	6812      	ldr	r2, [r2, #0]
 800a9c2:	4611      	mov	r1, r2
 800a9c4:	687a      	ldr	r2, [r7, #4]
 800a9c6:	01d2      	lsls	r2, r2, #7
 800a9c8:	440a      	add	r2, r1
 800a9ca:	3284      	adds	r2, #132	; 0x84
 800a9cc:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800a9d0:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800a9d2:	68bb      	ldr	r3, [r7, #8]
 800a9d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9d6:	69fa      	ldr	r2, [r7, #28]
 800a9d8:	fb02 f303 	mul.w	r3, r2, r3
 800a9dc:	041a      	lsls	r2, r3, #16
 800a9de:	68bb      	ldr	r3, [r7, #8]
 800a9e0:	6859      	ldr	r1, [r3, #4]
 800a9e2:	68bb      	ldr	r3, [r7, #8]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	1acb      	subs	r3, r1, r3
 800a9e8:	69f9      	ldr	r1, [r7, #28]
 800a9ea:	fb01 f303 	mul.w	r3, r1, r3
 800a9ee:	3303      	adds	r3, #3
 800a9f0:	68f9      	ldr	r1, [r7, #12]
 800a9f2:	6809      	ldr	r1, [r1, #0]
 800a9f4:	4608      	mov	r0, r1
 800a9f6:	6879      	ldr	r1, [r7, #4]
 800a9f8:	01c9      	lsls	r1, r1, #7
 800a9fa:	4401      	add	r1, r0
 800a9fc:	3184      	adds	r1, #132	; 0x84
 800a9fe:	4313      	orrs	r3, r2
 800aa00:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	461a      	mov	r2, r3
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	01db      	lsls	r3, r3, #7
 800aa0c:	4413      	add	r3, r2
 800aa0e:	3384      	adds	r3, #132	; 0x84
 800aa10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	4619      	mov	r1, r3
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	01db      	lsls	r3, r3, #7
 800aa1c:	440b      	add	r3, r1
 800aa1e:	3384      	adds	r3, #132	; 0x84
 800aa20:	4619      	mov	r1, r3
 800aa22:	4b14      	ldr	r3, [pc, #80]	; (800aa74 <LTDC_SetConfig+0x330>)
 800aa24:	4013      	ands	r3, r2
 800aa26:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	461a      	mov	r2, r3
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	01db      	lsls	r3, r3, #7
 800aa32:	4413      	add	r3, r2
 800aa34:	3384      	adds	r3, #132	; 0x84
 800aa36:	461a      	mov	r2, r3
 800aa38:	68bb      	ldr	r3, [r7, #8]
 800aa3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa3c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	461a      	mov	r2, r3
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	01db      	lsls	r3, r3, #7
 800aa48:	4413      	add	r3, r2
 800aa4a:	3384      	adds	r3, #132	; 0x84
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	68fa      	ldr	r2, [r7, #12]
 800aa50:	6812      	ldr	r2, [r2, #0]
 800aa52:	4611      	mov	r1, r2
 800aa54:	687a      	ldr	r2, [r7, #4]
 800aa56:	01d2      	lsls	r2, r2, #7
 800aa58:	440a      	add	r2, r1
 800aa5a:	3284      	adds	r2, #132	; 0x84
 800aa5c:	f043 0301 	orr.w	r3, r3, #1
 800aa60:	6013      	str	r3, [r2, #0]
}
 800aa62:	bf00      	nop
 800aa64:	3724      	adds	r7, #36	; 0x24
 800aa66:	46bd      	mov	sp, r7
 800aa68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6c:	4770      	bx	lr
 800aa6e:	bf00      	nop
 800aa70:	fffff8f8 	.word	0xfffff8f8
 800aa74:	fffff800 	.word	0xfffff800

0800aa78 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800aa78:	b480      	push	{r7}
 800aa7a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800aa7c:	4b05      	ldr	r3, [pc, #20]	; (800aa94 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	4a04      	ldr	r2, [pc, #16]	; (800aa94 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800aa82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aa86:	6013      	str	r3, [r2, #0]
}
 800aa88:	bf00      	nop
 800aa8a:	46bd      	mov	sp, r7
 800aa8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa90:	4770      	bx	lr
 800aa92:	bf00      	nop
 800aa94:	40007000 	.word	0x40007000

0800aa98 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800aa98:	b580      	push	{r7, lr}
 800aa9a:	b082      	sub	sp, #8
 800aa9c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800aa9e:	2300      	movs	r3, #0
 800aaa0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800aaa2:	4b23      	ldr	r3, [pc, #140]	; (800ab30 <HAL_PWREx_EnableOverDrive+0x98>)
 800aaa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aaa6:	4a22      	ldr	r2, [pc, #136]	; (800ab30 <HAL_PWREx_EnableOverDrive+0x98>)
 800aaa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aaac:	6413      	str	r3, [r2, #64]	; 0x40
 800aaae:	4b20      	ldr	r3, [pc, #128]	; (800ab30 <HAL_PWREx_EnableOverDrive+0x98>)
 800aab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aab2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aab6:	603b      	str	r3, [r7, #0]
 800aab8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800aaba:	4b1e      	ldr	r3, [pc, #120]	; (800ab34 <HAL_PWREx_EnableOverDrive+0x9c>)
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	4a1d      	ldr	r2, [pc, #116]	; (800ab34 <HAL_PWREx_EnableOverDrive+0x9c>)
 800aac0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aac4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800aac6:	f7fb f919 	bl	8005cfc <HAL_GetTick>
 800aaca:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800aacc:	e009      	b.n	800aae2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800aace:	f7fb f915 	bl	8005cfc <HAL_GetTick>
 800aad2:	4602      	mov	r2, r0
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	1ad3      	subs	r3, r2, r3
 800aad8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800aadc:	d901      	bls.n	800aae2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800aade:	2303      	movs	r3, #3
 800aae0:	e022      	b.n	800ab28 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800aae2:	4b14      	ldr	r3, [pc, #80]	; (800ab34 <HAL_PWREx_EnableOverDrive+0x9c>)
 800aae4:	685b      	ldr	r3, [r3, #4]
 800aae6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800aaea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aaee:	d1ee      	bne.n	800aace <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800aaf0:	4b10      	ldr	r3, [pc, #64]	; (800ab34 <HAL_PWREx_EnableOverDrive+0x9c>)
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	4a0f      	ldr	r2, [pc, #60]	; (800ab34 <HAL_PWREx_EnableOverDrive+0x9c>)
 800aaf6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aafa:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800aafc:	f7fb f8fe 	bl	8005cfc <HAL_GetTick>
 800ab00:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800ab02:	e009      	b.n	800ab18 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800ab04:	f7fb f8fa 	bl	8005cfc <HAL_GetTick>
 800ab08:	4602      	mov	r2, r0
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	1ad3      	subs	r3, r2, r3
 800ab0e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ab12:	d901      	bls.n	800ab18 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800ab14:	2303      	movs	r3, #3
 800ab16:	e007      	b.n	800ab28 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800ab18:	4b06      	ldr	r3, [pc, #24]	; (800ab34 <HAL_PWREx_EnableOverDrive+0x9c>)
 800ab1a:	685b      	ldr	r3, [r3, #4]
 800ab1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ab20:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ab24:	d1ee      	bne.n	800ab04 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800ab26:	2300      	movs	r3, #0
}
 800ab28:	4618      	mov	r0, r3
 800ab2a:	3708      	adds	r7, #8
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	bd80      	pop	{r7, pc}
 800ab30:	40023800 	.word	0x40023800
 800ab34:	40007000 	.word	0x40007000

0800ab38 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800ab38:	b580      	push	{r7, lr}
 800ab3a:	b086      	sub	sp, #24
 800ab3c:	af02      	add	r7, sp, #8
 800ab3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800ab40:	f7fb f8dc 	bl	8005cfc <HAL_GetTick>
 800ab44:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d101      	bne.n	800ab50 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800ab4c:	2301      	movs	r3, #1
 800ab4e:	e067      	b.n	800ac20 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ab56:	b2db      	uxtb	r3, r3
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d10b      	bne.n	800ab74 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	2200      	movs	r2, #0
 800ab60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800ab64:	6878      	ldr	r0, [r7, #4]
 800ab66:	f7f8 fbf3 	bl	8003350 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800ab6a:	f241 3188 	movw	r1, #5000	; 0x1388
 800ab6e:	6878      	ldr	r0, [r7, #4]
 800ab70:	f000 fda8 	bl	800b6c4 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	689b      	ldr	r3, [r3, #8]
 800ab82:	3b01      	subs	r3, #1
 800ab84:	021a      	lsls	r2, r3, #8
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	430a      	orrs	r2, r1
 800ab8c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ab92:	9300      	str	r3, [sp, #0]
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	2200      	movs	r2, #0
 800ab98:	2120      	movs	r1, #32
 800ab9a:	6878      	ldr	r0, [r7, #4]
 800ab9c:	f000 fdd3 	bl	800b746 <QSPI_WaitFlagStateUntilTimeout>
 800aba0:	4603      	mov	r3, r0
 800aba2:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800aba4:	7afb      	ldrb	r3, [r7, #11]
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d135      	bne.n	800ac16 <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	681a      	ldr	r2, [r3, #0]
 800abb0:	4b1d      	ldr	r3, [pc, #116]	; (800ac28 <HAL_QSPI_Init+0xf0>)
 800abb2:	4013      	ands	r3, r2
 800abb4:	687a      	ldr	r2, [r7, #4]
 800abb6:	6852      	ldr	r2, [r2, #4]
 800abb8:	0611      	lsls	r1, r2, #24
 800abba:	687a      	ldr	r2, [r7, #4]
 800abbc:	68d2      	ldr	r2, [r2, #12]
 800abbe:	4311      	orrs	r1, r2
 800abc0:	687a      	ldr	r2, [r7, #4]
 800abc2:	69d2      	ldr	r2, [r2, #28]
 800abc4:	4311      	orrs	r1, r2
 800abc6:	687a      	ldr	r2, [r7, #4]
 800abc8:	6a12      	ldr	r2, [r2, #32]
 800abca:	4311      	orrs	r1, r2
 800abcc:	687a      	ldr	r2, [r7, #4]
 800abce:	6812      	ldr	r2, [r2, #0]
 800abd0:	430b      	orrs	r3, r1
 800abd2:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	685a      	ldr	r2, [r3, #4]
 800abda:	4b14      	ldr	r3, [pc, #80]	; (800ac2c <HAL_QSPI_Init+0xf4>)
 800abdc:	4013      	ands	r3, r2
 800abde:	687a      	ldr	r2, [r7, #4]
 800abe0:	6912      	ldr	r2, [r2, #16]
 800abe2:	0411      	lsls	r1, r2, #16
 800abe4:	687a      	ldr	r2, [r7, #4]
 800abe6:	6952      	ldr	r2, [r2, #20]
 800abe8:	4311      	orrs	r1, r2
 800abea:	687a      	ldr	r2, [r7, #4]
 800abec:	6992      	ldr	r2, [r2, #24]
 800abee:	4311      	orrs	r1, r2
 800abf0:	687a      	ldr	r2, [r7, #4]
 800abf2:	6812      	ldr	r2, [r2, #0]
 800abf4:	430b      	orrs	r3, r1
 800abf6:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	681a      	ldr	r2, [r3, #0]
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	f042 0201 	orr.w	r2, r2, #1
 800ac06:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	2200      	movs	r2, #0
 800ac0c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	2201      	movs	r2, #1
 800ac12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	2200      	movs	r2, #0
 800ac1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800ac1e:	7afb      	ldrb	r3, [r7, #11]
}
 800ac20:	4618      	mov	r0, r3
 800ac22:	3710      	adds	r7, #16
 800ac24:	46bd      	mov	sp, r7
 800ac26:	bd80      	pop	{r7, pc}
 800ac28:	00ffff2f 	.word	0x00ffff2f
 800ac2c:	ffe0f8fe 	.word	0xffe0f8fe

0800ac30 <HAL_QSPI_IRQHandler>:
  * @brief Handle QSPI interrupt request.
  * @param hqspi : QSPI handle
  * @retval None
  */
void HAL_QSPI_IRQHandler(QSPI_HandleTypeDef *hqspi)
{
 800ac30:	b580      	push	{r7, lr}
 800ac32:	b086      	sub	sp, #24
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg;
  uint32_t flag = READ_REG(hqspi->Instance->SR);
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	689b      	ldr	r3, [r3, #8]
 800ac3e:	617b      	str	r3, [r7, #20]
  uint32_t itsource = READ_REG(hqspi->Instance->CR);
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	613b      	str	r3, [r7, #16]

  /* QSPI Fifo Threshold interrupt occurred ----------------------------------*/
  if(((flag & QSPI_FLAG_FT) != 0U) && ((itsource & QSPI_IT_FT) != 0U))
 800ac48:	697b      	ldr	r3, [r7, #20]
 800ac4a:	f003 0304 	and.w	r3, r3, #4
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d064      	beq.n	800ad1c <HAL_QSPI_IRQHandler+0xec>
 800ac52:	693b      	ldr	r3, [r7, #16]
 800ac54:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d05f      	beq.n	800ad1c <HAL_QSPI_IRQHandler+0xec>
  {
    data_reg = &hqspi->Instance->DR;
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	3320      	adds	r3, #32
 800ac62:	60fb      	str	r3, [r7, #12]

    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ac6a:	b2db      	uxtb	r3, r3
 800ac6c:	2b12      	cmp	r3, #18
 800ac6e:	d125      	bne.n	800acbc <HAL_QSPI_IRQHandler+0x8c>
    {
      /* Transmission process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800ac70:	e01c      	b.n	800acac <HAL_QSPI_IRQHandler+0x7c>
      {
        if (hqspi->TxXferCount > 0U)
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d00f      	beq.n	800ac9a <HAL_QSPI_IRQHandler+0x6a>
        {
          /* Fill the FIFO until the threshold is reached */
          *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac7e:	781a      	ldrb	r2, [r3, #0]
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	701a      	strb	r2, [r3, #0]
          hqspi->pTxBuffPtr++;
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac88:	1c5a      	adds	r2, r3, #1
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	625a      	str	r2, [r3, #36]	; 0x24
          hqspi->TxXferCount--;
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac92:	1e5a      	subs	r2, r3, #1
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	62da      	str	r2, [r3, #44]	; 0x2c
 800ac98:	e008      	b.n	800acac <HAL_QSPI_IRQHandler+0x7c>
        }
        else
        {
          /* No more data available for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	681a      	ldr	r2, [r3, #0]
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800aca8:	601a      	str	r2, [r3, #0]
          break;
 800acaa:	e033      	b.n	800ad14 <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	689b      	ldr	r3, [r3, #8]
 800acb2:	f003 0304 	and.w	r3, r3, #4
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d1db      	bne.n	800ac72 <HAL_QSPI_IRQHandler+0x42>
 800acba:	e02b      	b.n	800ad14 <HAL_QSPI_IRQHandler+0xe4>
        }
      }
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800acc2:	b2db      	uxtb	r3, r3
 800acc4:	2b22      	cmp	r3, #34	; 0x22
 800acc6:	d125      	bne.n	800ad14 <HAL_QSPI_IRQHandler+0xe4>
    {
      /* Receiving Process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800acc8:	e01d      	b.n	800ad06 <HAL_QSPI_IRQHandler+0xd6>
      {
        if (hqspi->RxXferCount > 0U)
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d010      	beq.n	800acf4 <HAL_QSPI_IRQHandler+0xc4>
        {
          /* Read the FIFO until the threshold is reached */
          *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acd6:	68fa      	ldr	r2, [r7, #12]
 800acd8:	7812      	ldrb	r2, [r2, #0]
 800acda:	b2d2      	uxtb	r2, r2
 800acdc:	701a      	strb	r2, [r3, #0]
          hqspi->pRxBuffPtr++;
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ace2:	1c5a      	adds	r2, r3, #1
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	631a      	str	r2, [r3, #48]	; 0x30
          hqspi->RxXferCount--;
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acec:	1e5a      	subs	r2, r3, #1
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	639a      	str	r2, [r3, #56]	; 0x38
 800acf2:	e008      	b.n	800ad06 <HAL_QSPI_IRQHandler+0xd6>
        }
        else
        {
          /* All data have been received for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	681a      	ldr	r2, [r3, #0]
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800ad02:	601a      	str	r2, [r3, #0]
          break;
 800ad04:	e006      	b.n	800ad14 <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	689b      	ldr	r3, [r3, #8]
 800ad0c:	f003 0304 	and.w	r3, r3, #4
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d1da      	bne.n	800acca <HAL_QSPI_IRQHandler+0x9a>

    /* FIFO Threshold callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->FifoThresholdCallback(hqspi);
#else
    HAL_QSPI_FifoThresholdCallback(hqspi);
 800ad14:	6878      	ldr	r0, [r7, #4]
 800ad16:	f000 fbed 	bl	800b4f4 <HAL_QSPI_FifoThresholdCallback>
 800ad1a:	e142      	b.n	800afa2 <HAL_QSPI_IRQHandler+0x372>
#endif
  }

  /* QSPI Transfer Complete interrupt occurred -------------------------------*/
  else if(((flag & QSPI_FLAG_TC) != 0U) && ((itsource & QSPI_IT_TC) != 0U))
 800ad1c:	697b      	ldr	r3, [r7, #20]
 800ad1e:	f003 0302 	and.w	r3, r3, #2
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	f000 80b6 	beq.w	800ae94 <HAL_QSPI_IRQHandler+0x264>
 800ad28:	693b      	ldr	r3, [r7, #16]
 800ad2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	f000 80b0 	beq.w	800ae94 <HAL_QSPI_IRQHandler+0x264>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TC);
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	2202      	movs	r2, #2
 800ad3a:	60da      	str	r2, [r3, #12]

    /* Disable the QSPI FIFO Threshold, Transfer Error and Transfer complete Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	681a      	ldr	r2, [r3, #0]
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 800ad4a:	601a      	str	r2, [r3, #0]

    /* Transfer complete callback */
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ad52:	b2db      	uxtb	r3, r3
 800ad54:	2b12      	cmp	r3, #18
 800ad56:	d123      	bne.n	800ada0 <HAL_QSPI_IRQHandler+0x170>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	f003 0304 	and.w	r3, r3, #4
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d011      	beq.n	800ad8a <HAL_QSPI_IRQHandler+0x15a>
      {
        /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	681a      	ldr	r2, [r3, #0]
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	f022 0204 	bic.w	r2, r2, #4
 800ad74:	601a      	str	r2, [r3, #0]

        /* Disable the DMA channel */
        __HAL_DMA_DISABLE(hqspi->hdma);
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	681a      	ldr	r2, [r3, #0]
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	f022 0201 	bic.w	r2, r2, #1
 800ad88:	601a      	str	r2, [r3, #0]
      }

#if  defined(QSPI1_V1_0)
      /* Clear Busy bit */
      HAL_QSPI_Abort_IT(hqspi);
 800ad8a:	6878      	ldr	r0, [r7, #4]
 800ad8c:	f000 fc3e 	bl	800b60c <HAL_QSPI_Abort_IT>
#endif

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	2201      	movs	r2, #1
 800ad94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* TX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->TxCpltCallback(hqspi);
#else
      HAL_QSPI_TxCpltCallback(hqspi);
 800ad98:	6878      	ldr	r0, [r7, #4]
 800ad9a:	f000 fba1 	bl	800b4e0 <HAL_QSPI_TxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800ad9e:	e0fd      	b.n	800af9c <HAL_QSPI_IRQHandler+0x36c>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ada6:	b2db      	uxtb	r3, r3
 800ada8:	2b22      	cmp	r3, #34	; 0x22
 800adaa:	d146      	bne.n	800ae3a <HAL_QSPI_IRQHandler+0x20a>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	f003 0304 	and.w	r3, r3, #4
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d012      	beq.n	800ade0 <HAL_QSPI_IRQHandler+0x1b0>
      {
        /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	681a      	ldr	r2, [r3, #0]
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	f022 0204 	bic.w	r2, r2, #4
 800adc8:	601a      	str	r2, [r3, #0]

        /* Disable the DMA channel */
        __HAL_DMA_DISABLE(hqspi->hdma);
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	681a      	ldr	r2, [r3, #0]
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	f022 0201 	bic.w	r2, r2, #1
 800addc:	601a      	str	r2, [r3, #0]
 800adde:	e021      	b.n	800ae24 <HAL_QSPI_IRQHandler+0x1f4>
      }
      else
      {
        data_reg = &hqspi->Instance->DR;
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	3320      	adds	r3, #32
 800ade6:	60fb      	str	r3, [r7, #12]
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 800ade8:	e013      	b.n	800ae12 <HAL_QSPI_IRQHandler+0x1e2>
        {
          if (hqspi->RxXferCount > 0U)
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d017      	beq.n	800ae22 <HAL_QSPI_IRQHandler+0x1f2>
          {
            /* Read the last data received in the FIFO until it is empty */
            *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adf6:	68fa      	ldr	r2, [r7, #12]
 800adf8:	7812      	ldrb	r2, [r2, #0]
 800adfa:	b2d2      	uxtb	r2, r2
 800adfc:	701a      	strb	r2, [r3, #0]
            hqspi->pRxBuffPtr++;
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae02:	1c5a      	adds	r2, r3, #1
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	631a      	str	r2, [r3, #48]	; 0x30
            hqspi->RxXferCount--;
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae0c:	1e5a      	subs	r2, r3, #1
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	639a      	str	r2, [r3, #56]	; 0x38
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	689b      	ldr	r3, [r3, #8]
 800ae18:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d1e4      	bne.n	800adea <HAL_QSPI_IRQHandler+0x1ba>
 800ae20:	e000      	b.n	800ae24 <HAL_QSPI_IRQHandler+0x1f4>
          }
          else
          {
            /* All data have been received for the transfer */
            break;
 800ae22:	bf00      	nop
        }
      }

#if  defined(QSPI1_V1_0)
      /* Workaround - Extra data written in the FIFO at the end of a read transfer */
      HAL_QSPI_Abort_IT(hqspi);
 800ae24:	6878      	ldr	r0, [r7, #4]
 800ae26:	f000 fbf1 	bl	800b60c <HAL_QSPI_Abort_IT>
#endif

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	2201      	movs	r2, #1
 800ae2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* RX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->RxCpltCallback(hqspi);
#else
      HAL_QSPI_RxCpltCallback(hqspi);
 800ae32:	6878      	ldr	r0, [r7, #4]
 800ae34:	f000 fb4a 	bl	800b4cc <HAL_QSPI_RxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800ae38:	e0b0      	b.n	800af9c <HAL_QSPI_IRQHandler+0x36c>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY)
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ae40:	b2db      	uxtb	r3, r3
 800ae42:	2b02      	cmp	r3, #2
 800ae44:	d107      	bne.n	800ae56 <HAL_QSPI_IRQHandler+0x226>
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	2201      	movs	r2, #1
 800ae4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Command Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->CmdCpltCallback(hqspi);
#else
      HAL_QSPI_CmdCpltCallback(hqspi);
 800ae4e:	6878      	ldr	r0, [r7, #4]
 800ae50:	f000 fb32 	bl	800b4b8 <HAL_QSPI_CmdCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800ae54:	e0a2      	b.n	800af9c <HAL_QSPI_IRQHandler+0x36c>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_ABORT)
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ae5c:	b2db      	uxtb	r3, r3
 800ae5e:	2b08      	cmp	r3, #8
 800ae60:	f040 809c 	bne.w	800af9c <HAL_QSPI_IRQHandler+0x36c>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	695a      	ldr	r2, [r3, #20]
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800ae72:	615a      	str	r2, [r3, #20]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	2201      	movs	r2, #1
 800ae78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      if (hqspi->ErrorCode == HAL_QSPI_ERROR_NONE)
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d103      	bne.n	800ae8c <HAL_QSPI_IRQHandler+0x25c>

        /* Abort Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->AbortCpltCallback(hqspi);
#else
        HAL_QSPI_AbortCpltCallback(hqspi);
 800ae84:	6878      	ldr	r0, [r7, #4]
 800ae86:	f000 fb0d 	bl	800b4a4 <HAL_QSPI_AbortCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800ae8a:	e087      	b.n	800af9c <HAL_QSPI_IRQHandler+0x36c>

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 800ae8c:	6878      	ldr	r0, [r7, #4]
 800ae8e:	f000 faff 	bl	800b490 <HAL_QSPI_ErrorCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800ae92:	e083      	b.n	800af9c <HAL_QSPI_IRQHandler+0x36c>
     /* Nothing to do */
    }
  }

  /* QSPI Status Match interrupt occurred ------------------------------------*/
  else if(((flag & QSPI_FLAG_SM) != 0U) && ((itsource & QSPI_IT_SM) != 0U))
 800ae94:	697b      	ldr	r3, [r7, #20]
 800ae96:	f003 0308 	and.w	r3, r3, #8
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d01f      	beq.n	800aede <HAL_QSPI_IRQHandler+0x2ae>
 800ae9e:	693b      	ldr	r3, [r7, #16]
 800aea0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d01a      	beq.n	800aede <HAL_QSPI_IRQHandler+0x2ae>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_SM);
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	2208      	movs	r2, #8
 800aeae:	60da      	str	r2, [r3, #12]

    /* Check if the automatic poll mode stop is activated */
    if(READ_BIT(hqspi->Instance->CR, QUADSPI_CR_APMS) != 0U)
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d00b      	beq.n	800aed6 <HAL_QSPI_IRQHandler+0x2a6>
    {
      /* Disable the QSPI Transfer Error and Status Match Interrupts */
      __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_SM | QSPI_IT_TE));
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	681a      	ldr	r2, [r3, #0]
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 800aecc:	601a      	str	r2, [r3, #0]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	2201      	movs	r2, #1
 800aed2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Status match callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->StatusMatchCallback(hqspi);
#else
    HAL_QSPI_StatusMatchCallback(hqspi);
 800aed6:	6878      	ldr	r0, [r7, #4]
 800aed8:	f000 fb16 	bl	800b508 <HAL_QSPI_StatusMatchCallback>
 800aedc:	e061      	b.n	800afa2 <HAL_QSPI_IRQHandler+0x372>
#endif
  }

  /* QSPI Transfer Error interrupt occurred ----------------------------------*/
  else if(((flag & QSPI_FLAG_TE) != 0U) && ((itsource & QSPI_IT_TE) != 0U))
 800aede:	697b      	ldr	r3, [r7, #20]
 800aee0:	f003 0301 	and.w	r3, r3, #1
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d047      	beq.n	800af78 <HAL_QSPI_IRQHandler+0x348>
 800aee8:	693b      	ldr	r3, [r7, #16]
 800aeea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d042      	beq.n	800af78 <HAL_QSPI_IRQHandler+0x348>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TE);
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	2201      	movs	r2, #1
 800aef8:	60da      	str	r2, [r3, #12]

    /* Disable all the QSPI Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_SM | QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	681a      	ldr	r2, [r3, #0]
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 800af08:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hqspi->ErrorCode |= HAL_QSPI_ERROR_TRANSFER;
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af0e:	f043 0202 	orr.w	r2, r3, #2
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	645a      	str	r2, [r3, #68]	; 0x44

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	f003 0304 	and.w	r3, r3, #4
 800af20:	2b00      	cmp	r3, #0
 800af22:	d021      	beq.n	800af68 <HAL_QSPI_IRQHandler+0x338>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	681a      	ldr	r2, [r3, #0]
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	f022 0204 	bic.w	r2, r2, #4
 800af32:	601a      	str	r2, [r3, #0]

      /* Disable the DMA channel */
      hqspi->hdma->XferAbortCallback = QSPI_DMAAbortCplt;
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af38:	4a1c      	ldr	r2, [pc, #112]	; (800afac <HAL_QSPI_IRQHandler+0x37c>)
 800af3a:	651a      	str	r2, [r3, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hqspi->hdma) != HAL_OK)
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af40:	4618      	mov	r0, r3
 800af42:	f7fb fe59 	bl	8006bf8 <HAL_DMA_Abort_IT>
 800af46:	4603      	mov	r3, r0
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d029      	beq.n	800afa0 <HAL_QSPI_IRQHandler+0x370>
      {
        /* Set error code to DMA */
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af50:	f043 0204 	orr.w	r2, r3, #4
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	645a      	str	r2, [r3, #68]	; 0x44

        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	2201      	movs	r2, #1
 800af5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        
        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 800af60:	6878      	ldr	r0, [r7, #4]
 800af62:	f000 fa95 	bl	800b490 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800af66:	e01b      	b.n	800afa0 <HAL_QSPI_IRQHandler+0x370>
      }
    }
    else
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	2201      	movs	r2, #1
 800af6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->ErrorCallback(hqspi);
#else
      HAL_QSPI_ErrorCallback(hqspi);
 800af70:	6878      	ldr	r0, [r7, #4]
 800af72:	f000 fa8d 	bl	800b490 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800af76:	e013      	b.n	800afa0 <HAL_QSPI_IRQHandler+0x370>
#endif
    }
  }

  /* QSPI Timeout interrupt occurred -----------------------------------------*/
  else if(((flag & QSPI_FLAG_TO) != 0U) && ((itsource & QSPI_IT_TO) != 0U))
 800af78:	697b      	ldr	r3, [r7, #20]
 800af7a:	f003 0310 	and.w	r3, r3, #16
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d00f      	beq.n	800afa2 <HAL_QSPI_IRQHandler+0x372>
 800af82:	693b      	ldr	r3, [r7, #16]
 800af84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d00a      	beq.n	800afa2 <HAL_QSPI_IRQHandler+0x372>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TO);
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	2210      	movs	r2, #16
 800af92:	60da      	str	r2, [r3, #12]

    /* Timeout callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->TimeOutCallback(hqspi);
#else
    HAL_QSPI_TimeOutCallback(hqspi);
 800af94:	6878      	ldr	r0, [r7, #4]
 800af96:	f000 fac1 	bl	800b51c <HAL_QSPI_TimeOutCallback>

   else
  {
   /* Nothing to do */
  }
}
 800af9a:	e002      	b.n	800afa2 <HAL_QSPI_IRQHandler+0x372>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800af9c:	bf00      	nop
 800af9e:	e000      	b.n	800afa2 <HAL_QSPI_IRQHandler+0x372>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800afa0:	bf00      	nop
}
 800afa2:	bf00      	nop
 800afa4:	3718      	adds	r7, #24
 800afa6:	46bd      	mov	sp, r7
 800afa8:	bd80      	pop	{r7, pc}
 800afaa:	bf00      	nop
 800afac:	0800b6e1 	.word	0x0800b6e1

0800afb0 <HAL_QSPI_Command>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 800afb0:	b580      	push	{r7, lr}
 800afb2:	b088      	sub	sp, #32
 800afb4:	af02      	add	r7, sp, #8
 800afb6:	60f8      	str	r0, [r7, #12]
 800afb8:	60b9      	str	r1, [r7, #8]
 800afba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800afbc:	f7fa fe9e 	bl	8005cfc <HAL_GetTick>
 800afc0:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800afc8:	b2db      	uxtb	r3, r3
 800afca:	2b01      	cmp	r3, #1
 800afcc:	d101      	bne.n	800afd2 <HAL_QSPI_Command+0x22>
 800afce:	2302      	movs	r3, #2
 800afd0:	e048      	b.n	800b064 <HAL_QSPI_Command+0xb4>
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	2201      	movs	r2, #1
 800afd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800afe0:	b2db      	uxtb	r3, r3
 800afe2:	2b01      	cmp	r3, #1
 800afe4:	d137      	bne.n	800b056 <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	2200      	movs	r2, #0
 800afea:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	2202      	movs	r2, #2
 800aff0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	9300      	str	r3, [sp, #0]
 800aff8:	693b      	ldr	r3, [r7, #16]
 800affa:	2200      	movs	r2, #0
 800affc:	2120      	movs	r1, #32
 800affe:	68f8      	ldr	r0, [r7, #12]
 800b000:	f000 fba1 	bl	800b746 <QSPI_WaitFlagStateUntilTimeout>
 800b004:	4603      	mov	r3, r0
 800b006:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800b008:	7dfb      	ldrb	r3, [r7, #23]
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d125      	bne.n	800b05a <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800b00e:	2200      	movs	r2, #0
 800b010:	68b9      	ldr	r1, [r7, #8]
 800b012:	68f8      	ldr	r0, [r7, #12]
 800b014:	f000 fbce 	bl	800b7b4 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 800b018:	68bb      	ldr	r3, [r7, #8]
 800b01a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d115      	bne.n	800b04c <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	9300      	str	r3, [sp, #0]
 800b024:	693b      	ldr	r3, [r7, #16]
 800b026:	2201      	movs	r2, #1
 800b028:	2102      	movs	r1, #2
 800b02a:	68f8      	ldr	r0, [r7, #12]
 800b02c:	f000 fb8b 	bl	800b746 <QSPI_WaitFlagStateUntilTimeout>
 800b030:	4603      	mov	r3, r0
 800b032:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 800b034:	7dfb      	ldrb	r3, [r7, #23]
 800b036:	2b00      	cmp	r3, #0
 800b038:	d10f      	bne.n	800b05a <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	2202      	movs	r2, #2
 800b040:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	2201      	movs	r2, #1
 800b046:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b04a:	e006      	b.n	800b05a <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	2201      	movs	r2, #1
 800b050:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b054:	e001      	b.n	800b05a <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800b056:	2302      	movs	r3, #2
 800b058:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	2200      	movs	r2, #0
 800b05e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800b062:	7dfb      	ldrb	r3, [r7, #23]
}
 800b064:	4618      	mov	r0, r3
 800b066:	3718      	adds	r7, #24
 800b068:	46bd      	mov	sp, r7
 800b06a:	bd80      	pop	{r7, pc}

0800b06c <HAL_QSPI_Transmit>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800b06c:	b580      	push	{r7, lr}
 800b06e:	b08a      	sub	sp, #40	; 0x28
 800b070:	af02      	add	r7, sp, #8
 800b072:	60f8      	str	r0, [r7, #12]
 800b074:	60b9      	str	r1, [r7, #8]
 800b076:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b078:	2300      	movs	r3, #0
 800b07a:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800b07c:	f7fa fe3e 	bl	8005cfc <HAL_GetTick>
 800b080:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	3320      	adds	r3, #32
 800b088:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b090:	b2db      	uxtb	r3, r3
 800b092:	2b01      	cmp	r3, #1
 800b094:	d101      	bne.n	800b09a <HAL_QSPI_Transmit+0x2e>
 800b096:	2302      	movs	r3, #2
 800b098:	e07b      	b.n	800b192 <HAL_QSPI_Transmit+0x126>
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	2201      	movs	r2, #1
 800b09e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b0a8:	b2db      	uxtb	r3, r3
 800b0aa:	2b01      	cmp	r3, #1
 800b0ac:	d16a      	bne.n	800b184 <HAL_QSPI_Transmit+0x118>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	2200      	movs	r2, #0
 800b0b2:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 800b0b4:	68bb      	ldr	r3, [r7, #8]
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d05b      	beq.n	800b172 <HAL_QSPI_Transmit+0x106>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	2212      	movs	r2, #18
 800b0be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	691b      	ldr	r3, [r3, #16]
 800b0c8:	1c5a      	adds	r2, r3, #1
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	691b      	ldr	r3, [r3, #16]
 800b0d4:	1c5a      	adds	r2, r3, #1
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	68ba      	ldr	r2, [r7, #8]
 800b0de:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	695a      	ldr	r2, [r3, #20]
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800b0ee:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 800b0f0:	e01b      	b.n	800b12a <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	9300      	str	r3, [sp, #0]
 800b0f6:	69bb      	ldr	r3, [r7, #24]
 800b0f8:	2201      	movs	r2, #1
 800b0fa:	2104      	movs	r1, #4
 800b0fc:	68f8      	ldr	r0, [r7, #12]
 800b0fe:	f000 fb22 	bl	800b746 <QSPI_WaitFlagStateUntilTimeout>
 800b102:	4603      	mov	r3, r0
 800b104:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 800b106:	7ffb      	ldrb	r3, [r7, #31]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d113      	bne.n	800b134 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b110:	781a      	ldrb	r2, [r3, #0]
 800b112:	697b      	ldr	r3, [r7, #20]
 800b114:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b11a:	1c5a      	adds	r2, r3, #1
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b124:	1e5a      	subs	r2, r3, #1
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d1df      	bne.n	800b0f2 <HAL_QSPI_Transmit+0x86>
 800b132:	e000      	b.n	800b136 <HAL_QSPI_Transmit+0xca>
          break;
 800b134:	bf00      	nop
      }

      if (status == HAL_OK)
 800b136:	7ffb      	ldrb	r3, [r7, #31]
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d115      	bne.n	800b168 <HAL_QSPI_Transmit+0xfc>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	9300      	str	r3, [sp, #0]
 800b140:	69bb      	ldr	r3, [r7, #24]
 800b142:	2201      	movs	r2, #1
 800b144:	2102      	movs	r1, #2
 800b146:	68f8      	ldr	r0, [r7, #12]
 800b148:	f000 fafd 	bl	800b746 <QSPI_WaitFlagStateUntilTimeout>
 800b14c:	4603      	mov	r3, r0
 800b14e:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 800b150:	7ffb      	ldrb	r3, [r7, #31]
 800b152:	2b00      	cmp	r3, #0
 800b154:	d108      	bne.n	800b168 <HAL_QSPI_Transmit+0xfc>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	2202      	movs	r2, #2
 800b15c:	60da      	str	r2, [r3, #12]

#if  defined(QSPI1_V1_0)
          /* Clear Busy bit */
          status = HAL_QSPI_Abort(hqspi);
 800b15e:	68f8      	ldr	r0, [r7, #12]
 800b160:	f000 f9e6 	bl	800b530 <HAL_QSPI_Abort>
 800b164:	4603      	mov	r3, r0
 800b166:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	2201      	movs	r2, #1
 800b16c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b170:	e00a      	b.n	800b188 <HAL_QSPI_Transmit+0x11c>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b176:	f043 0208 	orr.w	r2, r3, #8
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 800b17e:	2301      	movs	r3, #1
 800b180:	77fb      	strb	r3, [r7, #31]
 800b182:	e001      	b.n	800b188 <HAL_QSPI_Transmit+0x11c>
    }
  }
  else
  {
    status = HAL_BUSY;
 800b184:	2302      	movs	r3, #2
 800b186:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	2200      	movs	r2, #0
 800b18c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 800b190:	7ffb      	ldrb	r3, [r7, #31]
}
 800b192:	4618      	mov	r0, r3
 800b194:	3720      	adds	r7, #32
 800b196:	46bd      	mov	sp, r7
 800b198:	bd80      	pop	{r7, pc}

0800b19a <HAL_QSPI_Receive>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800b19a:	b580      	push	{r7, lr}
 800b19c:	b08a      	sub	sp, #40	; 0x28
 800b19e:	af02      	add	r7, sp, #8
 800b1a0:	60f8      	str	r0, [r7, #12]
 800b1a2:	60b9      	str	r1, [r7, #8]
 800b1a4:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b1a6:	2300      	movs	r3, #0
 800b1a8:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800b1aa:	f7fa fda7 	bl	8005cfc <HAL_GetTick>
 800b1ae:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	699b      	ldr	r3, [r3, #24]
 800b1b6:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	3320      	adds	r3, #32
 800b1be:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b1c6:	b2db      	uxtb	r3, r3
 800b1c8:	2b01      	cmp	r3, #1
 800b1ca:	d101      	bne.n	800b1d0 <HAL_QSPI_Receive+0x36>
 800b1cc:	2302      	movs	r3, #2
 800b1ce:	e082      	b.n	800b2d6 <HAL_QSPI_Receive+0x13c>
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	2201      	movs	r2, #1
 800b1d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b1de:	b2db      	uxtb	r3, r3
 800b1e0:	2b01      	cmp	r3, #1
 800b1e2:	d171      	bne.n	800b2c8 <HAL_QSPI_Receive+0x12e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	2200      	movs	r2, #0
 800b1e8:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 800b1ea:	68bb      	ldr	r3, [r7, #8]
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d062      	beq.n	800b2b6 <HAL_QSPI_Receive+0x11c>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	2222      	movs	r2, #34	; 0x22
 800b1f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	691b      	ldr	r3, [r3, #16]
 800b1fe:	1c5a      	adds	r2, r3, #1
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	691b      	ldr	r3, [r3, #16]
 800b20a:	1c5a      	adds	r2, r3, #1
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	68ba      	ldr	r2, [r7, #8]
 800b214:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	695b      	ldr	r3, [r3, #20]
 800b21c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800b228:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	697a      	ldr	r2, [r7, #20]
 800b230:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 800b232:	e01c      	b.n	800b26e <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	9300      	str	r3, [sp, #0]
 800b238:	69bb      	ldr	r3, [r7, #24]
 800b23a:	2201      	movs	r2, #1
 800b23c:	2106      	movs	r1, #6
 800b23e:	68f8      	ldr	r0, [r7, #12]
 800b240:	f000 fa81 	bl	800b746 <QSPI_WaitFlagStateUntilTimeout>
 800b244:	4603      	mov	r3, r0
 800b246:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 800b248:	7ffb      	ldrb	r3, [r7, #31]
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d114      	bne.n	800b278 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b252:	693a      	ldr	r2, [r7, #16]
 800b254:	7812      	ldrb	r2, [r2, #0]
 800b256:	b2d2      	uxtb	r2, r2
 800b258:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b25e:	1c5a      	adds	r2, r3, #1
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b268:	1e5a      	subs	r2, r3, #1
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b272:	2b00      	cmp	r3, #0
 800b274:	d1de      	bne.n	800b234 <HAL_QSPI_Receive+0x9a>
 800b276:	e000      	b.n	800b27a <HAL_QSPI_Receive+0xe0>
          break;
 800b278:	bf00      	nop
      }

      if (status == HAL_OK)
 800b27a:	7ffb      	ldrb	r3, [r7, #31]
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d115      	bne.n	800b2ac <HAL_QSPI_Receive+0x112>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	9300      	str	r3, [sp, #0]
 800b284:	69bb      	ldr	r3, [r7, #24]
 800b286:	2201      	movs	r2, #1
 800b288:	2102      	movs	r1, #2
 800b28a:	68f8      	ldr	r0, [r7, #12]
 800b28c:	f000 fa5b 	bl	800b746 <QSPI_WaitFlagStateUntilTimeout>
 800b290:	4603      	mov	r3, r0
 800b292:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 800b294:	7ffb      	ldrb	r3, [r7, #31]
 800b296:	2b00      	cmp	r3, #0
 800b298:	d108      	bne.n	800b2ac <HAL_QSPI_Receive+0x112>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	2202      	movs	r2, #2
 800b2a0:	60da      	str	r2, [r3, #12]

#if  defined(QSPI1_V1_0)
          /* Workaround - Extra data written in the FIFO at the end of a read transfer */
          status = HAL_QSPI_Abort(hqspi);
 800b2a2:	68f8      	ldr	r0, [r7, #12]
 800b2a4:	f000 f944 	bl	800b530 <HAL_QSPI_Abort>
 800b2a8:	4603      	mov	r3, r0
 800b2aa:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	2201      	movs	r2, #1
 800b2b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b2b4:	e00a      	b.n	800b2cc <HAL_QSPI_Receive+0x132>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b2ba:	f043 0208 	orr.w	r2, r3, #8
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 800b2c2:	2301      	movs	r3, #1
 800b2c4:	77fb      	strb	r3, [r7, #31]
 800b2c6:	e001      	b.n	800b2cc <HAL_QSPI_Receive+0x132>
    }
  }
  else
  {
    status = HAL_BUSY;
 800b2c8:	2302      	movs	r3, #2
 800b2ca:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	2200      	movs	r2, #0
 800b2d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 800b2d4:	7ffb      	ldrb	r3, [r7, #31]
}
 800b2d6:	4618      	mov	r0, r3
 800b2d8:	3720      	adds	r7, #32
 800b2da:	46bd      	mov	sp, r7
 800b2dc:	bd80      	pop	{r7, pc}

0800b2de <HAL_QSPI_AutoPolling>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 800b2de:	b580      	push	{r7, lr}
 800b2e0:	b088      	sub	sp, #32
 800b2e2:	af02      	add	r7, sp, #8
 800b2e4:	60f8      	str	r0, [r7, #12]
 800b2e6:	60b9      	str	r1, [r7, #8]
 800b2e8:	607a      	str	r2, [r7, #4]
 800b2ea:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800b2ec:	f7fa fd06 	bl	8005cfc <HAL_GetTick>
 800b2f0:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b2f8:	b2db      	uxtb	r3, r3
 800b2fa:	2b01      	cmp	r3, #1
 800b2fc:	d101      	bne.n	800b302 <HAL_QSPI_AutoPolling+0x24>
 800b2fe:	2302      	movs	r3, #2
 800b300:	e060      	b.n	800b3c4 <HAL_QSPI_AutoPolling+0xe6>
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	2201      	movs	r2, #1
 800b306:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b310:	b2db      	uxtb	r3, r3
 800b312:	2b01      	cmp	r3, #1
 800b314:	d14f      	bne.n	800b3b6 <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	2200      	movs	r2, #0
 800b31a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	2242      	movs	r2, #66	; 0x42
 800b320:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800b324:	683b      	ldr	r3, [r7, #0]
 800b326:	9300      	str	r3, [sp, #0]
 800b328:	693b      	ldr	r3, [r7, #16]
 800b32a:	2200      	movs	r2, #0
 800b32c:	2120      	movs	r1, #32
 800b32e:	68f8      	ldr	r0, [r7, #12]
 800b330:	f000 fa09 	bl	800b746 <QSPI_WaitFlagStateUntilTimeout>
 800b334:	4603      	mov	r3, r0
 800b336:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800b338:	7dfb      	ldrb	r3, [r7, #23]
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d13d      	bne.n	800b3ba <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	687a      	ldr	r2, [r7, #4]
 800b344:	6812      	ldr	r2, [r2, #0]
 800b346:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	687a      	ldr	r2, [r7, #4]
 800b34e:	6852      	ldr	r2, [r2, #4]
 800b350:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	687a      	ldr	r2, [r7, #4]
 800b358:	6892      	ldr	r2, [r2, #8]
 800b35a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	691b      	ldr	r3, [r3, #16]
 800b36a:	431a      	orrs	r2, r3
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800b374:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	68da      	ldr	r2, [r3, #12]
 800b37a:	68bb      	ldr	r3, [r7, #8]
 800b37c:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800b37e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800b382:	68b9      	ldr	r1, [r7, #8]
 800b384:	68f8      	ldr	r0, [r7, #12]
 800b386:	f000 fa15 	bl	800b7b4 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 800b38a:	683b      	ldr	r3, [r7, #0]
 800b38c:	9300      	str	r3, [sp, #0]
 800b38e:	693b      	ldr	r3, [r7, #16]
 800b390:	2201      	movs	r2, #1
 800b392:	2108      	movs	r1, #8
 800b394:	68f8      	ldr	r0, [r7, #12]
 800b396:	f000 f9d6 	bl	800b746 <QSPI_WaitFlagStateUntilTimeout>
 800b39a:	4603      	mov	r3, r0
 800b39c:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 800b39e:	7dfb      	ldrb	r3, [r7, #23]
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d10a      	bne.n	800b3ba <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	2208      	movs	r2, #8
 800b3aa:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	2201      	movs	r2, #1
 800b3b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b3b4:	e001      	b.n	800b3ba <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800b3b6:	2302      	movs	r3, #2
 800b3b8:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	2200      	movs	r2, #0
 800b3be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800b3c2:	7dfb      	ldrb	r3, [r7, #23]
}
 800b3c4:	4618      	mov	r0, r3
 800b3c6:	3718      	adds	r7, #24
 800b3c8:	46bd      	mov	sp, r7
 800b3ca:	bd80      	pop	{r7, pc}

0800b3cc <HAL_QSPI_MemoryMapped>:
  * @param  cfg : structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_MemoryMapped(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_MemoryMappedTypeDef *cfg)
{
 800b3cc:	b580      	push	{r7, lr}
 800b3ce:	b088      	sub	sp, #32
 800b3d0:	af02      	add	r7, sp, #8
 800b3d2:	60f8      	str	r0, [r7, #12]
 800b3d4:	60b9      	str	r1, [r7, #8]
 800b3d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800b3d8:	f7fa fc90 	bl	8005cfc <HAL_GetTick>
 800b3dc:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  assert_param(IS_QSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b3e4:	b2db      	uxtb	r3, r3
 800b3e6:	2b01      	cmp	r3, #1
 800b3e8:	d101      	bne.n	800b3ee <HAL_QSPI_MemoryMapped+0x22>
 800b3ea:	2302      	movs	r3, #2
 800b3ec:	e04c      	b.n	800b488 <HAL_QSPI_MemoryMapped+0xbc>
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	2201      	movs	r2, #1
 800b3f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b3fc:	b2db      	uxtb	r3, r3
 800b3fe:	2b01      	cmp	r3, #1
 800b400:	d13b      	bne.n	800b47a <HAL_QSPI_MemoryMapped+0xae>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	2200      	movs	r2, #0
 800b406:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	2282      	movs	r2, #130	; 0x82
 800b40c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b414:	9300      	str	r3, [sp, #0]
 800b416:	693b      	ldr	r3, [r7, #16]
 800b418:	2200      	movs	r2, #0
 800b41a:	2120      	movs	r1, #32
 800b41c:	68f8      	ldr	r0, [r7, #12]
 800b41e:	f000 f992 	bl	800b746 <QSPI_WaitFlagStateUntilTimeout>
 800b422:	4603      	mov	r3, r0
 800b424:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800b426:	7dfb      	ldrb	r3, [r7, #23]
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d128      	bne.n	800b47e <HAL_QSPI_MemoryMapped+0xb2>
    {
      /* Configure QSPI: CR register with timeout counter enable */
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	f023 0108 	bic.w	r1, r3, #8
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	685a      	ldr	r2, [r3, #4]
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	430a      	orrs	r2, r1
 800b440:	601a      	str	r2, [r3, #0]

    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	685b      	ldr	r3, [r3, #4]
 800b446:	2b08      	cmp	r3, #8
 800b448:	d110      	bne.n	800b46c <HAL_QSPI_MemoryMapped+0xa0>
      {
        assert_param(IS_QSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure QSPI: LPTR register with the low-power timeout value */
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	687a      	ldr	r2, [r7, #4]
 800b450:	6812      	ldr	r2, [r2, #0]
 800b452:	631a      	str	r2, [r3, #48]	; 0x30

        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	2210      	movs	r2, #16
 800b45a:	60da      	str	r2, [r3, #12]

        /* Enable the QSPI TimeOut Interrupt */
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	681a      	ldr	r2, [r3, #0]
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800b46a:	601a      	str	r2, [r3, #0]
      }

      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 800b46c:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800b470:	68b9      	ldr	r1, [r7, #8]
 800b472:	68f8      	ldr	r0, [r7, #12]
 800b474:	f000 f99e 	bl	800b7b4 <QSPI_Config>
 800b478:	e001      	b.n	800b47e <HAL_QSPI_MemoryMapped+0xb2>
    }
  }
  else
  {
    status = HAL_BUSY;
 800b47a:	2302      	movs	r3, #2
 800b47c:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	2200      	movs	r2, #0
 800b482:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800b486:	7dfb      	ldrb	r3, [r7, #23]
}
 800b488:	4618      	mov	r0, r3
 800b48a:	3718      	adds	r7, #24
 800b48c:	46bd      	mov	sp, r7
 800b48e:	bd80      	pop	{r7, pc}

0800b490 <HAL_QSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_ErrorCallback(QSPI_HandleTypeDef *hqspi)
{
 800b490:	b480      	push	{r7}
 800b492:	b083      	sub	sp, #12
 800b494:	af00      	add	r7, sp, #0
 800b496:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_ErrorCallback could be implemented in the user file
   */
}
 800b498:	bf00      	nop
 800b49a:	370c      	adds	r7, #12
 800b49c:	46bd      	mov	sp, r7
 800b49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a2:	4770      	bx	lr

0800b4a4 <HAL_QSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_AbortCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 800b4a4:	b480      	push	{r7}
 800b4a6:	b083      	sub	sp, #12
 800b4a8:	af00      	add	r7, sp, #0
 800b4aa:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_AbortCpltCallback could be implemented in the user file
   */
}
 800b4ac:	bf00      	nop
 800b4ae:	370c      	adds	r7, #12
 800b4b0:	46bd      	mov	sp, r7
 800b4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b6:	4770      	bx	lr

0800b4b8 <HAL_QSPI_CmdCpltCallback>:
  * @brief  Command completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_CmdCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 800b4b8:	b480      	push	{r7}
 800b4ba:	b083      	sub	sp, #12
 800b4bc:	af00      	add	r7, sp, #0
 800b4be:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_CmdCpltCallback could be implemented in the user file
   */
}
 800b4c0:	bf00      	nop
 800b4c2:	370c      	adds	r7, #12
 800b4c4:	46bd      	mov	sp, r7
 800b4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ca:	4770      	bx	lr

0800b4cc <HAL_QSPI_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_RxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 800b4cc:	b480      	push	{r7}
 800b4ce:	b083      	sub	sp, #12
 800b4d0:	af00      	add	r7, sp, #0
 800b4d2:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_RxCpltCallback could be implemented in the user file
   */
}
 800b4d4:	bf00      	nop
 800b4d6:	370c      	adds	r7, #12
 800b4d8:	46bd      	mov	sp, r7
 800b4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4de:	4770      	bx	lr

0800b4e0 <HAL_QSPI_TxCpltCallback>:
  * @brief  Tx Transfer completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 800b4e0:	b480      	push	{r7}
 800b4e2:	b083      	sub	sp, #12
 800b4e4:	af00      	add	r7, sp, #0
 800b4e6:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_TxCpltCallback could be implemented in the user file
   */
}
 800b4e8:	bf00      	nop
 800b4ea:	370c      	adds	r7, #12
 800b4ec:	46bd      	mov	sp, r7
 800b4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f2:	4770      	bx	lr

0800b4f4 <HAL_QSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_FifoThresholdCallback(QSPI_HandleTypeDef *hqspi)
{
 800b4f4:	b480      	push	{r7}
 800b4f6:	b083      	sub	sp, #12
 800b4f8:	af00      	add	r7, sp, #0
 800b4fa:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
 800b4fc:	bf00      	nop
 800b4fe:	370c      	adds	r7, #12
 800b500:	46bd      	mov	sp, r7
 800b502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b506:	4770      	bx	lr

0800b508 <HAL_QSPI_StatusMatchCallback>:
  * @brief  Status Match callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_StatusMatchCallback(QSPI_HandleTypeDef *hqspi)
{
 800b508:	b480      	push	{r7}
 800b50a:	b083      	sub	sp, #12
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_StatusMatchCallback could be implemented in the user file
   */
}
 800b510:	bf00      	nop
 800b512:	370c      	adds	r7, #12
 800b514:	46bd      	mov	sp, r7
 800b516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b51a:	4770      	bx	lr

0800b51c <HAL_QSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TimeOutCallback(QSPI_HandleTypeDef *hqspi)
{
 800b51c:	b480      	push	{r7}
 800b51e:	b083      	sub	sp, #12
 800b520:	af00      	add	r7, sp, #0
 800b522:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_TimeOutCallback could be implemented in the user file
   */
}
 800b524:	bf00      	nop
 800b526:	370c      	adds	r7, #12
 800b528:	46bd      	mov	sp, r7
 800b52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b52e:	4770      	bx	lr

0800b530 <HAL_QSPI_Abort>:
* @brief  Abort the current transmission.
* @param  hqspi : QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort(QSPI_HandleTypeDef *hqspi)
{
 800b530:	b580      	push	{r7, lr}
 800b532:	b086      	sub	sp, #24
 800b534:	af02      	add	r7, sp, #8
 800b536:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b538:	2300      	movs	r3, #0
 800b53a:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 800b53c:	f7fa fbde 	bl	8005cfc <HAL_GetTick>
 800b540:	60b8      	str	r0, [r7, #8]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b548:	b2db      	uxtb	r3, r3
 800b54a:	f003 0302 	and.w	r3, r3, #2
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d056      	beq.n	800b600 <HAL_QSPI_Abort+0xd0>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	2200      	movs	r2, #0
 800b556:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	f003 0304 	and.w	r3, r3, #4
 800b564:	2b00      	cmp	r3, #0
 800b566:	d017      	beq.n	800b598 <HAL_QSPI_Abort+0x68>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	681a      	ldr	r2, [r3, #0]
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	f022 0204 	bic.w	r2, r2, #4
 800b576:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      status = HAL_DMA_Abort(hqspi->hdma);
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b57c:	4618      	mov	r0, r3
 800b57e:	f7fb facb 	bl	8006b18 <HAL_DMA_Abort>
 800b582:	4603      	mov	r3, r0
 800b584:	73fb      	strb	r3, [r7, #15]
      if(status != HAL_OK)
 800b586:	7bfb      	ldrb	r3, [r7, #15]
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d005      	beq.n	800b598 <HAL_QSPI_Abort+0x68>
      {
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b590:	f043 0204 	orr.w	r2, r3, #4
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	681a      	ldr	r2, [r3, #0]
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	f042 0202 	orr.w	r2, r2, #2
 800b5a6:	601a      	str	r2, [r3, #0]

    /* Wait until TC flag is set to go back in idle state */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b5ac:	9300      	str	r3, [sp, #0]
 800b5ae:	68bb      	ldr	r3, [r7, #8]
 800b5b0:	2201      	movs	r2, #1
 800b5b2:	2102      	movs	r1, #2
 800b5b4:	6878      	ldr	r0, [r7, #4]
 800b5b6:	f000 f8c6 	bl	800b746 <QSPI_WaitFlagStateUntilTimeout>
 800b5ba:	4603      	mov	r3, r0
 800b5bc:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800b5be:	7bfb      	ldrb	r3, [r7, #15]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d10e      	bne.n	800b5e2 <HAL_QSPI_Abort+0xb2>
    {
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	2202      	movs	r2, #2
 800b5ca:	60da      	str	r2, [r3, #12]

      /* Wait until BUSY flag is reset */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b5d0:	9300      	str	r3, [sp, #0]
 800b5d2:	68bb      	ldr	r3, [r7, #8]
 800b5d4:	2200      	movs	r2, #0
 800b5d6:	2120      	movs	r1, #32
 800b5d8:	6878      	ldr	r0, [r7, #4]
 800b5da:	f000 f8b4 	bl	800b746 <QSPI_WaitFlagStateUntilTimeout>
 800b5de:	4603      	mov	r3, r0
 800b5e0:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800b5e2:	7bfb      	ldrb	r3, [r7, #15]
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d10b      	bne.n	800b600 <HAL_QSPI_Abort+0xd0>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	695a      	ldr	r2, [r3, #20]
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800b5f6:	615a      	str	r2, [r3, #20]

      /* Update state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	2201      	movs	r2, #1
 800b5fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
  }

  return status;
 800b600:	7bfb      	ldrb	r3, [r7, #15]
}
 800b602:	4618      	mov	r0, r3
 800b604:	3710      	adds	r7, #16
 800b606:	46bd      	mov	sp, r7
 800b608:	bd80      	pop	{r7, pc}
	...

0800b60c <HAL_QSPI_Abort_IT>:
* @brief  Abort the current transmission (non-blocking function)
* @param  hqspi : QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort_IT(QSPI_HandleTypeDef *hqspi)
{
 800b60c:	b580      	push	{r7, lr}
 800b60e:	b084      	sub	sp, #16
 800b610:	af00      	add	r7, sp, #0
 800b612:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b614:	2300      	movs	r3, #0
 800b616:	73fb      	strb	r3, [r7, #15]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b61e:	b2db      	uxtb	r3, r3
 800b620:	f003 0302 	and.w	r3, r3, #2
 800b624:	2b00      	cmp	r3, #0
 800b626:	d046      	beq.n	800b6b6 <HAL_QSPI_Abort_IT+0xaa>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	2200      	movs	r2, #0
 800b62c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_ABORT;
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	2208      	movs	r2, #8
 800b634:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable all interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_TO | QSPI_IT_SM | QSPI_IT_FT | QSPI_IT_TC | QSPI_IT_TE));
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	681a      	ldr	r2, [r3, #0]
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 800b646:	601a      	str	r2, [r3, #0]

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	f003 0304 	and.w	r3, r3, #4
 800b652:	2b00      	cmp	r3, #0
 800b654:	d01b      	beq.n	800b68e <HAL_QSPI_Abort_IT+0x82>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	681a      	ldr	r2, [r3, #0]
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	f022 0204 	bic.w	r2, r2, #4
 800b664:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      hqspi->hdma->XferAbortCallback = QSPI_DMAAbortCplt;
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b66a:	4a15      	ldr	r2, [pc, #84]	; (800b6c0 <HAL_QSPI_Abort_IT+0xb4>)
 800b66c:	651a      	str	r2, [r3, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hqspi->hdma) != HAL_OK)
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b672:	4618      	mov	r0, r3
 800b674:	f7fb fac0 	bl	8006bf8 <HAL_DMA_Abort_IT>
 800b678:	4603      	mov	r3, r0
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d01b      	beq.n	800b6b6 <HAL_QSPI_Abort_IT+0xaa>
      {
        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	2201      	movs	r2, #1
 800b682:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        
        /* Abort Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->AbortCpltCallback(hqspi);
#else
        HAL_QSPI_AbortCpltCallback(hqspi);
 800b686:	6878      	ldr	r0, [r7, #4]
 800b688:	f7ff ff0c 	bl	800b4a4 <HAL_QSPI_AbortCpltCallback>
 800b68c:	e013      	b.n	800b6b6 <HAL_QSPI_Abort_IT+0xaa>
      }
    }
    else
    {
      /* Clear interrupt */
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	2202      	movs	r2, #2
 800b694:	60da      	str	r2, [r3, #12]

      /* Enable the QSPI Transfer Complete Interrupt */
      __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	681a      	ldr	r2, [r3, #0]
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800b6a4:	601a      	str	r2, [r3, #0]

      /* Configure QSPI: CR register with Abort request */
      SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	681a      	ldr	r2, [r3, #0]
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	f042 0202 	orr.w	r2, r2, #2
 800b6b4:	601a      	str	r2, [r3, #0]
    }
  }
  return status;
 800b6b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6b8:	4618      	mov	r0, r3
 800b6ba:	3710      	adds	r7, #16
 800b6bc:	46bd      	mov	sp, r7
 800b6be:	bd80      	pop	{r7, pc}
 800b6c0:	0800b6e1 	.word	0x0800b6e1

0800b6c4 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800b6c4:	b480      	push	{r7}
 800b6c6:	b083      	sub	sp, #12
 800b6c8:	af00      	add	r7, sp, #0
 800b6ca:	6078      	str	r0, [r7, #4]
 800b6cc:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	683a      	ldr	r2, [r7, #0]
 800b6d2:	649a      	str	r2, [r3, #72]	; 0x48
}
 800b6d4:	bf00      	nop
 800b6d6:	370c      	adds	r7, #12
 800b6d8:	46bd      	mov	sp, r7
 800b6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6de:	4770      	bx	lr

0800b6e0 <QSPI_DMAAbortCplt>:
  * @brief  DMA QSPI abort complete callback.
  * @param  hdma : DMA handle
  * @retval None
  */
static void QSPI_DMAAbortCplt(DMA_HandleTypeDef *hdma)
{
 800b6e0:	b580      	push	{r7, lr}
 800b6e2:	b084      	sub	sp, #16
 800b6e4:	af00      	add	r7, sp, #0
 800b6e6:	6078      	str	r0, [r7, #4]
  QSPI_HandleTypeDef* hqspi = ( QSPI_HandleTypeDef* )(hdma->Parent);
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6ec:	60fb      	str	r3, [r7, #12]

  hqspi->RxXferCount = 0U;
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	2200      	movs	r2, #0
 800b6f2:	639a      	str	r2, [r3, #56]	; 0x38
  hqspi->TxXferCount = 0U;
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	2200      	movs	r2, #0
 800b6f8:	62da      	str	r2, [r3, #44]	; 0x2c

  if(hqspi->State == HAL_QSPI_STATE_ABORT)
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b700:	b2db      	uxtb	r3, r3
 800b702:	2b08      	cmp	r3, #8
 800b704:	d114      	bne.n	800b730 <QSPI_DMAAbortCplt+0x50>
  {
    /* DMA Abort called by QSPI abort */
    /* Clear interrupt */
    __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	2202      	movs	r2, #2
 800b70c:	60da      	str	r2, [r3, #12]

    /* Enable the QSPI Transfer Complete Interrupt */
    __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	681a      	ldr	r2, [r3, #0]
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800b71c:	601a      	str	r2, [r3, #0]

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	681a      	ldr	r2, [r3, #0]
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	f042 0202 	orr.w	r2, r2, #2
 800b72c:	601a      	str	r2, [r3, #0]
    hqspi->ErrorCallback(hqspi);
#else
    HAL_QSPI_ErrorCallback(hqspi);
#endif
  }
}
 800b72e:	e006      	b.n	800b73e <QSPI_DMAAbortCplt+0x5e>
    hqspi->State = HAL_QSPI_STATE_READY;
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	2201      	movs	r2, #1
 800b734:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    HAL_QSPI_ErrorCallback(hqspi);
 800b738:	68f8      	ldr	r0, [r7, #12]
 800b73a:	f7ff fea9 	bl	800b490 <HAL_QSPI_ErrorCallback>
}
 800b73e:	bf00      	nop
 800b740:	3710      	adds	r7, #16
 800b742:	46bd      	mov	sp, r7
 800b744:	bd80      	pop	{r7, pc}

0800b746 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800b746:	b580      	push	{r7, lr}
 800b748:	b084      	sub	sp, #16
 800b74a:	af00      	add	r7, sp, #0
 800b74c:	60f8      	str	r0, [r7, #12]
 800b74e:	60b9      	str	r1, [r7, #8]
 800b750:	603b      	str	r3, [r7, #0]
 800b752:	4613      	mov	r3, r2
 800b754:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800b756:	e01a      	b.n	800b78e <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b758:	69bb      	ldr	r3, [r7, #24]
 800b75a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b75e:	d016      	beq.n	800b78e <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b760:	f7fa facc 	bl	8005cfc <HAL_GetTick>
 800b764:	4602      	mov	r2, r0
 800b766:	683b      	ldr	r3, [r7, #0]
 800b768:	1ad3      	subs	r3, r2, r3
 800b76a:	69ba      	ldr	r2, [r7, #24]
 800b76c:	429a      	cmp	r2, r3
 800b76e:	d302      	bcc.n	800b776 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800b770:	69bb      	ldr	r3, [r7, #24]
 800b772:	2b00      	cmp	r3, #0
 800b774:	d10b      	bne.n	800b78e <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	2204      	movs	r2, #4
 800b77a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b782:	f043 0201 	orr.w	r2, r3, #1
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 800b78a:	2301      	movs	r3, #1
 800b78c:	e00e      	b.n	800b7ac <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	689a      	ldr	r2, [r3, #8]
 800b794:	68bb      	ldr	r3, [r7, #8]
 800b796:	4013      	ands	r3, r2
 800b798:	2b00      	cmp	r3, #0
 800b79a:	bf14      	ite	ne
 800b79c:	2301      	movne	r3, #1
 800b79e:	2300      	moveq	r3, #0
 800b7a0:	b2db      	uxtb	r3, r3
 800b7a2:	461a      	mov	r2, r3
 800b7a4:	79fb      	ldrb	r3, [r7, #7]
 800b7a6:	429a      	cmp	r2, r3
 800b7a8:	d1d6      	bne.n	800b758 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b7aa:	2300      	movs	r3, #0
}
 800b7ac:	4618      	mov	r0, r3
 800b7ae:	3710      	adds	r7, #16
 800b7b0:	46bd      	mov	sp, r7
 800b7b2:	bd80      	pop	{r7, pc}

0800b7b4 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 800b7b4:	b480      	push	{r7}
 800b7b6:	b085      	sub	sp, #20
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	60f8      	str	r0, [r7, #12]
 800b7bc:	60b9      	str	r1, [r7, #8]
 800b7be:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 800b7c0:	68bb      	ldr	r3, [r7, #8]
 800b7c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d009      	beq.n	800b7dc <QSPI_Config+0x28>
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800b7ce:	d005      	beq.n	800b7dc <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800b7d0:	68bb      	ldr	r3, [r7, #8]
 800b7d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	3a01      	subs	r2, #1
 800b7da:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800b7dc:	68bb      	ldr	r3, [r7, #8]
 800b7de:	699b      	ldr	r3, [r3, #24]
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	f000 80b9 	beq.w	800b958 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800b7e6:	68bb      	ldr	r3, [r7, #8]
 800b7e8:	6a1b      	ldr	r3, [r3, #32]
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d05f      	beq.n	800b8ae <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	68ba      	ldr	r2, [r7, #8]
 800b7f4:	6892      	ldr	r2, [r2, #8]
 800b7f6:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800b7f8:	68bb      	ldr	r3, [r7, #8]
 800b7fa:	69db      	ldr	r3, [r3, #28]
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d031      	beq.n	800b864 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b800:	68bb      	ldr	r3, [r7, #8]
 800b802:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b804:	68bb      	ldr	r3, [r7, #8]
 800b806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b808:	431a      	orrs	r2, r3
 800b80a:	68bb      	ldr	r3, [r7, #8]
 800b80c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b80e:	431a      	orrs	r2, r3
 800b810:	68bb      	ldr	r3, [r7, #8]
 800b812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b814:	431a      	orrs	r2, r3
 800b816:	68bb      	ldr	r3, [r7, #8]
 800b818:	695b      	ldr	r3, [r3, #20]
 800b81a:	049b      	lsls	r3, r3, #18
 800b81c:	431a      	orrs	r2, r3
 800b81e:	68bb      	ldr	r3, [r7, #8]
 800b820:	691b      	ldr	r3, [r3, #16]
 800b822:	431a      	orrs	r2, r3
 800b824:	68bb      	ldr	r3, [r7, #8]
 800b826:	6a1b      	ldr	r3, [r3, #32]
 800b828:	431a      	orrs	r2, r3
 800b82a:	68bb      	ldr	r3, [r7, #8]
 800b82c:	68db      	ldr	r3, [r3, #12]
 800b82e:	431a      	orrs	r2, r3
 800b830:	68bb      	ldr	r3, [r7, #8]
 800b832:	69db      	ldr	r3, [r3, #28]
 800b834:	431a      	orrs	r2, r3
 800b836:	68bb      	ldr	r3, [r7, #8]
 800b838:	699b      	ldr	r3, [r3, #24]
 800b83a:	431a      	orrs	r2, r3
 800b83c:	68bb      	ldr	r3, [r7, #8]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	ea42 0103 	orr.w	r1, r2, r3
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	687a      	ldr	r2, [r7, #4]
 800b84a:	430a      	orrs	r2, r1
 800b84c:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800b854:	f000 812e 	beq.w	800bab4 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	68ba      	ldr	r2, [r7, #8]
 800b85e:	6852      	ldr	r2, [r2, #4]
 800b860:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 800b862:	e127      	b.n	800bab4 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b864:	68bb      	ldr	r3, [r7, #8]
 800b866:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b868:	68bb      	ldr	r3, [r7, #8]
 800b86a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b86c:	431a      	orrs	r2, r3
 800b86e:	68bb      	ldr	r3, [r7, #8]
 800b870:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b872:	431a      	orrs	r2, r3
 800b874:	68bb      	ldr	r3, [r7, #8]
 800b876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b878:	431a      	orrs	r2, r3
 800b87a:	68bb      	ldr	r3, [r7, #8]
 800b87c:	695b      	ldr	r3, [r3, #20]
 800b87e:	049b      	lsls	r3, r3, #18
 800b880:	431a      	orrs	r2, r3
 800b882:	68bb      	ldr	r3, [r7, #8]
 800b884:	691b      	ldr	r3, [r3, #16]
 800b886:	431a      	orrs	r2, r3
 800b888:	68bb      	ldr	r3, [r7, #8]
 800b88a:	6a1b      	ldr	r3, [r3, #32]
 800b88c:	431a      	orrs	r2, r3
 800b88e:	68bb      	ldr	r3, [r7, #8]
 800b890:	69db      	ldr	r3, [r3, #28]
 800b892:	431a      	orrs	r2, r3
 800b894:	68bb      	ldr	r3, [r7, #8]
 800b896:	699b      	ldr	r3, [r3, #24]
 800b898:	431a      	orrs	r2, r3
 800b89a:	68bb      	ldr	r3, [r7, #8]
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	ea42 0103 	orr.w	r1, r2, r3
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	687a      	ldr	r2, [r7, #4]
 800b8a8:	430a      	orrs	r2, r1
 800b8aa:	615a      	str	r2, [r3, #20]
}
 800b8ac:	e102      	b.n	800bab4 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800b8ae:	68bb      	ldr	r3, [r7, #8]
 800b8b0:	69db      	ldr	r3, [r3, #28]
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d02e      	beq.n	800b914 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b8b6:	68bb      	ldr	r3, [r7, #8]
 800b8b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8ba:	68bb      	ldr	r3, [r7, #8]
 800b8bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8be:	431a      	orrs	r2, r3
 800b8c0:	68bb      	ldr	r3, [r7, #8]
 800b8c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8c4:	431a      	orrs	r2, r3
 800b8c6:	68bb      	ldr	r3, [r7, #8]
 800b8c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8ca:	431a      	orrs	r2, r3
 800b8cc:	68bb      	ldr	r3, [r7, #8]
 800b8ce:	695b      	ldr	r3, [r3, #20]
 800b8d0:	049b      	lsls	r3, r3, #18
 800b8d2:	431a      	orrs	r2, r3
 800b8d4:	68bb      	ldr	r3, [r7, #8]
 800b8d6:	6a1b      	ldr	r3, [r3, #32]
 800b8d8:	431a      	orrs	r2, r3
 800b8da:	68bb      	ldr	r3, [r7, #8]
 800b8dc:	68db      	ldr	r3, [r3, #12]
 800b8de:	431a      	orrs	r2, r3
 800b8e0:	68bb      	ldr	r3, [r7, #8]
 800b8e2:	69db      	ldr	r3, [r3, #28]
 800b8e4:	431a      	orrs	r2, r3
 800b8e6:	68bb      	ldr	r3, [r7, #8]
 800b8e8:	699b      	ldr	r3, [r3, #24]
 800b8ea:	431a      	orrs	r2, r3
 800b8ec:	68bb      	ldr	r3, [r7, #8]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	ea42 0103 	orr.w	r1, r2, r3
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	687a      	ldr	r2, [r7, #4]
 800b8fa:	430a      	orrs	r2, r1
 800b8fc:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800b904:	f000 80d6 	beq.w	800bab4 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	68ba      	ldr	r2, [r7, #8]
 800b90e:	6852      	ldr	r2, [r2, #4]
 800b910:	619a      	str	r2, [r3, #24]
}
 800b912:	e0cf      	b.n	800bab4 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b914:	68bb      	ldr	r3, [r7, #8]
 800b916:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b918:	68bb      	ldr	r3, [r7, #8]
 800b91a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b91c:	431a      	orrs	r2, r3
 800b91e:	68bb      	ldr	r3, [r7, #8]
 800b920:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b922:	431a      	orrs	r2, r3
 800b924:	68bb      	ldr	r3, [r7, #8]
 800b926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b928:	431a      	orrs	r2, r3
 800b92a:	68bb      	ldr	r3, [r7, #8]
 800b92c:	695b      	ldr	r3, [r3, #20]
 800b92e:	049b      	lsls	r3, r3, #18
 800b930:	431a      	orrs	r2, r3
 800b932:	68bb      	ldr	r3, [r7, #8]
 800b934:	6a1b      	ldr	r3, [r3, #32]
 800b936:	431a      	orrs	r2, r3
 800b938:	68bb      	ldr	r3, [r7, #8]
 800b93a:	69db      	ldr	r3, [r3, #28]
 800b93c:	431a      	orrs	r2, r3
 800b93e:	68bb      	ldr	r3, [r7, #8]
 800b940:	699b      	ldr	r3, [r3, #24]
 800b942:	431a      	orrs	r2, r3
 800b944:	68bb      	ldr	r3, [r7, #8]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	ea42 0103 	orr.w	r1, r2, r3
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	687a      	ldr	r2, [r7, #4]
 800b952:	430a      	orrs	r2, r1
 800b954:	615a      	str	r2, [r3, #20]
}
 800b956:	e0ad      	b.n	800bab4 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800b958:	68bb      	ldr	r3, [r7, #8]
 800b95a:	6a1b      	ldr	r3, [r3, #32]
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d058      	beq.n	800ba12 <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	68ba      	ldr	r2, [r7, #8]
 800b966:	6892      	ldr	r2, [r2, #8]
 800b968:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800b96a:	68bb      	ldr	r3, [r7, #8]
 800b96c:	69db      	ldr	r3, [r3, #28]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d02d      	beq.n	800b9ce <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b972:	68bb      	ldr	r3, [r7, #8]
 800b974:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b976:	68bb      	ldr	r3, [r7, #8]
 800b978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b97a:	431a      	orrs	r2, r3
 800b97c:	68bb      	ldr	r3, [r7, #8]
 800b97e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b980:	431a      	orrs	r2, r3
 800b982:	68bb      	ldr	r3, [r7, #8]
 800b984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b986:	431a      	orrs	r2, r3
 800b988:	68bb      	ldr	r3, [r7, #8]
 800b98a:	695b      	ldr	r3, [r3, #20]
 800b98c:	049b      	lsls	r3, r3, #18
 800b98e:	431a      	orrs	r2, r3
 800b990:	68bb      	ldr	r3, [r7, #8]
 800b992:	691b      	ldr	r3, [r3, #16]
 800b994:	431a      	orrs	r2, r3
 800b996:	68bb      	ldr	r3, [r7, #8]
 800b998:	6a1b      	ldr	r3, [r3, #32]
 800b99a:	431a      	orrs	r2, r3
 800b99c:	68bb      	ldr	r3, [r7, #8]
 800b99e:	68db      	ldr	r3, [r3, #12]
 800b9a0:	431a      	orrs	r2, r3
 800b9a2:	68bb      	ldr	r3, [r7, #8]
 800b9a4:	69db      	ldr	r3, [r3, #28]
 800b9a6:	431a      	orrs	r2, r3
 800b9a8:	68bb      	ldr	r3, [r7, #8]
 800b9aa:	699b      	ldr	r3, [r3, #24]
 800b9ac:	ea42 0103 	orr.w	r1, r2, r3
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	687a      	ldr	r2, [r7, #4]
 800b9b6:	430a      	orrs	r2, r1
 800b9b8:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800b9c0:	d078      	beq.n	800bab4 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	68ba      	ldr	r2, [r7, #8]
 800b9c8:	6852      	ldr	r2, [r2, #4]
 800b9ca:	619a      	str	r2, [r3, #24]
}
 800b9cc:	e072      	b.n	800bab4 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b9ce:	68bb      	ldr	r3, [r7, #8]
 800b9d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9d2:	68bb      	ldr	r3, [r7, #8]
 800b9d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9d6:	431a      	orrs	r2, r3
 800b9d8:	68bb      	ldr	r3, [r7, #8]
 800b9da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b9dc:	431a      	orrs	r2, r3
 800b9de:	68bb      	ldr	r3, [r7, #8]
 800b9e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9e2:	431a      	orrs	r2, r3
 800b9e4:	68bb      	ldr	r3, [r7, #8]
 800b9e6:	695b      	ldr	r3, [r3, #20]
 800b9e8:	049b      	lsls	r3, r3, #18
 800b9ea:	431a      	orrs	r2, r3
 800b9ec:	68bb      	ldr	r3, [r7, #8]
 800b9ee:	691b      	ldr	r3, [r3, #16]
 800b9f0:	431a      	orrs	r2, r3
 800b9f2:	68bb      	ldr	r3, [r7, #8]
 800b9f4:	6a1b      	ldr	r3, [r3, #32]
 800b9f6:	431a      	orrs	r2, r3
 800b9f8:	68bb      	ldr	r3, [r7, #8]
 800b9fa:	69db      	ldr	r3, [r3, #28]
 800b9fc:	431a      	orrs	r2, r3
 800b9fe:	68bb      	ldr	r3, [r7, #8]
 800ba00:	699b      	ldr	r3, [r3, #24]
 800ba02:	ea42 0103 	orr.w	r1, r2, r3
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	687a      	ldr	r2, [r7, #4]
 800ba0c:	430a      	orrs	r2, r1
 800ba0e:	615a      	str	r2, [r3, #20]
}
 800ba10:	e050      	b.n	800bab4 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800ba12:	68bb      	ldr	r3, [r7, #8]
 800ba14:	69db      	ldr	r3, [r3, #28]
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d02a      	beq.n	800ba70 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800ba1a:	68bb      	ldr	r3, [r7, #8]
 800ba1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba1e:	68bb      	ldr	r3, [r7, #8]
 800ba20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba22:	431a      	orrs	r2, r3
 800ba24:	68bb      	ldr	r3, [r7, #8]
 800ba26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba28:	431a      	orrs	r2, r3
 800ba2a:	68bb      	ldr	r3, [r7, #8]
 800ba2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba2e:	431a      	orrs	r2, r3
 800ba30:	68bb      	ldr	r3, [r7, #8]
 800ba32:	695b      	ldr	r3, [r3, #20]
 800ba34:	049b      	lsls	r3, r3, #18
 800ba36:	431a      	orrs	r2, r3
 800ba38:	68bb      	ldr	r3, [r7, #8]
 800ba3a:	6a1b      	ldr	r3, [r3, #32]
 800ba3c:	431a      	orrs	r2, r3
 800ba3e:	68bb      	ldr	r3, [r7, #8]
 800ba40:	68db      	ldr	r3, [r3, #12]
 800ba42:	431a      	orrs	r2, r3
 800ba44:	68bb      	ldr	r3, [r7, #8]
 800ba46:	69db      	ldr	r3, [r3, #28]
 800ba48:	431a      	orrs	r2, r3
 800ba4a:	68bb      	ldr	r3, [r7, #8]
 800ba4c:	699b      	ldr	r3, [r3, #24]
 800ba4e:	ea42 0103 	orr.w	r1, r2, r3
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	687a      	ldr	r2, [r7, #4]
 800ba58:	430a      	orrs	r2, r1
 800ba5a:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800ba62:	d027      	beq.n	800bab4 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	68ba      	ldr	r2, [r7, #8]
 800ba6a:	6852      	ldr	r2, [r2, #4]
 800ba6c:	619a      	str	r2, [r3, #24]
}
 800ba6e:	e021      	b.n	800bab4 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 800ba70:	68bb      	ldr	r3, [r7, #8]
 800ba72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d01d      	beq.n	800bab4 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800ba78:	68bb      	ldr	r3, [r7, #8]
 800ba7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba7c:	68bb      	ldr	r3, [r7, #8]
 800ba7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba80:	431a      	orrs	r2, r3
 800ba82:	68bb      	ldr	r3, [r7, #8]
 800ba84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba86:	431a      	orrs	r2, r3
 800ba88:	68bb      	ldr	r3, [r7, #8]
 800ba8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba8c:	431a      	orrs	r2, r3
 800ba8e:	68bb      	ldr	r3, [r7, #8]
 800ba90:	695b      	ldr	r3, [r3, #20]
 800ba92:	049b      	lsls	r3, r3, #18
 800ba94:	431a      	orrs	r2, r3
 800ba96:	68bb      	ldr	r3, [r7, #8]
 800ba98:	6a1b      	ldr	r3, [r3, #32]
 800ba9a:	431a      	orrs	r2, r3
 800ba9c:	68bb      	ldr	r3, [r7, #8]
 800ba9e:	69db      	ldr	r3, [r3, #28]
 800baa0:	431a      	orrs	r2, r3
 800baa2:	68bb      	ldr	r3, [r7, #8]
 800baa4:	699b      	ldr	r3, [r3, #24]
 800baa6:	ea42 0103 	orr.w	r1, r2, r3
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	687a      	ldr	r2, [r7, #4]
 800bab0:	430a      	orrs	r2, r1
 800bab2:	615a      	str	r2, [r3, #20]
}
 800bab4:	bf00      	nop
 800bab6:	3714      	adds	r7, #20
 800bab8:	46bd      	mov	sp, r7
 800baba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800babe:	4770      	bx	lr

0800bac0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800bac0:	b580      	push	{r7, lr}
 800bac2:	b086      	sub	sp, #24
 800bac4:	af00      	add	r7, sp, #0
 800bac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800bac8:	2300      	movs	r3, #0
 800baca:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d101      	bne.n	800bad6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800bad2:	2301      	movs	r3, #1
 800bad4:	e291      	b.n	800bffa <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	f003 0301 	and.w	r3, r3, #1
 800bade:	2b00      	cmp	r3, #0
 800bae0:	f000 8087 	beq.w	800bbf2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800bae4:	4b96      	ldr	r3, [pc, #600]	; (800bd40 <HAL_RCC_OscConfig+0x280>)
 800bae6:	689b      	ldr	r3, [r3, #8]
 800bae8:	f003 030c 	and.w	r3, r3, #12
 800baec:	2b04      	cmp	r3, #4
 800baee:	d00c      	beq.n	800bb0a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800baf0:	4b93      	ldr	r3, [pc, #588]	; (800bd40 <HAL_RCC_OscConfig+0x280>)
 800baf2:	689b      	ldr	r3, [r3, #8]
 800baf4:	f003 030c 	and.w	r3, r3, #12
 800baf8:	2b08      	cmp	r3, #8
 800bafa:	d112      	bne.n	800bb22 <HAL_RCC_OscConfig+0x62>
 800bafc:	4b90      	ldr	r3, [pc, #576]	; (800bd40 <HAL_RCC_OscConfig+0x280>)
 800bafe:	685b      	ldr	r3, [r3, #4]
 800bb00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bb04:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bb08:	d10b      	bne.n	800bb22 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bb0a:	4b8d      	ldr	r3, [pc, #564]	; (800bd40 <HAL_RCC_OscConfig+0x280>)
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d06c      	beq.n	800bbf0 <HAL_RCC_OscConfig+0x130>
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	685b      	ldr	r3, [r3, #4]
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d168      	bne.n	800bbf0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800bb1e:	2301      	movs	r3, #1
 800bb20:	e26b      	b.n	800bffa <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	685b      	ldr	r3, [r3, #4]
 800bb26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bb2a:	d106      	bne.n	800bb3a <HAL_RCC_OscConfig+0x7a>
 800bb2c:	4b84      	ldr	r3, [pc, #528]	; (800bd40 <HAL_RCC_OscConfig+0x280>)
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	4a83      	ldr	r2, [pc, #524]	; (800bd40 <HAL_RCC_OscConfig+0x280>)
 800bb32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bb36:	6013      	str	r3, [r2, #0]
 800bb38:	e02e      	b.n	800bb98 <HAL_RCC_OscConfig+0xd8>
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	685b      	ldr	r3, [r3, #4]
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d10c      	bne.n	800bb5c <HAL_RCC_OscConfig+0x9c>
 800bb42:	4b7f      	ldr	r3, [pc, #508]	; (800bd40 <HAL_RCC_OscConfig+0x280>)
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	4a7e      	ldr	r2, [pc, #504]	; (800bd40 <HAL_RCC_OscConfig+0x280>)
 800bb48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bb4c:	6013      	str	r3, [r2, #0]
 800bb4e:	4b7c      	ldr	r3, [pc, #496]	; (800bd40 <HAL_RCC_OscConfig+0x280>)
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	4a7b      	ldr	r2, [pc, #492]	; (800bd40 <HAL_RCC_OscConfig+0x280>)
 800bb54:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800bb58:	6013      	str	r3, [r2, #0]
 800bb5a:	e01d      	b.n	800bb98 <HAL_RCC_OscConfig+0xd8>
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	685b      	ldr	r3, [r3, #4]
 800bb60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800bb64:	d10c      	bne.n	800bb80 <HAL_RCC_OscConfig+0xc0>
 800bb66:	4b76      	ldr	r3, [pc, #472]	; (800bd40 <HAL_RCC_OscConfig+0x280>)
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	4a75      	ldr	r2, [pc, #468]	; (800bd40 <HAL_RCC_OscConfig+0x280>)
 800bb6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800bb70:	6013      	str	r3, [r2, #0]
 800bb72:	4b73      	ldr	r3, [pc, #460]	; (800bd40 <HAL_RCC_OscConfig+0x280>)
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	4a72      	ldr	r2, [pc, #456]	; (800bd40 <HAL_RCC_OscConfig+0x280>)
 800bb78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bb7c:	6013      	str	r3, [r2, #0]
 800bb7e:	e00b      	b.n	800bb98 <HAL_RCC_OscConfig+0xd8>
 800bb80:	4b6f      	ldr	r3, [pc, #444]	; (800bd40 <HAL_RCC_OscConfig+0x280>)
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	4a6e      	ldr	r2, [pc, #440]	; (800bd40 <HAL_RCC_OscConfig+0x280>)
 800bb86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bb8a:	6013      	str	r3, [r2, #0]
 800bb8c:	4b6c      	ldr	r3, [pc, #432]	; (800bd40 <HAL_RCC_OscConfig+0x280>)
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	4a6b      	ldr	r2, [pc, #428]	; (800bd40 <HAL_RCC_OscConfig+0x280>)
 800bb92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800bb96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	685b      	ldr	r3, [r3, #4]
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d013      	beq.n	800bbc8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bba0:	f7fa f8ac 	bl	8005cfc <HAL_GetTick>
 800bba4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bba6:	e008      	b.n	800bbba <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800bba8:	f7fa f8a8 	bl	8005cfc <HAL_GetTick>
 800bbac:	4602      	mov	r2, r0
 800bbae:	693b      	ldr	r3, [r7, #16]
 800bbb0:	1ad3      	subs	r3, r2, r3
 800bbb2:	2b64      	cmp	r3, #100	; 0x64
 800bbb4:	d901      	bls.n	800bbba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800bbb6:	2303      	movs	r3, #3
 800bbb8:	e21f      	b.n	800bffa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bbba:	4b61      	ldr	r3, [pc, #388]	; (800bd40 <HAL_RCC_OscConfig+0x280>)
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d0f0      	beq.n	800bba8 <HAL_RCC_OscConfig+0xe8>
 800bbc6:	e014      	b.n	800bbf2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bbc8:	f7fa f898 	bl	8005cfc <HAL_GetTick>
 800bbcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800bbce:	e008      	b.n	800bbe2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800bbd0:	f7fa f894 	bl	8005cfc <HAL_GetTick>
 800bbd4:	4602      	mov	r2, r0
 800bbd6:	693b      	ldr	r3, [r7, #16]
 800bbd8:	1ad3      	subs	r3, r2, r3
 800bbda:	2b64      	cmp	r3, #100	; 0x64
 800bbdc:	d901      	bls.n	800bbe2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800bbde:	2303      	movs	r3, #3
 800bbe0:	e20b      	b.n	800bffa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800bbe2:	4b57      	ldr	r3, [pc, #348]	; (800bd40 <HAL_RCC_OscConfig+0x280>)
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d1f0      	bne.n	800bbd0 <HAL_RCC_OscConfig+0x110>
 800bbee:	e000      	b.n	800bbf2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bbf0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	f003 0302 	and.w	r3, r3, #2
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d069      	beq.n	800bcd2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800bbfe:	4b50      	ldr	r3, [pc, #320]	; (800bd40 <HAL_RCC_OscConfig+0x280>)
 800bc00:	689b      	ldr	r3, [r3, #8]
 800bc02:	f003 030c 	and.w	r3, r3, #12
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d00b      	beq.n	800bc22 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800bc0a:	4b4d      	ldr	r3, [pc, #308]	; (800bd40 <HAL_RCC_OscConfig+0x280>)
 800bc0c:	689b      	ldr	r3, [r3, #8]
 800bc0e:	f003 030c 	and.w	r3, r3, #12
 800bc12:	2b08      	cmp	r3, #8
 800bc14:	d11c      	bne.n	800bc50 <HAL_RCC_OscConfig+0x190>
 800bc16:	4b4a      	ldr	r3, [pc, #296]	; (800bd40 <HAL_RCC_OscConfig+0x280>)
 800bc18:	685b      	ldr	r3, [r3, #4]
 800bc1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d116      	bne.n	800bc50 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800bc22:	4b47      	ldr	r3, [pc, #284]	; (800bd40 <HAL_RCC_OscConfig+0x280>)
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	f003 0302 	and.w	r3, r3, #2
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d005      	beq.n	800bc3a <HAL_RCC_OscConfig+0x17a>
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	68db      	ldr	r3, [r3, #12]
 800bc32:	2b01      	cmp	r3, #1
 800bc34:	d001      	beq.n	800bc3a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800bc36:	2301      	movs	r3, #1
 800bc38:	e1df      	b.n	800bffa <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bc3a:	4b41      	ldr	r3, [pc, #260]	; (800bd40 <HAL_RCC_OscConfig+0x280>)
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	691b      	ldr	r3, [r3, #16]
 800bc46:	00db      	lsls	r3, r3, #3
 800bc48:	493d      	ldr	r1, [pc, #244]	; (800bd40 <HAL_RCC_OscConfig+0x280>)
 800bc4a:	4313      	orrs	r3, r2
 800bc4c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800bc4e:	e040      	b.n	800bcd2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	68db      	ldr	r3, [r3, #12]
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d023      	beq.n	800bca0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800bc58:	4b39      	ldr	r3, [pc, #228]	; (800bd40 <HAL_RCC_OscConfig+0x280>)
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	4a38      	ldr	r2, [pc, #224]	; (800bd40 <HAL_RCC_OscConfig+0x280>)
 800bc5e:	f043 0301 	orr.w	r3, r3, #1
 800bc62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bc64:	f7fa f84a 	bl	8005cfc <HAL_GetTick>
 800bc68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bc6a:	e008      	b.n	800bc7e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bc6c:	f7fa f846 	bl	8005cfc <HAL_GetTick>
 800bc70:	4602      	mov	r2, r0
 800bc72:	693b      	ldr	r3, [r7, #16]
 800bc74:	1ad3      	subs	r3, r2, r3
 800bc76:	2b02      	cmp	r3, #2
 800bc78:	d901      	bls.n	800bc7e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800bc7a:	2303      	movs	r3, #3
 800bc7c:	e1bd      	b.n	800bffa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bc7e:	4b30      	ldr	r3, [pc, #192]	; (800bd40 <HAL_RCC_OscConfig+0x280>)
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	f003 0302 	and.w	r3, r3, #2
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d0f0      	beq.n	800bc6c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bc8a:	4b2d      	ldr	r3, [pc, #180]	; (800bd40 <HAL_RCC_OscConfig+0x280>)
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	691b      	ldr	r3, [r3, #16]
 800bc96:	00db      	lsls	r3, r3, #3
 800bc98:	4929      	ldr	r1, [pc, #164]	; (800bd40 <HAL_RCC_OscConfig+0x280>)
 800bc9a:	4313      	orrs	r3, r2
 800bc9c:	600b      	str	r3, [r1, #0]
 800bc9e:	e018      	b.n	800bcd2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800bca0:	4b27      	ldr	r3, [pc, #156]	; (800bd40 <HAL_RCC_OscConfig+0x280>)
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	4a26      	ldr	r2, [pc, #152]	; (800bd40 <HAL_RCC_OscConfig+0x280>)
 800bca6:	f023 0301 	bic.w	r3, r3, #1
 800bcaa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bcac:	f7fa f826 	bl	8005cfc <HAL_GetTick>
 800bcb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800bcb2:	e008      	b.n	800bcc6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bcb4:	f7fa f822 	bl	8005cfc <HAL_GetTick>
 800bcb8:	4602      	mov	r2, r0
 800bcba:	693b      	ldr	r3, [r7, #16]
 800bcbc:	1ad3      	subs	r3, r2, r3
 800bcbe:	2b02      	cmp	r3, #2
 800bcc0:	d901      	bls.n	800bcc6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800bcc2:	2303      	movs	r3, #3
 800bcc4:	e199      	b.n	800bffa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800bcc6:	4b1e      	ldr	r3, [pc, #120]	; (800bd40 <HAL_RCC_OscConfig+0x280>)
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	f003 0302 	and.w	r3, r3, #2
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d1f0      	bne.n	800bcb4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	f003 0308 	and.w	r3, r3, #8
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d038      	beq.n	800bd50 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	695b      	ldr	r3, [r3, #20]
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d019      	beq.n	800bd1a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800bce6:	4b16      	ldr	r3, [pc, #88]	; (800bd40 <HAL_RCC_OscConfig+0x280>)
 800bce8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bcea:	4a15      	ldr	r2, [pc, #84]	; (800bd40 <HAL_RCC_OscConfig+0x280>)
 800bcec:	f043 0301 	orr.w	r3, r3, #1
 800bcf0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bcf2:	f7fa f803 	bl	8005cfc <HAL_GetTick>
 800bcf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800bcf8:	e008      	b.n	800bd0c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800bcfa:	f7f9 ffff 	bl	8005cfc <HAL_GetTick>
 800bcfe:	4602      	mov	r2, r0
 800bd00:	693b      	ldr	r3, [r7, #16]
 800bd02:	1ad3      	subs	r3, r2, r3
 800bd04:	2b02      	cmp	r3, #2
 800bd06:	d901      	bls.n	800bd0c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800bd08:	2303      	movs	r3, #3
 800bd0a:	e176      	b.n	800bffa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800bd0c:	4b0c      	ldr	r3, [pc, #48]	; (800bd40 <HAL_RCC_OscConfig+0x280>)
 800bd0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bd10:	f003 0302 	and.w	r3, r3, #2
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d0f0      	beq.n	800bcfa <HAL_RCC_OscConfig+0x23a>
 800bd18:	e01a      	b.n	800bd50 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800bd1a:	4b09      	ldr	r3, [pc, #36]	; (800bd40 <HAL_RCC_OscConfig+0x280>)
 800bd1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bd1e:	4a08      	ldr	r2, [pc, #32]	; (800bd40 <HAL_RCC_OscConfig+0x280>)
 800bd20:	f023 0301 	bic.w	r3, r3, #1
 800bd24:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bd26:	f7f9 ffe9 	bl	8005cfc <HAL_GetTick>
 800bd2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800bd2c:	e00a      	b.n	800bd44 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800bd2e:	f7f9 ffe5 	bl	8005cfc <HAL_GetTick>
 800bd32:	4602      	mov	r2, r0
 800bd34:	693b      	ldr	r3, [r7, #16]
 800bd36:	1ad3      	subs	r3, r2, r3
 800bd38:	2b02      	cmp	r3, #2
 800bd3a:	d903      	bls.n	800bd44 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800bd3c:	2303      	movs	r3, #3
 800bd3e:	e15c      	b.n	800bffa <HAL_RCC_OscConfig+0x53a>
 800bd40:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800bd44:	4b91      	ldr	r3, [pc, #580]	; (800bf8c <HAL_RCC_OscConfig+0x4cc>)
 800bd46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bd48:	f003 0302 	and.w	r3, r3, #2
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d1ee      	bne.n	800bd2e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	f003 0304 	and.w	r3, r3, #4
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	f000 80a4 	beq.w	800bea6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800bd5e:	4b8b      	ldr	r3, [pc, #556]	; (800bf8c <HAL_RCC_OscConfig+0x4cc>)
 800bd60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d10d      	bne.n	800bd86 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800bd6a:	4b88      	ldr	r3, [pc, #544]	; (800bf8c <HAL_RCC_OscConfig+0x4cc>)
 800bd6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd6e:	4a87      	ldr	r2, [pc, #540]	; (800bf8c <HAL_RCC_OscConfig+0x4cc>)
 800bd70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bd74:	6413      	str	r3, [r2, #64]	; 0x40
 800bd76:	4b85      	ldr	r3, [pc, #532]	; (800bf8c <HAL_RCC_OscConfig+0x4cc>)
 800bd78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bd7e:	60bb      	str	r3, [r7, #8]
 800bd80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800bd82:	2301      	movs	r3, #1
 800bd84:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800bd86:	4b82      	ldr	r3, [pc, #520]	; (800bf90 <HAL_RCC_OscConfig+0x4d0>)
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d118      	bne.n	800bdc4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800bd92:	4b7f      	ldr	r3, [pc, #508]	; (800bf90 <HAL_RCC_OscConfig+0x4d0>)
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	4a7e      	ldr	r2, [pc, #504]	; (800bf90 <HAL_RCC_OscConfig+0x4d0>)
 800bd98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bd9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800bd9e:	f7f9 ffad 	bl	8005cfc <HAL_GetTick>
 800bda2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800bda4:	e008      	b.n	800bdb8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bda6:	f7f9 ffa9 	bl	8005cfc <HAL_GetTick>
 800bdaa:	4602      	mov	r2, r0
 800bdac:	693b      	ldr	r3, [r7, #16]
 800bdae:	1ad3      	subs	r3, r2, r3
 800bdb0:	2b64      	cmp	r3, #100	; 0x64
 800bdb2:	d901      	bls.n	800bdb8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800bdb4:	2303      	movs	r3, #3
 800bdb6:	e120      	b.n	800bffa <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800bdb8:	4b75      	ldr	r3, [pc, #468]	; (800bf90 <HAL_RCC_OscConfig+0x4d0>)
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d0f0      	beq.n	800bda6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	689b      	ldr	r3, [r3, #8]
 800bdc8:	2b01      	cmp	r3, #1
 800bdca:	d106      	bne.n	800bdda <HAL_RCC_OscConfig+0x31a>
 800bdcc:	4b6f      	ldr	r3, [pc, #444]	; (800bf8c <HAL_RCC_OscConfig+0x4cc>)
 800bdce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bdd0:	4a6e      	ldr	r2, [pc, #440]	; (800bf8c <HAL_RCC_OscConfig+0x4cc>)
 800bdd2:	f043 0301 	orr.w	r3, r3, #1
 800bdd6:	6713      	str	r3, [r2, #112]	; 0x70
 800bdd8:	e02d      	b.n	800be36 <HAL_RCC_OscConfig+0x376>
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	689b      	ldr	r3, [r3, #8]
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d10c      	bne.n	800bdfc <HAL_RCC_OscConfig+0x33c>
 800bde2:	4b6a      	ldr	r3, [pc, #424]	; (800bf8c <HAL_RCC_OscConfig+0x4cc>)
 800bde4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bde6:	4a69      	ldr	r2, [pc, #420]	; (800bf8c <HAL_RCC_OscConfig+0x4cc>)
 800bde8:	f023 0301 	bic.w	r3, r3, #1
 800bdec:	6713      	str	r3, [r2, #112]	; 0x70
 800bdee:	4b67      	ldr	r3, [pc, #412]	; (800bf8c <HAL_RCC_OscConfig+0x4cc>)
 800bdf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bdf2:	4a66      	ldr	r2, [pc, #408]	; (800bf8c <HAL_RCC_OscConfig+0x4cc>)
 800bdf4:	f023 0304 	bic.w	r3, r3, #4
 800bdf8:	6713      	str	r3, [r2, #112]	; 0x70
 800bdfa:	e01c      	b.n	800be36 <HAL_RCC_OscConfig+0x376>
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	689b      	ldr	r3, [r3, #8]
 800be00:	2b05      	cmp	r3, #5
 800be02:	d10c      	bne.n	800be1e <HAL_RCC_OscConfig+0x35e>
 800be04:	4b61      	ldr	r3, [pc, #388]	; (800bf8c <HAL_RCC_OscConfig+0x4cc>)
 800be06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be08:	4a60      	ldr	r2, [pc, #384]	; (800bf8c <HAL_RCC_OscConfig+0x4cc>)
 800be0a:	f043 0304 	orr.w	r3, r3, #4
 800be0e:	6713      	str	r3, [r2, #112]	; 0x70
 800be10:	4b5e      	ldr	r3, [pc, #376]	; (800bf8c <HAL_RCC_OscConfig+0x4cc>)
 800be12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be14:	4a5d      	ldr	r2, [pc, #372]	; (800bf8c <HAL_RCC_OscConfig+0x4cc>)
 800be16:	f043 0301 	orr.w	r3, r3, #1
 800be1a:	6713      	str	r3, [r2, #112]	; 0x70
 800be1c:	e00b      	b.n	800be36 <HAL_RCC_OscConfig+0x376>
 800be1e:	4b5b      	ldr	r3, [pc, #364]	; (800bf8c <HAL_RCC_OscConfig+0x4cc>)
 800be20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be22:	4a5a      	ldr	r2, [pc, #360]	; (800bf8c <HAL_RCC_OscConfig+0x4cc>)
 800be24:	f023 0301 	bic.w	r3, r3, #1
 800be28:	6713      	str	r3, [r2, #112]	; 0x70
 800be2a:	4b58      	ldr	r3, [pc, #352]	; (800bf8c <HAL_RCC_OscConfig+0x4cc>)
 800be2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be2e:	4a57      	ldr	r2, [pc, #348]	; (800bf8c <HAL_RCC_OscConfig+0x4cc>)
 800be30:	f023 0304 	bic.w	r3, r3, #4
 800be34:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	689b      	ldr	r3, [r3, #8]
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d015      	beq.n	800be6a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800be3e:	f7f9 ff5d 	bl	8005cfc <HAL_GetTick>
 800be42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800be44:	e00a      	b.n	800be5c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800be46:	f7f9 ff59 	bl	8005cfc <HAL_GetTick>
 800be4a:	4602      	mov	r2, r0
 800be4c:	693b      	ldr	r3, [r7, #16]
 800be4e:	1ad3      	subs	r3, r2, r3
 800be50:	f241 3288 	movw	r2, #5000	; 0x1388
 800be54:	4293      	cmp	r3, r2
 800be56:	d901      	bls.n	800be5c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800be58:	2303      	movs	r3, #3
 800be5a:	e0ce      	b.n	800bffa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800be5c:	4b4b      	ldr	r3, [pc, #300]	; (800bf8c <HAL_RCC_OscConfig+0x4cc>)
 800be5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be60:	f003 0302 	and.w	r3, r3, #2
 800be64:	2b00      	cmp	r3, #0
 800be66:	d0ee      	beq.n	800be46 <HAL_RCC_OscConfig+0x386>
 800be68:	e014      	b.n	800be94 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800be6a:	f7f9 ff47 	bl	8005cfc <HAL_GetTick>
 800be6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800be70:	e00a      	b.n	800be88 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800be72:	f7f9 ff43 	bl	8005cfc <HAL_GetTick>
 800be76:	4602      	mov	r2, r0
 800be78:	693b      	ldr	r3, [r7, #16]
 800be7a:	1ad3      	subs	r3, r2, r3
 800be7c:	f241 3288 	movw	r2, #5000	; 0x1388
 800be80:	4293      	cmp	r3, r2
 800be82:	d901      	bls.n	800be88 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800be84:	2303      	movs	r3, #3
 800be86:	e0b8      	b.n	800bffa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800be88:	4b40      	ldr	r3, [pc, #256]	; (800bf8c <HAL_RCC_OscConfig+0x4cc>)
 800be8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be8c:	f003 0302 	and.w	r3, r3, #2
 800be90:	2b00      	cmp	r3, #0
 800be92:	d1ee      	bne.n	800be72 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800be94:	7dfb      	ldrb	r3, [r7, #23]
 800be96:	2b01      	cmp	r3, #1
 800be98:	d105      	bne.n	800bea6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800be9a:	4b3c      	ldr	r3, [pc, #240]	; (800bf8c <HAL_RCC_OscConfig+0x4cc>)
 800be9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be9e:	4a3b      	ldr	r2, [pc, #236]	; (800bf8c <HAL_RCC_OscConfig+0x4cc>)
 800bea0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bea4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	699b      	ldr	r3, [r3, #24]
 800beaa:	2b00      	cmp	r3, #0
 800beac:	f000 80a4 	beq.w	800bff8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800beb0:	4b36      	ldr	r3, [pc, #216]	; (800bf8c <HAL_RCC_OscConfig+0x4cc>)
 800beb2:	689b      	ldr	r3, [r3, #8]
 800beb4:	f003 030c 	and.w	r3, r3, #12
 800beb8:	2b08      	cmp	r3, #8
 800beba:	d06b      	beq.n	800bf94 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	699b      	ldr	r3, [r3, #24]
 800bec0:	2b02      	cmp	r3, #2
 800bec2:	d149      	bne.n	800bf58 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bec4:	4b31      	ldr	r3, [pc, #196]	; (800bf8c <HAL_RCC_OscConfig+0x4cc>)
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	4a30      	ldr	r2, [pc, #192]	; (800bf8c <HAL_RCC_OscConfig+0x4cc>)
 800beca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800bece:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bed0:	f7f9 ff14 	bl	8005cfc <HAL_GetTick>
 800bed4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bed6:	e008      	b.n	800beea <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bed8:	f7f9 ff10 	bl	8005cfc <HAL_GetTick>
 800bedc:	4602      	mov	r2, r0
 800bede:	693b      	ldr	r3, [r7, #16]
 800bee0:	1ad3      	subs	r3, r2, r3
 800bee2:	2b02      	cmp	r3, #2
 800bee4:	d901      	bls.n	800beea <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800bee6:	2303      	movs	r3, #3
 800bee8:	e087      	b.n	800bffa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800beea:	4b28      	ldr	r3, [pc, #160]	; (800bf8c <HAL_RCC_OscConfig+0x4cc>)
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d1f0      	bne.n	800bed8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	69da      	ldr	r2, [r3, #28]
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	6a1b      	ldr	r3, [r3, #32]
 800befe:	431a      	orrs	r2, r3
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf04:	019b      	lsls	r3, r3, #6
 800bf06:	431a      	orrs	r2, r3
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf0c:	085b      	lsrs	r3, r3, #1
 800bf0e:	3b01      	subs	r3, #1
 800bf10:	041b      	lsls	r3, r3, #16
 800bf12:	431a      	orrs	r2, r3
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf18:	061b      	lsls	r3, r3, #24
 800bf1a:	4313      	orrs	r3, r2
 800bf1c:	4a1b      	ldr	r2, [pc, #108]	; (800bf8c <HAL_RCC_OscConfig+0x4cc>)
 800bf1e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bf22:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800bf24:	4b19      	ldr	r3, [pc, #100]	; (800bf8c <HAL_RCC_OscConfig+0x4cc>)
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	4a18      	ldr	r2, [pc, #96]	; (800bf8c <HAL_RCC_OscConfig+0x4cc>)
 800bf2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800bf2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bf30:	f7f9 fee4 	bl	8005cfc <HAL_GetTick>
 800bf34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bf36:	e008      	b.n	800bf4a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bf38:	f7f9 fee0 	bl	8005cfc <HAL_GetTick>
 800bf3c:	4602      	mov	r2, r0
 800bf3e:	693b      	ldr	r3, [r7, #16]
 800bf40:	1ad3      	subs	r3, r2, r3
 800bf42:	2b02      	cmp	r3, #2
 800bf44:	d901      	bls.n	800bf4a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800bf46:	2303      	movs	r3, #3
 800bf48:	e057      	b.n	800bffa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bf4a:	4b10      	ldr	r3, [pc, #64]	; (800bf8c <HAL_RCC_OscConfig+0x4cc>)
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d0f0      	beq.n	800bf38 <HAL_RCC_OscConfig+0x478>
 800bf56:	e04f      	b.n	800bff8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bf58:	4b0c      	ldr	r3, [pc, #48]	; (800bf8c <HAL_RCC_OscConfig+0x4cc>)
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	4a0b      	ldr	r2, [pc, #44]	; (800bf8c <HAL_RCC_OscConfig+0x4cc>)
 800bf5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800bf62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bf64:	f7f9 feca 	bl	8005cfc <HAL_GetTick>
 800bf68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bf6a:	e008      	b.n	800bf7e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bf6c:	f7f9 fec6 	bl	8005cfc <HAL_GetTick>
 800bf70:	4602      	mov	r2, r0
 800bf72:	693b      	ldr	r3, [r7, #16]
 800bf74:	1ad3      	subs	r3, r2, r3
 800bf76:	2b02      	cmp	r3, #2
 800bf78:	d901      	bls.n	800bf7e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800bf7a:	2303      	movs	r3, #3
 800bf7c:	e03d      	b.n	800bffa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bf7e:	4b03      	ldr	r3, [pc, #12]	; (800bf8c <HAL_RCC_OscConfig+0x4cc>)
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d1f0      	bne.n	800bf6c <HAL_RCC_OscConfig+0x4ac>
 800bf8a:	e035      	b.n	800bff8 <HAL_RCC_OscConfig+0x538>
 800bf8c:	40023800 	.word	0x40023800
 800bf90:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800bf94:	4b1b      	ldr	r3, [pc, #108]	; (800c004 <HAL_RCC_OscConfig+0x544>)
 800bf96:	685b      	ldr	r3, [r3, #4]
 800bf98:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	699b      	ldr	r3, [r3, #24]
 800bf9e:	2b01      	cmp	r3, #1
 800bfa0:	d028      	beq.n	800bff4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800bfac:	429a      	cmp	r2, r3
 800bfae:	d121      	bne.n	800bff4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bfba:	429a      	cmp	r2, r3
 800bfbc:	d11a      	bne.n	800bff4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800bfbe:	68fa      	ldr	r2, [r7, #12]
 800bfc0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800bfc4:	4013      	ands	r3, r2
 800bfc6:	687a      	ldr	r2, [r7, #4]
 800bfc8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800bfca:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800bfcc:	4293      	cmp	r3, r2
 800bfce:	d111      	bne.n	800bff4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfda:	085b      	lsrs	r3, r3, #1
 800bfdc:	3b01      	subs	r3, #1
 800bfde:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800bfe0:	429a      	cmp	r2, r3
 800bfe2:	d107      	bne.n	800bff4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfee:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800bff0:	429a      	cmp	r2, r3
 800bff2:	d001      	beq.n	800bff8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800bff4:	2301      	movs	r3, #1
 800bff6:	e000      	b.n	800bffa <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800bff8:	2300      	movs	r3, #0
}
 800bffa:	4618      	mov	r0, r3
 800bffc:	3718      	adds	r7, #24
 800bffe:	46bd      	mov	sp, r7
 800c000:	bd80      	pop	{r7, pc}
 800c002:	bf00      	nop
 800c004:	40023800 	.word	0x40023800

0800c008 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c008:	b580      	push	{r7, lr}
 800c00a:	b084      	sub	sp, #16
 800c00c:	af00      	add	r7, sp, #0
 800c00e:	6078      	str	r0, [r7, #4]
 800c010:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800c012:	2300      	movs	r3, #0
 800c014:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d101      	bne.n	800c020 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800c01c:	2301      	movs	r3, #1
 800c01e:	e0d0      	b.n	800c1c2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800c020:	4b6a      	ldr	r3, [pc, #424]	; (800c1cc <HAL_RCC_ClockConfig+0x1c4>)
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	f003 030f 	and.w	r3, r3, #15
 800c028:	683a      	ldr	r2, [r7, #0]
 800c02a:	429a      	cmp	r2, r3
 800c02c:	d910      	bls.n	800c050 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c02e:	4b67      	ldr	r3, [pc, #412]	; (800c1cc <HAL_RCC_ClockConfig+0x1c4>)
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	f023 020f 	bic.w	r2, r3, #15
 800c036:	4965      	ldr	r1, [pc, #404]	; (800c1cc <HAL_RCC_ClockConfig+0x1c4>)
 800c038:	683b      	ldr	r3, [r7, #0]
 800c03a:	4313      	orrs	r3, r2
 800c03c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c03e:	4b63      	ldr	r3, [pc, #396]	; (800c1cc <HAL_RCC_ClockConfig+0x1c4>)
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	f003 030f 	and.w	r3, r3, #15
 800c046:	683a      	ldr	r2, [r7, #0]
 800c048:	429a      	cmp	r2, r3
 800c04a:	d001      	beq.n	800c050 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800c04c:	2301      	movs	r3, #1
 800c04e:	e0b8      	b.n	800c1c2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	f003 0302 	and.w	r3, r3, #2
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d020      	beq.n	800c09e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	f003 0304 	and.w	r3, r3, #4
 800c064:	2b00      	cmp	r3, #0
 800c066:	d005      	beq.n	800c074 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800c068:	4b59      	ldr	r3, [pc, #356]	; (800c1d0 <HAL_RCC_ClockConfig+0x1c8>)
 800c06a:	689b      	ldr	r3, [r3, #8]
 800c06c:	4a58      	ldr	r2, [pc, #352]	; (800c1d0 <HAL_RCC_ClockConfig+0x1c8>)
 800c06e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800c072:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	f003 0308 	and.w	r3, r3, #8
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d005      	beq.n	800c08c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800c080:	4b53      	ldr	r3, [pc, #332]	; (800c1d0 <HAL_RCC_ClockConfig+0x1c8>)
 800c082:	689b      	ldr	r3, [r3, #8]
 800c084:	4a52      	ldr	r2, [pc, #328]	; (800c1d0 <HAL_RCC_ClockConfig+0x1c8>)
 800c086:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800c08a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c08c:	4b50      	ldr	r3, [pc, #320]	; (800c1d0 <HAL_RCC_ClockConfig+0x1c8>)
 800c08e:	689b      	ldr	r3, [r3, #8]
 800c090:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	689b      	ldr	r3, [r3, #8]
 800c098:	494d      	ldr	r1, [pc, #308]	; (800c1d0 <HAL_RCC_ClockConfig+0x1c8>)
 800c09a:	4313      	orrs	r3, r2
 800c09c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	f003 0301 	and.w	r3, r3, #1
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d040      	beq.n	800c12c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	685b      	ldr	r3, [r3, #4]
 800c0ae:	2b01      	cmp	r3, #1
 800c0b0:	d107      	bne.n	800c0c2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c0b2:	4b47      	ldr	r3, [pc, #284]	; (800c1d0 <HAL_RCC_ClockConfig+0x1c8>)
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d115      	bne.n	800c0ea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800c0be:	2301      	movs	r3, #1
 800c0c0:	e07f      	b.n	800c1c2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	685b      	ldr	r3, [r3, #4]
 800c0c6:	2b02      	cmp	r3, #2
 800c0c8:	d107      	bne.n	800c0da <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c0ca:	4b41      	ldr	r3, [pc, #260]	; (800c1d0 <HAL_RCC_ClockConfig+0x1c8>)
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d109      	bne.n	800c0ea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800c0d6:	2301      	movs	r3, #1
 800c0d8:	e073      	b.n	800c1c2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c0da:	4b3d      	ldr	r3, [pc, #244]	; (800c1d0 <HAL_RCC_ClockConfig+0x1c8>)
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	f003 0302 	and.w	r3, r3, #2
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d101      	bne.n	800c0ea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800c0e6:	2301      	movs	r3, #1
 800c0e8:	e06b      	b.n	800c1c2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800c0ea:	4b39      	ldr	r3, [pc, #228]	; (800c1d0 <HAL_RCC_ClockConfig+0x1c8>)
 800c0ec:	689b      	ldr	r3, [r3, #8]
 800c0ee:	f023 0203 	bic.w	r2, r3, #3
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	685b      	ldr	r3, [r3, #4]
 800c0f6:	4936      	ldr	r1, [pc, #216]	; (800c1d0 <HAL_RCC_ClockConfig+0x1c8>)
 800c0f8:	4313      	orrs	r3, r2
 800c0fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c0fc:	f7f9 fdfe 	bl	8005cfc <HAL_GetTick>
 800c100:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c102:	e00a      	b.n	800c11a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c104:	f7f9 fdfa 	bl	8005cfc <HAL_GetTick>
 800c108:	4602      	mov	r2, r0
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	1ad3      	subs	r3, r2, r3
 800c10e:	f241 3288 	movw	r2, #5000	; 0x1388
 800c112:	4293      	cmp	r3, r2
 800c114:	d901      	bls.n	800c11a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800c116:	2303      	movs	r3, #3
 800c118:	e053      	b.n	800c1c2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c11a:	4b2d      	ldr	r3, [pc, #180]	; (800c1d0 <HAL_RCC_ClockConfig+0x1c8>)
 800c11c:	689b      	ldr	r3, [r3, #8]
 800c11e:	f003 020c 	and.w	r2, r3, #12
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	685b      	ldr	r3, [r3, #4]
 800c126:	009b      	lsls	r3, r3, #2
 800c128:	429a      	cmp	r2, r3
 800c12a:	d1eb      	bne.n	800c104 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800c12c:	4b27      	ldr	r3, [pc, #156]	; (800c1cc <HAL_RCC_ClockConfig+0x1c4>)
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	f003 030f 	and.w	r3, r3, #15
 800c134:	683a      	ldr	r2, [r7, #0]
 800c136:	429a      	cmp	r2, r3
 800c138:	d210      	bcs.n	800c15c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c13a:	4b24      	ldr	r3, [pc, #144]	; (800c1cc <HAL_RCC_ClockConfig+0x1c4>)
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	f023 020f 	bic.w	r2, r3, #15
 800c142:	4922      	ldr	r1, [pc, #136]	; (800c1cc <HAL_RCC_ClockConfig+0x1c4>)
 800c144:	683b      	ldr	r3, [r7, #0]
 800c146:	4313      	orrs	r3, r2
 800c148:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c14a:	4b20      	ldr	r3, [pc, #128]	; (800c1cc <HAL_RCC_ClockConfig+0x1c4>)
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	f003 030f 	and.w	r3, r3, #15
 800c152:	683a      	ldr	r2, [r7, #0]
 800c154:	429a      	cmp	r2, r3
 800c156:	d001      	beq.n	800c15c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800c158:	2301      	movs	r3, #1
 800c15a:	e032      	b.n	800c1c2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	f003 0304 	and.w	r3, r3, #4
 800c164:	2b00      	cmp	r3, #0
 800c166:	d008      	beq.n	800c17a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c168:	4b19      	ldr	r3, [pc, #100]	; (800c1d0 <HAL_RCC_ClockConfig+0x1c8>)
 800c16a:	689b      	ldr	r3, [r3, #8]
 800c16c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	68db      	ldr	r3, [r3, #12]
 800c174:	4916      	ldr	r1, [pc, #88]	; (800c1d0 <HAL_RCC_ClockConfig+0x1c8>)
 800c176:	4313      	orrs	r3, r2
 800c178:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	f003 0308 	and.w	r3, r3, #8
 800c182:	2b00      	cmp	r3, #0
 800c184:	d009      	beq.n	800c19a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800c186:	4b12      	ldr	r3, [pc, #72]	; (800c1d0 <HAL_RCC_ClockConfig+0x1c8>)
 800c188:	689b      	ldr	r3, [r3, #8]
 800c18a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	691b      	ldr	r3, [r3, #16]
 800c192:	00db      	lsls	r3, r3, #3
 800c194:	490e      	ldr	r1, [pc, #56]	; (800c1d0 <HAL_RCC_ClockConfig+0x1c8>)
 800c196:	4313      	orrs	r3, r2
 800c198:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800c19a:	f000 f821 	bl	800c1e0 <HAL_RCC_GetSysClockFreq>
 800c19e:	4602      	mov	r2, r0
 800c1a0:	4b0b      	ldr	r3, [pc, #44]	; (800c1d0 <HAL_RCC_ClockConfig+0x1c8>)
 800c1a2:	689b      	ldr	r3, [r3, #8]
 800c1a4:	091b      	lsrs	r3, r3, #4
 800c1a6:	f003 030f 	and.w	r3, r3, #15
 800c1aa:	490a      	ldr	r1, [pc, #40]	; (800c1d4 <HAL_RCC_ClockConfig+0x1cc>)
 800c1ac:	5ccb      	ldrb	r3, [r1, r3]
 800c1ae:	fa22 f303 	lsr.w	r3, r2, r3
 800c1b2:	4a09      	ldr	r2, [pc, #36]	; (800c1d8 <HAL_RCC_ClockConfig+0x1d0>)
 800c1b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800c1b6:	4b09      	ldr	r3, [pc, #36]	; (800c1dc <HAL_RCC_ClockConfig+0x1d4>)
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	f7f7 fdac 	bl	8003d18 <HAL_InitTick>

  return HAL_OK;
 800c1c0:	2300      	movs	r3, #0
}
 800c1c2:	4618      	mov	r0, r3
 800c1c4:	3710      	adds	r7, #16
 800c1c6:	46bd      	mov	sp, r7
 800c1c8:	bd80      	pop	{r7, pc}
 800c1ca:	bf00      	nop
 800c1cc:	40023c00 	.word	0x40023c00
 800c1d0:	40023800 	.word	0x40023800
 800c1d4:	0801b7e4 	.word	0x0801b7e4
 800c1d8:	20000010 	.word	0x20000010
 800c1dc:	2000002c 	.word	0x2000002c

0800c1e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c1e0:	b5b0      	push	{r4, r5, r7, lr}
 800c1e2:	b084      	sub	sp, #16
 800c1e4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800c1e6:	2100      	movs	r1, #0
 800c1e8:	6079      	str	r1, [r7, #4]
 800c1ea:	2100      	movs	r1, #0
 800c1ec:	60f9      	str	r1, [r7, #12]
 800c1ee:	2100      	movs	r1, #0
 800c1f0:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 800c1f2:	2100      	movs	r1, #0
 800c1f4:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c1f6:	4952      	ldr	r1, [pc, #328]	; (800c340 <HAL_RCC_GetSysClockFreq+0x160>)
 800c1f8:	6889      	ldr	r1, [r1, #8]
 800c1fa:	f001 010c 	and.w	r1, r1, #12
 800c1fe:	2908      	cmp	r1, #8
 800c200:	d00d      	beq.n	800c21e <HAL_RCC_GetSysClockFreq+0x3e>
 800c202:	2908      	cmp	r1, #8
 800c204:	f200 8094 	bhi.w	800c330 <HAL_RCC_GetSysClockFreq+0x150>
 800c208:	2900      	cmp	r1, #0
 800c20a:	d002      	beq.n	800c212 <HAL_RCC_GetSysClockFreq+0x32>
 800c20c:	2904      	cmp	r1, #4
 800c20e:	d003      	beq.n	800c218 <HAL_RCC_GetSysClockFreq+0x38>
 800c210:	e08e      	b.n	800c330 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800c212:	4b4c      	ldr	r3, [pc, #304]	; (800c344 <HAL_RCC_GetSysClockFreq+0x164>)
 800c214:	60bb      	str	r3, [r7, #8]
      break;
 800c216:	e08e      	b.n	800c336 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800c218:	4b4b      	ldr	r3, [pc, #300]	; (800c348 <HAL_RCC_GetSysClockFreq+0x168>)
 800c21a:	60bb      	str	r3, [r7, #8]
      break;
 800c21c:	e08b      	b.n	800c336 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800c21e:	4948      	ldr	r1, [pc, #288]	; (800c340 <HAL_RCC_GetSysClockFreq+0x160>)
 800c220:	6849      	ldr	r1, [r1, #4]
 800c222:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800c226:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800c228:	4945      	ldr	r1, [pc, #276]	; (800c340 <HAL_RCC_GetSysClockFreq+0x160>)
 800c22a:	6849      	ldr	r1, [r1, #4]
 800c22c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800c230:	2900      	cmp	r1, #0
 800c232:	d024      	beq.n	800c27e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c234:	4942      	ldr	r1, [pc, #264]	; (800c340 <HAL_RCC_GetSysClockFreq+0x160>)
 800c236:	6849      	ldr	r1, [r1, #4]
 800c238:	0989      	lsrs	r1, r1, #6
 800c23a:	4608      	mov	r0, r1
 800c23c:	f04f 0100 	mov.w	r1, #0
 800c240:	f240 14ff 	movw	r4, #511	; 0x1ff
 800c244:	f04f 0500 	mov.w	r5, #0
 800c248:	ea00 0204 	and.w	r2, r0, r4
 800c24c:	ea01 0305 	and.w	r3, r1, r5
 800c250:	493d      	ldr	r1, [pc, #244]	; (800c348 <HAL_RCC_GetSysClockFreq+0x168>)
 800c252:	fb01 f003 	mul.w	r0, r1, r3
 800c256:	2100      	movs	r1, #0
 800c258:	fb01 f102 	mul.w	r1, r1, r2
 800c25c:	1844      	adds	r4, r0, r1
 800c25e:	493a      	ldr	r1, [pc, #232]	; (800c348 <HAL_RCC_GetSysClockFreq+0x168>)
 800c260:	fba2 0101 	umull	r0, r1, r2, r1
 800c264:	1863      	adds	r3, r4, r1
 800c266:	4619      	mov	r1, r3
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	461a      	mov	r2, r3
 800c26c:	f04f 0300 	mov.w	r3, #0
 800c270:	f7f4 fcba 	bl	8000be8 <__aeabi_uldivmod>
 800c274:	4602      	mov	r2, r0
 800c276:	460b      	mov	r3, r1
 800c278:	4613      	mov	r3, r2
 800c27a:	60fb      	str	r3, [r7, #12]
 800c27c:	e04a      	b.n	800c314 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c27e:	4b30      	ldr	r3, [pc, #192]	; (800c340 <HAL_RCC_GetSysClockFreq+0x160>)
 800c280:	685b      	ldr	r3, [r3, #4]
 800c282:	099b      	lsrs	r3, r3, #6
 800c284:	461a      	mov	r2, r3
 800c286:	f04f 0300 	mov.w	r3, #0
 800c28a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800c28e:	f04f 0100 	mov.w	r1, #0
 800c292:	ea02 0400 	and.w	r4, r2, r0
 800c296:	ea03 0501 	and.w	r5, r3, r1
 800c29a:	4620      	mov	r0, r4
 800c29c:	4629      	mov	r1, r5
 800c29e:	f04f 0200 	mov.w	r2, #0
 800c2a2:	f04f 0300 	mov.w	r3, #0
 800c2a6:	014b      	lsls	r3, r1, #5
 800c2a8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800c2ac:	0142      	lsls	r2, r0, #5
 800c2ae:	4610      	mov	r0, r2
 800c2b0:	4619      	mov	r1, r3
 800c2b2:	1b00      	subs	r0, r0, r4
 800c2b4:	eb61 0105 	sbc.w	r1, r1, r5
 800c2b8:	f04f 0200 	mov.w	r2, #0
 800c2bc:	f04f 0300 	mov.w	r3, #0
 800c2c0:	018b      	lsls	r3, r1, #6
 800c2c2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800c2c6:	0182      	lsls	r2, r0, #6
 800c2c8:	1a12      	subs	r2, r2, r0
 800c2ca:	eb63 0301 	sbc.w	r3, r3, r1
 800c2ce:	f04f 0000 	mov.w	r0, #0
 800c2d2:	f04f 0100 	mov.w	r1, #0
 800c2d6:	00d9      	lsls	r1, r3, #3
 800c2d8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800c2dc:	00d0      	lsls	r0, r2, #3
 800c2de:	4602      	mov	r2, r0
 800c2e0:	460b      	mov	r3, r1
 800c2e2:	1912      	adds	r2, r2, r4
 800c2e4:	eb45 0303 	adc.w	r3, r5, r3
 800c2e8:	f04f 0000 	mov.w	r0, #0
 800c2ec:	f04f 0100 	mov.w	r1, #0
 800c2f0:	0299      	lsls	r1, r3, #10
 800c2f2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800c2f6:	0290      	lsls	r0, r2, #10
 800c2f8:	4602      	mov	r2, r0
 800c2fa:	460b      	mov	r3, r1
 800c2fc:	4610      	mov	r0, r2
 800c2fe:	4619      	mov	r1, r3
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	461a      	mov	r2, r3
 800c304:	f04f 0300 	mov.w	r3, #0
 800c308:	f7f4 fc6e 	bl	8000be8 <__aeabi_uldivmod>
 800c30c:	4602      	mov	r2, r0
 800c30e:	460b      	mov	r3, r1
 800c310:	4613      	mov	r3, r2
 800c312:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800c314:	4b0a      	ldr	r3, [pc, #40]	; (800c340 <HAL_RCC_GetSysClockFreq+0x160>)
 800c316:	685b      	ldr	r3, [r3, #4]
 800c318:	0c1b      	lsrs	r3, r3, #16
 800c31a:	f003 0303 	and.w	r3, r3, #3
 800c31e:	3301      	adds	r3, #1
 800c320:	005b      	lsls	r3, r3, #1
 800c322:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800c324:	68fa      	ldr	r2, [r7, #12]
 800c326:	683b      	ldr	r3, [r7, #0]
 800c328:	fbb2 f3f3 	udiv	r3, r2, r3
 800c32c:	60bb      	str	r3, [r7, #8]
      break;
 800c32e:	e002      	b.n	800c336 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800c330:	4b04      	ldr	r3, [pc, #16]	; (800c344 <HAL_RCC_GetSysClockFreq+0x164>)
 800c332:	60bb      	str	r3, [r7, #8]
      break;
 800c334:	bf00      	nop
    }
  }
  return sysclockfreq;
 800c336:	68bb      	ldr	r3, [r7, #8]
}
 800c338:	4618      	mov	r0, r3
 800c33a:	3710      	adds	r7, #16
 800c33c:	46bd      	mov	sp, r7
 800c33e:	bdb0      	pop	{r4, r5, r7, pc}
 800c340:	40023800 	.word	0x40023800
 800c344:	00f42400 	.word	0x00f42400
 800c348:	017d7840 	.word	0x017d7840

0800c34c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c34c:	b480      	push	{r7}
 800c34e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c350:	4b03      	ldr	r3, [pc, #12]	; (800c360 <HAL_RCC_GetHCLKFreq+0x14>)
 800c352:	681b      	ldr	r3, [r3, #0]
}
 800c354:	4618      	mov	r0, r3
 800c356:	46bd      	mov	sp, r7
 800c358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c35c:	4770      	bx	lr
 800c35e:	bf00      	nop
 800c360:	20000010 	.word	0x20000010

0800c364 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c364:	b580      	push	{r7, lr}
 800c366:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800c368:	f7ff fff0 	bl	800c34c <HAL_RCC_GetHCLKFreq>
 800c36c:	4602      	mov	r2, r0
 800c36e:	4b05      	ldr	r3, [pc, #20]	; (800c384 <HAL_RCC_GetPCLK1Freq+0x20>)
 800c370:	689b      	ldr	r3, [r3, #8]
 800c372:	0a9b      	lsrs	r3, r3, #10
 800c374:	f003 0307 	and.w	r3, r3, #7
 800c378:	4903      	ldr	r1, [pc, #12]	; (800c388 <HAL_RCC_GetPCLK1Freq+0x24>)
 800c37a:	5ccb      	ldrb	r3, [r1, r3]
 800c37c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c380:	4618      	mov	r0, r3
 800c382:	bd80      	pop	{r7, pc}
 800c384:	40023800 	.word	0x40023800
 800c388:	0801b7f4 	.word	0x0801b7f4

0800c38c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c38c:	b580      	push	{r7, lr}
 800c38e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800c390:	f7ff ffdc 	bl	800c34c <HAL_RCC_GetHCLKFreq>
 800c394:	4602      	mov	r2, r0
 800c396:	4b05      	ldr	r3, [pc, #20]	; (800c3ac <HAL_RCC_GetPCLK2Freq+0x20>)
 800c398:	689b      	ldr	r3, [r3, #8]
 800c39a:	0b5b      	lsrs	r3, r3, #13
 800c39c:	f003 0307 	and.w	r3, r3, #7
 800c3a0:	4903      	ldr	r1, [pc, #12]	; (800c3b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c3a2:	5ccb      	ldrb	r3, [r1, r3]
 800c3a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c3a8:	4618      	mov	r0, r3
 800c3aa:	bd80      	pop	{r7, pc}
 800c3ac:	40023800 	.word	0x40023800
 800c3b0:	0801b7f4 	.word	0x0801b7f4

0800c3b4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800c3b4:	b480      	push	{r7}
 800c3b6:	b083      	sub	sp, #12
 800c3b8:	af00      	add	r7, sp, #0
 800c3ba:	6078      	str	r0, [r7, #4]
 800c3bc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	220f      	movs	r2, #15
 800c3c2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800c3c4:	4b12      	ldr	r3, [pc, #72]	; (800c410 <HAL_RCC_GetClockConfig+0x5c>)
 800c3c6:	689b      	ldr	r3, [r3, #8]
 800c3c8:	f003 0203 	and.w	r2, r3, #3
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800c3d0:	4b0f      	ldr	r3, [pc, #60]	; (800c410 <HAL_RCC_GetClockConfig+0x5c>)
 800c3d2:	689b      	ldr	r3, [r3, #8]
 800c3d4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800c3dc:	4b0c      	ldr	r3, [pc, #48]	; (800c410 <HAL_RCC_GetClockConfig+0x5c>)
 800c3de:	689b      	ldr	r3, [r3, #8]
 800c3e0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800c3e8:	4b09      	ldr	r3, [pc, #36]	; (800c410 <HAL_RCC_GetClockConfig+0x5c>)
 800c3ea:	689b      	ldr	r3, [r3, #8]
 800c3ec:	08db      	lsrs	r3, r3, #3
 800c3ee:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800c3f6:	4b07      	ldr	r3, [pc, #28]	; (800c414 <HAL_RCC_GetClockConfig+0x60>)
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	f003 020f 	and.w	r2, r3, #15
 800c3fe:	683b      	ldr	r3, [r7, #0]
 800c400:	601a      	str	r2, [r3, #0]
}
 800c402:	bf00      	nop
 800c404:	370c      	adds	r7, #12
 800c406:	46bd      	mov	sp, r7
 800c408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c40c:	4770      	bx	lr
 800c40e:	bf00      	nop
 800c410:	40023800 	.word	0x40023800
 800c414:	40023c00 	.word	0x40023c00

0800c418 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c418:	b580      	push	{r7, lr}
 800c41a:	b088      	sub	sp, #32
 800c41c:	af00      	add	r7, sp, #0
 800c41e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800c420:	2300      	movs	r3, #0
 800c422:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800c424:	2300      	movs	r3, #0
 800c426:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800c428:	2300      	movs	r3, #0
 800c42a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800c42c:	2300      	movs	r3, #0
 800c42e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800c430:	2300      	movs	r3, #0
 800c432:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	f003 0301 	and.w	r3, r3, #1
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d012      	beq.n	800c466 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800c440:	4b69      	ldr	r3, [pc, #420]	; (800c5e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c442:	689b      	ldr	r3, [r3, #8]
 800c444:	4a68      	ldr	r2, [pc, #416]	; (800c5e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c446:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800c44a:	6093      	str	r3, [r2, #8]
 800c44c:	4b66      	ldr	r3, [pc, #408]	; (800c5e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c44e:	689a      	ldr	r2, [r3, #8]
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c454:	4964      	ldr	r1, [pc, #400]	; (800c5e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c456:	4313      	orrs	r3, r2
 800c458:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d101      	bne.n	800c466 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800c462:	2301      	movs	r3, #1
 800c464:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d017      	beq.n	800c4a2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800c472:	4b5d      	ldr	r3, [pc, #372]	; (800c5e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c474:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c478:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c480:	4959      	ldr	r1, [pc, #356]	; (800c5e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c482:	4313      	orrs	r3, r2
 800c484:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c48c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c490:	d101      	bne.n	800c496 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800c492:	2301      	movs	r3, #1
 800c494:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d101      	bne.n	800c4a2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800c49e:	2301      	movs	r3, #1
 800c4a0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d017      	beq.n	800c4de <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800c4ae:	4b4e      	ldr	r3, [pc, #312]	; (800c5e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c4b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c4b4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4bc:	494a      	ldr	r1, [pc, #296]	; (800c5e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c4be:	4313      	orrs	r3, r2
 800c4c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c4cc:	d101      	bne.n	800c4d2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800c4ce:	2301      	movs	r3, #1
 800c4d0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d101      	bne.n	800c4de <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800c4da:	2301      	movs	r3, #1
 800c4dc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d001      	beq.n	800c4ee <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800c4ea:	2301      	movs	r3, #1
 800c4ec:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	f003 0320 	and.w	r3, r3, #32
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	f000 808b 	beq.w	800c612 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800c4fc:	4b3a      	ldr	r3, [pc, #232]	; (800c5e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c4fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c500:	4a39      	ldr	r2, [pc, #228]	; (800c5e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c502:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c506:	6413      	str	r3, [r2, #64]	; 0x40
 800c508:	4b37      	ldr	r3, [pc, #220]	; (800c5e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c50a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c50c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c510:	60bb      	str	r3, [r7, #8]
 800c512:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800c514:	4b35      	ldr	r3, [pc, #212]	; (800c5ec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	4a34      	ldr	r2, [pc, #208]	; (800c5ec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800c51a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c51e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c520:	f7f9 fbec 	bl	8005cfc <HAL_GetTick>
 800c524:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800c526:	e008      	b.n	800c53a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c528:	f7f9 fbe8 	bl	8005cfc <HAL_GetTick>
 800c52c:	4602      	mov	r2, r0
 800c52e:	697b      	ldr	r3, [r7, #20]
 800c530:	1ad3      	subs	r3, r2, r3
 800c532:	2b64      	cmp	r3, #100	; 0x64
 800c534:	d901      	bls.n	800c53a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800c536:	2303      	movs	r3, #3
 800c538:	e357      	b.n	800cbea <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800c53a:	4b2c      	ldr	r3, [pc, #176]	; (800c5ec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c542:	2b00      	cmp	r3, #0
 800c544:	d0f0      	beq.n	800c528 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800c546:	4b28      	ldr	r3, [pc, #160]	; (800c5e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c548:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c54a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c54e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800c550:	693b      	ldr	r3, [r7, #16]
 800c552:	2b00      	cmp	r3, #0
 800c554:	d035      	beq.n	800c5c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c55a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c55e:	693a      	ldr	r2, [r7, #16]
 800c560:	429a      	cmp	r2, r3
 800c562:	d02e      	beq.n	800c5c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c564:	4b20      	ldr	r3, [pc, #128]	; (800c5e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c566:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c568:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c56c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800c56e:	4b1e      	ldr	r3, [pc, #120]	; (800c5e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c570:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c572:	4a1d      	ldr	r2, [pc, #116]	; (800c5e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c574:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c578:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800c57a:	4b1b      	ldr	r3, [pc, #108]	; (800c5e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c57c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c57e:	4a1a      	ldr	r2, [pc, #104]	; (800c5e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c580:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c584:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800c586:	4a18      	ldr	r2, [pc, #96]	; (800c5e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c588:	693b      	ldr	r3, [r7, #16]
 800c58a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800c58c:	4b16      	ldr	r3, [pc, #88]	; (800c5e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c58e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c590:	f003 0301 	and.w	r3, r3, #1
 800c594:	2b01      	cmp	r3, #1
 800c596:	d114      	bne.n	800c5c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c598:	f7f9 fbb0 	bl	8005cfc <HAL_GetTick>
 800c59c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c59e:	e00a      	b.n	800c5b6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c5a0:	f7f9 fbac 	bl	8005cfc <HAL_GetTick>
 800c5a4:	4602      	mov	r2, r0
 800c5a6:	697b      	ldr	r3, [r7, #20]
 800c5a8:	1ad3      	subs	r3, r2, r3
 800c5aa:	f241 3288 	movw	r2, #5000	; 0x1388
 800c5ae:	4293      	cmp	r3, r2
 800c5b0:	d901      	bls.n	800c5b6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800c5b2:	2303      	movs	r3, #3
 800c5b4:	e319      	b.n	800cbea <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c5b6:	4b0c      	ldr	r3, [pc, #48]	; (800c5e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c5b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c5ba:	f003 0302 	and.w	r3, r3, #2
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d0ee      	beq.n	800c5a0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c5c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c5ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c5ce:	d111      	bne.n	800c5f4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800c5d0:	4b05      	ldr	r3, [pc, #20]	; (800c5e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c5d2:	689b      	ldr	r3, [r3, #8]
 800c5d4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800c5dc:	4b04      	ldr	r3, [pc, #16]	; (800c5f0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800c5de:	400b      	ands	r3, r1
 800c5e0:	4901      	ldr	r1, [pc, #4]	; (800c5e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c5e2:	4313      	orrs	r3, r2
 800c5e4:	608b      	str	r3, [r1, #8]
 800c5e6:	e00b      	b.n	800c600 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800c5e8:	40023800 	.word	0x40023800
 800c5ec:	40007000 	.word	0x40007000
 800c5f0:	0ffffcff 	.word	0x0ffffcff
 800c5f4:	4bb1      	ldr	r3, [pc, #708]	; (800c8bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800c5f6:	689b      	ldr	r3, [r3, #8]
 800c5f8:	4ab0      	ldr	r2, [pc, #704]	; (800c8bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800c5fa:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800c5fe:	6093      	str	r3, [r2, #8]
 800c600:	4bae      	ldr	r3, [pc, #696]	; (800c8bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800c602:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c608:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c60c:	49ab      	ldr	r1, [pc, #684]	; (800c8bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800c60e:	4313      	orrs	r3, r2
 800c610:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	f003 0310 	and.w	r3, r3, #16
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d010      	beq.n	800c640 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c61e:	4ba7      	ldr	r3, [pc, #668]	; (800c8bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800c620:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c624:	4aa5      	ldr	r2, [pc, #660]	; (800c8bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800c626:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c62a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800c62e:	4ba3      	ldr	r3, [pc, #652]	; (800c8bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800c630:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c638:	49a0      	ldr	r1, [pc, #640]	; (800c8bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800c63a:	4313      	orrs	r3, r2
 800c63c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d00a      	beq.n	800c662 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800c64c:	4b9b      	ldr	r3, [pc, #620]	; (800c8bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800c64e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c652:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c65a:	4998      	ldr	r1, [pc, #608]	; (800c8bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800c65c:	4313      	orrs	r3, r2
 800c65e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d00a      	beq.n	800c684 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800c66e:	4b93      	ldr	r3, [pc, #588]	; (800c8bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800c670:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c674:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c67c:	498f      	ldr	r1, [pc, #572]	; (800c8bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800c67e:	4313      	orrs	r3, r2
 800c680:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d00a      	beq.n	800c6a6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800c690:	4b8a      	ldr	r3, [pc, #552]	; (800c8bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800c692:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c696:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c69e:	4987      	ldr	r1, [pc, #540]	; (800c8bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800c6a0:	4313      	orrs	r3, r2
 800c6a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d00a      	beq.n	800c6c8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c6b2:	4b82      	ldr	r3, [pc, #520]	; (800c8bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800c6b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c6b8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c6c0:	497e      	ldr	r1, [pc, #504]	; (800c8bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800c6c2:	4313      	orrs	r3, r2
 800c6c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d00a      	beq.n	800c6ea <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800c6d4:	4b79      	ldr	r3, [pc, #484]	; (800c8bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800c6d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c6da:	f023 0203 	bic.w	r2, r3, #3
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c6e2:	4976      	ldr	r1, [pc, #472]	; (800c8bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800c6e4:	4313      	orrs	r3, r2
 800c6e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d00a      	beq.n	800c70c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800c6f6:	4b71      	ldr	r3, [pc, #452]	; (800c8bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800c6f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c6fc:	f023 020c 	bic.w	r2, r3, #12
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c704:	496d      	ldr	r1, [pc, #436]	; (800c8bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800c706:	4313      	orrs	r3, r2
 800c708:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c714:	2b00      	cmp	r3, #0
 800c716:	d00a      	beq.n	800c72e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800c718:	4b68      	ldr	r3, [pc, #416]	; (800c8bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800c71a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c71e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c726:	4965      	ldr	r1, [pc, #404]	; (800c8bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800c728:	4313      	orrs	r3, r2
 800c72a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c736:	2b00      	cmp	r3, #0
 800c738:	d00a      	beq.n	800c750 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800c73a:	4b60      	ldr	r3, [pc, #384]	; (800c8bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800c73c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c740:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c748:	495c      	ldr	r1, [pc, #368]	; (800c8bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800c74a:	4313      	orrs	r3, r2
 800c74c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d00a      	beq.n	800c772 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800c75c:	4b57      	ldr	r3, [pc, #348]	; (800c8bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800c75e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c762:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c76a:	4954      	ldr	r1, [pc, #336]	; (800c8bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800c76c:	4313      	orrs	r3, r2
 800c76e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d00a      	beq.n	800c794 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800c77e:	4b4f      	ldr	r3, [pc, #316]	; (800c8bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800c780:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c784:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c78c:	494b      	ldr	r1, [pc, #300]	; (800c8bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800c78e:	4313      	orrs	r3, r2
 800c790:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d00a      	beq.n	800c7b6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800c7a0:	4b46      	ldr	r3, [pc, #280]	; (800c8bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800c7a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c7a6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c7ae:	4943      	ldr	r1, [pc, #268]	; (800c8bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800c7b0:	4313      	orrs	r3, r2
 800c7b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d00a      	beq.n	800c7d8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800c7c2:	4b3e      	ldr	r3, [pc, #248]	; (800c8bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800c7c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c7c8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c7d0:	493a      	ldr	r1, [pc, #232]	; (800c8bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800c7d2:	4313      	orrs	r3, r2
 800c7d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d00a      	beq.n	800c7fa <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c7e4:	4b35      	ldr	r3, [pc, #212]	; (800c8bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800c7e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c7ea:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c7f2:	4932      	ldr	r1, [pc, #200]	; (800c8bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800c7f4:	4313      	orrs	r3, r2
 800c7f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c802:	2b00      	cmp	r3, #0
 800c804:	d011      	beq.n	800c82a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800c806:	4b2d      	ldr	r3, [pc, #180]	; (800c8bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800c808:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c80c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c814:	4929      	ldr	r1, [pc, #164]	; (800c8bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800c816:	4313      	orrs	r3, r2
 800c818:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c820:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c824:	d101      	bne.n	800c82a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800c826:	2301      	movs	r3, #1
 800c828:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	f003 0308 	and.w	r3, r3, #8
 800c832:	2b00      	cmp	r3, #0
 800c834:	d001      	beq.n	800c83a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800c836:	2301      	movs	r3, #1
 800c838:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c842:	2b00      	cmp	r3, #0
 800c844:	d00a      	beq.n	800c85c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c846:	4b1d      	ldr	r3, [pc, #116]	; (800c8bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800c848:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c84c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c854:	4919      	ldr	r1, [pc, #100]	; (800c8bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800c856:	4313      	orrs	r3, r2
 800c858:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c864:	2b00      	cmp	r3, #0
 800c866:	d00b      	beq.n	800c880 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800c868:	4b14      	ldr	r3, [pc, #80]	; (800c8bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800c86a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c86e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c878:	4910      	ldr	r1, [pc, #64]	; (800c8bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800c87a:	4313      	orrs	r3, r2
 800c87c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800c880:	69fb      	ldr	r3, [r7, #28]
 800c882:	2b01      	cmp	r3, #1
 800c884:	d006      	beq.n	800c894 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c88e:	2b00      	cmp	r3, #0
 800c890:	f000 80d9 	beq.w	800ca46 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800c894:	4b09      	ldr	r3, [pc, #36]	; (800c8bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	4a08      	ldr	r2, [pc, #32]	; (800c8bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800c89a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c89e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c8a0:	f7f9 fa2c 	bl	8005cfc <HAL_GetTick>
 800c8a4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c8a6:	e00b      	b.n	800c8c0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800c8a8:	f7f9 fa28 	bl	8005cfc <HAL_GetTick>
 800c8ac:	4602      	mov	r2, r0
 800c8ae:	697b      	ldr	r3, [r7, #20]
 800c8b0:	1ad3      	subs	r3, r2, r3
 800c8b2:	2b64      	cmp	r3, #100	; 0x64
 800c8b4:	d904      	bls.n	800c8c0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c8b6:	2303      	movs	r3, #3
 800c8b8:	e197      	b.n	800cbea <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800c8ba:	bf00      	nop
 800c8bc:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c8c0:	4b6c      	ldr	r3, [pc, #432]	; (800ca74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d1ed      	bne.n	800c8a8 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	f003 0301 	and.w	r3, r3, #1
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d021      	beq.n	800c91c <HAL_RCCEx_PeriphCLKConfig+0x504>
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d11d      	bne.n	800c91c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800c8e0:	4b64      	ldr	r3, [pc, #400]	; (800ca74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c8e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c8e6:	0c1b      	lsrs	r3, r3, #16
 800c8e8:	f003 0303 	and.w	r3, r3, #3
 800c8ec:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800c8ee:	4b61      	ldr	r3, [pc, #388]	; (800ca74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c8f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c8f4:	0e1b      	lsrs	r3, r3, #24
 800c8f6:	f003 030f 	and.w	r3, r3, #15
 800c8fa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	685b      	ldr	r3, [r3, #4]
 800c900:	019a      	lsls	r2, r3, #6
 800c902:	693b      	ldr	r3, [r7, #16]
 800c904:	041b      	lsls	r3, r3, #16
 800c906:	431a      	orrs	r2, r3
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	061b      	lsls	r3, r3, #24
 800c90c:	431a      	orrs	r2, r3
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	689b      	ldr	r3, [r3, #8]
 800c912:	071b      	lsls	r3, r3, #28
 800c914:	4957      	ldr	r1, [pc, #348]	; (800ca74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c916:	4313      	orrs	r3, r2
 800c918:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c924:	2b00      	cmp	r3, #0
 800c926:	d004      	beq.n	800c932 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c92c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c930:	d00a      	beq.n	800c948 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d02e      	beq.n	800c99c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c942:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c946:	d129      	bne.n	800c99c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800c948:	4b4a      	ldr	r3, [pc, #296]	; (800ca74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c94a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c94e:	0c1b      	lsrs	r3, r3, #16
 800c950:	f003 0303 	and.w	r3, r3, #3
 800c954:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800c956:	4b47      	ldr	r3, [pc, #284]	; (800ca74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c958:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c95c:	0f1b      	lsrs	r3, r3, #28
 800c95e:	f003 0307 	and.w	r3, r3, #7
 800c962:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	685b      	ldr	r3, [r3, #4]
 800c968:	019a      	lsls	r2, r3, #6
 800c96a:	693b      	ldr	r3, [r7, #16]
 800c96c:	041b      	lsls	r3, r3, #16
 800c96e:	431a      	orrs	r2, r3
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	68db      	ldr	r3, [r3, #12]
 800c974:	061b      	lsls	r3, r3, #24
 800c976:	431a      	orrs	r2, r3
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	071b      	lsls	r3, r3, #28
 800c97c:	493d      	ldr	r1, [pc, #244]	; (800ca74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c97e:	4313      	orrs	r3, r2
 800c980:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800c984:	4b3b      	ldr	r3, [pc, #236]	; (800ca74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c986:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c98a:	f023 021f 	bic.w	r2, r3, #31
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c992:	3b01      	subs	r3, #1
 800c994:	4937      	ldr	r1, [pc, #220]	; (800ca74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c996:	4313      	orrs	r3, r2
 800c998:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d01d      	beq.n	800c9e4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800c9a8:	4b32      	ldr	r3, [pc, #200]	; (800ca74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c9aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c9ae:	0e1b      	lsrs	r3, r3, #24
 800c9b0:	f003 030f 	and.w	r3, r3, #15
 800c9b4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800c9b6:	4b2f      	ldr	r3, [pc, #188]	; (800ca74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c9b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c9bc:	0f1b      	lsrs	r3, r3, #28
 800c9be:	f003 0307 	and.w	r3, r3, #7
 800c9c2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	685b      	ldr	r3, [r3, #4]
 800c9c8:	019a      	lsls	r2, r3, #6
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	691b      	ldr	r3, [r3, #16]
 800c9ce:	041b      	lsls	r3, r3, #16
 800c9d0:	431a      	orrs	r2, r3
 800c9d2:	693b      	ldr	r3, [r7, #16]
 800c9d4:	061b      	lsls	r3, r3, #24
 800c9d6:	431a      	orrs	r2, r3
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	071b      	lsls	r3, r3, #28
 800c9dc:	4925      	ldr	r1, [pc, #148]	; (800ca74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c9de:	4313      	orrs	r3, r2
 800c9e0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d011      	beq.n	800ca14 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	685b      	ldr	r3, [r3, #4]
 800c9f4:	019a      	lsls	r2, r3, #6
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	691b      	ldr	r3, [r3, #16]
 800c9fa:	041b      	lsls	r3, r3, #16
 800c9fc:	431a      	orrs	r2, r3
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	68db      	ldr	r3, [r3, #12]
 800ca02:	061b      	lsls	r3, r3, #24
 800ca04:	431a      	orrs	r2, r3
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	689b      	ldr	r3, [r3, #8]
 800ca0a:	071b      	lsls	r3, r3, #28
 800ca0c:	4919      	ldr	r1, [pc, #100]	; (800ca74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800ca0e:	4313      	orrs	r3, r2
 800ca10:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800ca14:	4b17      	ldr	r3, [pc, #92]	; (800ca74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	4a16      	ldr	r2, [pc, #88]	; (800ca74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800ca1a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ca1e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ca20:	f7f9 f96c 	bl	8005cfc <HAL_GetTick>
 800ca24:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800ca26:	e008      	b.n	800ca3a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800ca28:	f7f9 f968 	bl	8005cfc <HAL_GetTick>
 800ca2c:	4602      	mov	r2, r0
 800ca2e:	697b      	ldr	r3, [r7, #20]
 800ca30:	1ad3      	subs	r3, r2, r3
 800ca32:	2b64      	cmp	r3, #100	; 0x64
 800ca34:	d901      	bls.n	800ca3a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800ca36:	2303      	movs	r3, #3
 800ca38:	e0d7      	b.n	800cbea <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800ca3a:	4b0e      	ldr	r3, [pc, #56]	; (800ca74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d0f0      	beq.n	800ca28 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800ca46:	69bb      	ldr	r3, [r7, #24]
 800ca48:	2b01      	cmp	r3, #1
 800ca4a:	f040 80cd 	bne.w	800cbe8 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800ca4e:	4b09      	ldr	r3, [pc, #36]	; (800ca74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	4a08      	ldr	r2, [pc, #32]	; (800ca74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800ca54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ca58:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ca5a:	f7f9 f94f 	bl	8005cfc <HAL_GetTick>
 800ca5e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800ca60:	e00a      	b.n	800ca78 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800ca62:	f7f9 f94b 	bl	8005cfc <HAL_GetTick>
 800ca66:	4602      	mov	r2, r0
 800ca68:	697b      	ldr	r3, [r7, #20]
 800ca6a:	1ad3      	subs	r3, r2, r3
 800ca6c:	2b64      	cmp	r3, #100	; 0x64
 800ca6e:	d903      	bls.n	800ca78 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800ca70:	2303      	movs	r3, #3
 800ca72:	e0ba      	b.n	800cbea <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800ca74:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800ca78:	4b5e      	ldr	r3, [pc, #376]	; (800cbf4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ca80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ca84:	d0ed      	beq.n	800ca62 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d003      	beq.n	800ca9a <HAL_RCCEx_PeriphCLKConfig+0x682>
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d009      	beq.n	800caae <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d02e      	beq.n	800cb04 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d12a      	bne.n	800cb04 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800caae:	4b51      	ldr	r3, [pc, #324]	; (800cbf4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800cab0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cab4:	0c1b      	lsrs	r3, r3, #16
 800cab6:	f003 0303 	and.w	r3, r3, #3
 800caba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800cabc:	4b4d      	ldr	r3, [pc, #308]	; (800cbf4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800cabe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cac2:	0f1b      	lsrs	r3, r3, #28
 800cac4:	f003 0307 	and.w	r3, r3, #7
 800cac8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	695b      	ldr	r3, [r3, #20]
 800cace:	019a      	lsls	r2, r3, #6
 800cad0:	693b      	ldr	r3, [r7, #16]
 800cad2:	041b      	lsls	r3, r3, #16
 800cad4:	431a      	orrs	r2, r3
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	699b      	ldr	r3, [r3, #24]
 800cada:	061b      	lsls	r3, r3, #24
 800cadc:	431a      	orrs	r2, r3
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	071b      	lsls	r3, r3, #28
 800cae2:	4944      	ldr	r1, [pc, #272]	; (800cbf4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800cae4:	4313      	orrs	r3, r2
 800cae6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800caea:	4b42      	ldr	r3, [pc, #264]	; (800cbf4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800caec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800caf0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800caf8:	3b01      	subs	r3, #1
 800cafa:	021b      	lsls	r3, r3, #8
 800cafc:	493d      	ldr	r1, [pc, #244]	; (800cbf4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800cafe:	4313      	orrs	r3, r2
 800cb00:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d022      	beq.n	800cb56 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cb14:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cb18:	d11d      	bne.n	800cb56 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800cb1a:	4b36      	ldr	r3, [pc, #216]	; (800cbf4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800cb1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cb20:	0e1b      	lsrs	r3, r3, #24
 800cb22:	f003 030f 	and.w	r3, r3, #15
 800cb26:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800cb28:	4b32      	ldr	r3, [pc, #200]	; (800cbf4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800cb2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cb2e:	0f1b      	lsrs	r3, r3, #28
 800cb30:	f003 0307 	and.w	r3, r3, #7
 800cb34:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	695b      	ldr	r3, [r3, #20]
 800cb3a:	019a      	lsls	r2, r3, #6
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	6a1b      	ldr	r3, [r3, #32]
 800cb40:	041b      	lsls	r3, r3, #16
 800cb42:	431a      	orrs	r2, r3
 800cb44:	693b      	ldr	r3, [r7, #16]
 800cb46:	061b      	lsls	r3, r3, #24
 800cb48:	431a      	orrs	r2, r3
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	071b      	lsls	r3, r3, #28
 800cb4e:	4929      	ldr	r1, [pc, #164]	; (800cbf4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800cb50:	4313      	orrs	r3, r2
 800cb52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	f003 0308 	and.w	r3, r3, #8
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d028      	beq.n	800cbb4 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800cb62:	4b24      	ldr	r3, [pc, #144]	; (800cbf4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800cb64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cb68:	0e1b      	lsrs	r3, r3, #24
 800cb6a:	f003 030f 	and.w	r3, r3, #15
 800cb6e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800cb70:	4b20      	ldr	r3, [pc, #128]	; (800cbf4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800cb72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cb76:	0c1b      	lsrs	r3, r3, #16
 800cb78:	f003 0303 	and.w	r3, r3, #3
 800cb7c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	695b      	ldr	r3, [r3, #20]
 800cb82:	019a      	lsls	r2, r3, #6
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	041b      	lsls	r3, r3, #16
 800cb88:	431a      	orrs	r2, r3
 800cb8a:	693b      	ldr	r3, [r7, #16]
 800cb8c:	061b      	lsls	r3, r3, #24
 800cb8e:	431a      	orrs	r2, r3
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	69db      	ldr	r3, [r3, #28]
 800cb94:	071b      	lsls	r3, r3, #28
 800cb96:	4917      	ldr	r1, [pc, #92]	; (800cbf4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800cb98:	4313      	orrs	r3, r2
 800cb9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800cb9e:	4b15      	ldr	r3, [pc, #84]	; (800cbf4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800cba0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cba4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbac:	4911      	ldr	r1, [pc, #68]	; (800cbf4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800cbae:	4313      	orrs	r3, r2
 800cbb0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800cbb4:	4b0f      	ldr	r3, [pc, #60]	; (800cbf4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	4a0e      	ldr	r2, [pc, #56]	; (800cbf4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800cbba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cbbe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cbc0:	f7f9 f89c 	bl	8005cfc <HAL_GetTick>
 800cbc4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800cbc6:	e008      	b.n	800cbda <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800cbc8:	f7f9 f898 	bl	8005cfc <HAL_GetTick>
 800cbcc:	4602      	mov	r2, r0
 800cbce:	697b      	ldr	r3, [r7, #20]
 800cbd0:	1ad3      	subs	r3, r2, r3
 800cbd2:	2b64      	cmp	r3, #100	; 0x64
 800cbd4:	d901      	bls.n	800cbda <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800cbd6:	2303      	movs	r3, #3
 800cbd8:	e007      	b.n	800cbea <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800cbda:	4b06      	ldr	r3, [pc, #24]	; (800cbf4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cbe2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cbe6:	d1ef      	bne.n	800cbc8 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800cbe8:	2300      	movs	r3, #0
}
 800cbea:	4618      	mov	r0, r3
 800cbec:	3720      	adds	r7, #32
 800cbee:	46bd      	mov	sp, r7
 800cbf0:	bd80      	pop	{r7, pc}
 800cbf2:	bf00      	nop
 800cbf4:	40023800 	.word	0x40023800

0800cbf8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800cbf8:	b480      	push	{r7}
 800cbfa:	b087      	sub	sp, #28
 800cbfc:	af00      	add	r7, sp, #0
 800cbfe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800cc00:	2300      	movs	r3, #0
 800cc02:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 800cc04:	2300      	movs	r3, #0
 800cc06:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 800cc08:	2300      	movs	r3, #0
 800cc0a:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 800cc0c:	2300      	movs	r3, #0
 800cc0e:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800cc16:	f040 808c 	bne.w	800cd32 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
  {
    saiclocksource = RCC->DCKCFGR1;
 800cc1a:	4b95      	ldr	r3, [pc, #596]	; (800ce70 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800cc1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cc20:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 800cc22:	68bb      	ldr	r3, [r7, #8]
 800cc24:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800cc28:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800cc2a:	68bb      	ldr	r3, [r7, #8]
 800cc2c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cc30:	d07c      	beq.n	800cd2c <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800cc32:	68bb      	ldr	r3, [r7, #8]
 800cc34:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cc38:	d87d      	bhi.n	800cd36 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800cc3a:	68bb      	ldr	r3, [r7, #8]
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d004      	beq.n	800cc4a <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 800cc40:	68bb      	ldr	r3, [r7, #8]
 800cc42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cc46:	d039      	beq.n	800ccbc <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800cc48:	e075      	b.n	800cd36 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800cc4a:	4b89      	ldr	r3, [pc, #548]	; (800ce70 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800cc4c:	685b      	ldr	r3, [r3, #4]
 800cc4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d108      	bne.n	800cc68 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800cc56:	4b86      	ldr	r3, [pc, #536]	; (800ce70 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800cc58:	685b      	ldr	r3, [r3, #4]
 800cc5a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cc5e:	4a85      	ldr	r2, [pc, #532]	; (800ce74 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800cc60:	fbb2 f3f3 	udiv	r3, r2, r3
 800cc64:	613b      	str	r3, [r7, #16]
 800cc66:	e007      	b.n	800cc78 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800cc68:	4b81      	ldr	r3, [pc, #516]	; (800ce70 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800cc6a:	685b      	ldr	r3, [r3, #4]
 800cc6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cc70:	4a81      	ldr	r2, [pc, #516]	; (800ce78 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800cc72:	fbb2 f3f3 	udiv	r3, r2, r3
 800cc76:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800cc78:	4b7d      	ldr	r3, [pc, #500]	; (800ce70 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800cc7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cc7e:	0e1b      	lsrs	r3, r3, #24
 800cc80:	f003 030f 	and.w	r3, r3, #15
 800cc84:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800cc86:	4b7a      	ldr	r3, [pc, #488]	; (800ce70 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800cc88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cc8c:	099b      	lsrs	r3, r3, #6
 800cc8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc92:	693a      	ldr	r2, [r7, #16]
 800cc94:	fb02 f203 	mul.w	r2, r2, r3
 800cc98:	68fb      	ldr	r3, [r7, #12]
 800cc9a:	fbb2 f3f3 	udiv	r3, r2, r3
 800cc9e:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800cca0:	4b73      	ldr	r3, [pc, #460]	; (800ce70 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800cca2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cca6:	0a1b      	lsrs	r3, r3, #8
 800cca8:	f003 031f 	and.w	r3, r3, #31
 800ccac:	3301      	adds	r3, #1
 800ccae:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800ccb0:	697a      	ldr	r2, [r7, #20]
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	fbb2 f3f3 	udiv	r3, r2, r3
 800ccb8:	617b      	str	r3, [r7, #20]
        break;
 800ccba:	e03d      	b.n	800cd38 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800ccbc:	4b6c      	ldr	r3, [pc, #432]	; (800ce70 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800ccbe:	685b      	ldr	r3, [r3, #4]
 800ccc0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d108      	bne.n	800ccda <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800ccc8:	4b69      	ldr	r3, [pc, #420]	; (800ce70 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800ccca:	685b      	ldr	r3, [r3, #4]
 800cccc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ccd0:	4a68      	ldr	r2, [pc, #416]	; (800ce74 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800ccd2:	fbb2 f3f3 	udiv	r3, r2, r3
 800ccd6:	613b      	str	r3, [r7, #16]
 800ccd8:	e007      	b.n	800ccea <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800ccda:	4b65      	ldr	r3, [pc, #404]	; (800ce70 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800ccdc:	685b      	ldr	r3, [r3, #4]
 800ccde:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cce2:	4a65      	ldr	r2, [pc, #404]	; (800ce78 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800cce4:	fbb2 f3f3 	udiv	r3, r2, r3
 800cce8:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800ccea:	4b61      	ldr	r3, [pc, #388]	; (800ce70 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800ccec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ccf0:	0e1b      	lsrs	r3, r3, #24
 800ccf2:	f003 030f 	and.w	r3, r3, #15
 800ccf6:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800ccf8:	4b5d      	ldr	r3, [pc, #372]	; (800ce70 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800ccfa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ccfe:	099b      	lsrs	r3, r3, #6
 800cd00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd04:	693a      	ldr	r2, [r7, #16]
 800cd06:	fb02 f203 	mul.w	r2, r2, r3
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	fbb2 f3f3 	udiv	r3, r2, r3
 800cd10:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800cd12:	4b57      	ldr	r3, [pc, #348]	; (800ce70 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800cd14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cd18:	f003 031f 	and.w	r3, r3, #31
 800cd1c:	3301      	adds	r3, #1
 800cd1e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800cd20:	697a      	ldr	r2, [r7, #20]
 800cd22:	68fb      	ldr	r3, [r7, #12]
 800cd24:	fbb2 f3f3 	udiv	r3, r2, r3
 800cd28:	617b      	str	r3, [r7, #20]
        break;
 800cd2a:	e005      	b.n	800cd38 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        frequency = EXTERNAL_CLOCK_VALUE;
 800cd2c:	4b53      	ldr	r3, [pc, #332]	; (800ce7c <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800cd2e:	617b      	str	r3, [r7, #20]
        break;
 800cd30:	e002      	b.n	800cd38 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      }
    }
  }
 800cd32:	bf00      	nop
 800cd34:	e000      	b.n	800cd38 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        break;
 800cd36:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cd3e:	f040 808c 	bne.w	800ce5a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
  {
    saiclocksource = RCC->DCKCFGR1;
 800cd42:	4b4b      	ldr	r3, [pc, #300]	; (800ce70 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800cd44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cd48:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 800cd4a:	68bb      	ldr	r3, [r7, #8]
 800cd4c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800cd50:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800cd52:	68bb      	ldr	r3, [r7, #8]
 800cd54:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800cd58:	d07c      	beq.n	800ce54 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 800cd5a:	68bb      	ldr	r3, [r7, #8]
 800cd5c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800cd60:	d87d      	bhi.n	800ce5e <HAL_RCCEx_GetPeriphCLKFreq+0x266>
 800cd62:	68bb      	ldr	r3, [r7, #8]
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d004      	beq.n	800cd72 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 800cd68:	68bb      	ldr	r3, [r7, #8]
 800cd6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cd6e:	d039      	beq.n	800cde4 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800cd70:	e075      	b.n	800ce5e <HAL_RCCEx_GetPeriphCLKFreq+0x266>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800cd72:	4b3f      	ldr	r3, [pc, #252]	; (800ce70 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800cd74:	685b      	ldr	r3, [r3, #4]
 800cd76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d108      	bne.n	800cd90 <HAL_RCCEx_GetPeriphCLKFreq+0x198>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800cd7e:	4b3c      	ldr	r3, [pc, #240]	; (800ce70 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800cd80:	685b      	ldr	r3, [r3, #4]
 800cd82:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cd86:	4a3b      	ldr	r2, [pc, #236]	; (800ce74 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800cd88:	fbb2 f3f3 	udiv	r3, r2, r3
 800cd8c:	613b      	str	r3, [r7, #16]
 800cd8e:	e007      	b.n	800cda0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800cd90:	4b37      	ldr	r3, [pc, #220]	; (800ce70 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800cd92:	685b      	ldr	r3, [r3, #4]
 800cd94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cd98:	4a37      	ldr	r2, [pc, #220]	; (800ce78 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800cd9a:	fbb2 f3f3 	udiv	r3, r2, r3
 800cd9e:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800cda0:	4b33      	ldr	r3, [pc, #204]	; (800ce70 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800cda2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cda6:	0e1b      	lsrs	r3, r3, #24
 800cda8:	f003 030f 	and.w	r3, r3, #15
 800cdac:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800cdae:	4b30      	ldr	r3, [pc, #192]	; (800ce70 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800cdb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cdb4:	099b      	lsrs	r3, r3, #6
 800cdb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cdba:	693a      	ldr	r2, [r7, #16]
 800cdbc:	fb02 f203 	mul.w	r2, r2, r3
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	fbb2 f3f3 	udiv	r3, r2, r3
 800cdc6:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800cdc8:	4b29      	ldr	r3, [pc, #164]	; (800ce70 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800cdca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cdce:	0a1b      	lsrs	r3, r3, #8
 800cdd0:	f003 031f 	and.w	r3, r3, #31
 800cdd4:	3301      	adds	r3, #1
 800cdd6:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800cdd8:	697a      	ldr	r2, [r7, #20]
 800cdda:	68fb      	ldr	r3, [r7, #12]
 800cddc:	fbb2 f3f3 	udiv	r3, r2, r3
 800cde0:	617b      	str	r3, [r7, #20]
        break;
 800cde2:	e03d      	b.n	800ce60 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800cde4:	4b22      	ldr	r3, [pc, #136]	; (800ce70 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800cde6:	685b      	ldr	r3, [r3, #4]
 800cde8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d108      	bne.n	800ce02 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800cdf0:	4b1f      	ldr	r3, [pc, #124]	; (800ce70 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800cdf2:	685b      	ldr	r3, [r3, #4]
 800cdf4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cdf8:	4a1e      	ldr	r2, [pc, #120]	; (800ce74 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800cdfa:	fbb2 f3f3 	udiv	r3, r2, r3
 800cdfe:	613b      	str	r3, [r7, #16]
 800ce00:	e007      	b.n	800ce12 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800ce02:	4b1b      	ldr	r3, [pc, #108]	; (800ce70 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800ce04:	685b      	ldr	r3, [r3, #4]
 800ce06:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ce0a:	4a1b      	ldr	r2, [pc, #108]	; (800ce78 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800ce0c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ce10:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800ce12:	4b17      	ldr	r3, [pc, #92]	; (800ce70 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800ce14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ce18:	0e1b      	lsrs	r3, r3, #24
 800ce1a:	f003 030f 	and.w	r3, r3, #15
 800ce1e:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800ce20:	4b13      	ldr	r3, [pc, #76]	; (800ce70 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800ce22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ce26:	099b      	lsrs	r3, r3, #6
 800ce28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce2c:	693a      	ldr	r2, [r7, #16]
 800ce2e:	fb02 f203 	mul.w	r2, r2, r3
 800ce32:	68fb      	ldr	r3, [r7, #12]
 800ce34:	fbb2 f3f3 	udiv	r3, r2, r3
 800ce38:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800ce3a:	4b0d      	ldr	r3, [pc, #52]	; (800ce70 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800ce3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ce40:	f003 031f 	and.w	r3, r3, #31
 800ce44:	3301      	adds	r3, #1
 800ce46:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800ce48:	697a      	ldr	r2, [r7, #20]
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ce50:	617b      	str	r3, [r7, #20]
        break;
 800ce52:	e005      	b.n	800ce60 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        frequency = EXTERNAL_CLOCK_VALUE;
 800ce54:	4b09      	ldr	r3, [pc, #36]	; (800ce7c <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800ce56:	617b      	str	r3, [r7, #20]
        break;
 800ce58:	e002      	b.n	800ce60 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
      }
    }
  }
 800ce5a:	bf00      	nop
 800ce5c:	e000      	b.n	800ce60 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        break;
 800ce5e:	bf00      	nop

  return frequency;
 800ce60:	697b      	ldr	r3, [r7, #20]
}
 800ce62:	4618      	mov	r0, r3
 800ce64:	371c      	adds	r7, #28
 800ce66:	46bd      	mov	sp, r7
 800ce68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce6c:	4770      	bx	lr
 800ce6e:	bf00      	nop
 800ce70:	40023800 	.word	0x40023800
 800ce74:	00f42400 	.word	0x00f42400
 800ce78:	017d7840 	.word	0x017d7840
 800ce7c:	00bb8000 	.word	0x00bb8000

0800ce80 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800ce80:	b580      	push	{r7, lr}
 800ce82:	b082      	sub	sp, #8
 800ce84:	af00      	add	r7, sp, #0
 800ce86:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d101      	bne.n	800ce92 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800ce8e:	2301      	movs	r3, #1
 800ce90:	e081      	b.n	800cf96 <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	7f5b      	ldrb	r3, [r3, #29]
 800ce96:	b2db      	uxtb	r3, r3
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d105      	bne.n	800cea8 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	2200      	movs	r2, #0
 800cea0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800cea2:	6878      	ldr	r0, [r7, #4]
 800cea4:	f7f6 faec 	bl	8003480 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	2202      	movs	r2, #2
 800ceac:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	22ca      	movs	r2, #202	; 0xca
 800ceb4:	625a      	str	r2, [r3, #36]	; 0x24
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	2253      	movs	r2, #83	; 0x53
 800cebc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800cebe:	6878      	ldr	r0, [r7, #4]
 800cec0:	f000 fb16 	bl	800d4f0 <RTC_EnterInitMode>
 800cec4:	4603      	mov	r3, r0
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d008      	beq.n	800cedc <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	22ff      	movs	r2, #255	; 0xff
 800ced0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	2204      	movs	r2, #4
 800ced6:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800ced8:	2301      	movs	r3, #1
 800ceda:	e05c      	b.n	800cf96 <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	6899      	ldr	r1, [r3, #8]
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	681a      	ldr	r2, [r3, #0]
 800cee6:	4b2e      	ldr	r3, [pc, #184]	; (800cfa0 <HAL_RTC_Init+0x120>)
 800cee8:	400b      	ands	r3, r1
 800ceea:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	6899      	ldr	r1, [r3, #8]
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	685a      	ldr	r2, [r3, #4]
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	691b      	ldr	r3, [r3, #16]
 800cefa:	431a      	orrs	r2, r3
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	695b      	ldr	r3, [r3, #20]
 800cf00:	431a      	orrs	r2, r3
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	430a      	orrs	r2, r1
 800cf08:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	687a      	ldr	r2, [r7, #4]
 800cf10:	68d2      	ldr	r2, [r2, #12]
 800cf12:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	6919      	ldr	r1, [r3, #16]
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	689b      	ldr	r3, [r3, #8]
 800cf1e:	041a      	lsls	r2, r3, #16
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	430a      	orrs	r2, r1
 800cf26:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	68da      	ldr	r2, [r3, #12]
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800cf36:	60da      	str	r2, [r3, #12]
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	689b      	ldr	r3, [r3, #8]
 800cf3e:	f003 0320 	and.w	r3, r3, #32
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d10e      	bne.n	800cf64 <HAL_RTC_Init+0xe4>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800cf46:	6878      	ldr	r0, [r7, #4]
 800cf48:	f000 faaa 	bl	800d4a0 <HAL_RTC_WaitForSynchro>
 800cf4c:	4603      	mov	r3, r0
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d008      	beq.n	800cf64 <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	22ff      	movs	r2, #255	; 0xff
 800cf58:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	2204      	movs	r2, #4
 800cf5e:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800cf60:	2301      	movs	r3, #1
 800cf62:	e018      	b.n	800cf96 <HAL_RTC_Init+0x116>
      }
    }
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	f022 0208 	bic.w	r2, r2, #8
 800cf72:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	699a      	ldr	r2, [r3, #24]
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	430a      	orrs	r2, r1
 800cf84:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	22ff      	movs	r2, #255	; 0xff
 800cf8c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	2201      	movs	r2, #1
 800cf92:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800cf94:	2300      	movs	r3, #0
  }
}
 800cf96:	4618      	mov	r0, r3
 800cf98:	3708      	adds	r7, #8
 800cf9a:	46bd      	mov	sp, r7
 800cf9c:	bd80      	pop	{r7, pc}
 800cf9e:	bf00      	nop
 800cfa0:	ff8fffbf 	.word	0xff8fffbf

0800cfa4 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800cfa4:	b590      	push	{r4, r7, lr}
 800cfa6:	b087      	sub	sp, #28
 800cfa8:	af00      	add	r7, sp, #0
 800cfaa:	60f8      	str	r0, [r7, #12]
 800cfac:	60b9      	str	r1, [r7, #8]
 800cfae:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800cfb0:	2300      	movs	r3, #0
 800cfb2:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	7f1b      	ldrb	r3, [r3, #28]
 800cfb8:	2b01      	cmp	r3, #1
 800cfba:	d101      	bne.n	800cfc0 <HAL_RTC_SetTime+0x1c>
 800cfbc:	2302      	movs	r3, #2
 800cfbe:	e0a8      	b.n	800d112 <HAL_RTC_SetTime+0x16e>
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	2201      	movs	r2, #1
 800cfc4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	2202      	movs	r2, #2
 800cfca:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d126      	bne.n	800d020 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	689b      	ldr	r3, [r3, #8]
 800cfd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d102      	bne.n	800cfe6 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 800cfe0:	68bb      	ldr	r3, [r7, #8]
 800cfe2:	2200      	movs	r2, #0
 800cfe4:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800cfe6:	68bb      	ldr	r3, [r7, #8]
 800cfe8:	781b      	ldrb	r3, [r3, #0]
 800cfea:	4618      	mov	r0, r3
 800cfec:	f000 faac 	bl	800d548 <RTC_ByteToBcd2>
 800cff0:	4603      	mov	r3, r0
 800cff2:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 800cff4:	68bb      	ldr	r3, [r7, #8]
 800cff6:	785b      	ldrb	r3, [r3, #1]
 800cff8:	4618      	mov	r0, r3
 800cffa:	f000 faa5 	bl	800d548 <RTC_ByteToBcd2>
 800cffe:	4603      	mov	r3, r0
 800d000:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800d002:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800d004:	68bb      	ldr	r3, [r7, #8]
 800d006:	789b      	ldrb	r3, [r3, #2]
 800d008:	4618      	mov	r0, r3
 800d00a:	f000 fa9d 	bl	800d548 <RTC_ByteToBcd2>
 800d00e:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 800d010:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 800d014:	68bb      	ldr	r3, [r7, #8]
 800d016:	7b1b      	ldrb	r3, [r3, #12]
 800d018:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800d01a:	4313      	orrs	r3, r2
 800d01c:	617b      	str	r3, [r7, #20]
 800d01e:	e018      	b.n	800d052 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	689b      	ldr	r3, [r3, #8]
 800d026:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d102      	bne.n	800d034 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 800d02e:	68bb      	ldr	r3, [r7, #8]
 800d030:	2200      	movs	r2, #0
 800d032:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800d034:	68bb      	ldr	r3, [r7, #8]
 800d036:	781b      	ldrb	r3, [r3, #0]
 800d038:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 800d03a:	68bb      	ldr	r3, [r7, #8]
 800d03c:	785b      	ldrb	r3, [r3, #1]
 800d03e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800d040:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800d042:	68ba      	ldr	r2, [r7, #8]
 800d044:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 800d046:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 800d048:	68bb      	ldr	r3, [r7, #8]
 800d04a:	7b1b      	ldrb	r3, [r3, #12]
 800d04c:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800d04e:	4313      	orrs	r3, r2
 800d050:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	22ca      	movs	r2, #202	; 0xca
 800d058:	625a      	str	r2, [r3, #36]	; 0x24
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	2253      	movs	r2, #83	; 0x53
 800d060:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800d062:	68f8      	ldr	r0, [r7, #12]
 800d064:	f000 fa44 	bl	800d4f0 <RTC_EnterInitMode>
 800d068:	4603      	mov	r3, r0
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d00b      	beq.n	800d086 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	22ff      	movs	r2, #255	; 0xff
 800d074:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	2204      	movs	r2, #4
 800d07a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	2200      	movs	r2, #0
 800d080:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800d082:	2301      	movs	r3, #1
 800d084:	e045      	b.n	800d112 <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	681a      	ldr	r2, [r3, #0]
 800d08a:	6979      	ldr	r1, [r7, #20]
 800d08c:	4b23      	ldr	r3, [pc, #140]	; (800d11c <HAL_RTC_SetTime+0x178>)
 800d08e:	400b      	ands	r3, r1
 800d090:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	689a      	ldr	r2, [r3, #8]
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800d0a0:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	6899      	ldr	r1, [r3, #8]
 800d0a8:	68bb      	ldr	r3, [r7, #8]
 800d0aa:	691a      	ldr	r2, [r3, #16]
 800d0ac:	68bb      	ldr	r3, [r7, #8]
 800d0ae:	695b      	ldr	r3, [r3, #20]
 800d0b0:	431a      	orrs	r2, r3
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	430a      	orrs	r2, r1
 800d0b8:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	68da      	ldr	r2, [r3, #12]
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d0c8:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	689b      	ldr	r3, [r3, #8]
 800d0d0:	f003 0320 	and.w	r3, r3, #32
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d111      	bne.n	800d0fc <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800d0d8:	68f8      	ldr	r0, [r7, #12]
 800d0da:	f000 f9e1 	bl	800d4a0 <HAL_RTC_WaitForSynchro>
 800d0de:	4603      	mov	r3, r0
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d00b      	beq.n	800d0fc <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	22ff      	movs	r2, #255	; 0xff
 800d0ea:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	2204      	movs	r2, #4
 800d0f0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	2200      	movs	r2, #0
 800d0f6:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800d0f8:	2301      	movs	r3, #1
 800d0fa:	e00a      	b.n	800d112 <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	22ff      	movs	r2, #255	; 0xff
 800d102:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	2201      	movs	r2, #1
 800d108:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	2200      	movs	r2, #0
 800d10e:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800d110:	2300      	movs	r3, #0
  }
}
 800d112:	4618      	mov	r0, r3
 800d114:	371c      	adds	r7, #28
 800d116:	46bd      	mov	sp, r7
 800d118:	bd90      	pop	{r4, r7, pc}
 800d11a:	bf00      	nop
 800d11c:	007f7f7f 	.word	0x007f7f7f

0800d120 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800d120:	b590      	push	{r4, r7, lr}
 800d122:	b087      	sub	sp, #28
 800d124:	af00      	add	r7, sp, #0
 800d126:	60f8      	str	r0, [r7, #12]
 800d128:	60b9      	str	r1, [r7, #8]
 800d12a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 800d12c:	2300      	movs	r3, #0
 800d12e:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	7f1b      	ldrb	r3, [r3, #28]
 800d134:	2b01      	cmp	r3, #1
 800d136:	d101      	bne.n	800d13c <HAL_RTC_SetDate+0x1c>
 800d138:	2302      	movs	r3, #2
 800d13a:	e092      	b.n	800d262 <HAL_RTC_SetDate+0x142>
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	2201      	movs	r2, #1
 800d140:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	2202      	movs	r2, #2
 800d146:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d10e      	bne.n	800d16c <HAL_RTC_SetDate+0x4c>
 800d14e:	68bb      	ldr	r3, [r7, #8]
 800d150:	785b      	ldrb	r3, [r3, #1]
 800d152:	f003 0310 	and.w	r3, r3, #16
 800d156:	2b00      	cmp	r3, #0
 800d158:	d008      	beq.n	800d16c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800d15a:	68bb      	ldr	r3, [r7, #8]
 800d15c:	785b      	ldrb	r3, [r3, #1]
 800d15e:	f023 0310 	bic.w	r3, r3, #16
 800d162:	b2db      	uxtb	r3, r3
 800d164:	330a      	adds	r3, #10
 800d166:	b2da      	uxtb	r2, r3
 800d168:	68bb      	ldr	r3, [r7, #8]
 800d16a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d11c      	bne.n	800d1ac <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800d172:	68bb      	ldr	r3, [r7, #8]
 800d174:	78db      	ldrb	r3, [r3, #3]
 800d176:	4618      	mov	r0, r3
 800d178:	f000 f9e6 	bl	800d548 <RTC_ByteToBcd2>
 800d17c:	4603      	mov	r3, r0
 800d17e:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 800d180:	68bb      	ldr	r3, [r7, #8]
 800d182:	785b      	ldrb	r3, [r3, #1]
 800d184:	4618      	mov	r0, r3
 800d186:	f000 f9df 	bl	800d548 <RTC_ByteToBcd2>
 800d18a:	4603      	mov	r3, r0
 800d18c:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800d18e:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800d190:	68bb      	ldr	r3, [r7, #8]
 800d192:	789b      	ldrb	r3, [r3, #2]
 800d194:	4618      	mov	r0, r3
 800d196:	f000 f9d7 	bl	800d548 <RTC_ByteToBcd2>
 800d19a:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 800d19c:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 800d1a0:	68bb      	ldr	r3, [r7, #8]
 800d1a2:	781b      	ldrb	r3, [r3, #0]
 800d1a4:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800d1a6:	4313      	orrs	r3, r2
 800d1a8:	617b      	str	r3, [r7, #20]
 800d1aa:	e00e      	b.n	800d1ca <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800d1ac:	68bb      	ldr	r3, [r7, #8]
 800d1ae:	78db      	ldrb	r3, [r3, #3]
 800d1b0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 800d1b2:	68bb      	ldr	r3, [r7, #8]
 800d1b4:	785b      	ldrb	r3, [r3, #1]
 800d1b6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800d1b8:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800d1ba:	68ba      	ldr	r2, [r7, #8]
 800d1bc:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 800d1be:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 800d1c0:	68bb      	ldr	r3, [r7, #8]
 800d1c2:	781b      	ldrb	r3, [r3, #0]
 800d1c4:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800d1c6:	4313      	orrs	r3, r2
 800d1c8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	22ca      	movs	r2, #202	; 0xca
 800d1d0:	625a      	str	r2, [r3, #36]	; 0x24
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	2253      	movs	r2, #83	; 0x53
 800d1d8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800d1da:	68f8      	ldr	r0, [r7, #12]
 800d1dc:	f000 f988 	bl	800d4f0 <RTC_EnterInitMode>
 800d1e0:	4603      	mov	r3, r0
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d00b      	beq.n	800d1fe <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	22ff      	movs	r2, #255	; 0xff
 800d1ec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	2204      	movs	r2, #4
 800d1f2:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	2200      	movs	r2, #0
 800d1f8:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800d1fa:	2301      	movs	r3, #1
 800d1fc:	e031      	b.n	800d262 <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	681a      	ldr	r2, [r3, #0]
 800d202:	6979      	ldr	r1, [r7, #20]
 800d204:	4b19      	ldr	r3, [pc, #100]	; (800d26c <HAL_RTC_SetDate+0x14c>)
 800d206:	400b      	ands	r3, r1
 800d208:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	68da      	ldr	r2, [r3, #12]
 800d210:	68fb      	ldr	r3, [r7, #12]
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d218:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	689b      	ldr	r3, [r3, #8]
 800d220:	f003 0320 	and.w	r3, r3, #32
 800d224:	2b00      	cmp	r3, #0
 800d226:	d111      	bne.n	800d24c <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800d228:	68f8      	ldr	r0, [r7, #12]
 800d22a:	f000 f939 	bl	800d4a0 <HAL_RTC_WaitForSynchro>
 800d22e:	4603      	mov	r3, r0
 800d230:	2b00      	cmp	r3, #0
 800d232:	d00b      	beq.n	800d24c <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	22ff      	movs	r2, #255	; 0xff
 800d23a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	2204      	movs	r2, #4
 800d240:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	2200      	movs	r2, #0
 800d246:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800d248:	2301      	movs	r3, #1
 800d24a:	e00a      	b.n	800d262 <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	22ff      	movs	r2, #255	; 0xff
 800d252:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	2201      	movs	r2, #1
 800d258:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800d25a:	68fb      	ldr	r3, [r7, #12]
 800d25c:	2200      	movs	r2, #0
 800d25e:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800d260:	2300      	movs	r3, #0
  }
}
 800d262:	4618      	mov	r0, r3
 800d264:	371c      	adds	r7, #28
 800d266:	46bd      	mov	sp, r7
 800d268:	bd90      	pop	{r4, r7, pc}
 800d26a:	bf00      	nop
 800d26c:	00ffff3f 	.word	0x00ffff3f

0800d270 <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800d270:	b590      	push	{r4, r7, lr}
 800d272:	b089      	sub	sp, #36	; 0x24
 800d274:	af00      	add	r7, sp, #0
 800d276:	60f8      	str	r0, [r7, #12]
 800d278:	60b9      	str	r1, [r7, #8]
 800d27a:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 800d27c:	2300      	movs	r3, #0
 800d27e:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 800d280:	2300      	movs	r3, #0
 800d282:	61fb      	str	r3, [r7, #28]
 800d284:	2300      	movs	r3, #0
 800d286:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	7f1b      	ldrb	r3, [r3, #28]
 800d28c:	2b01      	cmp	r3, #1
 800d28e:	d101      	bne.n	800d294 <HAL_RTC_SetAlarm+0x24>
 800d290:	2302      	movs	r3, #2
 800d292:	e101      	b.n	800d498 <HAL_RTC_SetAlarm+0x228>
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	2201      	movs	r2, #1
 800d298:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	2202      	movs	r2, #2
 800d29e:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d137      	bne.n	800d316 <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	689b      	ldr	r3, [r3, #8]
 800d2ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d102      	bne.n	800d2ba <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 800d2b4:	68bb      	ldr	r3, [r7, #8]
 800d2b6:	2200      	movs	r2, #0
 800d2b8:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800d2ba:	68bb      	ldr	r3, [r7, #8]
 800d2bc:	781b      	ldrb	r3, [r3, #0]
 800d2be:	4618      	mov	r0, r3
 800d2c0:	f000 f942 	bl	800d548 <RTC_ByteToBcd2>
 800d2c4:	4603      	mov	r3, r0
 800d2c6:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 800d2c8:	68bb      	ldr	r3, [r7, #8]
 800d2ca:	785b      	ldrb	r3, [r3, #1]
 800d2cc:	4618      	mov	r0, r3
 800d2ce:	f000 f93b 	bl	800d548 <RTC_ByteToBcd2>
 800d2d2:	4603      	mov	r3, r0
 800d2d4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800d2d6:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800d2d8:	68bb      	ldr	r3, [r7, #8]
 800d2da:	789b      	ldrb	r3, [r3, #2]
 800d2dc:	4618      	mov	r0, r3
 800d2de:	f000 f933 	bl	800d548 <RTC_ByteToBcd2>
 800d2e2:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 800d2e4:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800d2e8:	68bb      	ldr	r3, [r7, #8]
 800d2ea:	7b1b      	ldrb	r3, [r3, #12]
 800d2ec:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800d2ee:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 800d2f2:	68bb      	ldr	r3, [r7, #8]
 800d2f4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d2f8:	4618      	mov	r0, r3
 800d2fa:	f000 f925 	bl	800d548 <RTC_ByteToBcd2>
 800d2fe:	4603      	mov	r3, r0
 800d300:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800d302:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800d306:	68bb      	ldr	r3, [r7, #8]
 800d308:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 800d30a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800d30c:	68bb      	ldr	r3, [r7, #8]
 800d30e:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800d310:	4313      	orrs	r3, r2
 800d312:	61fb      	str	r3, [r7, #28]
 800d314:	e023      	b.n	800d35e <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	689b      	ldr	r3, [r3, #8]
 800d31c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d320:	2b00      	cmp	r3, #0
 800d322:	d102      	bne.n	800d32a <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 800d324:	68bb      	ldr	r3, [r7, #8]
 800d326:	2200      	movs	r2, #0
 800d328:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800d32a:	68bb      	ldr	r3, [r7, #8]
 800d32c:	781b      	ldrb	r3, [r3, #0]
 800d32e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 800d330:	68bb      	ldr	r3, [r7, #8]
 800d332:	785b      	ldrb	r3, [r3, #1]
 800d334:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800d336:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800d338:	68ba      	ldr	r2, [r7, #8]
 800d33a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 800d33c:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800d33e:	68bb      	ldr	r3, [r7, #8]
 800d340:	7b1b      	ldrb	r3, [r3, #12]
 800d342:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800d344:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 800d346:	68bb      	ldr	r3, [r7, #8]
 800d348:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d34c:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800d34e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800d350:	68bb      	ldr	r3, [r7, #8]
 800d352:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 800d354:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800d356:	68bb      	ldr	r3, [r7, #8]
 800d358:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800d35a:	4313      	orrs	r3, r2
 800d35c:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800d35e:	68bb      	ldr	r3, [r7, #8]
 800d360:	685a      	ldr	r2, [r3, #4]
 800d362:	68bb      	ldr	r3, [r7, #8]
 800d364:	69db      	ldr	r3, [r3, #28]
 800d366:	4313      	orrs	r3, r2
 800d368:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	22ca      	movs	r2, #202	; 0xca
 800d370:	625a      	str	r2, [r3, #36]	; 0x24
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	2253      	movs	r2, #83	; 0x53
 800d378:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 800d37a:	68bb      	ldr	r3, [r7, #8]
 800d37c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d37e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d382:	d13f      	bne.n	800d404 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	689a      	ldr	r2, [r3, #8]
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d392:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	689a      	ldr	r2, [r3, #8]
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800d3a2:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800d3a4:	f7f8 fcaa 	bl	8005cfc <HAL_GetTick>
 800d3a8:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800d3aa:	e013      	b.n	800d3d4 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800d3ac:	f7f8 fca6 	bl	8005cfc <HAL_GetTick>
 800d3b0:	4602      	mov	r2, r0
 800d3b2:	69bb      	ldr	r3, [r7, #24]
 800d3b4:	1ad3      	subs	r3, r2, r3
 800d3b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d3ba:	d90b      	bls.n	800d3d4 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	22ff      	movs	r2, #255	; 0xff
 800d3c2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	2203      	movs	r2, #3
 800d3c8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	2200      	movs	r2, #0
 800d3ce:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800d3d0:	2303      	movs	r3, #3
 800d3d2:	e061      	b.n	800d498 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	68db      	ldr	r3, [r3, #12]
 800d3da:	f003 0301 	and.w	r3, r3, #1
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d0e4      	beq.n	800d3ac <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	69fa      	ldr	r2, [r7, #28]
 800d3e8:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	697a      	ldr	r2, [r7, #20]
 800d3f0:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	689a      	ldr	r2, [r3, #8]
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d400:	609a      	str	r2, [r3, #8]
 800d402:	e03e      	b.n	800d482 <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	689a      	ldr	r2, [r3, #8]
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800d412:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	689a      	ldr	r2, [r3, #8]
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d422:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800d424:	f7f8 fc6a 	bl	8005cfc <HAL_GetTick>
 800d428:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800d42a:	e013      	b.n	800d454 <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800d42c:	f7f8 fc66 	bl	8005cfc <HAL_GetTick>
 800d430:	4602      	mov	r2, r0
 800d432:	69bb      	ldr	r3, [r7, #24]
 800d434:	1ad3      	subs	r3, r2, r3
 800d436:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d43a:	d90b      	bls.n	800d454 <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	22ff      	movs	r2, #255	; 0xff
 800d442:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	2203      	movs	r2, #3
 800d448:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	2200      	movs	r2, #0
 800d44e:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800d450:	2303      	movs	r3, #3
 800d452:	e021      	b.n	800d498 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	68db      	ldr	r3, [r3, #12]
 800d45a:	f003 0302 	and.w	r3, r3, #2
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d0e4      	beq.n	800d42c <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	69fa      	ldr	r2, [r7, #28]
 800d468:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	697a      	ldr	r2, [r7, #20]
 800d470:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	689a      	ldr	r2, [r3, #8]
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d480:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	22ff      	movs	r2, #255	; 0xff
 800d488:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	2201      	movs	r2, #1
 800d48e:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	2200      	movs	r2, #0
 800d494:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800d496:	2300      	movs	r3, #0
}
 800d498:	4618      	mov	r0, r3
 800d49a:	3724      	adds	r7, #36	; 0x24
 800d49c:	46bd      	mov	sp, r7
 800d49e:	bd90      	pop	{r4, r7, pc}

0800d4a0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800d4a0:	b580      	push	{r7, lr}
 800d4a2:	b084      	sub	sp, #16
 800d4a4:	af00      	add	r7, sp, #0
 800d4a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800d4a8:	2300      	movs	r3, #0
 800d4aa:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	68da      	ldr	r2, [r3, #12]
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800d4ba:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800d4bc:	f7f8 fc1e 	bl	8005cfc <HAL_GetTick>
 800d4c0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800d4c2:	e009      	b.n	800d4d8 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800d4c4:	f7f8 fc1a 	bl	8005cfc <HAL_GetTick>
 800d4c8:	4602      	mov	r2, r0
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	1ad3      	subs	r3, r2, r3
 800d4ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d4d2:	d901      	bls.n	800d4d8 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800d4d4:	2303      	movs	r3, #3
 800d4d6:	e007      	b.n	800d4e8 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	68db      	ldr	r3, [r3, #12]
 800d4de:	f003 0320 	and.w	r3, r3, #32
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d0ee      	beq.n	800d4c4 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800d4e6:	2300      	movs	r3, #0
}
 800d4e8:	4618      	mov	r0, r3
 800d4ea:	3710      	adds	r7, #16
 800d4ec:	46bd      	mov	sp, r7
 800d4ee:	bd80      	pop	{r7, pc}

0800d4f0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800d4f0:	b580      	push	{r7, lr}
 800d4f2:	b084      	sub	sp, #16
 800d4f4:	af00      	add	r7, sp, #0
 800d4f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800d4f8:	2300      	movs	r3, #0
 800d4fa:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	68db      	ldr	r3, [r3, #12]
 800d502:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d506:	2b00      	cmp	r3, #0
 800d508:	d119      	bne.n	800d53e <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	f04f 32ff 	mov.w	r2, #4294967295
 800d512:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800d514:	f7f8 fbf2 	bl	8005cfc <HAL_GetTick>
 800d518:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800d51a:	e009      	b.n	800d530 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800d51c:	f7f8 fbee 	bl	8005cfc <HAL_GetTick>
 800d520:	4602      	mov	r2, r0
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	1ad3      	subs	r3, r2, r3
 800d526:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d52a:	d901      	bls.n	800d530 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800d52c:	2303      	movs	r3, #3
 800d52e:	e007      	b.n	800d540 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	68db      	ldr	r3, [r3, #12]
 800d536:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d0ee      	beq.n	800d51c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800d53e:	2300      	movs	r3, #0
}
 800d540:	4618      	mov	r0, r3
 800d542:	3710      	adds	r7, #16
 800d544:	46bd      	mov	sp, r7
 800d546:	bd80      	pop	{r7, pc}

0800d548 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800d548:	b480      	push	{r7}
 800d54a:	b085      	sub	sp, #20
 800d54c:	af00      	add	r7, sp, #0
 800d54e:	4603      	mov	r3, r0
 800d550:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 800d552:	2300      	movs	r3, #0
 800d554:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 800d556:	e005      	b.n	800d564 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	3301      	adds	r3, #1
 800d55c:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 800d55e:	79fb      	ldrb	r3, [r7, #7]
 800d560:	3b0a      	subs	r3, #10
 800d562:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 800d564:	79fb      	ldrb	r3, [r7, #7]
 800d566:	2b09      	cmp	r3, #9
 800d568:	d8f6      	bhi.n	800d558 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	b2db      	uxtb	r3, r3
 800d56e:	011b      	lsls	r3, r3, #4
 800d570:	b2da      	uxtb	r2, r3
 800d572:	79fb      	ldrb	r3, [r7, #7]
 800d574:	4313      	orrs	r3, r2
 800d576:	b2db      	uxtb	r3, r3
}
 800d578:	4618      	mov	r0, r3
 800d57a:	3714      	adds	r7, #20
 800d57c:	46bd      	mov	sp, r7
 800d57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d582:	4770      	bx	lr

0800d584 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 800d584:	b480      	push	{r7}
 800d586:	b087      	sub	sp, #28
 800d588:	af00      	add	r7, sp, #0
 800d58a:	60f8      	str	r0, [r7, #12]
 800d58c:	60b9      	str	r1, [r7, #8]
 800d58e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800d590:	2300      	movs	r3, #0
 800d592:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	7f1b      	ldrb	r3, [r3, #28]
 800d598:	2b01      	cmp	r3, #1
 800d59a:	d101      	bne.n	800d5a0 <HAL_RTCEx_SetTimeStamp+0x1c>
 800d59c:	2302      	movs	r3, #2
 800d59e:	e03e      	b.n	800d61e <HAL_RTCEx_SetTimeStamp+0x9a>
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	2201      	movs	r2, #1
 800d5a4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d5a6:	68fb      	ldr	r3, [r7, #12]
 800d5a8:	2202      	movs	r2, #2
 800d5aa:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	681b      	ldr	r3, [r3, #0]
 800d5b0:	689a      	ldr	r2, [r3, #8]
 800d5b2:	4b1e      	ldr	r3, [pc, #120]	; (800d62c <HAL_RTCEx_SetTimeStamp+0xa8>)
 800d5b4:	4013      	ands	r3, r2
 800d5b6:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 800d5b8:	697a      	ldr	r2, [r7, #20]
 800d5ba:	68bb      	ldr	r3, [r7, #8]
 800d5bc:	4313      	orrs	r3, r2
 800d5be:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	22ca      	movs	r2, #202	; 0xca
 800d5c6:	625a      	str	r2, [r3, #36]	; 0x24
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	2253      	movs	r2, #83	; 0x53
 800d5ce:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	f022 0206 	bic.w	r2, r2, #6
 800d5de:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	687a      	ldr	r2, [r7, #4]
 800d5ec:	430a      	orrs	r2, r1
 800d5ee:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	697a      	ldr	r2, [r7, #20]
 800d5f6:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	689a      	ldr	r2, [r3, #8]
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	681b      	ldr	r3, [r3, #0]
 800d602:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d606:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	22ff      	movs	r2, #255	; 0xff
 800d60e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	2201      	movs	r2, #1
 800d614:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	2200      	movs	r2, #0
 800d61a:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800d61c:	2300      	movs	r3, #0
}
 800d61e:	4618      	mov	r0, r3
 800d620:	371c      	adds	r7, #28
 800d622:	46bd      	mov	sp, r7
 800d624:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d628:	4770      	bx	lr
 800d62a:	bf00      	nop
 800d62c:	fffff7f7 	.word	0xfffff7f7

0800d630 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800d630:	b580      	push	{r7, lr}
 800d632:	b088      	sub	sp, #32
 800d634:	af00      	add	r7, sp, #0
 800d636:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 800d638:	2300      	movs	r3, #0
 800d63a:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 800d63c:	2300      	movs	r3, #0
 800d63e:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 800d640:	2300      	movs	r3, #0
 800d642:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	2b00      	cmp	r3, #0
 800d648:	d101      	bne.n	800d64e <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 800d64a:	2301      	movs	r3, #1
 800d64c:	e156      	b.n	800d8fc <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800d654:	b2db      	uxtb	r3, r3
 800d656:	2b00      	cmp	r3, #0
 800d658:	d106      	bne.n	800d668 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	2200      	movs	r2, #0
 800d65e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800d662:	6878      	ldr	r0, [r7, #4]
 800d664:	f7f6 fa5e 	bl	8003b24 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	2202      	movs	r2, #2
 800d66c:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 800d670:	6878      	ldr	r0, [r7, #4]
 800d672:	f000 facf 	bl	800dc14 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	68db      	ldr	r3, [r3, #12]
 800d67a:	2b02      	cmp	r3, #2
 800d67c:	d00c      	beq.n	800d698 <HAL_SAI_Init+0x68>
 800d67e:	2b02      	cmp	r3, #2
 800d680:	d80d      	bhi.n	800d69e <HAL_SAI_Init+0x6e>
 800d682:	2b00      	cmp	r3, #0
 800d684:	d002      	beq.n	800d68c <HAL_SAI_Init+0x5c>
 800d686:	2b01      	cmp	r3, #1
 800d688:	d003      	beq.n	800d692 <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 800d68a:	e008      	b.n	800d69e <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 800d68c:	2300      	movs	r3, #0
 800d68e:	61fb      	str	r3, [r7, #28]
      break;
 800d690:	e006      	b.n	800d6a0 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800d692:	2310      	movs	r3, #16
 800d694:	61fb      	str	r3, [r7, #28]
      break;
 800d696:	e003      	b.n	800d6a0 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800d698:	2320      	movs	r3, #32
 800d69a:	61fb      	str	r3, [r7, #28]
      break;
 800d69c:	e000      	b.n	800d6a0 <HAL_SAI_Init+0x70>
      break;
 800d69e:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	689b      	ldr	r3, [r3, #8]
 800d6a4:	2b03      	cmp	r3, #3
 800d6a6:	d81e      	bhi.n	800d6e6 <HAL_SAI_Init+0xb6>
 800d6a8:	a201      	add	r2, pc, #4	; (adr r2, 800d6b0 <HAL_SAI_Init+0x80>)
 800d6aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6ae:	bf00      	nop
 800d6b0:	0800d6c1 	.word	0x0800d6c1
 800d6b4:	0800d6c7 	.word	0x0800d6c7
 800d6b8:	0800d6cf 	.word	0x0800d6cf
 800d6bc:	0800d6d7 	.word	0x0800d6d7
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 800d6c0:	2300      	movs	r3, #0
 800d6c2:	617b      	str	r3, [r7, #20]
    }
    break;
 800d6c4:	e010      	b.n	800d6e8 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800d6c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d6ca:	617b      	str	r3, [r7, #20]
    }
    break;
 800d6cc:	e00c      	b.n	800d6e8 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800d6ce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d6d2:	617b      	str	r3, [r7, #20]
    }
    break;
 800d6d4:	e008      	b.n	800d6e8 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800d6d6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d6da:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800d6dc:	69fb      	ldr	r3, [r7, #28]
 800d6de:	f043 0301 	orr.w	r3, r3, #1
 800d6e2:	61fb      	str	r3, [r7, #28]
    }
    break;
 800d6e4:	e000      	b.n	800d6e8 <HAL_SAI_Init+0xb8>
    default:
      break;
 800d6e6:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	4a85      	ldr	r2, [pc, #532]	; (800d904 <HAL_SAI_Init+0x2d4>)
 800d6ee:	4293      	cmp	r3, r2
 800d6f0:	d004      	beq.n	800d6fc <HAL_SAI_Init+0xcc>
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	4a84      	ldr	r2, [pc, #528]	; (800d908 <HAL_SAI_Init+0x2d8>)
 800d6f8:	4293      	cmp	r3, r2
 800d6fa:	d103      	bne.n	800d704 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 800d6fc:	4a83      	ldr	r2, [pc, #524]	; (800d90c <HAL_SAI_Init+0x2dc>)
 800d6fe:	69fb      	ldr	r3, [r7, #28]
 800d700:	6013      	str	r3, [r2, #0]
 800d702:	e002      	b.n	800d70a <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800d704:	4a82      	ldr	r2, [pc, #520]	; (800d910 <HAL_SAI_Init+0x2e0>)
 800d706:	69fb      	ldr	r3, [r7, #28]
 800d708:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	69db      	ldr	r3, [r3, #28]
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d04c      	beq.n	800d7ac <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 800d712:	2300      	movs	r3, #0
 800d714:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	4a7a      	ldr	r2, [pc, #488]	; (800d904 <HAL_SAI_Init+0x2d4>)
 800d71c:	4293      	cmp	r3, r2
 800d71e:	d004      	beq.n	800d72a <HAL_SAI_Init+0xfa>
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	4a78      	ldr	r2, [pc, #480]	; (800d908 <HAL_SAI_Init+0x2d8>)
 800d726:	4293      	cmp	r3, r2
 800d728:	d104      	bne.n	800d734 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800d72a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800d72e:	f7ff fa63 	bl	800cbf8 <HAL_RCCEx_GetPeriphCLKFreq>
 800d732:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	4a76      	ldr	r2, [pc, #472]	; (800d914 <HAL_SAI_Init+0x2e4>)
 800d73a:	4293      	cmp	r3, r2
 800d73c:	d004      	beq.n	800d748 <HAL_SAI_Init+0x118>
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	4a75      	ldr	r2, [pc, #468]	; (800d918 <HAL_SAI_Init+0x2e8>)
 800d744:	4293      	cmp	r3, r2
 800d746:	d104      	bne.n	800d752 <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800d748:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800d74c:	f7ff fa54 	bl	800cbf8 <HAL_RCCEx_GetPeriphCLKFreq>
 800d750:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 800d752:	693a      	ldr	r2, [r7, #16]
 800d754:	4613      	mov	r3, r2
 800d756:	009b      	lsls	r3, r3, #2
 800d758:	4413      	add	r3, r2
 800d75a:	005b      	lsls	r3, r3, #1
 800d75c:	461a      	mov	r2, r3
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	69db      	ldr	r3, [r3, #28]
 800d762:	025b      	lsls	r3, r3, #9
 800d764:	fbb2 f3f3 	udiv	r3, r2, r3
 800d768:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	4a6b      	ldr	r2, [pc, #428]	; (800d91c <HAL_SAI_Init+0x2ec>)
 800d76e:	fba2 2303 	umull	r2, r3, r2, r3
 800d772:	08da      	lsrs	r2, r3, #3
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 800d778:	68f9      	ldr	r1, [r7, #12]
 800d77a:	4b68      	ldr	r3, [pc, #416]	; (800d91c <HAL_SAI_Init+0x2ec>)
 800d77c:	fba3 2301 	umull	r2, r3, r3, r1
 800d780:	08da      	lsrs	r2, r3, #3
 800d782:	4613      	mov	r3, r2
 800d784:	009b      	lsls	r3, r3, #2
 800d786:	4413      	add	r3, r2
 800d788:	005b      	lsls	r3, r3, #1
 800d78a:	1aca      	subs	r2, r1, r3
 800d78c:	2a08      	cmp	r2, #8
 800d78e:	d904      	bls.n	800d79a <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	6a1b      	ldr	r3, [r3, #32]
 800d794:	1c5a      	adds	r2, r3, #1
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d79e:	2b04      	cmp	r3, #4
 800d7a0:	d104      	bne.n	800d7ac <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	6a1b      	ldr	r3, [r3, #32]
 800d7a6:	085a      	lsrs	r2, r3, #1
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	685b      	ldr	r3, [r3, #4]
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d003      	beq.n	800d7bc <HAL_SAI_Init+0x18c>
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	685b      	ldr	r3, [r3, #4]
 800d7b8:	2b02      	cmp	r3, #2
 800d7ba:	d109      	bne.n	800d7d0 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d7c0:	2b01      	cmp	r3, #1
 800d7c2:	d101      	bne.n	800d7c8 <HAL_SAI_Init+0x198>
 800d7c4:	2300      	movs	r3, #0
 800d7c6:	e001      	b.n	800d7cc <HAL_SAI_Init+0x19c>
 800d7c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d7cc:	61bb      	str	r3, [r7, #24]
 800d7ce:	e008      	b.n	800d7e2 <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d7d4:	2b01      	cmp	r3, #1
 800d7d6:	d102      	bne.n	800d7de <HAL_SAI_Init+0x1ae>
 800d7d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d7dc:	e000      	b.n	800d7e0 <HAL_SAI_Init+0x1b0>
 800d7de:	2300      	movs	r3, #0
 800d7e0:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	6819      	ldr	r1, [r3, #0]
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	681a      	ldr	r2, [r3, #0]
 800d7ec:	4b4c      	ldr	r3, [pc, #304]	; (800d920 <HAL_SAI_Init+0x2f0>)
 800d7ee:	400b      	ands	r3, r1
 800d7f0:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	6819      	ldr	r1, [r3, #0]
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	685a      	ldr	r2, [r3, #4]
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d800:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800d806:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d80c:	431a      	orrs	r2, r3
 800d80e:	69bb      	ldr	r3, [r7, #24]
 800d810:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 800d812:	697b      	ldr	r3, [r7, #20]
 800d814:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                               \
 800d81a:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	691b      	ldr	r3, [r3, #16]
 800d820:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800d826:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	6a1b      	ldr	r3, [r3, #32]
 800d82c:	051b      	lsls	r3, r3, #20
 800d82e:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	430a      	orrs	r2, r1
 800d836:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	681b      	ldr	r3, [r3, #0]
 800d83c:	6859      	ldr	r1, [r3, #4]
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	681a      	ldr	r2, [r3, #0]
 800d842:	4b38      	ldr	r3, [pc, #224]	; (800d924 <HAL_SAI_Init+0x2f4>)
 800d844:	400b      	ands	r3, r1
 800d846:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	6859      	ldr	r1, [r3, #4]
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	699a      	ldr	r2, [r3, #24]
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d856:	431a      	orrs	r2, r3
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d85c:	431a      	orrs	r2, r3
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	430a      	orrs	r2, r1
 800d864:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	6899      	ldr	r1, [r3, #8]
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	681a      	ldr	r2, [r3, #0]
 800d870:	4b2d      	ldr	r3, [pc, #180]	; (800d928 <HAL_SAI_Init+0x2f8>)
 800d872:	400b      	ands	r3, r1
 800d874:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	6899      	ldr	r1, [r3, #8]
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d880:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800d886:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 800d88c:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 800d892:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d898:	3b01      	subs	r3, #1
 800d89a:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800d89c:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	430a      	orrs	r2, r1
 800d8a4:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	68d9      	ldr	r1, [r3, #12]
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	681a      	ldr	r2, [r3, #0]
 800d8b0:	f24f 0320 	movw	r3, #61472	; 0xf020
 800d8b4:	400b      	ands	r3, r1
 800d8b6:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	68d9      	ldr	r1, [r3, #12]
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d8c6:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d8cc:	041b      	lsls	r3, r3, #16
 800d8ce:	431a      	orrs	r2, r3
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d8d4:	3b01      	subs	r3, #1
 800d8d6:	021b      	lsls	r3, r3, #8
 800d8d8:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	430a      	orrs	r2, r1
 800d8e0:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	2200      	movs	r2, #0
 800d8e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	2201      	movs	r2, #1
 800d8ee:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	2200      	movs	r2, #0
 800d8f6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800d8fa:	2300      	movs	r3, #0
}
 800d8fc:	4618      	mov	r0, r3
 800d8fe:	3720      	adds	r7, #32
 800d900:	46bd      	mov	sp, r7
 800d902:	bd80      	pop	{r7, pc}
 800d904:	40015804 	.word	0x40015804
 800d908:	40015824 	.word	0x40015824
 800d90c:	40015800 	.word	0x40015800
 800d910:	40015c00 	.word	0x40015c00
 800d914:	40015c04 	.word	0x40015c04
 800d918:	40015c24 	.word	0x40015c24
 800d91c:	cccccccd 	.word	0xcccccccd
 800d920:	ff05c010 	.word	0xff05c010
 800d924:	ffff1ff0 	.word	0xffff1ff0
 800d928:	fff88000 	.word	0xfff88000

0800d92c <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800d92c:	b580      	push	{r7, lr}
 800d92e:	b086      	sub	sp, #24
 800d930:	af00      	add	r7, sp, #0
 800d932:	60f8      	str	r0, [r7, #12]
 800d934:	60b9      	str	r1, [r7, #8]
 800d936:	4613      	mov	r3, r2
 800d938:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 800d93a:	f7f8 f9df 	bl	8005cfc <HAL_GetTick>
 800d93e:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0))
 800d940:	68bb      	ldr	r3, [r7, #8]
 800d942:	2b00      	cmp	r3, #0
 800d944:	d002      	beq.n	800d94c <HAL_SAI_Transmit_DMA+0x20>
 800d946:	88fb      	ldrh	r3, [r7, #6]
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d101      	bne.n	800d950 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 800d94c:	2301      	movs	r3, #1
 800d94e:	e093      	b.n	800da78 <HAL_SAI_Transmit_DMA+0x14c>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800d956:	b2db      	uxtb	r3, r3
 800d958:	2b01      	cmp	r3, #1
 800d95a:	f040 808c 	bne.w	800da76 <HAL_SAI_Transmit_DMA+0x14a>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800d95e:	68fb      	ldr	r3, [r7, #12]
 800d960:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800d964:	2b01      	cmp	r3, #1
 800d966:	d101      	bne.n	800d96c <HAL_SAI_Transmit_DMA+0x40>
 800d968:	2302      	movs	r3, #2
 800d96a:	e085      	b.n	800da78 <HAL_SAI_Transmit_DMA+0x14c>
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	2201      	movs	r2, #1
 800d970:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    hsai->pBuffPtr = pData;
 800d974:	68fb      	ldr	r3, [r7, #12]
 800d976:	68ba      	ldr	r2, [r7, #8]
 800d978:	665a      	str	r2, [r3, #100]	; 0x64
    hsai->XferSize = Size;
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	88fa      	ldrh	r2, [r7, #6]
 800d97e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    hsai->XferCount = Size;
 800d982:	68fb      	ldr	r3, [r7, #12]
 800d984:	88fa      	ldrh	r2, [r7, #6]
 800d986:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800d98a:	68fb      	ldr	r3, [r7, #12]
 800d98c:	2200      	movs	r2, #0
 800d98e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 800d992:	68fb      	ldr	r3, [r7, #12]
 800d994:	2212      	movs	r2, #18
 800d996:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d99e:	4a38      	ldr	r2, [pc, #224]	; (800da80 <HAL_SAI_Transmit_DMA+0x154>)
 800d9a0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d9a6:	4a37      	ldr	r2, [pc, #220]	; (800da84 <HAL_SAI_Transmit_DMA+0x158>)
 800d9a8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d9ae:	4a36      	ldr	r2, [pc, #216]	; (800da88 <HAL_SAI_Transmit_DMA+0x15c>)
 800d9b0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d9b6:	2200      	movs	r2, #0
 800d9b8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800d9be:	68fb      	ldr	r3, [r7, #12]
 800d9c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d9c2:	4619      	mov	r1, r3
 800d9c4:	68fb      	ldr	r3, [r7, #12]
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	331c      	adds	r3, #28
 800d9ca:	461a      	mov	r2, r3
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d9d2:	f7f9 f841 	bl	8006a58 <HAL_DMA_Start_IT>
 800d9d6:	4603      	mov	r3, r0
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d005      	beq.n	800d9e8 <HAL_SAI_Transmit_DMA+0xbc>
    {
      __HAL_UNLOCK(hsai);
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	2200      	movs	r2, #0
 800d9e0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      return  HAL_ERROR;
 800d9e4:	2301      	movs	r3, #1
 800d9e6:	e047      	b.n	800da78 <HAL_SAI_Transmit_DMA+0x14c>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800d9e8:	2100      	movs	r1, #0
 800d9ea:	68f8      	ldr	r0, [r7, #12]
 800d9ec:	f000 f8dc 	bl	800dba8 <SAI_InterruptFlag>
 800d9f0:	4601      	mov	r1, r0
 800d9f2:	68fb      	ldr	r3, [r7, #12]
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	691a      	ldr	r2, [r3, #16]
 800d9f8:	68fb      	ldr	r3, [r7, #12]
 800d9fa:	681b      	ldr	r3, [r3, #0]
 800d9fc:	430a      	orrs	r2, r1
 800d9fe:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	681a      	ldr	r2, [r3, #0]
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800da0e:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800da10:	e015      	b.n	800da3e <HAL_SAI_Transmit_DMA+0x112>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 800da12:	f7f8 f973 	bl	8005cfc <HAL_GetTick>
 800da16:	4602      	mov	r2, r0
 800da18:	697b      	ldr	r3, [r7, #20]
 800da1a:	1ad3      	subs	r3, r2, r3
 800da1c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800da20:	d90d      	bls.n	800da3e <HAL_SAI_Transmit_DMA+0x112>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800da22:	68fb      	ldr	r3, [r7, #12]
 800da24:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800da28:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 800da32:	68fb      	ldr	r3, [r7, #12]
 800da34:	2200      	movs	r2, #0
 800da36:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800da3a:	2303      	movs	r3, #3
 800da3c:	e01c      	b.n	800da78 <HAL_SAI_Transmit_DMA+0x14c>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800da3e:	68fb      	ldr	r3, [r7, #12]
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	695b      	ldr	r3, [r3, #20]
 800da44:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d0e2      	beq.n	800da12 <HAL_SAI_Transmit_DMA+0xe6>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800da4c:	68fb      	ldr	r3, [r7, #12]
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800da56:	2b00      	cmp	r3, #0
 800da58:	d107      	bne.n	800da6a <HAL_SAI_Transmit_DMA+0x13e>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800da5a:	68fb      	ldr	r3, [r7, #12]
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	681a      	ldr	r2, [r3, #0]
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800da68:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	2200      	movs	r2, #0
 800da6e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800da72:	2300      	movs	r3, #0
 800da74:	e000      	b.n	800da78 <HAL_SAI_Transmit_DMA+0x14c>
  }
  else
  {
    return HAL_BUSY;
 800da76:	2302      	movs	r3, #2
  }
}
 800da78:	4618      	mov	r0, r3
 800da7a:	3718      	adds	r7, #24
 800da7c:	46bd      	mov	sp, r7
 800da7e:	bd80      	pop	{r7, pc}
 800da80:	0800dce5 	.word	0x0800dce5
 800da84:	0800dc85 	.word	0x0800dc85
 800da88:	0800dd7d 	.word	0x0800dd7d

0800da8c <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800da8c:	b580      	push	{r7, lr}
 800da8e:	b084      	sub	sp, #16
 800da90:	af00      	add	r7, sp, #0
 800da92:	60f8      	str	r0, [r7, #12]
 800da94:	60b9      	str	r1, [r7, #8]
 800da96:	4613      	mov	r3, r2
 800da98:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0))
 800da9a:	68bb      	ldr	r3, [r7, #8]
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d002      	beq.n	800daa6 <HAL_SAI_Receive_DMA+0x1a>
 800daa0:	88fb      	ldrh	r3, [r7, #6]
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d101      	bne.n	800daaa <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 800daa6:	2301      	movs	r3, #1
 800daa8:	e074      	b.n	800db94 <HAL_SAI_Receive_DMA+0x108>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800dab0:	b2db      	uxtb	r3, r3
 800dab2:	2b01      	cmp	r3, #1
 800dab4:	d16d      	bne.n	800db92 <HAL_SAI_Receive_DMA+0x106>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800dabc:	2b01      	cmp	r3, #1
 800dabe:	d101      	bne.n	800dac4 <HAL_SAI_Receive_DMA+0x38>
 800dac0:	2302      	movs	r3, #2
 800dac2:	e067      	b.n	800db94 <HAL_SAI_Receive_DMA+0x108>
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	2201      	movs	r2, #1
 800dac8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    hsai->pBuffPtr = pData;
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	68ba      	ldr	r2, [r7, #8]
 800dad0:	665a      	str	r2, [r3, #100]	; 0x64
    hsai->XferSize = Size;
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	88fa      	ldrh	r2, [r7, #6]
 800dad6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    hsai->XferCount = Size;
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	88fa      	ldrh	r2, [r7, #6]
 800dade:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800dae2:	68fb      	ldr	r3, [r7, #12]
 800dae4:	2200      	movs	r2, #0
 800dae6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	2222      	movs	r2, #34	; 0x22
 800daee:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 800daf2:	68fb      	ldr	r3, [r7, #12]
 800daf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800daf6:	4a29      	ldr	r2, [pc, #164]	; (800db9c <HAL_SAI_Receive_DMA+0x110>)
 800daf8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 800dafa:	68fb      	ldr	r3, [r7, #12]
 800dafc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dafe:	4a28      	ldr	r2, [pc, #160]	; (800dba0 <HAL_SAI_Receive_DMA+0x114>)
 800db00:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 800db02:	68fb      	ldr	r3, [r7, #12]
 800db04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db06:	4a27      	ldr	r2, [pc, #156]	; (800dba4 <HAL_SAI_Receive_DMA+0x118>)
 800db08:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 800db0a:	68fb      	ldr	r3, [r7, #12]
 800db0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db0e:	2200      	movs	r2, #0
 800db10:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	331c      	adds	r3, #28
 800db1c:	4619      	mov	r1, r3
 800db1e:	68fb      	ldr	r3, [r7, #12]
 800db20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800db22:	461a      	mov	r2, r3
 800db24:	68fb      	ldr	r3, [r7, #12]
 800db26:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800db2a:	f7f8 ff95 	bl	8006a58 <HAL_DMA_Start_IT>
 800db2e:	4603      	mov	r3, r0
 800db30:	2b00      	cmp	r3, #0
 800db32:	d005      	beq.n	800db40 <HAL_SAI_Receive_DMA+0xb4>
    {
      __HAL_UNLOCK(hsai);
 800db34:	68fb      	ldr	r3, [r7, #12]
 800db36:	2200      	movs	r2, #0
 800db38:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      return  HAL_ERROR;
 800db3c:	2301      	movs	r3, #1
 800db3e:	e029      	b.n	800db94 <HAL_SAI_Receive_DMA+0x108>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800db40:	2100      	movs	r1, #0
 800db42:	68f8      	ldr	r0, [r7, #12]
 800db44:	f000 f830 	bl	800dba8 <SAI_InterruptFlag>
 800db48:	4601      	mov	r1, r0
 800db4a:	68fb      	ldr	r3, [r7, #12]
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	691a      	ldr	r2, [r3, #16]
 800db50:	68fb      	ldr	r3, [r7, #12]
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	430a      	orrs	r2, r1
 800db56:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800db58:	68fb      	ldr	r3, [r7, #12]
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	681a      	ldr	r2, [r3, #0]
 800db5e:	68fb      	ldr	r3, [r7, #12]
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800db66:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 800db68:	68fb      	ldr	r3, [r7, #12]
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800db72:	2b00      	cmp	r3, #0
 800db74:	d107      	bne.n	800db86 <HAL_SAI_Receive_DMA+0xfa>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800db76:	68fb      	ldr	r3, [r7, #12]
 800db78:	681b      	ldr	r3, [r3, #0]
 800db7a:	681a      	ldr	r2, [r3, #0]
 800db7c:	68fb      	ldr	r3, [r7, #12]
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800db84:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800db86:	68fb      	ldr	r3, [r7, #12]
 800db88:	2200      	movs	r2, #0
 800db8a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800db8e:	2300      	movs	r3, #0
 800db90:	e000      	b.n	800db94 <HAL_SAI_Receive_DMA+0x108>
  }
  else
  {
    return HAL_BUSY;
 800db92:	2302      	movs	r3, #2
  }
}
 800db94:	4618      	mov	r0, r3
 800db96:	3710      	adds	r7, #16
 800db98:	46bd      	mov	sp, r7
 800db9a:	bd80      	pop	{r7, pc}
 800db9c:	0800dd61 	.word	0x0800dd61
 800dba0:	0800dd01 	.word	0x0800dd01
 800dba4:	0800dd7d 	.word	0x0800dd7d

0800dba8 <SAI_InterruptFlag>:
  *                the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
 */
static uint32_t SAI_InterruptFlag(SAI_HandleTypeDef *hsai, uint32_t mode)
{
 800dba8:	b480      	push	{r7}
 800dbaa:	b085      	sub	sp, #20
 800dbac:	af00      	add	r7, sp, #0
 800dbae:	6078      	str	r0, [r7, #4]
 800dbb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800dbb2:	2301      	movs	r3, #1
 800dbb4:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 800dbb6:	683b      	ldr	r3, [r7, #0]
 800dbb8:	2b01      	cmp	r3, #1
 800dbba:	d103      	bne.n	800dbc4 <SAI_InterruptFlag+0x1c>
  {
    tmpIT |= SAI_IT_FREQ;
 800dbbc:	68fb      	ldr	r3, [r7, #12]
 800dbbe:	f043 0308 	orr.w	r3, r3, #8
 800dbc2:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dbc8:	2b08      	cmp	r3, #8
 800dbca:	d10b      	bne.n	800dbe4 <SAI_InterruptFlag+0x3c>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800dbd0:	2b03      	cmp	r3, #3
 800dbd2:	d003      	beq.n	800dbdc <SAI_InterruptFlag+0x34>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	685b      	ldr	r3, [r3, #4]
 800dbd8:	2b01      	cmp	r3, #1
 800dbda:	d103      	bne.n	800dbe4 <SAI_InterruptFlag+0x3c>
  {
    tmpIT |= SAI_IT_CNRDY;
 800dbdc:	68fb      	ldr	r3, [r7, #12]
 800dbde:	f043 0310 	orr.w	r3, r3, #16
 800dbe2:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	685b      	ldr	r3, [r3, #4]
 800dbe8:	2b03      	cmp	r3, #3
 800dbea:	d003      	beq.n	800dbf4 <SAI_InterruptFlag+0x4c>
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	685b      	ldr	r3, [r3, #4]
 800dbf0:	2b02      	cmp	r3, #2
 800dbf2:	d104      	bne.n	800dbfe <SAI_InterruptFlag+0x56>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800dbf4:	68fb      	ldr	r3, [r7, #12]
 800dbf6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800dbfa:	60fb      	str	r3, [r7, #12]
 800dbfc:	e003      	b.n	800dc06 <SAI_InterruptFlag+0x5e>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	f043 0304 	orr.w	r3, r3, #4
 800dc04:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 800dc06:	68fb      	ldr	r3, [r7, #12]
}
 800dc08:	4618      	mov	r0, r3
 800dc0a:	3714      	adds	r7, #20
 800dc0c:	46bd      	mov	sp, r7
 800dc0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc12:	4770      	bx	lr

0800dc14 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800dc14:	b480      	push	{r7}
 800dc16:	b085      	sub	sp, #20
 800dc18:	af00      	add	r7, sp, #0
 800dc1a:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 800dc1c:	4b17      	ldr	r3, [pc, #92]	; (800dc7c <SAI_Disable+0x68>)
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	4a17      	ldr	r2, [pc, #92]	; (800dc80 <SAI_Disable+0x6c>)
 800dc22:	fba2 2303 	umull	r2, r3, r2, r3
 800dc26:	0b1b      	lsrs	r3, r3, #12
 800dc28:	009b      	lsls	r3, r3, #2
 800dc2a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800dc2c:	2300      	movs	r3, #0
 800dc2e:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	681a      	ldr	r2, [r3, #0]
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	681b      	ldr	r3, [r3, #0]
 800dc3a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800dc3e:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 800dc40:	68fb      	ldr	r3, [r7, #12]
 800dc42:	1e5a      	subs	r2, r3, #1
 800dc44:	60fa      	str	r2, [r7, #12]
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d10a      	bne.n	800dc60 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dc50:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 800dc5a:	2303      	movs	r3, #3
 800dc5c:	72fb      	strb	r3, [r7, #11]
      break;
 800dc5e:	e006      	b.n	800dc6e <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d1e8      	bne.n	800dc40 <SAI_Disable+0x2c>

  return status;
 800dc6e:	7afb      	ldrb	r3, [r7, #11]
}
 800dc70:	4618      	mov	r0, r3
 800dc72:	3714      	adds	r7, #20
 800dc74:	46bd      	mov	sp, r7
 800dc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc7a:	4770      	bx	lr
 800dc7c:	20000010 	.word	0x20000010
 800dc80:	95cbec1b 	.word	0x95cbec1b

0800dc84 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 800dc84:	b580      	push	{r7, lr}
 800dc86:	b084      	sub	sp, #16
 800dc88:	af00      	add	r7, sp, #0
 800dc8a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc90:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	69db      	ldr	r3, [r3, #28]
 800dc96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dc9a:	d01c      	beq.n	800dcd6 <SAI_DMATxCplt+0x52>
  {
    hsai->XferCount = 0;
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	2200      	movs	r2, #0
 800dca0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	681a      	ldr	r2, [r3, #0]
 800dcaa:	68fb      	ldr	r3, [r7, #12]
 800dcac:	681b      	ldr	r3, [r3, #0]
 800dcae:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800dcb2:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800dcb4:	2100      	movs	r1, #0
 800dcb6:	68f8      	ldr	r0, [r7, #12]
 800dcb8:	f7ff ff76 	bl	800dba8 <SAI_InterruptFlag>
 800dcbc:	4603      	mov	r3, r0
 800dcbe:	43d9      	mvns	r1, r3
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	681b      	ldr	r3, [r3, #0]
 800dcc4:	691a      	ldr	r2, [r3, #16]
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	400a      	ands	r2, r1
 800dccc:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800dcce:	68fb      	ldr	r3, [r7, #12]
 800dcd0:	2201      	movs	r2, #1
 800dcd2:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 800dcd6:	68f8      	ldr	r0, [r7, #12]
 800dcd8:	f7f7 f840 	bl	8004d5c <HAL_SAI_TxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800dcdc:	bf00      	nop
 800dcde:	3710      	adds	r7, #16
 800dce0:	46bd      	mov	sp, r7
 800dce2:	bd80      	pop	{r7, pc}

0800dce4 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800dce4:	b580      	push	{r7, lr}
 800dce6:	b084      	sub	sp, #16
 800dce8:	af00      	add	r7, sp, #0
 800dcea:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcf0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 800dcf2:	68f8      	ldr	r0, [r7, #12]
 800dcf4:	f7f7 f83c 	bl	8004d70 <HAL_SAI_TxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800dcf8:	bf00      	nop
 800dcfa:	3710      	adds	r7, #16
 800dcfc:	46bd      	mov	sp, r7
 800dcfe:	bd80      	pop	{r7, pc}

0800dd00 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800dd00:	b580      	push	{r7, lr}
 800dd02:	b084      	sub	sp, #16
 800dd04:	af00      	add	r7, sp, #0
 800dd06:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd0c:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	69db      	ldr	r3, [r3, #28]
 800dd12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dd16:	d01c      	beq.n	800dd52 <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	681a      	ldr	r2, [r3, #0]
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800dd26:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	2200      	movs	r2, #0
 800dd2c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800dd30:	2100      	movs	r1, #0
 800dd32:	68f8      	ldr	r0, [r7, #12]
 800dd34:	f7ff ff38 	bl	800dba8 <SAI_InterruptFlag>
 800dd38:	4603      	mov	r3, r0
 800dd3a:	43d9      	mvns	r1, r3
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	691a      	ldr	r2, [r3, #16]
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	400a      	ands	r2, r1
 800dd48:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800dd4a:	68fb      	ldr	r3, [r7, #12]
 800dd4c:	2201      	movs	r2, #1
 800dd4e:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 800dd52:	68f8      	ldr	r0, [r7, #12]
 800dd54:	f7f3 f9e8 	bl	8001128 <HAL_SAI_RxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800dd58:	bf00      	nop
 800dd5a:	3710      	adds	r7, #16
 800dd5c:	46bd      	mov	sp, r7
 800dd5e:	bd80      	pop	{r7, pc}

0800dd60 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800dd60:	b580      	push	{r7, lr}
 800dd62:	b084      	sub	sp, #16
 800dd64:	af00      	add	r7, sp, #0
 800dd66:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd6c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 800dd6e:	68f8      	ldr	r0, [r7, #12]
 800dd70:	f7f3 f9ea 	bl	8001148 <HAL_SAI_RxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800dd74:	bf00      	nop
 800dd76:	3710      	adds	r7, #16
 800dd78:	46bd      	mov	sp, r7
 800dd7a:	bd80      	pop	{r7, pc}

0800dd7c <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800dd7c:	b580      	push	{r7, lr}
 800dd7e:	b084      	sub	sp, #16
 800dd80:	af00      	add	r7, sp, #0
 800dd82:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd88:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800dd8a:	68fb      	ldr	r3, [r7, #12]
 800dd8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dd90:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if ((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 800dd9a:	68fb      	ldr	r3, [r7, #12]
 800dd9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dd9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dda0:	2b01      	cmp	r3, #1
 800dda2:	d004      	beq.n	800ddae <SAI_DMAError+0x32>
 800dda4:	68fb      	ldr	r3, [r7, #12]
 800dda6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dda8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ddaa:	2b01      	cmp	r3, #1
 800ddac:	d112      	bne.n	800ddd4 <SAI_DMAError+0x58>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800ddae:	68fb      	ldr	r3, [r7, #12]
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	681a      	ldr	r2, [r3, #0]
 800ddb4:	68fb      	ldr	r3, [r7, #12]
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800ddbc:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 800ddbe:	68f8      	ldr	r0, [r7, #12]
 800ddc0:	f7ff ff28 	bl	800dc14 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	2201      	movs	r2, #1
 800ddc8:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	2200      	movs	r2, #0
 800ddd0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 800ddd4:	68f8      	ldr	r0, [r7, #12]
 800ddd6:	f7f6 ffd5 	bl	8004d84 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800ddda:	bf00      	nop
 800dddc:	3710      	adds	r7, #16
 800ddde:	46bd      	mov	sp, r7
 800dde0:	bd80      	pop	{r7, pc}

0800dde2 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800dde2:	b580      	push	{r7, lr}
 800dde4:	b082      	sub	sp, #8
 800dde6:	af00      	add	r7, sp, #0
 800dde8:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d101      	bne.n	800ddf4 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800ddf0:	2301      	movs	r3, #1
 800ddf2:	e022      	b.n	800de3a <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ddfa:	b2db      	uxtb	r3, r3
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d105      	bne.n	800de0c <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	2200      	movs	r2, #0
 800de04:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800de06:	6878      	ldr	r0, [r7, #4]
 800de08:	f7f5 fb54 	bl	80034b4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	2203      	movs	r2, #3
 800de10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800de14:	6878      	ldr	r0, [r7, #4]
 800de16:	f000 f815 	bl	800de44 <HAL_SD_InitCard>
 800de1a:	4603      	mov	r3, r0
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d001      	beq.n	800de24 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800de20:	2301      	movs	r3, #1
 800de22:	e00a      	b.n	800de3a <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	2200      	movs	r2, #0
 800de28:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	2200      	movs	r2, #0
 800de2e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	2201      	movs	r2, #1
 800de34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800de38:	2300      	movs	r3, #0
}
 800de3a:	4618      	mov	r0, r3
 800de3c:	3708      	adds	r7, #8
 800de3e:	46bd      	mov	sp, r7
 800de40:	bd80      	pop	{r7, pc}
	...

0800de44 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800de44:	b5b0      	push	{r4, r5, r7, lr}
 800de46:	b08e      	sub	sp, #56	; 0x38
 800de48:	af04      	add	r7, sp, #16
 800de4a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800de4c:	2300      	movs	r3, #0
 800de4e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800de50:	2300      	movs	r3, #0
 800de52:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800de54:	2300      	movs	r3, #0
 800de56:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800de58:	2300      	movs	r3, #0
 800de5a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800de5c:	2300      	movs	r3, #0
 800de5e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800de60:	2376      	movs	r3, #118	; 0x76
 800de62:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	681d      	ldr	r5, [r3, #0]
 800de68:	466c      	mov	r4, sp
 800de6a:	f107 0314 	add.w	r3, r7, #20
 800de6e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800de72:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800de76:	f107 0308 	add.w	r3, r7, #8
 800de7a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800de7c:	4628      	mov	r0, r5
 800de7e:	f002 ffef 	bl	8010e60 <SDMMC_Init>
 800de82:	4603      	mov	r3, r0
 800de84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800de88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	d001      	beq.n	800de94 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800de90:	2301      	movs	r3, #1
 800de92:	e056      	b.n	800df42 <HAL_SD_InitCard+0xfe>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	685a      	ldr	r2, [r3, #4]
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800dea2:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	681b      	ldr	r3, [r3, #0]
 800dea8:	4618      	mov	r0, r3
 800deaa:	f003 f812 	bl	8010ed2 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	681b      	ldr	r3, [r3, #0]
 800deb2:	685a      	ldr	r2, [r3, #4]
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	681b      	ldr	r3, [r3, #0]
 800deb8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800debc:	605a      	str	r2, [r3, #4]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800debe:	6878      	ldr	r0, [r7, #4]
 800dec0:	f000 fe0e 	bl	800eae0 <SD_PowerON>
 800dec4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800dec6:	6a3b      	ldr	r3, [r7, #32]
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d00b      	beq.n	800dee4 <HAL_SD_InitCard+0xa0>
  {
    hsd->State = HAL_SD_STATE_READY;
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	2201      	movs	r2, #1
 800ded0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ded8:	6a3b      	ldr	r3, [r7, #32]
 800deda:	431a      	orrs	r2, r3
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800dee0:	2301      	movs	r3, #1
 800dee2:	e02e      	b.n	800df42 <HAL_SD_InitCard+0xfe>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800dee4:	6878      	ldr	r0, [r7, #4]
 800dee6:	f000 fd2f 	bl	800e948 <SD_InitCard>
 800deea:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800deec:	6a3b      	ldr	r3, [r7, #32]
 800deee:	2b00      	cmp	r3, #0
 800def0:	d00b      	beq.n	800df0a <HAL_SD_InitCard+0xc6>
  {
    hsd->State = HAL_SD_STATE_READY;
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	2201      	movs	r2, #1
 800def6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800defe:	6a3b      	ldr	r3, [r7, #32]
 800df00:	431a      	orrs	r2, r3
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800df06:	2301      	movs	r3, #1
 800df08:	e01b      	b.n	800df42 <HAL_SD_InitCard+0xfe>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800df12:	4618      	mov	r0, r3
 800df14:	f003 f870 	bl	8010ff8 <SDMMC_CmdBlockLength>
 800df18:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800df1a:	6a3b      	ldr	r3, [r7, #32]
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d00f      	beq.n	800df40 <HAL_SD_InitCard+0xfc>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	4a09      	ldr	r2, [pc, #36]	; (800df4c <HAL_SD_InitCard+0x108>)
 800df26:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800df2c:	6a3b      	ldr	r3, [r7, #32]
 800df2e:	431a      	orrs	r2, r3
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	2201      	movs	r2, #1
 800df38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800df3c:	2301      	movs	r3, #1
 800df3e:	e000      	b.n	800df42 <HAL_SD_InitCard+0xfe>
  }

  return HAL_OK;
 800df40:	2300      	movs	r3, #0
}
 800df42:	4618      	mov	r0, r3
 800df44:	3728      	adds	r7, #40	; 0x28
 800df46:	46bd      	mov	sp, r7
 800df48:	bdb0      	pop	{r4, r5, r7, pc}
 800df4a:	bf00      	nop
 800df4c:	004005ff 	.word	0x004005ff

0800df50 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800df50:	b580      	push	{r7, lr}
 800df52:	b08c      	sub	sp, #48	; 0x30
 800df54:	af00      	add	r7, sp, #0
 800df56:	60f8      	str	r0, [r7, #12]
 800df58:	60b9      	str	r1, [r7, #8]
 800df5a:	607a      	str	r2, [r7, #4]
 800df5c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800df62:	68bb      	ldr	r3, [r7, #8]
 800df64:	2b00      	cmp	r3, #0
 800df66:	d107      	bne.n	800df78 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800df68:	68fb      	ldr	r3, [r7, #12]
 800df6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df6c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800df70:	68fb      	ldr	r3, [r7, #12]
 800df72:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800df74:	2301      	movs	r3, #1
 800df76:	e0c3      	b.n	800e100 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800df78:	68fb      	ldr	r3, [r7, #12]
 800df7a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800df7e:	b2db      	uxtb	r3, r3
 800df80:	2b01      	cmp	r3, #1
 800df82:	f040 80bc 	bne.w	800e0fe <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800df86:	68fb      	ldr	r3, [r7, #12]
 800df88:	2200      	movs	r2, #0
 800df8a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800df8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800df8e:	683b      	ldr	r3, [r7, #0]
 800df90:	441a      	add	r2, r3
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800df96:	429a      	cmp	r2, r3
 800df98:	d907      	bls.n	800dfaa <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800df9a:	68fb      	ldr	r3, [r7, #12]
 800df9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df9e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800dfa2:	68fb      	ldr	r3, [r7, #12]
 800dfa4:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800dfa6:	2301      	movs	r3, #1
 800dfa8:	e0aa      	b.n	800e100 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800dfaa:	68fb      	ldr	r3, [r7, #12]
 800dfac:	2203      	movs	r2, #3
 800dfae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800dfb2:	68fb      	ldr	r3, [r7, #12]
 800dfb4:	681b      	ldr	r3, [r3, #0]
 800dfb6:	2200      	movs	r2, #0
 800dfb8:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dfc0:	68fb      	ldr	r3, [r7, #12]
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800dfc8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dfce:	4a4e      	ldr	r2, [pc, #312]	; (800e108 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800dfd0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800dfd2:	68fb      	ldr	r3, [r7, #12]
 800dfd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dfd6:	4a4d      	ldr	r2, [pc, #308]	; (800e10c <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800dfd8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800dfda:	68fb      	ldr	r3, [r7, #12]
 800dfdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dfde:	2200      	movs	r2, #0
 800dfe0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800dfe2:	68fb      	ldr	r3, [r7, #12]
 800dfe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dfe6:	2200      	movs	r2, #0
 800dfe8:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800dfea:	68fb      	ldr	r3, [r7, #12]
 800dfec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	681b      	ldr	r3, [r3, #0]
 800dff2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800dff6:	68fb      	ldr	r3, [r7, #12]
 800dff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dffa:	689a      	ldr	r2, [r3, #8]
 800dffc:	68fb      	ldr	r3, [r7, #12]
 800dffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	430a      	orrs	r2, r1
 800e004:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800e006:	68fb      	ldr	r3, [r7, #12]
 800e008:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	681b      	ldr	r3, [r3, #0]
 800e00e:	3380      	adds	r3, #128	; 0x80
 800e010:	4619      	mov	r1, r3
 800e012:	68ba      	ldr	r2, [r7, #8]
 800e014:	683b      	ldr	r3, [r7, #0]
 800e016:	025b      	lsls	r3, r3, #9
 800e018:	089b      	lsrs	r3, r3, #2
 800e01a:	f7f8 fd1d 	bl	8006a58 <HAL_DMA_Start_IT>
 800e01e:	4603      	mov	r3, r0
 800e020:	2b00      	cmp	r3, #0
 800e022:	d017      	beq.n	800e054 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800e024:	68fb      	ldr	r3, [r7, #12]
 800e026:	681b      	ldr	r3, [r3, #0]
 800e028:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e02a:	68fb      	ldr	r3, [r7, #12]
 800e02c:	681b      	ldr	r3, [r3, #0]
 800e02e:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800e032:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e034:	68fb      	ldr	r3, [r7, #12]
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	4a35      	ldr	r2, [pc, #212]	; (800e110 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800e03a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800e03c:	68fb      	ldr	r3, [r7, #12]
 800e03e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e040:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800e044:	68fb      	ldr	r3, [r7, #12]
 800e046:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800e048:	68fb      	ldr	r3, [r7, #12]
 800e04a:	2201      	movs	r2, #1
 800e04c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800e050:	2301      	movs	r3, #1
 800e052:	e055      	b.n	800e100 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800e054:	68fb      	ldr	r3, [r7, #12]
 800e056:	681b      	ldr	r3, [r3, #0]
 800e058:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e05a:	68fb      	ldr	r3, [r7, #12]
 800e05c:	681b      	ldr	r3, [r3, #0]
 800e05e:	f042 0208 	orr.w	r2, r2, #8
 800e062:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800e064:	68fb      	ldr	r3, [r7, #12]
 800e066:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e068:	2b01      	cmp	r3, #1
 800e06a:	d002      	beq.n	800e072 <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 800e06c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e06e:	025b      	lsls	r3, r3, #9
 800e070:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e072:	f04f 33ff 	mov.w	r3, #4294967295
 800e076:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800e078:	683b      	ldr	r3, [r7, #0]
 800e07a:	025b      	lsls	r3, r3, #9
 800e07c:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800e07e:	2390      	movs	r3, #144	; 0x90
 800e080:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800e082:	2302      	movs	r3, #2
 800e084:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e086:	2300      	movs	r3, #0
 800e088:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800e08a:	2301      	movs	r3, #1
 800e08c:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	f107 0210 	add.w	r2, r7, #16
 800e096:	4611      	mov	r1, r2
 800e098:	4618      	mov	r0, r3
 800e09a:	f002 ff81 	bl	8010fa0 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800e09e:	683b      	ldr	r3, [r7, #0]
 800e0a0:	2b01      	cmp	r3, #1
 800e0a2:	d90a      	bls.n	800e0ba <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	2282      	movs	r2, #130	; 0x82
 800e0a8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	681b      	ldr	r3, [r3, #0]
 800e0ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e0b0:	4618      	mov	r0, r3
 800e0b2:	f002 ffe5 	bl	8011080 <SDMMC_CmdReadMultiBlock>
 800e0b6:	62f8      	str	r0, [r7, #44]	; 0x2c
 800e0b8:	e009      	b.n	800e0ce <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800e0ba:	68fb      	ldr	r3, [r7, #12]
 800e0bc:	2281      	movs	r2, #129	; 0x81
 800e0be:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800e0c0:	68fb      	ldr	r3, [r7, #12]
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e0c6:	4618      	mov	r0, r3
 800e0c8:	f002 ffb8 	bl	801103c <SDMMC_CmdReadSingleBlock>
 800e0cc:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800e0ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d012      	beq.n	800e0fa <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	4a0d      	ldr	r2, [pc, #52]	; (800e110 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800e0da:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e0e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0e2:	431a      	orrs	r2, r3
 800e0e4:	68fb      	ldr	r3, [r7, #12]
 800e0e6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800e0e8:	68fb      	ldr	r3, [r7, #12]
 800e0ea:	2201      	movs	r2, #1
 800e0ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800e0f0:	68fb      	ldr	r3, [r7, #12]
 800e0f2:	2200      	movs	r2, #0
 800e0f4:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800e0f6:	2301      	movs	r3, #1
 800e0f8:	e002      	b.n	800e100 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 800e0fa:	2300      	movs	r3, #0
 800e0fc:	e000      	b.n	800e100 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 800e0fe:	2302      	movs	r3, #2
  }
}
 800e100:	4618      	mov	r0, r3
 800e102:	3730      	adds	r7, #48	; 0x30
 800e104:	46bd      	mov	sp, r7
 800e106:	bd80      	pop	{r7, pc}
 800e108:	0800e833 	.word	0x0800e833
 800e10c:	0800e8a5 	.word	0x0800e8a5
 800e110:	004005ff 	.word	0x004005ff

0800e114 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800e114:	b580      	push	{r7, lr}
 800e116:	b08c      	sub	sp, #48	; 0x30
 800e118:	af00      	add	r7, sp, #0
 800e11a:	60f8      	str	r0, [r7, #12]
 800e11c:	60b9      	str	r1, [r7, #8]
 800e11e:	607a      	str	r2, [r7, #4]
 800e120:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800e126:	68bb      	ldr	r3, [r7, #8]
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d107      	bne.n	800e13c <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e130:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800e134:	68fb      	ldr	r3, [r7, #12]
 800e136:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800e138:	2301      	movs	r3, #1
 800e13a:	e0c6      	b.n	800e2ca <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e142:	b2db      	uxtb	r3, r3
 800e144:	2b01      	cmp	r3, #1
 800e146:	f040 80bf 	bne.w	800e2c8 <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800e14a:	68fb      	ldr	r3, [r7, #12]
 800e14c:	2200      	movs	r2, #0
 800e14e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800e150:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e152:	683b      	ldr	r3, [r7, #0]
 800e154:	441a      	add	r2, r3
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e15a:	429a      	cmp	r2, r3
 800e15c:	d907      	bls.n	800e16e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e162:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800e166:	68fb      	ldr	r3, [r7, #12]
 800e168:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800e16a:	2301      	movs	r3, #1
 800e16c:	e0ad      	b.n	800e2ca <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800e16e:	68fb      	ldr	r3, [r7, #12]
 800e170:	2203      	movs	r2, #3
 800e172:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800e176:	68fb      	ldr	r3, [r7, #12]
 800e178:	681b      	ldr	r3, [r3, #0]
 800e17a:	2200      	movs	r2, #0
 800e17c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800e17e:	68fb      	ldr	r3, [r7, #12]
 800e180:	681b      	ldr	r3, [r3, #0]
 800e182:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e184:	68fb      	ldr	r3, [r7, #12]
 800e186:	681b      	ldr	r3, [r3, #0]
 800e188:	f042 021a 	orr.w	r2, r2, #26
 800e18c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800e18e:	68fb      	ldr	r3, [r7, #12]
 800e190:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e192:	4a50      	ldr	r2, [pc, #320]	; (800e2d4 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 800e194:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800e196:	68fb      	ldr	r3, [r7, #12]
 800e198:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e19a:	4a4f      	ldr	r2, [pc, #316]	; (800e2d8 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800e19c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800e19e:	68fb      	ldr	r3, [r7, #12]
 800e1a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e1a2:	2200      	movs	r2, #0
 800e1a4:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800e1a6:	68fb      	ldr	r3, [r7, #12]
 800e1a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e1aa:	2b01      	cmp	r3, #1
 800e1ac:	d002      	beq.n	800e1b4 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800e1ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1b0:	025b      	lsls	r3, r3, #9
 800e1b2:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800e1b4:	683b      	ldr	r3, [r7, #0]
 800e1b6:	2b01      	cmp	r3, #1
 800e1b8:	d90a      	bls.n	800e1d0 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800e1ba:	68fb      	ldr	r3, [r7, #12]
 800e1bc:	22a0      	movs	r2, #160	; 0xa0
 800e1be:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e1c6:	4618      	mov	r0, r3
 800e1c8:	f002 ff9e 	bl	8011108 <SDMMC_CmdWriteMultiBlock>
 800e1cc:	62f8      	str	r0, [r7, #44]	; 0x2c
 800e1ce:	e009      	b.n	800e1e4 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800e1d0:	68fb      	ldr	r3, [r7, #12]
 800e1d2:	2290      	movs	r2, #144	; 0x90
 800e1d4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800e1d6:	68fb      	ldr	r3, [r7, #12]
 800e1d8:	681b      	ldr	r3, [r3, #0]
 800e1da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e1dc:	4618      	mov	r0, r3
 800e1de:	f002 ff71 	bl	80110c4 <SDMMC_CmdWriteSingleBlock>
 800e1e2:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800e1e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d012      	beq.n	800e210 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	4a3b      	ldr	r2, [pc, #236]	; (800e2dc <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800e1f0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800e1f2:	68fb      	ldr	r3, [r7, #12]
 800e1f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e1f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1f8:	431a      	orrs	r2, r3
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800e1fe:	68fb      	ldr	r3, [r7, #12]
 800e200:	2201      	movs	r2, #1
 800e202:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800e206:	68fb      	ldr	r3, [r7, #12]
 800e208:	2200      	movs	r2, #0
 800e20a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800e20c:	2301      	movs	r3, #1
 800e20e:	e05c      	b.n	800e2ca <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800e210:	68fb      	ldr	r3, [r7, #12]
 800e212:	681b      	ldr	r3, [r3, #0]
 800e214:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e216:	68fb      	ldr	r3, [r7, #12]
 800e218:	681b      	ldr	r3, [r3, #0]
 800e21a:	f042 0208 	orr.w	r2, r2, #8
 800e21e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800e220:	68fb      	ldr	r3, [r7, #12]
 800e222:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e224:	2240      	movs	r2, #64	; 0x40
 800e226:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	681b      	ldr	r3, [r3, #0]
 800e230:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800e234:	68fb      	ldr	r3, [r7, #12]
 800e236:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e238:	689a      	ldr	r2, [r3, #8]
 800e23a:	68fb      	ldr	r3, [r7, #12]
 800e23c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	430a      	orrs	r2, r1
 800e242:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800e244:	68fb      	ldr	r3, [r7, #12]
 800e246:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800e248:	68b9      	ldr	r1, [r7, #8]
 800e24a:	68fb      	ldr	r3, [r7, #12]
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	3380      	adds	r3, #128	; 0x80
 800e250:	461a      	mov	r2, r3
 800e252:	683b      	ldr	r3, [r7, #0]
 800e254:	025b      	lsls	r3, r3, #9
 800e256:	089b      	lsrs	r3, r3, #2
 800e258:	f7f8 fbfe 	bl	8006a58 <HAL_DMA_Start_IT>
 800e25c:	4603      	mov	r3, r0
 800e25e:	2b00      	cmp	r3, #0
 800e260:	d01a      	beq.n	800e298 <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800e262:	68fb      	ldr	r3, [r7, #12]
 800e264:	681b      	ldr	r3, [r3, #0]
 800e266:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e268:	68fb      	ldr	r3, [r7, #12]
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	f022 021a 	bic.w	r2, r2, #26
 800e270:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	4a19      	ldr	r2, [pc, #100]	; (800e2dc <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800e278:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800e27a:	68fb      	ldr	r3, [r7, #12]
 800e27c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e27e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800e282:	68fb      	ldr	r3, [r7, #12]
 800e284:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800e286:	68fb      	ldr	r3, [r7, #12]
 800e288:	2201      	movs	r2, #1
 800e28a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800e28e:	68fb      	ldr	r3, [r7, #12]
 800e290:	2200      	movs	r2, #0
 800e292:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800e294:	2301      	movs	r3, #1
 800e296:	e018      	b.n	800e2ca <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e298:	f04f 33ff 	mov.w	r3, #4294967295
 800e29c:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800e29e:	683b      	ldr	r3, [r7, #0]
 800e2a0:	025b      	lsls	r3, r3, #9
 800e2a2:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800e2a4:	2390      	movs	r3, #144	; 0x90
 800e2a6:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800e2a8:	2300      	movs	r3, #0
 800e2aa:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e2ac:	2300      	movs	r3, #0
 800e2ae:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800e2b0:	2301      	movs	r3, #1
 800e2b2:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e2b4:	68fb      	ldr	r3, [r7, #12]
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	f107 0210 	add.w	r2, r7, #16
 800e2bc:	4611      	mov	r1, r2
 800e2be:	4618      	mov	r0, r3
 800e2c0:	f002 fe6e 	bl	8010fa0 <SDMMC_ConfigData>

      return HAL_OK;
 800e2c4:	2300      	movs	r3, #0
 800e2c6:	e000      	b.n	800e2ca <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 800e2c8:	2302      	movs	r3, #2
  }
}
 800e2ca:	4618      	mov	r0, r3
 800e2cc:	3730      	adds	r7, #48	; 0x30
 800e2ce:	46bd      	mov	sp, r7
 800e2d0:	bd80      	pop	{r7, pc}
 800e2d2:	bf00      	nop
 800e2d4:	0800e809 	.word	0x0800e809
 800e2d8:	0800e8a5 	.word	0x0800e8a5
 800e2dc:	004005ff 	.word	0x004005ff

0800e2e0 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800e2e0:	b480      	push	{r7}
 800e2e2:	b083      	sub	sp, #12
 800e2e4:	af00      	add	r7, sp, #0
 800e2e6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800e2e8:	bf00      	nop
 800e2ea:	370c      	adds	r7, #12
 800e2ec:	46bd      	mov	sp, r7
 800e2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2f2:	4770      	bx	lr

0800e2f4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800e2f4:	b480      	push	{r7}
 800e2f6:	b083      	sub	sp, #12
 800e2f8:	af00      	add	r7, sp, #0
 800e2fa:	6078      	str	r0, [r7, #4]
 800e2fc:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e302:	0f9b      	lsrs	r3, r3, #30
 800e304:	b2da      	uxtb	r2, r3
 800e306:	683b      	ldr	r3, [r7, #0]
 800e308:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e30e:	0e9b      	lsrs	r3, r3, #26
 800e310:	b2db      	uxtb	r3, r3
 800e312:	f003 030f 	and.w	r3, r3, #15
 800e316:	b2da      	uxtb	r2, r3
 800e318:	683b      	ldr	r3, [r7, #0]
 800e31a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e320:	0e1b      	lsrs	r3, r3, #24
 800e322:	b2db      	uxtb	r3, r3
 800e324:	f003 0303 	and.w	r3, r3, #3
 800e328:	b2da      	uxtb	r2, r3
 800e32a:	683b      	ldr	r3, [r7, #0]
 800e32c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e332:	0c1b      	lsrs	r3, r3, #16
 800e334:	b2da      	uxtb	r2, r3
 800e336:	683b      	ldr	r3, [r7, #0]
 800e338:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e33e:	0a1b      	lsrs	r3, r3, #8
 800e340:	b2da      	uxtb	r2, r3
 800e342:	683b      	ldr	r3, [r7, #0]
 800e344:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e34a:	b2da      	uxtb	r2, r3
 800e34c:	683b      	ldr	r3, [r7, #0]
 800e34e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e354:	0d1b      	lsrs	r3, r3, #20
 800e356:	b29a      	uxth	r2, r3
 800e358:	683b      	ldr	r3, [r7, #0]
 800e35a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e360:	0c1b      	lsrs	r3, r3, #16
 800e362:	b2db      	uxtb	r3, r3
 800e364:	f003 030f 	and.w	r3, r3, #15
 800e368:	b2da      	uxtb	r2, r3
 800e36a:	683b      	ldr	r3, [r7, #0]
 800e36c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e372:	0bdb      	lsrs	r3, r3, #15
 800e374:	b2db      	uxtb	r3, r3
 800e376:	f003 0301 	and.w	r3, r3, #1
 800e37a:	b2da      	uxtb	r2, r3
 800e37c:	683b      	ldr	r3, [r7, #0]
 800e37e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e384:	0b9b      	lsrs	r3, r3, #14
 800e386:	b2db      	uxtb	r3, r3
 800e388:	f003 0301 	and.w	r3, r3, #1
 800e38c:	b2da      	uxtb	r2, r3
 800e38e:	683b      	ldr	r3, [r7, #0]
 800e390:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e396:	0b5b      	lsrs	r3, r3, #13
 800e398:	b2db      	uxtb	r3, r3
 800e39a:	f003 0301 	and.w	r3, r3, #1
 800e39e:	b2da      	uxtb	r2, r3
 800e3a0:	683b      	ldr	r3, [r7, #0]
 800e3a2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e3a8:	0b1b      	lsrs	r3, r3, #12
 800e3aa:	b2db      	uxtb	r3, r3
 800e3ac:	f003 0301 	and.w	r3, r3, #1
 800e3b0:	b2da      	uxtb	r2, r3
 800e3b2:	683b      	ldr	r3, [r7, #0]
 800e3b4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800e3b6:	683b      	ldr	r3, [r7, #0]
 800e3b8:	2200      	movs	r2, #0
 800e3ba:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d163      	bne.n	800e48c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e3c8:	009a      	lsls	r2, r3, #2
 800e3ca:	f640 73fc 	movw	r3, #4092	; 0xffc
 800e3ce:	4013      	ands	r3, r2
 800e3d0:	687a      	ldr	r2, [r7, #4]
 800e3d2:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800e3d4:	0f92      	lsrs	r2, r2, #30
 800e3d6:	431a      	orrs	r2, r3
 800e3d8:	683b      	ldr	r3, [r7, #0]
 800e3da:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e3e0:	0edb      	lsrs	r3, r3, #27
 800e3e2:	b2db      	uxtb	r3, r3
 800e3e4:	f003 0307 	and.w	r3, r3, #7
 800e3e8:	b2da      	uxtb	r2, r3
 800e3ea:	683b      	ldr	r3, [r7, #0]
 800e3ec:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e3f2:	0e1b      	lsrs	r3, r3, #24
 800e3f4:	b2db      	uxtb	r3, r3
 800e3f6:	f003 0307 	and.w	r3, r3, #7
 800e3fa:	b2da      	uxtb	r2, r3
 800e3fc:	683b      	ldr	r3, [r7, #0]
 800e3fe:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e404:	0d5b      	lsrs	r3, r3, #21
 800e406:	b2db      	uxtb	r3, r3
 800e408:	f003 0307 	and.w	r3, r3, #7
 800e40c:	b2da      	uxtb	r2, r3
 800e40e:	683b      	ldr	r3, [r7, #0]
 800e410:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e416:	0c9b      	lsrs	r3, r3, #18
 800e418:	b2db      	uxtb	r3, r3
 800e41a:	f003 0307 	and.w	r3, r3, #7
 800e41e:	b2da      	uxtb	r2, r3
 800e420:	683b      	ldr	r3, [r7, #0]
 800e422:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e428:	0bdb      	lsrs	r3, r3, #15
 800e42a:	b2db      	uxtb	r3, r3
 800e42c:	f003 0307 	and.w	r3, r3, #7
 800e430:	b2da      	uxtb	r2, r3
 800e432:	683b      	ldr	r3, [r7, #0]
 800e434:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800e436:	683b      	ldr	r3, [r7, #0]
 800e438:	691b      	ldr	r3, [r3, #16]
 800e43a:	1c5a      	adds	r2, r3, #1
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800e440:	683b      	ldr	r3, [r7, #0]
 800e442:	7e1b      	ldrb	r3, [r3, #24]
 800e444:	b2db      	uxtb	r3, r3
 800e446:	f003 0307 	and.w	r3, r3, #7
 800e44a:	3302      	adds	r3, #2
 800e44c:	2201      	movs	r2, #1
 800e44e:	fa02 f303 	lsl.w	r3, r2, r3
 800e452:	687a      	ldr	r2, [r7, #4]
 800e454:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800e456:	fb02 f203 	mul.w	r2, r2, r3
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800e45e:	683b      	ldr	r3, [r7, #0]
 800e460:	7a1b      	ldrb	r3, [r3, #8]
 800e462:	b2db      	uxtb	r3, r3
 800e464:	f003 030f 	and.w	r3, r3, #15
 800e468:	2201      	movs	r2, #1
 800e46a:	409a      	lsls	r2, r3
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e474:	687a      	ldr	r2, [r7, #4]
 800e476:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800e478:	0a52      	lsrs	r2, r2, #9
 800e47a:	fb02 f203 	mul.w	r2, r2, r3
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e488:	661a      	str	r2, [r3, #96]	; 0x60
 800e48a:	e031      	b.n	800e4f0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e490:	2b01      	cmp	r3, #1
 800e492:	d11d      	bne.n	800e4d0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e498:	041b      	lsls	r3, r3, #16
 800e49a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e4a2:	0c1b      	lsrs	r3, r3, #16
 800e4a4:	431a      	orrs	r2, r3
 800e4a6:	683b      	ldr	r3, [r7, #0]
 800e4a8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800e4aa:	683b      	ldr	r3, [r7, #0]
 800e4ac:	691b      	ldr	r3, [r3, #16]
 800e4ae:	3301      	adds	r3, #1
 800e4b0:	029a      	lsls	r2, r3, #10
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e4c4:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	661a      	str	r2, [r3, #96]	; 0x60
 800e4ce:	e00f      	b.n	800e4f0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	681b      	ldr	r3, [r3, #0]
 800e4d4:	4a58      	ldr	r2, [pc, #352]	; (800e638 <HAL_SD_GetCardCSD+0x344>)
 800e4d6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4dc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	2201      	movs	r2, #1
 800e4e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800e4ec:	2301      	movs	r3, #1
 800e4ee:	e09d      	b.n	800e62c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e4f4:	0b9b      	lsrs	r3, r3, #14
 800e4f6:	b2db      	uxtb	r3, r3
 800e4f8:	f003 0301 	and.w	r3, r3, #1
 800e4fc:	b2da      	uxtb	r2, r3
 800e4fe:	683b      	ldr	r3, [r7, #0]
 800e500:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e506:	09db      	lsrs	r3, r3, #7
 800e508:	b2db      	uxtb	r3, r3
 800e50a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e50e:	b2da      	uxtb	r2, r3
 800e510:	683b      	ldr	r3, [r7, #0]
 800e512:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e518:	b2db      	uxtb	r3, r3
 800e51a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e51e:	b2da      	uxtb	r2, r3
 800e520:	683b      	ldr	r3, [r7, #0]
 800e522:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e528:	0fdb      	lsrs	r3, r3, #31
 800e52a:	b2da      	uxtb	r2, r3
 800e52c:	683b      	ldr	r3, [r7, #0]
 800e52e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e534:	0f5b      	lsrs	r3, r3, #29
 800e536:	b2db      	uxtb	r3, r3
 800e538:	f003 0303 	and.w	r3, r3, #3
 800e53c:	b2da      	uxtb	r2, r3
 800e53e:	683b      	ldr	r3, [r7, #0]
 800e540:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e546:	0e9b      	lsrs	r3, r3, #26
 800e548:	b2db      	uxtb	r3, r3
 800e54a:	f003 0307 	and.w	r3, r3, #7
 800e54e:	b2da      	uxtb	r2, r3
 800e550:	683b      	ldr	r3, [r7, #0]
 800e552:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e558:	0d9b      	lsrs	r3, r3, #22
 800e55a:	b2db      	uxtb	r3, r3
 800e55c:	f003 030f 	and.w	r3, r3, #15
 800e560:	b2da      	uxtb	r2, r3
 800e562:	683b      	ldr	r3, [r7, #0]
 800e564:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e56a:	0d5b      	lsrs	r3, r3, #21
 800e56c:	b2db      	uxtb	r3, r3
 800e56e:	f003 0301 	and.w	r3, r3, #1
 800e572:	b2da      	uxtb	r2, r3
 800e574:	683b      	ldr	r3, [r7, #0]
 800e576:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800e57a:	683b      	ldr	r3, [r7, #0]
 800e57c:	2200      	movs	r2, #0
 800e57e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e586:	0c1b      	lsrs	r3, r3, #16
 800e588:	b2db      	uxtb	r3, r3
 800e58a:	f003 0301 	and.w	r3, r3, #1
 800e58e:	b2da      	uxtb	r2, r3
 800e590:	683b      	ldr	r3, [r7, #0]
 800e592:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e59a:	0bdb      	lsrs	r3, r3, #15
 800e59c:	b2db      	uxtb	r3, r3
 800e59e:	f003 0301 	and.w	r3, r3, #1
 800e5a2:	b2da      	uxtb	r2, r3
 800e5a4:	683b      	ldr	r3, [r7, #0]
 800e5a6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e5ae:	0b9b      	lsrs	r3, r3, #14
 800e5b0:	b2db      	uxtb	r3, r3
 800e5b2:	f003 0301 	and.w	r3, r3, #1
 800e5b6:	b2da      	uxtb	r2, r3
 800e5b8:	683b      	ldr	r3, [r7, #0]
 800e5ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e5c2:	0b5b      	lsrs	r3, r3, #13
 800e5c4:	b2db      	uxtb	r3, r3
 800e5c6:	f003 0301 	and.w	r3, r3, #1
 800e5ca:	b2da      	uxtb	r2, r3
 800e5cc:	683b      	ldr	r3, [r7, #0]
 800e5ce:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e5d6:	0b1b      	lsrs	r3, r3, #12
 800e5d8:	b2db      	uxtb	r3, r3
 800e5da:	f003 0301 	and.w	r3, r3, #1
 800e5de:	b2da      	uxtb	r2, r3
 800e5e0:	683b      	ldr	r3, [r7, #0]
 800e5e2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e5ea:	0a9b      	lsrs	r3, r3, #10
 800e5ec:	b2db      	uxtb	r3, r3
 800e5ee:	f003 0303 	and.w	r3, r3, #3
 800e5f2:	b2da      	uxtb	r2, r3
 800e5f4:	683b      	ldr	r3, [r7, #0]
 800e5f6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e5fe:	0a1b      	lsrs	r3, r3, #8
 800e600:	b2db      	uxtb	r3, r3
 800e602:	f003 0303 	and.w	r3, r3, #3
 800e606:	b2da      	uxtb	r2, r3
 800e608:	683b      	ldr	r3, [r7, #0]
 800e60a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e612:	085b      	lsrs	r3, r3, #1
 800e614:	b2db      	uxtb	r3, r3
 800e616:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e61a:	b2da      	uxtb	r2, r3
 800e61c:	683b      	ldr	r3, [r7, #0]
 800e61e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800e622:	683b      	ldr	r3, [r7, #0]
 800e624:	2201      	movs	r2, #1
 800e626:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800e62a:	2300      	movs	r3, #0
}
 800e62c:	4618      	mov	r0, r3
 800e62e:	370c      	adds	r7, #12
 800e630:	46bd      	mov	sp, r7
 800e632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e636:	4770      	bx	lr
 800e638:	004005ff 	.word	0x004005ff

0800e63c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800e63c:	b480      	push	{r7}
 800e63e:	b083      	sub	sp, #12
 800e640:	af00      	add	r7, sp, #0
 800e642:	6078      	str	r0, [r7, #4]
 800e644:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e64a:	683b      	ldr	r3, [r7, #0]
 800e64c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e652:	683b      	ldr	r3, [r7, #0]
 800e654:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e65a:	683b      	ldr	r3, [r7, #0]
 800e65c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e662:	683b      	ldr	r3, [r7, #0]
 800e664:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e66a:	683b      	ldr	r3, [r7, #0]
 800e66c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e672:	683b      	ldr	r3, [r7, #0]
 800e674:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e67a:	683b      	ldr	r3, [r7, #0]
 800e67c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800e682:	683b      	ldr	r3, [r7, #0]
 800e684:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800e686:	2300      	movs	r3, #0
}
 800e688:	4618      	mov	r0, r3
 800e68a:	370c      	adds	r7, #12
 800e68c:	46bd      	mov	sp, r7
 800e68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e692:	4770      	bx	lr

0800e694 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800e694:	b5b0      	push	{r4, r5, r7, lr}
 800e696:	b08e      	sub	sp, #56	; 0x38
 800e698:	af04      	add	r7, sp, #16
 800e69a:	6078      	str	r0, [r7, #4]
 800e69c:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800e69e:	2300      	movs	r3, #0
 800e6a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	2203      	movs	r2, #3
 800e6a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e6b0:	2b03      	cmp	r3, #3
 800e6b2:	d02e      	beq.n	800e712 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800e6b4:	683b      	ldr	r3, [r7, #0]
 800e6b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e6ba:	d106      	bne.n	800e6ca <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e6c0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	639a      	str	r2, [r3, #56]	; 0x38
 800e6c8:	e029      	b.n	800e71e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800e6ca:	683b      	ldr	r3, [r7, #0]
 800e6cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e6d0:	d10a      	bne.n	800e6e8 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800e6d2:	6878      	ldr	r0, [r7, #4]
 800e6d4:	f000 faba 	bl	800ec4c <SD_WideBus_Enable>
 800e6d8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e6de:	6a3b      	ldr	r3, [r7, #32]
 800e6e0:	431a      	orrs	r2, r3
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	639a      	str	r2, [r3, #56]	; 0x38
 800e6e6:	e01a      	b.n	800e71e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800e6e8:	683b      	ldr	r3, [r7, #0]
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d10a      	bne.n	800e704 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800e6ee:	6878      	ldr	r0, [r7, #4]
 800e6f0:	f000 faf7 	bl	800ece2 <SD_WideBus_Disable>
 800e6f4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e6fa:	6a3b      	ldr	r3, [r7, #32]
 800e6fc:	431a      	orrs	r2, r3
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	639a      	str	r2, [r3, #56]	; 0x38
 800e702:	e00c      	b.n	800e71e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e708:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	639a      	str	r2, [r3, #56]	; 0x38
 800e710:	e005      	b.n	800e71e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e716:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e722:	2b00      	cmp	r3, #0
 800e724:	d00b      	beq.n	800e73e <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	681b      	ldr	r3, [r3, #0]
 800e72a:	4a26      	ldr	r2, [pc, #152]	; (800e7c4 <HAL_SD_ConfigWideBusOperation+0x130>)
 800e72c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	2201      	movs	r2, #1
 800e732:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800e736:	2301      	movs	r3, #1
 800e738:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e73c:	e01f      	b.n	800e77e <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	685b      	ldr	r3, [r3, #4]
 800e742:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	689b      	ldr	r3, [r3, #8]
 800e748:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	68db      	ldr	r3, [r3, #12]
 800e74e:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 800e750:	683b      	ldr	r3, [r7, #0]
 800e752:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	695b      	ldr	r3, [r3, #20]
 800e758:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	699b      	ldr	r3, [r3, #24]
 800e75e:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	681d      	ldr	r5, [r3, #0]
 800e764:	466c      	mov	r4, sp
 800e766:	f107 0314 	add.w	r3, r7, #20
 800e76a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e76e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800e772:	f107 0308 	add.w	r3, r7, #8
 800e776:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e778:	4628      	mov	r0, r5
 800e77a:	f002 fb71 	bl	8010e60 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	681b      	ldr	r3, [r3, #0]
 800e782:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e786:	4618      	mov	r0, r3
 800e788:	f002 fc36 	bl	8010ff8 <SDMMC_CmdBlockLength>
 800e78c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e78e:	6a3b      	ldr	r3, [r7, #32]
 800e790:	2b00      	cmp	r3, #0
 800e792:	d00c      	beq.n	800e7ae <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	681b      	ldr	r3, [r3, #0]
 800e798:	4a0a      	ldr	r2, [pc, #40]	; (800e7c4 <HAL_SD_ConfigWideBusOperation+0x130>)
 800e79a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e7a0:	6a3b      	ldr	r3, [r7, #32]
 800e7a2:	431a      	orrs	r2, r3
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800e7a8:	2301      	movs	r3, #1
 800e7aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	2201      	movs	r2, #1
 800e7b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800e7b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800e7ba:	4618      	mov	r0, r3
 800e7bc:	3728      	adds	r7, #40	; 0x28
 800e7be:	46bd      	mov	sp, r7
 800e7c0:	bdb0      	pop	{r4, r5, r7, pc}
 800e7c2:	bf00      	nop
 800e7c4:	004005ff 	.word	0x004005ff

0800e7c8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800e7c8:	b580      	push	{r7, lr}
 800e7ca:	b086      	sub	sp, #24
 800e7cc:	af00      	add	r7, sp, #0
 800e7ce:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800e7d0:	2300      	movs	r3, #0
 800e7d2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800e7d4:	f107 030c 	add.w	r3, r7, #12
 800e7d8:	4619      	mov	r1, r3
 800e7da:	6878      	ldr	r0, [r7, #4]
 800e7dc:	f000 fa0e 	bl	800ebfc <SD_SendStatus>
 800e7e0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e7e2:	697b      	ldr	r3, [r7, #20]
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	d005      	beq.n	800e7f4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e7ec:	697b      	ldr	r3, [r7, #20]
 800e7ee:	431a      	orrs	r2, r3
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800e7f4:	68fb      	ldr	r3, [r7, #12]
 800e7f6:	0a5b      	lsrs	r3, r3, #9
 800e7f8:	f003 030f 	and.w	r3, r3, #15
 800e7fc:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800e7fe:	693b      	ldr	r3, [r7, #16]
}
 800e800:	4618      	mov	r0, r3
 800e802:	3718      	adds	r7, #24
 800e804:	46bd      	mov	sp, r7
 800e806:	bd80      	pop	{r7, pc}

0800e808 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800e808:	b480      	push	{r7}
 800e80a:	b085      	sub	sp, #20
 800e80c:	af00      	add	r7, sp, #0
 800e80e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e814:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 800e816:	68fb      	ldr	r3, [r7, #12]
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e81c:	68fb      	ldr	r3, [r7, #12]
 800e81e:	681b      	ldr	r3, [r3, #0]
 800e820:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e824:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800e826:	bf00      	nop
 800e828:	3714      	adds	r7, #20
 800e82a:	46bd      	mov	sp, r7
 800e82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e830:	4770      	bx	lr

0800e832 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e832:	b580      	push	{r7, lr}
 800e834:	b084      	sub	sp, #16
 800e836:	af00      	add	r7, sp, #0
 800e838:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e83e:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800e840:	68fb      	ldr	r3, [r7, #12]
 800e842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e844:	2b82      	cmp	r3, #130	; 0x82
 800e846:	d111      	bne.n	800e86c <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800e848:	68fb      	ldr	r3, [r7, #12]
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	4618      	mov	r0, r3
 800e84e:	f002 fc7d 	bl	801114c <SDMMC_CmdStopTransfer>
 800e852:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e854:	68bb      	ldr	r3, [r7, #8]
 800e856:	2b00      	cmp	r3, #0
 800e858:	d008      	beq.n	800e86c <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e85e:	68bb      	ldr	r3, [r7, #8]
 800e860:	431a      	orrs	r2, r3
 800e862:	68fb      	ldr	r3, [r7, #12]
 800e864:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800e866:	68f8      	ldr	r0, [r7, #12]
 800e868:	f7ff fd3a 	bl	800e2e0 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800e86c:	68fb      	ldr	r3, [r7, #12]
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e872:	68fb      	ldr	r3, [r7, #12]
 800e874:	681b      	ldr	r3, [r3, #0]
 800e876:	f022 0208 	bic.w	r2, r2, #8
 800e87a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e87c:	68fb      	ldr	r3, [r7, #12]
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	f240 523a 	movw	r2, #1338	; 0x53a
 800e884:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800e886:	68fb      	ldr	r3, [r7, #12]
 800e888:	2201      	movs	r2, #1
 800e88a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800e88e:	68fb      	ldr	r3, [r7, #12]
 800e890:	2200      	movs	r2, #0
 800e892:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800e894:	68f8      	ldr	r0, [r7, #12]
 800e896:	f004 f829 	bl	80128ec <HAL_SD_RxCpltCallback>
#endif
}
 800e89a:	bf00      	nop
 800e89c:	3710      	adds	r7, #16
 800e89e:	46bd      	mov	sp, r7
 800e8a0:	bd80      	pop	{r7, pc}
	...

0800e8a4 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800e8a4:	b580      	push	{r7, lr}
 800e8a6:	b086      	sub	sp, #24
 800e8a8:	af00      	add	r7, sp, #0
 800e8aa:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e8b0:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800e8b2:	6878      	ldr	r0, [r7, #4]
 800e8b4:	f7f8 fb4c 	bl	8006f50 <HAL_DMA_GetError>
 800e8b8:	4603      	mov	r3, r0
 800e8ba:	2b02      	cmp	r3, #2
 800e8bc:	d03e      	beq.n	800e93c <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800e8be:	697b      	ldr	r3, [r7, #20]
 800e8c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e8c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e8c4:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800e8c6:	697b      	ldr	r3, [r7, #20]
 800e8c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e8ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e8cc:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800e8ce:	693b      	ldr	r3, [r7, #16]
 800e8d0:	2b01      	cmp	r3, #1
 800e8d2:	d002      	beq.n	800e8da <SD_DMAError+0x36>
 800e8d4:	68fb      	ldr	r3, [r7, #12]
 800e8d6:	2b01      	cmp	r3, #1
 800e8d8:	d12d      	bne.n	800e936 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e8da:	697b      	ldr	r3, [r7, #20]
 800e8dc:	681b      	ldr	r3, [r3, #0]
 800e8de:	4a19      	ldr	r2, [pc, #100]	; (800e944 <SD_DMAError+0xa0>)
 800e8e0:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800e8e2:	697b      	ldr	r3, [r7, #20]
 800e8e4:	681b      	ldr	r3, [r3, #0]
 800e8e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e8e8:	697b      	ldr	r3, [r7, #20]
 800e8ea:	681b      	ldr	r3, [r3, #0]
 800e8ec:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800e8f0:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800e8f2:	697b      	ldr	r3, [r7, #20]
 800e8f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e8f6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800e8fa:	697b      	ldr	r3, [r7, #20]
 800e8fc:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800e8fe:	6978      	ldr	r0, [r7, #20]
 800e900:	f7ff ff62 	bl	800e7c8 <HAL_SD_GetCardState>
 800e904:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800e906:	68bb      	ldr	r3, [r7, #8]
 800e908:	2b06      	cmp	r3, #6
 800e90a:	d002      	beq.n	800e912 <SD_DMAError+0x6e>
 800e90c:	68bb      	ldr	r3, [r7, #8]
 800e90e:	2b05      	cmp	r3, #5
 800e910:	d10a      	bne.n	800e928 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800e912:	697b      	ldr	r3, [r7, #20]
 800e914:	681b      	ldr	r3, [r3, #0]
 800e916:	4618      	mov	r0, r3
 800e918:	f002 fc18 	bl	801114c <SDMMC_CmdStopTransfer>
 800e91c:	4602      	mov	r2, r0
 800e91e:	697b      	ldr	r3, [r7, #20]
 800e920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e922:	431a      	orrs	r2, r3
 800e924:	697b      	ldr	r3, [r7, #20]
 800e926:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800e928:	697b      	ldr	r3, [r7, #20]
 800e92a:	2201      	movs	r2, #1
 800e92c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800e930:	697b      	ldr	r3, [r7, #20]
 800e932:	2200      	movs	r2, #0
 800e934:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800e936:	6978      	ldr	r0, [r7, #20]
 800e938:	f7ff fcd2 	bl	800e2e0 <HAL_SD_ErrorCallback>
#endif
  }
}
 800e93c:	bf00      	nop
 800e93e:	3718      	adds	r7, #24
 800e940:	46bd      	mov	sp, r7
 800e942:	bd80      	pop	{r7, pc}
 800e944:	004005ff 	.word	0x004005ff

0800e948 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800e948:	b5b0      	push	{r4, r5, r7, lr}
 800e94a:	b094      	sub	sp, #80	; 0x50
 800e94c:	af04      	add	r7, sp, #16
 800e94e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800e950:	2301      	movs	r3, #1
 800e952:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	681b      	ldr	r3, [r3, #0]
 800e958:	4618      	mov	r0, r3
 800e95a:	f002 fac9 	bl	8010ef0 <SDMMC_GetPowerState>
 800e95e:	4603      	mov	r3, r0
 800e960:	2b00      	cmp	r3, #0
 800e962:	d102      	bne.n	800e96a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e964:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800e968:	e0b6      	b.n	800ead8 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e96e:	2b03      	cmp	r3, #3
 800e970:	d02f      	beq.n	800e9d2 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	681b      	ldr	r3, [r3, #0]
 800e976:	4618      	mov	r0, r3
 800e978:	f002 fcf3 	bl	8011362 <SDMMC_CmdSendCID>
 800e97c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800e97e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e980:	2b00      	cmp	r3, #0
 800e982:	d001      	beq.n	800e988 <SD_InitCard+0x40>
    {
      return errorstate;
 800e984:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e986:	e0a7      	b.n	800ead8 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	681b      	ldr	r3, [r3, #0]
 800e98c:	2100      	movs	r1, #0
 800e98e:	4618      	mov	r0, r3
 800e990:	f002 faf3 	bl	8010f7a <SDMMC_GetResponse>
 800e994:	4602      	mov	r2, r0
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	681b      	ldr	r3, [r3, #0]
 800e99e:	2104      	movs	r1, #4
 800e9a0:	4618      	mov	r0, r3
 800e9a2:	f002 faea 	bl	8010f7a <SDMMC_GetResponse>
 800e9a6:	4602      	mov	r2, r0
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	681b      	ldr	r3, [r3, #0]
 800e9b0:	2108      	movs	r1, #8
 800e9b2:	4618      	mov	r0, r3
 800e9b4:	f002 fae1 	bl	8010f7a <SDMMC_GetResponse>
 800e9b8:	4602      	mov	r2, r0
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	210c      	movs	r1, #12
 800e9c4:	4618      	mov	r0, r3
 800e9c6:	f002 fad8 	bl	8010f7a <SDMMC_GetResponse>
 800e9ca:	4602      	mov	r2, r0
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e9d6:	2b03      	cmp	r3, #3
 800e9d8:	d00d      	beq.n	800e9f6 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	681b      	ldr	r3, [r3, #0]
 800e9de:	f107 020e 	add.w	r2, r7, #14
 800e9e2:	4611      	mov	r1, r2
 800e9e4:	4618      	mov	r0, r3
 800e9e6:	f002 fcf9 	bl	80113dc <SDMMC_CmdSetRelAdd>
 800e9ea:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800e9ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	d001      	beq.n	800e9f6 <SD_InitCard+0xae>
    {
      return errorstate;
 800e9f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e9f4:	e070      	b.n	800ead8 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e9fa:	2b03      	cmp	r3, #3
 800e9fc:	d036      	beq.n	800ea6c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800e9fe:	89fb      	ldrh	r3, [r7, #14]
 800ea00:	461a      	mov	r2, r3
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	681a      	ldr	r2, [r3, #0]
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ea0e:	041b      	lsls	r3, r3, #16
 800ea10:	4619      	mov	r1, r3
 800ea12:	4610      	mov	r0, r2
 800ea14:	f002 fcc3 	bl	801139e <SDMMC_CmdSendCSD>
 800ea18:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800ea1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d001      	beq.n	800ea24 <SD_InitCard+0xdc>
    {
      return errorstate;
 800ea20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ea22:	e059      	b.n	800ead8 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	2100      	movs	r1, #0
 800ea2a:	4618      	mov	r0, r3
 800ea2c:	f002 faa5 	bl	8010f7a <SDMMC_GetResponse>
 800ea30:	4602      	mov	r2, r0
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	681b      	ldr	r3, [r3, #0]
 800ea3a:	2104      	movs	r1, #4
 800ea3c:	4618      	mov	r0, r3
 800ea3e:	f002 fa9c 	bl	8010f7a <SDMMC_GetResponse>
 800ea42:	4602      	mov	r2, r0
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	681b      	ldr	r3, [r3, #0]
 800ea4c:	2108      	movs	r1, #8
 800ea4e:	4618      	mov	r0, r3
 800ea50:	f002 fa93 	bl	8010f7a <SDMMC_GetResponse>
 800ea54:	4602      	mov	r2, r0
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	681b      	ldr	r3, [r3, #0]
 800ea5e:	210c      	movs	r1, #12
 800ea60:	4618      	mov	r0, r3
 800ea62:	f002 fa8a 	bl	8010f7a <SDMMC_GetResponse>
 800ea66:	4602      	mov	r2, r0
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	681b      	ldr	r3, [r3, #0]
 800ea70:	2104      	movs	r1, #4
 800ea72:	4618      	mov	r0, r3
 800ea74:	f002 fa81 	bl	8010f7a <SDMMC_GetResponse>
 800ea78:	4603      	mov	r3, r0
 800ea7a:	0d1a      	lsrs	r2, r3, #20
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800ea80:	f107 0310 	add.w	r3, r7, #16
 800ea84:	4619      	mov	r1, r3
 800ea86:	6878      	ldr	r0, [r7, #4]
 800ea88:	f7ff fc34 	bl	800e2f4 <HAL_SD_GetCardCSD>
 800ea8c:	4603      	mov	r3, r0
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d002      	beq.n	800ea98 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ea92:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ea96:	e01f      	b.n	800ead8 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	6819      	ldr	r1, [r3, #0]
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eaa0:	041b      	lsls	r3, r3, #16
 800eaa2:	461a      	mov	r2, r3
 800eaa4:	f04f 0300 	mov.w	r3, #0
 800eaa8:	4608      	mov	r0, r1
 800eaaa:	f002 fb71 	bl	8011190 <SDMMC_CmdSelDesel>
 800eaae:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800eab0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d001      	beq.n	800eaba <SD_InitCard+0x172>
  {
    return errorstate;
 800eab6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eab8:	e00e      	b.n	800ead8 <SD_InitCard+0x190>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	681d      	ldr	r5, [r3, #0]
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	466c      	mov	r4, sp
 800eac2:	f103 0210 	add.w	r2, r3, #16
 800eac6:	ca07      	ldmia	r2, {r0, r1, r2}
 800eac8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800eacc:	3304      	adds	r3, #4
 800eace:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ead0:	4628      	mov	r0, r5
 800ead2:	f002 f9c5 	bl	8010e60 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800ead6:	2300      	movs	r3, #0
}
 800ead8:	4618      	mov	r0, r3
 800eada:	3740      	adds	r7, #64	; 0x40
 800eadc:	46bd      	mov	sp, r7
 800eade:	bdb0      	pop	{r4, r5, r7, pc}

0800eae0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800eae0:	b580      	push	{r7, lr}
 800eae2:	b086      	sub	sp, #24
 800eae4:	af00      	add	r7, sp, #0
 800eae6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800eae8:	2300      	movs	r3, #0
 800eaea:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800eaec:	2300      	movs	r3, #0
 800eaee:	617b      	str	r3, [r7, #20]
 800eaf0:	2300      	movs	r3, #0
 800eaf2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	681b      	ldr	r3, [r3, #0]
 800eaf8:	4618      	mov	r0, r3
 800eafa:	f002 fb6c 	bl	80111d6 <SDMMC_CmdGoIdleState>
 800eafe:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800eb00:	68fb      	ldr	r3, [r7, #12]
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d001      	beq.n	800eb0a <SD_PowerON+0x2a>
  {
    return errorstate;
 800eb06:	68fb      	ldr	r3, [r7, #12]
 800eb08:	e072      	b.n	800ebf0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	681b      	ldr	r3, [r3, #0]
 800eb0e:	4618      	mov	r0, r3
 800eb10:	f002 fb7f 	bl	8011212 <SDMMC_CmdOperCond>
 800eb14:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800eb16:	68fb      	ldr	r3, [r7, #12]
 800eb18:	2b00      	cmp	r3, #0
 800eb1a:	d00d      	beq.n	800eb38 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	2200      	movs	r2, #0
 800eb20:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	681b      	ldr	r3, [r3, #0]
 800eb26:	4618      	mov	r0, r3
 800eb28:	f002 fb55 	bl	80111d6 <SDMMC_CmdGoIdleState>
 800eb2c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800eb2e:	68fb      	ldr	r3, [r7, #12]
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	d004      	beq.n	800eb3e <SD_PowerON+0x5e>
    {
      return errorstate;
 800eb34:	68fb      	ldr	r3, [r7, #12]
 800eb36:	e05b      	b.n	800ebf0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	2201      	movs	r2, #1
 800eb3c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800eb42:	2b01      	cmp	r3, #1
 800eb44:	d137      	bne.n	800ebb6 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	681b      	ldr	r3, [r3, #0]
 800eb4a:	2100      	movs	r1, #0
 800eb4c:	4618      	mov	r0, r3
 800eb4e:	f002 fb7f 	bl	8011250 <SDMMC_CmdAppCommand>
 800eb52:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800eb54:	68fb      	ldr	r3, [r7, #12]
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	d02d      	beq.n	800ebb6 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800eb5a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800eb5e:	e047      	b.n	800ebf0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	681b      	ldr	r3, [r3, #0]
 800eb64:	2100      	movs	r1, #0
 800eb66:	4618      	mov	r0, r3
 800eb68:	f002 fb72 	bl	8011250 <SDMMC_CmdAppCommand>
 800eb6c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800eb6e:	68fb      	ldr	r3, [r7, #12]
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	d001      	beq.n	800eb78 <SD_PowerON+0x98>
    {
      return errorstate;
 800eb74:	68fb      	ldr	r3, [r7, #12]
 800eb76:	e03b      	b.n	800ebf0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	681b      	ldr	r3, [r3, #0]
 800eb7c:	491e      	ldr	r1, [pc, #120]	; (800ebf8 <SD_PowerON+0x118>)
 800eb7e:	4618      	mov	r0, r3
 800eb80:	f002 fb88 	bl	8011294 <SDMMC_CmdAppOperCommand>
 800eb84:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800eb86:	68fb      	ldr	r3, [r7, #12]
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d002      	beq.n	800eb92 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800eb8c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800eb90:	e02e      	b.n	800ebf0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	681b      	ldr	r3, [r3, #0]
 800eb96:	2100      	movs	r1, #0
 800eb98:	4618      	mov	r0, r3
 800eb9a:	f002 f9ee 	bl	8010f7a <SDMMC_GetResponse>
 800eb9e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800eba0:	697b      	ldr	r3, [r7, #20]
 800eba2:	0fdb      	lsrs	r3, r3, #31
 800eba4:	2b01      	cmp	r3, #1
 800eba6:	d101      	bne.n	800ebac <SD_PowerON+0xcc>
 800eba8:	2301      	movs	r3, #1
 800ebaa:	e000      	b.n	800ebae <SD_PowerON+0xce>
 800ebac:	2300      	movs	r3, #0
 800ebae:	613b      	str	r3, [r7, #16]

    count++;
 800ebb0:	68bb      	ldr	r3, [r7, #8]
 800ebb2:	3301      	adds	r3, #1
 800ebb4:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800ebb6:	68bb      	ldr	r3, [r7, #8]
 800ebb8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800ebbc:	4293      	cmp	r3, r2
 800ebbe:	d802      	bhi.n	800ebc6 <SD_PowerON+0xe6>
 800ebc0:	693b      	ldr	r3, [r7, #16]
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	d0cc      	beq.n	800eb60 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800ebc6:	68bb      	ldr	r3, [r7, #8]
 800ebc8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800ebcc:	4293      	cmp	r3, r2
 800ebce:	d902      	bls.n	800ebd6 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800ebd0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ebd4:	e00c      	b.n	800ebf0 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800ebd6:	697b      	ldr	r3, [r7, #20]
 800ebd8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	d003      	beq.n	800ebe8 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	2201      	movs	r2, #1
 800ebe4:	645a      	str	r2, [r3, #68]	; 0x44
 800ebe6:	e002      	b.n	800ebee <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	2200      	movs	r2, #0
 800ebec:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800ebee:	2300      	movs	r3, #0
}
 800ebf0:	4618      	mov	r0, r3
 800ebf2:	3718      	adds	r7, #24
 800ebf4:	46bd      	mov	sp, r7
 800ebf6:	bd80      	pop	{r7, pc}
 800ebf8:	c1100000 	.word	0xc1100000

0800ebfc <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800ebfc:	b580      	push	{r7, lr}
 800ebfe:	b084      	sub	sp, #16
 800ec00:	af00      	add	r7, sp, #0
 800ec02:	6078      	str	r0, [r7, #4]
 800ec04:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800ec06:	683b      	ldr	r3, [r7, #0]
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	d102      	bne.n	800ec12 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800ec0c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ec10:	e018      	b.n	800ec44 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	681a      	ldr	r2, [r3, #0]
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ec1a:	041b      	lsls	r3, r3, #16
 800ec1c:	4619      	mov	r1, r3
 800ec1e:	4610      	mov	r0, r2
 800ec20:	f002 fbfd 	bl	801141e <SDMMC_CmdSendStatus>
 800ec24:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ec26:	68fb      	ldr	r3, [r7, #12]
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	d001      	beq.n	800ec30 <SD_SendStatus+0x34>
  {
    return errorstate;
 800ec2c:	68fb      	ldr	r3, [r7, #12]
 800ec2e:	e009      	b.n	800ec44 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	681b      	ldr	r3, [r3, #0]
 800ec34:	2100      	movs	r1, #0
 800ec36:	4618      	mov	r0, r3
 800ec38:	f002 f99f 	bl	8010f7a <SDMMC_GetResponse>
 800ec3c:	4602      	mov	r2, r0
 800ec3e:	683b      	ldr	r3, [r7, #0]
 800ec40:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800ec42:	2300      	movs	r3, #0
}
 800ec44:	4618      	mov	r0, r3
 800ec46:	3710      	adds	r7, #16
 800ec48:	46bd      	mov	sp, r7
 800ec4a:	bd80      	pop	{r7, pc}

0800ec4c <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800ec4c:	b580      	push	{r7, lr}
 800ec4e:	b086      	sub	sp, #24
 800ec50:	af00      	add	r7, sp, #0
 800ec52:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800ec54:	2300      	movs	r3, #0
 800ec56:	60fb      	str	r3, [r7, #12]
 800ec58:	2300      	movs	r3, #0
 800ec5a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	681b      	ldr	r3, [r3, #0]
 800ec60:	2100      	movs	r1, #0
 800ec62:	4618      	mov	r0, r3
 800ec64:	f002 f989 	bl	8010f7a <SDMMC_GetResponse>
 800ec68:	4603      	mov	r3, r0
 800ec6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ec6e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ec72:	d102      	bne.n	800ec7a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800ec74:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ec78:	e02f      	b.n	800ecda <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800ec7a:	f107 030c 	add.w	r3, r7, #12
 800ec7e:	4619      	mov	r1, r3
 800ec80:	6878      	ldr	r0, [r7, #4]
 800ec82:	f000 f879 	bl	800ed78 <SD_FindSCR>
 800ec86:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ec88:	697b      	ldr	r3, [r7, #20]
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	d001      	beq.n	800ec92 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800ec8e:	697b      	ldr	r3, [r7, #20]
 800ec90:	e023      	b.n	800ecda <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800ec92:	693b      	ldr	r3, [r7, #16]
 800ec94:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	d01c      	beq.n	800ecd6 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	681a      	ldr	r2, [r3, #0]
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eca4:	041b      	lsls	r3, r3, #16
 800eca6:	4619      	mov	r1, r3
 800eca8:	4610      	mov	r0, r2
 800ecaa:	f002 fad1 	bl	8011250 <SDMMC_CmdAppCommand>
 800ecae:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ecb0:	697b      	ldr	r3, [r7, #20]
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	d001      	beq.n	800ecba <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800ecb6:	697b      	ldr	r3, [r7, #20]
 800ecb8:	e00f      	b.n	800ecda <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	681b      	ldr	r3, [r3, #0]
 800ecbe:	2102      	movs	r1, #2
 800ecc0:	4618      	mov	r0, r3
 800ecc2:	f002 fb0b 	bl	80112dc <SDMMC_CmdBusWidth>
 800ecc6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ecc8:	697b      	ldr	r3, [r7, #20]
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	d001      	beq.n	800ecd2 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800ecce:	697b      	ldr	r3, [r7, #20]
 800ecd0:	e003      	b.n	800ecda <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800ecd2:	2300      	movs	r3, #0
 800ecd4:	e001      	b.n	800ecda <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800ecd6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800ecda:	4618      	mov	r0, r3
 800ecdc:	3718      	adds	r7, #24
 800ecde:	46bd      	mov	sp, r7
 800ece0:	bd80      	pop	{r7, pc}

0800ece2 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800ece2:	b580      	push	{r7, lr}
 800ece4:	b086      	sub	sp, #24
 800ece6:	af00      	add	r7, sp, #0
 800ece8:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800ecea:	2300      	movs	r3, #0
 800ecec:	60fb      	str	r3, [r7, #12]
 800ecee:	2300      	movs	r3, #0
 800ecf0:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	681b      	ldr	r3, [r3, #0]
 800ecf6:	2100      	movs	r1, #0
 800ecf8:	4618      	mov	r0, r3
 800ecfa:	f002 f93e 	bl	8010f7a <SDMMC_GetResponse>
 800ecfe:	4603      	mov	r3, r0
 800ed00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ed04:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ed08:	d102      	bne.n	800ed10 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800ed0a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ed0e:	e02f      	b.n	800ed70 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800ed10:	f107 030c 	add.w	r3, r7, #12
 800ed14:	4619      	mov	r1, r3
 800ed16:	6878      	ldr	r0, [r7, #4]
 800ed18:	f000 f82e 	bl	800ed78 <SD_FindSCR>
 800ed1c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ed1e:	697b      	ldr	r3, [r7, #20]
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	d001      	beq.n	800ed28 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800ed24:	697b      	ldr	r3, [r7, #20]
 800ed26:	e023      	b.n	800ed70 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800ed28:	693b      	ldr	r3, [r7, #16]
 800ed2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	d01c      	beq.n	800ed6c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	681a      	ldr	r2, [r3, #0]
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ed3a:	041b      	lsls	r3, r3, #16
 800ed3c:	4619      	mov	r1, r3
 800ed3e:	4610      	mov	r0, r2
 800ed40:	f002 fa86 	bl	8011250 <SDMMC_CmdAppCommand>
 800ed44:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ed46:	697b      	ldr	r3, [r7, #20]
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d001      	beq.n	800ed50 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800ed4c:	697b      	ldr	r3, [r7, #20]
 800ed4e:	e00f      	b.n	800ed70 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	681b      	ldr	r3, [r3, #0]
 800ed54:	2100      	movs	r1, #0
 800ed56:	4618      	mov	r0, r3
 800ed58:	f002 fac0 	bl	80112dc <SDMMC_CmdBusWidth>
 800ed5c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ed5e:	697b      	ldr	r3, [r7, #20]
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	d001      	beq.n	800ed68 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800ed64:	697b      	ldr	r3, [r7, #20]
 800ed66:	e003      	b.n	800ed70 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800ed68:	2300      	movs	r3, #0
 800ed6a:	e001      	b.n	800ed70 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800ed6c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800ed70:	4618      	mov	r0, r3
 800ed72:	3718      	adds	r7, #24
 800ed74:	46bd      	mov	sp, r7
 800ed76:	bd80      	pop	{r7, pc}

0800ed78 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800ed78:	b590      	push	{r4, r7, lr}
 800ed7a:	b08f      	sub	sp, #60	; 0x3c
 800ed7c:	af00      	add	r7, sp, #0
 800ed7e:	6078      	str	r0, [r7, #4]
 800ed80:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800ed82:	f7f6 ffbb 	bl	8005cfc <HAL_GetTick>
 800ed86:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800ed88:	2300      	movs	r3, #0
 800ed8a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800ed8c:	2300      	movs	r3, #0
 800ed8e:	60bb      	str	r3, [r7, #8]
 800ed90:	2300      	movs	r3, #0
 800ed92:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800ed94:	683b      	ldr	r3, [r7, #0]
 800ed96:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	681b      	ldr	r3, [r3, #0]
 800ed9c:	2108      	movs	r1, #8
 800ed9e:	4618      	mov	r0, r3
 800eda0:	f002 f92a 	bl	8010ff8 <SDMMC_CmdBlockLength>
 800eda4:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800eda6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	d001      	beq.n	800edb0 <SD_FindSCR+0x38>
  {
    return errorstate;
 800edac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edae:	e0b2      	b.n	800ef16 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	681a      	ldr	r2, [r3, #0]
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800edb8:	041b      	lsls	r3, r3, #16
 800edba:	4619      	mov	r1, r3
 800edbc:	4610      	mov	r0, r2
 800edbe:	f002 fa47 	bl	8011250 <SDMMC_CmdAppCommand>
 800edc2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800edc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d001      	beq.n	800edce <SD_FindSCR+0x56>
  {
    return errorstate;
 800edca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edcc:	e0a3      	b.n	800ef16 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800edce:	f04f 33ff 	mov.w	r3, #4294967295
 800edd2:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800edd4:	2308      	movs	r3, #8
 800edd6:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800edd8:	2330      	movs	r3, #48	; 0x30
 800edda:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800eddc:	2302      	movs	r3, #2
 800edde:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800ede0:	2300      	movs	r3, #0
 800ede2:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800ede4:	2301      	movs	r3, #1
 800ede6:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	681b      	ldr	r3, [r3, #0]
 800edec:	f107 0210 	add.w	r2, r7, #16
 800edf0:	4611      	mov	r1, r2
 800edf2:	4618      	mov	r0, r3
 800edf4:	f002 f8d4 	bl	8010fa0 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	681b      	ldr	r3, [r3, #0]
 800edfc:	4618      	mov	r0, r3
 800edfe:	f002 fa8f 	bl	8011320 <SDMMC_CmdSendSCR>
 800ee02:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800ee04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	d02a      	beq.n	800ee60 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800ee0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee0c:	e083      	b.n	800ef16 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	681b      	ldr	r3, [r3, #0]
 800ee12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ee14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	d00f      	beq.n	800ee3c <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	6819      	ldr	r1, [r3, #0]
 800ee20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ee22:	009b      	lsls	r3, r3, #2
 800ee24:	f107 0208 	add.w	r2, r7, #8
 800ee28:	18d4      	adds	r4, r2, r3
 800ee2a:	4608      	mov	r0, r1
 800ee2c:	f002 f844 	bl	8010eb8 <SDMMC_ReadFIFO>
 800ee30:	4603      	mov	r3, r0
 800ee32:	6023      	str	r3, [r4, #0]
      index++;
 800ee34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ee36:	3301      	adds	r3, #1
 800ee38:	637b      	str	r3, [r7, #52]	; 0x34
 800ee3a:	e006      	b.n	800ee4a <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	681b      	ldr	r3, [r3, #0]
 800ee40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ee42:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	d012      	beq.n	800ee70 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800ee4a:	f7f6 ff57 	bl	8005cfc <HAL_GetTick>
 800ee4e:	4602      	mov	r2, r0
 800ee50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee52:	1ad3      	subs	r3, r2, r3
 800ee54:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee58:	d102      	bne.n	800ee60 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800ee5a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ee5e:	e05a      	b.n	800ef16 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	681b      	ldr	r3, [r3, #0]
 800ee64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ee66:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	d0cf      	beq.n	800ee0e <SD_FindSCR+0x96>
 800ee6e:	e000      	b.n	800ee72 <SD_FindSCR+0xfa>
      break;
 800ee70:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	681b      	ldr	r3, [r3, #0]
 800ee76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ee78:	f003 0308 	and.w	r3, r3, #8
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	d005      	beq.n	800ee8c <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	681b      	ldr	r3, [r3, #0]
 800ee84:	2208      	movs	r2, #8
 800ee86:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800ee88:	2308      	movs	r3, #8
 800ee8a:	e044      	b.n	800ef16 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	681b      	ldr	r3, [r3, #0]
 800ee90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ee92:	f003 0302 	and.w	r3, r3, #2
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d005      	beq.n	800eea6 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	681b      	ldr	r3, [r3, #0]
 800ee9e:	2202      	movs	r2, #2
 800eea0:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800eea2:	2302      	movs	r3, #2
 800eea4:	e037      	b.n	800ef16 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	681b      	ldr	r3, [r3, #0]
 800eeaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eeac:	f003 0320 	and.w	r3, r3, #32
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	d005      	beq.n	800eec0 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	681b      	ldr	r3, [r3, #0]
 800eeb8:	2220      	movs	r2, #32
 800eeba:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800eebc:	2320      	movs	r3, #32
 800eebe:	e02a      	b.n	800ef16 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	681b      	ldr	r3, [r3, #0]
 800eec4:	f240 523a 	movw	r2, #1338	; 0x53a
 800eec8:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800eeca:	68fb      	ldr	r3, [r7, #12]
 800eecc:	061a      	lsls	r2, r3, #24
 800eece:	68fb      	ldr	r3, [r7, #12]
 800eed0:	021b      	lsls	r3, r3, #8
 800eed2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800eed6:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800eed8:	68fb      	ldr	r3, [r7, #12]
 800eeda:	0a1b      	lsrs	r3, r3, #8
 800eedc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800eee0:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800eee2:	68fb      	ldr	r3, [r7, #12]
 800eee4:	0e1b      	lsrs	r3, r3, #24
 800eee6:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800eee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eeea:	601a      	str	r2, [r3, #0]
    scr++;
 800eeec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eeee:	3304      	adds	r3, #4
 800eef0:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800eef2:	68bb      	ldr	r3, [r7, #8]
 800eef4:	061a      	lsls	r2, r3, #24
 800eef6:	68bb      	ldr	r3, [r7, #8]
 800eef8:	021b      	lsls	r3, r3, #8
 800eefa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800eefe:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800ef00:	68bb      	ldr	r3, [r7, #8]
 800ef02:	0a1b      	lsrs	r3, r3, #8
 800ef04:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800ef08:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800ef0a:	68bb      	ldr	r3, [r7, #8]
 800ef0c:	0e1b      	lsrs	r3, r3, #24
 800ef0e:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800ef10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef12:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800ef14:	2300      	movs	r3, #0
}
 800ef16:	4618      	mov	r0, r3
 800ef18:	373c      	adds	r7, #60	; 0x3c
 800ef1a:	46bd      	mov	sp, r7
 800ef1c:	bd90      	pop	{r4, r7, pc}

0800ef1e <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 800ef1e:	b580      	push	{r7, lr}
 800ef20:	b082      	sub	sp, #8
 800ef22:	af00      	add	r7, sp, #0
 800ef24:	6078      	str	r0, [r7, #4]
 800ef26:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	d101      	bne.n	800ef32 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800ef2e:	2301      	movs	r3, #1
 800ef30:	e025      	b.n	800ef7e <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800ef38:	b2db      	uxtb	r3, r3
 800ef3a:	2b00      	cmp	r3, #0
 800ef3c:	d106      	bne.n	800ef4c <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	2200      	movs	r2, #0
 800ef42:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800ef46:	6878      	ldr	r0, [r7, #4]
 800ef48:	f7f4 fde2 	bl	8003b10 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	2202      	movs	r2, #2
 800ef50:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	681a      	ldr	r2, [r3, #0]
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	3304      	adds	r3, #4
 800ef5c:	4619      	mov	r1, r3
 800ef5e:	4610      	mov	r0, r2
 800ef60:	f001 fe54 	bl	8010c0c <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	6818      	ldr	r0, [r3, #0]
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	685b      	ldr	r3, [r3, #4]
 800ef6c:	461a      	mov	r2, r3
 800ef6e:	6839      	ldr	r1, [r7, #0]
 800ef70:	f001 febe 	bl	8010cf0 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	2201      	movs	r2, #1
 800ef78:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 800ef7c:	2300      	movs	r3, #0
}
 800ef7e:	4618      	mov	r0, r3
 800ef80:	3708      	adds	r7, #8
 800ef82:	46bd      	mov	sp, r7
 800ef84:	bd80      	pop	{r7, pc}

0800ef86 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800ef86:	b580      	push	{r7, lr}
 800ef88:	b084      	sub	sp, #16
 800ef8a:	af00      	add	r7, sp, #0
 800ef8c:	60f8      	str	r0, [r7, #12]
 800ef8e:	60b9      	str	r1, [r7, #8]
 800ef90:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800ef92:	68fb      	ldr	r3, [r7, #12]
 800ef94:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800ef98:	b2db      	uxtb	r3, r3
 800ef9a:	2b02      	cmp	r3, #2
 800ef9c:	d101      	bne.n	800efa2 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 800ef9e:	2302      	movs	r3, #2
 800efa0:	e018      	b.n	800efd4 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800efa2:	68fb      	ldr	r3, [r7, #12]
 800efa4:	2202      	movs	r2, #2
 800efa6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800efaa:	68fb      	ldr	r3, [r7, #12]
 800efac:	681b      	ldr	r3, [r3, #0]
 800efae:	687a      	ldr	r2, [r7, #4]
 800efb0:	68b9      	ldr	r1, [r7, #8]
 800efb2:	4618      	mov	r0, r3
 800efb4:	f001 ff1c 	bl	8010df0 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800efb8:	68bb      	ldr	r3, [r7, #8]
 800efba:	681b      	ldr	r3, [r3, #0]
 800efbc:	2b02      	cmp	r3, #2
 800efbe:	d104      	bne.n	800efca <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800efc0:	68fb      	ldr	r3, [r7, #12]
 800efc2:	2205      	movs	r2, #5
 800efc4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800efc8:	e003      	b.n	800efd2 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 800efca:	68fb      	ldr	r3, [r7, #12]
 800efcc:	2201      	movs	r2, #1
 800efce:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 800efd2:	2300      	movs	r3, #0
}
 800efd4:	4618      	mov	r0, r3
 800efd6:	3710      	adds	r7, #16
 800efd8:	46bd      	mov	sp, r7
 800efda:	bd80      	pop	{r7, pc}

0800efdc <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800efdc:	b580      	push	{r7, lr}
 800efde:	b082      	sub	sp, #8
 800efe0:	af00      	add	r7, sp, #0
 800efe2:	6078      	str	r0, [r7, #4]
 800efe4:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800efec:	b2db      	uxtb	r3, r3
 800efee:	2b02      	cmp	r3, #2
 800eff0:	d101      	bne.n	800eff6 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800eff2:	2302      	movs	r3, #2
 800eff4:	e00e      	b.n	800f014 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	2202      	movs	r2, #2
 800effa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	681b      	ldr	r3, [r3, #0]
 800f002:	6839      	ldr	r1, [r7, #0]
 800f004:	4618      	mov	r0, r3
 800f006:	f001 ff17 	bl	8010e38 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	2201      	movs	r2, #1
 800f00e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 800f012:	2300      	movs	r3, #0
}
 800f014:	4618      	mov	r0, r3
 800f016:	3708      	adds	r7, #8
 800f018:	46bd      	mov	sp, r7
 800f01a:	bd80      	pop	{r7, pc}

0800f01c <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 800f01c:	b580      	push	{r7, lr}
 800f01e:	b084      	sub	sp, #16
 800f020:	af00      	add	r7, sp, #0
 800f022:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if(hspdif == NULL)
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	2b00      	cmp	r3, #0
 800f028:	d101      	bne.n	800f02e <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 800f02a:	2301      	movs	r3, #1
 800f02c:	e04c      	b.n	800f0c8 <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if(hspdif->State == HAL_SPDIFRX_STATE_RESET)
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f034:	b2db      	uxtb	r3, r3
 800f036:	2b00      	cmp	r3, #0
 800f038:	d106      	bne.n	800f048 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	2200      	movs	r2, #0
 800f03e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 800f042:	6878      	ldr	r0, [r7, #4]
 800f044:	f7f4 fa98 	bl	8003578 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	2202      	movs	r2, #2
 800f04c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	681b      	ldr	r3, [r3, #0]
 800f054:	681a      	ldr	r2, [r3, #0]
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	681b      	ldr	r3, [r3, #0]
 800f05a:	f022 0203 	bic.w	r2, r2, #3
 800f05e:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	681b      	ldr	r3, [r3, #0]
 800f064:	681b      	ldr	r3, [r3, #0]
 800f066:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 800f068:	68fa      	ldr	r2, [r7, #12]
 800f06a:	4b19      	ldr	r3, [pc, #100]	; (800f0d0 <HAL_SPDIFRX_Init+0xb4>)
 800f06c:	4013      	ands	r3, r2
 800f06e:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 800f078:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 800f07e:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 800f084:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 800f08a:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 800f090:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 800f096:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 800f09c:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 800f0a2:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 800f0a8:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 800f0aa:	68fa      	ldr	r2, [r7, #12]
 800f0ac:	4313      	orrs	r3, r2
 800f0ae:	60fb      	str	r3, [r7, #12]
             );


  hspdif->Instance->CR = tmpreg;
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	681b      	ldr	r3, [r3, #0]
 800f0b4:	68fa      	ldr	r2, [r7, #12]
 800f0b6:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	2200      	movs	r2, #0
 800f0bc:	649a      	str	r2, [r3, #72]	; 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	2201      	movs	r2, #1
 800f0c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 800f0c6:	2300      	movs	r3, #0
}
 800f0c8:	4618      	mov	r0, r3
 800f0ca:	3710      	adds	r7, #16
 800f0cc:	46bd      	mov	sp, r7
 800f0ce:	bd80      	pop	{r7, pc}
 800f0d0:	fff88407 	.word	0xfff88407

0800f0d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800f0d4:	b580      	push	{r7, lr}
 800f0d6:	b082      	sub	sp, #8
 800f0d8:	af00      	add	r7, sp, #0
 800f0da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	2b00      	cmp	r3, #0
 800f0e0:	d101      	bne.n	800f0e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800f0e2:	2301      	movs	r3, #1
 800f0e4:	e049      	b.n	800f17a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f0ec:	b2db      	uxtb	r3, r3
 800f0ee:	2b00      	cmp	r3, #0
 800f0f0:	d106      	bne.n	800f100 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	2200      	movs	r2, #0
 800f0f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800f0fa:	6878      	ldr	r0, [r7, #4]
 800f0fc:	f7f4 fa7e 	bl	80035fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	2202      	movs	r2, #2
 800f104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	681a      	ldr	r2, [r3, #0]
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	3304      	adds	r3, #4
 800f110:	4619      	mov	r1, r3
 800f112:	4610      	mov	r0, r2
 800f114:	f000 fc22 	bl	800f95c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	2201      	movs	r2, #1
 800f11c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	2201      	movs	r2, #1
 800f124:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	2201      	movs	r2, #1
 800f12c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	2201      	movs	r2, #1
 800f134:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	2201      	movs	r2, #1
 800f13c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	2201      	movs	r2, #1
 800f144:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	2201      	movs	r2, #1
 800f14c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	2201      	movs	r2, #1
 800f154:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	2201      	movs	r2, #1
 800f15c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	2201      	movs	r2, #1
 800f164:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	2201      	movs	r2, #1
 800f16c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	2201      	movs	r2, #1
 800f174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f178:	2300      	movs	r3, #0
}
 800f17a:	4618      	mov	r0, r3
 800f17c:	3708      	adds	r7, #8
 800f17e:	46bd      	mov	sp, r7
 800f180:	bd80      	pop	{r7, pc}
	...

0800f184 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800f184:	b480      	push	{r7}
 800f186:	b085      	sub	sp, #20
 800f188:	af00      	add	r7, sp, #0
 800f18a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f192:	b2db      	uxtb	r3, r3
 800f194:	2b01      	cmp	r3, #1
 800f196:	d001      	beq.n	800f19c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800f198:	2301      	movs	r3, #1
 800f19a:	e054      	b.n	800f246 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	2202      	movs	r2, #2
 800f1a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	681b      	ldr	r3, [r3, #0]
 800f1a8:	68da      	ldr	r2, [r3, #12]
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	681b      	ldr	r3, [r3, #0]
 800f1ae:	f042 0201 	orr.w	r2, r2, #1
 800f1b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	681b      	ldr	r3, [r3, #0]
 800f1b8:	4a26      	ldr	r2, [pc, #152]	; (800f254 <HAL_TIM_Base_Start_IT+0xd0>)
 800f1ba:	4293      	cmp	r3, r2
 800f1bc:	d022      	beq.n	800f204 <HAL_TIM_Base_Start_IT+0x80>
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	681b      	ldr	r3, [r3, #0]
 800f1c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f1c6:	d01d      	beq.n	800f204 <HAL_TIM_Base_Start_IT+0x80>
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	681b      	ldr	r3, [r3, #0]
 800f1cc:	4a22      	ldr	r2, [pc, #136]	; (800f258 <HAL_TIM_Base_Start_IT+0xd4>)
 800f1ce:	4293      	cmp	r3, r2
 800f1d0:	d018      	beq.n	800f204 <HAL_TIM_Base_Start_IT+0x80>
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	681b      	ldr	r3, [r3, #0]
 800f1d6:	4a21      	ldr	r2, [pc, #132]	; (800f25c <HAL_TIM_Base_Start_IT+0xd8>)
 800f1d8:	4293      	cmp	r3, r2
 800f1da:	d013      	beq.n	800f204 <HAL_TIM_Base_Start_IT+0x80>
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	681b      	ldr	r3, [r3, #0]
 800f1e0:	4a1f      	ldr	r2, [pc, #124]	; (800f260 <HAL_TIM_Base_Start_IT+0xdc>)
 800f1e2:	4293      	cmp	r3, r2
 800f1e4:	d00e      	beq.n	800f204 <HAL_TIM_Base_Start_IT+0x80>
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	681b      	ldr	r3, [r3, #0]
 800f1ea:	4a1e      	ldr	r2, [pc, #120]	; (800f264 <HAL_TIM_Base_Start_IT+0xe0>)
 800f1ec:	4293      	cmp	r3, r2
 800f1ee:	d009      	beq.n	800f204 <HAL_TIM_Base_Start_IT+0x80>
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	681b      	ldr	r3, [r3, #0]
 800f1f4:	4a1c      	ldr	r2, [pc, #112]	; (800f268 <HAL_TIM_Base_Start_IT+0xe4>)
 800f1f6:	4293      	cmp	r3, r2
 800f1f8:	d004      	beq.n	800f204 <HAL_TIM_Base_Start_IT+0x80>
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	681b      	ldr	r3, [r3, #0]
 800f1fe:	4a1b      	ldr	r2, [pc, #108]	; (800f26c <HAL_TIM_Base_Start_IT+0xe8>)
 800f200:	4293      	cmp	r3, r2
 800f202:	d115      	bne.n	800f230 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	681b      	ldr	r3, [r3, #0]
 800f208:	689a      	ldr	r2, [r3, #8]
 800f20a:	4b19      	ldr	r3, [pc, #100]	; (800f270 <HAL_TIM_Base_Start_IT+0xec>)
 800f20c:	4013      	ands	r3, r2
 800f20e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f210:	68fb      	ldr	r3, [r7, #12]
 800f212:	2b06      	cmp	r3, #6
 800f214:	d015      	beq.n	800f242 <HAL_TIM_Base_Start_IT+0xbe>
 800f216:	68fb      	ldr	r3, [r7, #12]
 800f218:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f21c:	d011      	beq.n	800f242 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	681b      	ldr	r3, [r3, #0]
 800f222:	681a      	ldr	r2, [r3, #0]
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	681b      	ldr	r3, [r3, #0]
 800f228:	f042 0201 	orr.w	r2, r2, #1
 800f22c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f22e:	e008      	b.n	800f242 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	681b      	ldr	r3, [r3, #0]
 800f234:	681a      	ldr	r2, [r3, #0]
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	681b      	ldr	r3, [r3, #0]
 800f23a:	f042 0201 	orr.w	r2, r2, #1
 800f23e:	601a      	str	r2, [r3, #0]
 800f240:	e000      	b.n	800f244 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f242:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800f244:	2300      	movs	r3, #0
}
 800f246:	4618      	mov	r0, r3
 800f248:	3714      	adds	r7, #20
 800f24a:	46bd      	mov	sp, r7
 800f24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f250:	4770      	bx	lr
 800f252:	bf00      	nop
 800f254:	40010000 	.word	0x40010000
 800f258:	40000400 	.word	0x40000400
 800f25c:	40000800 	.word	0x40000800
 800f260:	40000c00 	.word	0x40000c00
 800f264:	40010400 	.word	0x40010400
 800f268:	40014000 	.word	0x40014000
 800f26c:	40001800 	.word	0x40001800
 800f270:	00010007 	.word	0x00010007

0800f274 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800f274:	b580      	push	{r7, lr}
 800f276:	b082      	sub	sp, #8
 800f278:	af00      	add	r7, sp, #0
 800f27a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	2b00      	cmp	r3, #0
 800f280:	d101      	bne.n	800f286 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800f282:	2301      	movs	r3, #1
 800f284:	e049      	b.n	800f31a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f28c:	b2db      	uxtb	r3, r3
 800f28e:	2b00      	cmp	r3, #0
 800f290:	d106      	bne.n	800f2a0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	2200      	movs	r2, #0
 800f296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800f29a:	6878      	ldr	r0, [r7, #4]
 800f29c:	f7f4 fa1c 	bl	80036d8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	2202      	movs	r2, #2
 800f2a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	681a      	ldr	r2, [r3, #0]
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	3304      	adds	r3, #4
 800f2b0:	4619      	mov	r1, r3
 800f2b2:	4610      	mov	r0, r2
 800f2b4:	f000 fb52 	bl	800f95c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	2201      	movs	r2, #1
 800f2bc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	2201      	movs	r2, #1
 800f2c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	2201      	movs	r2, #1
 800f2cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	2201      	movs	r2, #1
 800f2d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	2201      	movs	r2, #1
 800f2dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	2201      	movs	r2, #1
 800f2e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	2201      	movs	r2, #1
 800f2ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	2201      	movs	r2, #1
 800f2f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	2201      	movs	r2, #1
 800f2fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	2201      	movs	r2, #1
 800f304:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	2201      	movs	r2, #1
 800f30c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	2201      	movs	r2, #1
 800f314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f318:	2300      	movs	r3, #0
}
 800f31a:	4618      	mov	r0, r3
 800f31c:	3708      	adds	r7, #8
 800f31e:	46bd      	mov	sp, r7
 800f320:	bd80      	pop	{r7, pc}

0800f322 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800f322:	b580      	push	{r7, lr}
 800f324:	b082      	sub	sp, #8
 800f326:	af00      	add	r7, sp, #0
 800f328:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	681b      	ldr	r3, [r3, #0]
 800f32e:	691b      	ldr	r3, [r3, #16]
 800f330:	f003 0302 	and.w	r3, r3, #2
 800f334:	2b02      	cmp	r3, #2
 800f336:	d122      	bne.n	800f37e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	681b      	ldr	r3, [r3, #0]
 800f33c:	68db      	ldr	r3, [r3, #12]
 800f33e:	f003 0302 	and.w	r3, r3, #2
 800f342:	2b02      	cmp	r3, #2
 800f344:	d11b      	bne.n	800f37e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	681b      	ldr	r3, [r3, #0]
 800f34a:	f06f 0202 	mvn.w	r2, #2
 800f34e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	2201      	movs	r2, #1
 800f354:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	681b      	ldr	r3, [r3, #0]
 800f35a:	699b      	ldr	r3, [r3, #24]
 800f35c:	f003 0303 	and.w	r3, r3, #3
 800f360:	2b00      	cmp	r3, #0
 800f362:	d003      	beq.n	800f36c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800f364:	6878      	ldr	r0, [r7, #4]
 800f366:	f000 fadb 	bl	800f920 <HAL_TIM_IC_CaptureCallback>
 800f36a:	e005      	b.n	800f378 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f36c:	6878      	ldr	r0, [r7, #4]
 800f36e:	f000 facd 	bl	800f90c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f372:	6878      	ldr	r0, [r7, #4]
 800f374:	f000 fade 	bl	800f934 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	2200      	movs	r2, #0
 800f37c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	681b      	ldr	r3, [r3, #0]
 800f382:	691b      	ldr	r3, [r3, #16]
 800f384:	f003 0304 	and.w	r3, r3, #4
 800f388:	2b04      	cmp	r3, #4
 800f38a:	d122      	bne.n	800f3d2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	681b      	ldr	r3, [r3, #0]
 800f390:	68db      	ldr	r3, [r3, #12]
 800f392:	f003 0304 	and.w	r3, r3, #4
 800f396:	2b04      	cmp	r3, #4
 800f398:	d11b      	bne.n	800f3d2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	681b      	ldr	r3, [r3, #0]
 800f39e:	f06f 0204 	mvn.w	r2, #4
 800f3a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	2202      	movs	r2, #2
 800f3a8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	681b      	ldr	r3, [r3, #0]
 800f3ae:	699b      	ldr	r3, [r3, #24]
 800f3b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	d003      	beq.n	800f3c0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f3b8:	6878      	ldr	r0, [r7, #4]
 800f3ba:	f000 fab1 	bl	800f920 <HAL_TIM_IC_CaptureCallback>
 800f3be:	e005      	b.n	800f3cc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f3c0:	6878      	ldr	r0, [r7, #4]
 800f3c2:	f000 faa3 	bl	800f90c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f3c6:	6878      	ldr	r0, [r7, #4]
 800f3c8:	f000 fab4 	bl	800f934 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	2200      	movs	r2, #0
 800f3d0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	681b      	ldr	r3, [r3, #0]
 800f3d6:	691b      	ldr	r3, [r3, #16]
 800f3d8:	f003 0308 	and.w	r3, r3, #8
 800f3dc:	2b08      	cmp	r3, #8
 800f3de:	d122      	bne.n	800f426 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	681b      	ldr	r3, [r3, #0]
 800f3e4:	68db      	ldr	r3, [r3, #12]
 800f3e6:	f003 0308 	and.w	r3, r3, #8
 800f3ea:	2b08      	cmp	r3, #8
 800f3ec:	d11b      	bne.n	800f426 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	681b      	ldr	r3, [r3, #0]
 800f3f2:	f06f 0208 	mvn.w	r2, #8
 800f3f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	2204      	movs	r2, #4
 800f3fc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	681b      	ldr	r3, [r3, #0]
 800f402:	69db      	ldr	r3, [r3, #28]
 800f404:	f003 0303 	and.w	r3, r3, #3
 800f408:	2b00      	cmp	r3, #0
 800f40a:	d003      	beq.n	800f414 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f40c:	6878      	ldr	r0, [r7, #4]
 800f40e:	f000 fa87 	bl	800f920 <HAL_TIM_IC_CaptureCallback>
 800f412:	e005      	b.n	800f420 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f414:	6878      	ldr	r0, [r7, #4]
 800f416:	f000 fa79 	bl	800f90c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f41a:	6878      	ldr	r0, [r7, #4]
 800f41c:	f000 fa8a 	bl	800f934 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	2200      	movs	r2, #0
 800f424:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	681b      	ldr	r3, [r3, #0]
 800f42a:	691b      	ldr	r3, [r3, #16]
 800f42c:	f003 0310 	and.w	r3, r3, #16
 800f430:	2b10      	cmp	r3, #16
 800f432:	d122      	bne.n	800f47a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	681b      	ldr	r3, [r3, #0]
 800f438:	68db      	ldr	r3, [r3, #12]
 800f43a:	f003 0310 	and.w	r3, r3, #16
 800f43e:	2b10      	cmp	r3, #16
 800f440:	d11b      	bne.n	800f47a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	681b      	ldr	r3, [r3, #0]
 800f446:	f06f 0210 	mvn.w	r2, #16
 800f44a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	2208      	movs	r2, #8
 800f450:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	681b      	ldr	r3, [r3, #0]
 800f456:	69db      	ldr	r3, [r3, #28]
 800f458:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	d003      	beq.n	800f468 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f460:	6878      	ldr	r0, [r7, #4]
 800f462:	f000 fa5d 	bl	800f920 <HAL_TIM_IC_CaptureCallback>
 800f466:	e005      	b.n	800f474 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f468:	6878      	ldr	r0, [r7, #4]
 800f46a:	f000 fa4f 	bl	800f90c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f46e:	6878      	ldr	r0, [r7, #4]
 800f470:	f000 fa60 	bl	800f934 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	2200      	movs	r2, #0
 800f478:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	681b      	ldr	r3, [r3, #0]
 800f47e:	691b      	ldr	r3, [r3, #16]
 800f480:	f003 0301 	and.w	r3, r3, #1
 800f484:	2b01      	cmp	r3, #1
 800f486:	d10e      	bne.n	800f4a6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	681b      	ldr	r3, [r3, #0]
 800f48c:	68db      	ldr	r3, [r3, #12]
 800f48e:	f003 0301 	and.w	r3, r3, #1
 800f492:	2b01      	cmp	r3, #1
 800f494:	d107      	bne.n	800f4a6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	681b      	ldr	r3, [r3, #0]
 800f49a:	f06f 0201 	mvn.w	r2, #1
 800f49e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f4a0:	6878      	ldr	r0, [r7, #4]
 800f4a2:	f7f3 fc05 	bl	8002cb0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	681b      	ldr	r3, [r3, #0]
 800f4aa:	691b      	ldr	r3, [r3, #16]
 800f4ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f4b0:	2b80      	cmp	r3, #128	; 0x80
 800f4b2:	d10e      	bne.n	800f4d2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	681b      	ldr	r3, [r3, #0]
 800f4b8:	68db      	ldr	r3, [r3, #12]
 800f4ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f4be:	2b80      	cmp	r3, #128	; 0x80
 800f4c0:	d107      	bne.n	800f4d2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	681b      	ldr	r3, [r3, #0]
 800f4c6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800f4ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f4cc:	6878      	ldr	r0, [r7, #4]
 800f4ce:	f000 fef3 	bl	80102b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	681b      	ldr	r3, [r3, #0]
 800f4d6:	691b      	ldr	r3, [r3, #16]
 800f4d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f4dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f4e0:	d10e      	bne.n	800f500 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	681b      	ldr	r3, [r3, #0]
 800f4e6:	68db      	ldr	r3, [r3, #12]
 800f4e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f4ec:	2b80      	cmp	r3, #128	; 0x80
 800f4ee:	d107      	bne.n	800f500 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	681b      	ldr	r3, [r3, #0]
 800f4f4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800f4f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800f4fa:	6878      	ldr	r0, [r7, #4]
 800f4fc:	f000 fee6 	bl	80102cc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	681b      	ldr	r3, [r3, #0]
 800f504:	691b      	ldr	r3, [r3, #16]
 800f506:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f50a:	2b40      	cmp	r3, #64	; 0x40
 800f50c:	d10e      	bne.n	800f52c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	681b      	ldr	r3, [r3, #0]
 800f512:	68db      	ldr	r3, [r3, #12]
 800f514:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f518:	2b40      	cmp	r3, #64	; 0x40
 800f51a:	d107      	bne.n	800f52c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	681b      	ldr	r3, [r3, #0]
 800f520:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800f524:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f526:	6878      	ldr	r0, [r7, #4]
 800f528:	f000 fa0e 	bl	800f948 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	681b      	ldr	r3, [r3, #0]
 800f530:	691b      	ldr	r3, [r3, #16]
 800f532:	f003 0320 	and.w	r3, r3, #32
 800f536:	2b20      	cmp	r3, #32
 800f538:	d10e      	bne.n	800f558 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	681b      	ldr	r3, [r3, #0]
 800f53e:	68db      	ldr	r3, [r3, #12]
 800f540:	f003 0320 	and.w	r3, r3, #32
 800f544:	2b20      	cmp	r3, #32
 800f546:	d107      	bne.n	800f558 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	681b      	ldr	r3, [r3, #0]
 800f54c:	f06f 0220 	mvn.w	r2, #32
 800f550:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f552:	6878      	ldr	r0, [r7, #4]
 800f554:	f000 fea6 	bl	80102a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f558:	bf00      	nop
 800f55a:	3708      	adds	r7, #8
 800f55c:	46bd      	mov	sp, r7
 800f55e:	bd80      	pop	{r7, pc}

0800f560 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800f560:	b580      	push	{r7, lr}
 800f562:	b084      	sub	sp, #16
 800f564:	af00      	add	r7, sp, #0
 800f566:	60f8      	str	r0, [r7, #12]
 800f568:	60b9      	str	r1, [r7, #8]
 800f56a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800f56c:	68fb      	ldr	r3, [r7, #12]
 800f56e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f572:	2b01      	cmp	r3, #1
 800f574:	d101      	bne.n	800f57a <HAL_TIM_PWM_ConfigChannel+0x1a>
 800f576:	2302      	movs	r3, #2
 800f578:	e0fd      	b.n	800f776 <HAL_TIM_PWM_ConfigChannel+0x216>
 800f57a:	68fb      	ldr	r3, [r7, #12]
 800f57c:	2201      	movs	r2, #1
 800f57e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	2b14      	cmp	r3, #20
 800f586:	f200 80f0 	bhi.w	800f76a <HAL_TIM_PWM_ConfigChannel+0x20a>
 800f58a:	a201      	add	r2, pc, #4	; (adr r2, 800f590 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800f58c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f590:	0800f5e5 	.word	0x0800f5e5
 800f594:	0800f76b 	.word	0x0800f76b
 800f598:	0800f76b 	.word	0x0800f76b
 800f59c:	0800f76b 	.word	0x0800f76b
 800f5a0:	0800f625 	.word	0x0800f625
 800f5a4:	0800f76b 	.word	0x0800f76b
 800f5a8:	0800f76b 	.word	0x0800f76b
 800f5ac:	0800f76b 	.word	0x0800f76b
 800f5b0:	0800f667 	.word	0x0800f667
 800f5b4:	0800f76b 	.word	0x0800f76b
 800f5b8:	0800f76b 	.word	0x0800f76b
 800f5bc:	0800f76b 	.word	0x0800f76b
 800f5c0:	0800f6a7 	.word	0x0800f6a7
 800f5c4:	0800f76b 	.word	0x0800f76b
 800f5c8:	0800f76b 	.word	0x0800f76b
 800f5cc:	0800f76b 	.word	0x0800f76b
 800f5d0:	0800f6e9 	.word	0x0800f6e9
 800f5d4:	0800f76b 	.word	0x0800f76b
 800f5d8:	0800f76b 	.word	0x0800f76b
 800f5dc:	0800f76b 	.word	0x0800f76b
 800f5e0:	0800f729 	.word	0x0800f729
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800f5e4:	68fb      	ldr	r3, [r7, #12]
 800f5e6:	681b      	ldr	r3, [r3, #0]
 800f5e8:	68b9      	ldr	r1, [r7, #8]
 800f5ea:	4618      	mov	r0, r3
 800f5ec:	f000 fa56 	bl	800fa9c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800f5f0:	68fb      	ldr	r3, [r7, #12]
 800f5f2:	681b      	ldr	r3, [r3, #0]
 800f5f4:	699a      	ldr	r2, [r3, #24]
 800f5f6:	68fb      	ldr	r3, [r7, #12]
 800f5f8:	681b      	ldr	r3, [r3, #0]
 800f5fa:	f042 0208 	orr.w	r2, r2, #8
 800f5fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800f600:	68fb      	ldr	r3, [r7, #12]
 800f602:	681b      	ldr	r3, [r3, #0]
 800f604:	699a      	ldr	r2, [r3, #24]
 800f606:	68fb      	ldr	r3, [r7, #12]
 800f608:	681b      	ldr	r3, [r3, #0]
 800f60a:	f022 0204 	bic.w	r2, r2, #4
 800f60e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800f610:	68fb      	ldr	r3, [r7, #12]
 800f612:	681b      	ldr	r3, [r3, #0]
 800f614:	6999      	ldr	r1, [r3, #24]
 800f616:	68bb      	ldr	r3, [r7, #8]
 800f618:	691a      	ldr	r2, [r3, #16]
 800f61a:	68fb      	ldr	r3, [r7, #12]
 800f61c:	681b      	ldr	r3, [r3, #0]
 800f61e:	430a      	orrs	r2, r1
 800f620:	619a      	str	r2, [r3, #24]
      break;
 800f622:	e0a3      	b.n	800f76c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800f624:	68fb      	ldr	r3, [r7, #12]
 800f626:	681b      	ldr	r3, [r3, #0]
 800f628:	68b9      	ldr	r1, [r7, #8]
 800f62a:	4618      	mov	r0, r3
 800f62c:	f000 faa8 	bl	800fb80 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800f630:	68fb      	ldr	r3, [r7, #12]
 800f632:	681b      	ldr	r3, [r3, #0]
 800f634:	699a      	ldr	r2, [r3, #24]
 800f636:	68fb      	ldr	r3, [r7, #12]
 800f638:	681b      	ldr	r3, [r3, #0]
 800f63a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f63e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800f640:	68fb      	ldr	r3, [r7, #12]
 800f642:	681b      	ldr	r3, [r3, #0]
 800f644:	699a      	ldr	r2, [r3, #24]
 800f646:	68fb      	ldr	r3, [r7, #12]
 800f648:	681b      	ldr	r3, [r3, #0]
 800f64a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f64e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800f650:	68fb      	ldr	r3, [r7, #12]
 800f652:	681b      	ldr	r3, [r3, #0]
 800f654:	6999      	ldr	r1, [r3, #24]
 800f656:	68bb      	ldr	r3, [r7, #8]
 800f658:	691b      	ldr	r3, [r3, #16]
 800f65a:	021a      	lsls	r2, r3, #8
 800f65c:	68fb      	ldr	r3, [r7, #12]
 800f65e:	681b      	ldr	r3, [r3, #0]
 800f660:	430a      	orrs	r2, r1
 800f662:	619a      	str	r2, [r3, #24]
      break;
 800f664:	e082      	b.n	800f76c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800f666:	68fb      	ldr	r3, [r7, #12]
 800f668:	681b      	ldr	r3, [r3, #0]
 800f66a:	68b9      	ldr	r1, [r7, #8]
 800f66c:	4618      	mov	r0, r3
 800f66e:	f000 faff 	bl	800fc70 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800f672:	68fb      	ldr	r3, [r7, #12]
 800f674:	681b      	ldr	r3, [r3, #0]
 800f676:	69da      	ldr	r2, [r3, #28]
 800f678:	68fb      	ldr	r3, [r7, #12]
 800f67a:	681b      	ldr	r3, [r3, #0]
 800f67c:	f042 0208 	orr.w	r2, r2, #8
 800f680:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800f682:	68fb      	ldr	r3, [r7, #12]
 800f684:	681b      	ldr	r3, [r3, #0]
 800f686:	69da      	ldr	r2, [r3, #28]
 800f688:	68fb      	ldr	r3, [r7, #12]
 800f68a:	681b      	ldr	r3, [r3, #0]
 800f68c:	f022 0204 	bic.w	r2, r2, #4
 800f690:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800f692:	68fb      	ldr	r3, [r7, #12]
 800f694:	681b      	ldr	r3, [r3, #0]
 800f696:	69d9      	ldr	r1, [r3, #28]
 800f698:	68bb      	ldr	r3, [r7, #8]
 800f69a:	691a      	ldr	r2, [r3, #16]
 800f69c:	68fb      	ldr	r3, [r7, #12]
 800f69e:	681b      	ldr	r3, [r3, #0]
 800f6a0:	430a      	orrs	r2, r1
 800f6a2:	61da      	str	r2, [r3, #28]
      break;
 800f6a4:	e062      	b.n	800f76c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800f6a6:	68fb      	ldr	r3, [r7, #12]
 800f6a8:	681b      	ldr	r3, [r3, #0]
 800f6aa:	68b9      	ldr	r1, [r7, #8]
 800f6ac:	4618      	mov	r0, r3
 800f6ae:	f000 fb55 	bl	800fd5c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800f6b2:	68fb      	ldr	r3, [r7, #12]
 800f6b4:	681b      	ldr	r3, [r3, #0]
 800f6b6:	69da      	ldr	r2, [r3, #28]
 800f6b8:	68fb      	ldr	r3, [r7, #12]
 800f6ba:	681b      	ldr	r3, [r3, #0]
 800f6bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f6c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800f6c2:	68fb      	ldr	r3, [r7, #12]
 800f6c4:	681b      	ldr	r3, [r3, #0]
 800f6c6:	69da      	ldr	r2, [r3, #28]
 800f6c8:	68fb      	ldr	r3, [r7, #12]
 800f6ca:	681b      	ldr	r3, [r3, #0]
 800f6cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f6d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800f6d2:	68fb      	ldr	r3, [r7, #12]
 800f6d4:	681b      	ldr	r3, [r3, #0]
 800f6d6:	69d9      	ldr	r1, [r3, #28]
 800f6d8:	68bb      	ldr	r3, [r7, #8]
 800f6da:	691b      	ldr	r3, [r3, #16]
 800f6dc:	021a      	lsls	r2, r3, #8
 800f6de:	68fb      	ldr	r3, [r7, #12]
 800f6e0:	681b      	ldr	r3, [r3, #0]
 800f6e2:	430a      	orrs	r2, r1
 800f6e4:	61da      	str	r2, [r3, #28]
      break;
 800f6e6:	e041      	b.n	800f76c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800f6e8:	68fb      	ldr	r3, [r7, #12]
 800f6ea:	681b      	ldr	r3, [r3, #0]
 800f6ec:	68b9      	ldr	r1, [r7, #8]
 800f6ee:	4618      	mov	r0, r3
 800f6f0:	f000 fb8c 	bl	800fe0c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800f6f4:	68fb      	ldr	r3, [r7, #12]
 800f6f6:	681b      	ldr	r3, [r3, #0]
 800f6f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f6fa:	68fb      	ldr	r3, [r7, #12]
 800f6fc:	681b      	ldr	r3, [r3, #0]
 800f6fe:	f042 0208 	orr.w	r2, r2, #8
 800f702:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800f704:	68fb      	ldr	r3, [r7, #12]
 800f706:	681b      	ldr	r3, [r3, #0]
 800f708:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f70a:	68fb      	ldr	r3, [r7, #12]
 800f70c:	681b      	ldr	r3, [r3, #0]
 800f70e:	f022 0204 	bic.w	r2, r2, #4
 800f712:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800f714:	68fb      	ldr	r3, [r7, #12]
 800f716:	681b      	ldr	r3, [r3, #0]
 800f718:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800f71a:	68bb      	ldr	r3, [r7, #8]
 800f71c:	691a      	ldr	r2, [r3, #16]
 800f71e:	68fb      	ldr	r3, [r7, #12]
 800f720:	681b      	ldr	r3, [r3, #0]
 800f722:	430a      	orrs	r2, r1
 800f724:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800f726:	e021      	b.n	800f76c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800f728:	68fb      	ldr	r3, [r7, #12]
 800f72a:	681b      	ldr	r3, [r3, #0]
 800f72c:	68b9      	ldr	r1, [r7, #8]
 800f72e:	4618      	mov	r0, r3
 800f730:	f000 fbbe 	bl	800feb0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800f734:	68fb      	ldr	r3, [r7, #12]
 800f736:	681b      	ldr	r3, [r3, #0]
 800f738:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f73a:	68fb      	ldr	r3, [r7, #12]
 800f73c:	681b      	ldr	r3, [r3, #0]
 800f73e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f742:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800f744:	68fb      	ldr	r3, [r7, #12]
 800f746:	681b      	ldr	r3, [r3, #0]
 800f748:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f74a:	68fb      	ldr	r3, [r7, #12]
 800f74c:	681b      	ldr	r3, [r3, #0]
 800f74e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f752:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800f754:	68fb      	ldr	r3, [r7, #12]
 800f756:	681b      	ldr	r3, [r3, #0]
 800f758:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800f75a:	68bb      	ldr	r3, [r7, #8]
 800f75c:	691b      	ldr	r3, [r3, #16]
 800f75e:	021a      	lsls	r2, r3, #8
 800f760:	68fb      	ldr	r3, [r7, #12]
 800f762:	681b      	ldr	r3, [r3, #0]
 800f764:	430a      	orrs	r2, r1
 800f766:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800f768:	e000      	b.n	800f76c <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800f76a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800f76c:	68fb      	ldr	r3, [r7, #12]
 800f76e:	2200      	movs	r2, #0
 800f770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f774:	2300      	movs	r3, #0
}
 800f776:	4618      	mov	r0, r3
 800f778:	3710      	adds	r7, #16
 800f77a:	46bd      	mov	sp, r7
 800f77c:	bd80      	pop	{r7, pc}
 800f77e:	bf00      	nop

0800f780 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800f780:	b580      	push	{r7, lr}
 800f782:	b084      	sub	sp, #16
 800f784:	af00      	add	r7, sp, #0
 800f786:	6078      	str	r0, [r7, #4]
 800f788:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f790:	2b01      	cmp	r3, #1
 800f792:	d101      	bne.n	800f798 <HAL_TIM_ConfigClockSource+0x18>
 800f794:	2302      	movs	r3, #2
 800f796:	e0b3      	b.n	800f900 <HAL_TIM_ConfigClockSource+0x180>
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	2201      	movs	r2, #1
 800f79c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	2202      	movs	r2, #2
 800f7a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	681b      	ldr	r3, [r3, #0]
 800f7ac:	689b      	ldr	r3, [r3, #8]
 800f7ae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800f7b0:	68fa      	ldr	r2, [r7, #12]
 800f7b2:	4b55      	ldr	r3, [pc, #340]	; (800f908 <HAL_TIM_ConfigClockSource+0x188>)
 800f7b4:	4013      	ands	r3, r2
 800f7b6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f7b8:	68fb      	ldr	r3, [r7, #12]
 800f7ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f7be:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	681b      	ldr	r3, [r3, #0]
 800f7c4:	68fa      	ldr	r2, [r7, #12]
 800f7c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800f7c8:	683b      	ldr	r3, [r7, #0]
 800f7ca:	681b      	ldr	r3, [r3, #0]
 800f7cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f7d0:	d03e      	beq.n	800f850 <HAL_TIM_ConfigClockSource+0xd0>
 800f7d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f7d6:	f200 8087 	bhi.w	800f8e8 <HAL_TIM_ConfigClockSource+0x168>
 800f7da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f7de:	f000 8085 	beq.w	800f8ec <HAL_TIM_ConfigClockSource+0x16c>
 800f7e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f7e6:	d87f      	bhi.n	800f8e8 <HAL_TIM_ConfigClockSource+0x168>
 800f7e8:	2b70      	cmp	r3, #112	; 0x70
 800f7ea:	d01a      	beq.n	800f822 <HAL_TIM_ConfigClockSource+0xa2>
 800f7ec:	2b70      	cmp	r3, #112	; 0x70
 800f7ee:	d87b      	bhi.n	800f8e8 <HAL_TIM_ConfigClockSource+0x168>
 800f7f0:	2b60      	cmp	r3, #96	; 0x60
 800f7f2:	d050      	beq.n	800f896 <HAL_TIM_ConfigClockSource+0x116>
 800f7f4:	2b60      	cmp	r3, #96	; 0x60
 800f7f6:	d877      	bhi.n	800f8e8 <HAL_TIM_ConfigClockSource+0x168>
 800f7f8:	2b50      	cmp	r3, #80	; 0x50
 800f7fa:	d03c      	beq.n	800f876 <HAL_TIM_ConfigClockSource+0xf6>
 800f7fc:	2b50      	cmp	r3, #80	; 0x50
 800f7fe:	d873      	bhi.n	800f8e8 <HAL_TIM_ConfigClockSource+0x168>
 800f800:	2b40      	cmp	r3, #64	; 0x40
 800f802:	d058      	beq.n	800f8b6 <HAL_TIM_ConfigClockSource+0x136>
 800f804:	2b40      	cmp	r3, #64	; 0x40
 800f806:	d86f      	bhi.n	800f8e8 <HAL_TIM_ConfigClockSource+0x168>
 800f808:	2b30      	cmp	r3, #48	; 0x30
 800f80a:	d064      	beq.n	800f8d6 <HAL_TIM_ConfigClockSource+0x156>
 800f80c:	2b30      	cmp	r3, #48	; 0x30
 800f80e:	d86b      	bhi.n	800f8e8 <HAL_TIM_ConfigClockSource+0x168>
 800f810:	2b20      	cmp	r3, #32
 800f812:	d060      	beq.n	800f8d6 <HAL_TIM_ConfigClockSource+0x156>
 800f814:	2b20      	cmp	r3, #32
 800f816:	d867      	bhi.n	800f8e8 <HAL_TIM_ConfigClockSource+0x168>
 800f818:	2b00      	cmp	r3, #0
 800f81a:	d05c      	beq.n	800f8d6 <HAL_TIM_ConfigClockSource+0x156>
 800f81c:	2b10      	cmp	r3, #16
 800f81e:	d05a      	beq.n	800f8d6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800f820:	e062      	b.n	800f8e8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	6818      	ldr	r0, [r3, #0]
 800f826:	683b      	ldr	r3, [r7, #0]
 800f828:	6899      	ldr	r1, [r3, #8]
 800f82a:	683b      	ldr	r3, [r7, #0]
 800f82c:	685a      	ldr	r2, [r3, #4]
 800f82e:	683b      	ldr	r3, [r7, #0]
 800f830:	68db      	ldr	r3, [r3, #12]
 800f832:	f000 fc0b 	bl	801004c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	681b      	ldr	r3, [r3, #0]
 800f83a:	689b      	ldr	r3, [r3, #8]
 800f83c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800f83e:	68fb      	ldr	r3, [r7, #12]
 800f840:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800f844:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	681b      	ldr	r3, [r3, #0]
 800f84a:	68fa      	ldr	r2, [r7, #12]
 800f84c:	609a      	str	r2, [r3, #8]
      break;
 800f84e:	e04e      	b.n	800f8ee <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	6818      	ldr	r0, [r3, #0]
 800f854:	683b      	ldr	r3, [r7, #0]
 800f856:	6899      	ldr	r1, [r3, #8]
 800f858:	683b      	ldr	r3, [r7, #0]
 800f85a:	685a      	ldr	r2, [r3, #4]
 800f85c:	683b      	ldr	r3, [r7, #0]
 800f85e:	68db      	ldr	r3, [r3, #12]
 800f860:	f000 fbf4 	bl	801004c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	681b      	ldr	r3, [r3, #0]
 800f868:	689a      	ldr	r2, [r3, #8]
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	681b      	ldr	r3, [r3, #0]
 800f86e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800f872:	609a      	str	r2, [r3, #8]
      break;
 800f874:	e03b      	b.n	800f8ee <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	6818      	ldr	r0, [r3, #0]
 800f87a:	683b      	ldr	r3, [r7, #0]
 800f87c:	6859      	ldr	r1, [r3, #4]
 800f87e:	683b      	ldr	r3, [r7, #0]
 800f880:	68db      	ldr	r3, [r3, #12]
 800f882:	461a      	mov	r2, r3
 800f884:	f000 fb68 	bl	800ff58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	681b      	ldr	r3, [r3, #0]
 800f88c:	2150      	movs	r1, #80	; 0x50
 800f88e:	4618      	mov	r0, r3
 800f890:	f000 fbc1 	bl	8010016 <TIM_ITRx_SetConfig>
      break;
 800f894:	e02b      	b.n	800f8ee <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	6818      	ldr	r0, [r3, #0]
 800f89a:	683b      	ldr	r3, [r7, #0]
 800f89c:	6859      	ldr	r1, [r3, #4]
 800f89e:	683b      	ldr	r3, [r7, #0]
 800f8a0:	68db      	ldr	r3, [r3, #12]
 800f8a2:	461a      	mov	r2, r3
 800f8a4:	f000 fb87 	bl	800ffb6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	681b      	ldr	r3, [r3, #0]
 800f8ac:	2160      	movs	r1, #96	; 0x60
 800f8ae:	4618      	mov	r0, r3
 800f8b0:	f000 fbb1 	bl	8010016 <TIM_ITRx_SetConfig>
      break;
 800f8b4:	e01b      	b.n	800f8ee <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	6818      	ldr	r0, [r3, #0]
 800f8ba:	683b      	ldr	r3, [r7, #0]
 800f8bc:	6859      	ldr	r1, [r3, #4]
 800f8be:	683b      	ldr	r3, [r7, #0]
 800f8c0:	68db      	ldr	r3, [r3, #12]
 800f8c2:	461a      	mov	r2, r3
 800f8c4:	f000 fb48 	bl	800ff58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	681b      	ldr	r3, [r3, #0]
 800f8cc:	2140      	movs	r1, #64	; 0x40
 800f8ce:	4618      	mov	r0, r3
 800f8d0:	f000 fba1 	bl	8010016 <TIM_ITRx_SetConfig>
      break;
 800f8d4:	e00b      	b.n	800f8ee <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	681a      	ldr	r2, [r3, #0]
 800f8da:	683b      	ldr	r3, [r7, #0]
 800f8dc:	681b      	ldr	r3, [r3, #0]
 800f8de:	4619      	mov	r1, r3
 800f8e0:	4610      	mov	r0, r2
 800f8e2:	f000 fb98 	bl	8010016 <TIM_ITRx_SetConfig>
        break;
 800f8e6:	e002      	b.n	800f8ee <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800f8e8:	bf00      	nop
 800f8ea:	e000      	b.n	800f8ee <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800f8ec:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	2201      	movs	r2, #1
 800f8f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	2200      	movs	r2, #0
 800f8fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f8fe:	2300      	movs	r3, #0
}
 800f900:	4618      	mov	r0, r3
 800f902:	3710      	adds	r7, #16
 800f904:	46bd      	mov	sp, r7
 800f906:	bd80      	pop	{r7, pc}
 800f908:	fffeff88 	.word	0xfffeff88

0800f90c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f90c:	b480      	push	{r7}
 800f90e:	b083      	sub	sp, #12
 800f910:	af00      	add	r7, sp, #0
 800f912:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800f914:	bf00      	nop
 800f916:	370c      	adds	r7, #12
 800f918:	46bd      	mov	sp, r7
 800f91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f91e:	4770      	bx	lr

0800f920 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f920:	b480      	push	{r7}
 800f922:	b083      	sub	sp, #12
 800f924:	af00      	add	r7, sp, #0
 800f926:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f928:	bf00      	nop
 800f92a:	370c      	adds	r7, #12
 800f92c:	46bd      	mov	sp, r7
 800f92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f932:	4770      	bx	lr

0800f934 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f934:	b480      	push	{r7}
 800f936:	b083      	sub	sp, #12
 800f938:	af00      	add	r7, sp, #0
 800f93a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f93c:	bf00      	nop
 800f93e:	370c      	adds	r7, #12
 800f940:	46bd      	mov	sp, r7
 800f942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f946:	4770      	bx	lr

0800f948 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f948:	b480      	push	{r7}
 800f94a:	b083      	sub	sp, #12
 800f94c:	af00      	add	r7, sp, #0
 800f94e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f950:	bf00      	nop
 800f952:	370c      	adds	r7, #12
 800f954:	46bd      	mov	sp, r7
 800f956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f95a:	4770      	bx	lr

0800f95c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800f95c:	b480      	push	{r7}
 800f95e:	b085      	sub	sp, #20
 800f960:	af00      	add	r7, sp, #0
 800f962:	6078      	str	r0, [r7, #4]
 800f964:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	681b      	ldr	r3, [r3, #0]
 800f96a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	4a40      	ldr	r2, [pc, #256]	; (800fa70 <TIM_Base_SetConfig+0x114>)
 800f970:	4293      	cmp	r3, r2
 800f972:	d013      	beq.n	800f99c <TIM_Base_SetConfig+0x40>
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f97a:	d00f      	beq.n	800f99c <TIM_Base_SetConfig+0x40>
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	4a3d      	ldr	r2, [pc, #244]	; (800fa74 <TIM_Base_SetConfig+0x118>)
 800f980:	4293      	cmp	r3, r2
 800f982:	d00b      	beq.n	800f99c <TIM_Base_SetConfig+0x40>
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	4a3c      	ldr	r2, [pc, #240]	; (800fa78 <TIM_Base_SetConfig+0x11c>)
 800f988:	4293      	cmp	r3, r2
 800f98a:	d007      	beq.n	800f99c <TIM_Base_SetConfig+0x40>
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	4a3b      	ldr	r2, [pc, #236]	; (800fa7c <TIM_Base_SetConfig+0x120>)
 800f990:	4293      	cmp	r3, r2
 800f992:	d003      	beq.n	800f99c <TIM_Base_SetConfig+0x40>
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	4a3a      	ldr	r2, [pc, #232]	; (800fa80 <TIM_Base_SetConfig+0x124>)
 800f998:	4293      	cmp	r3, r2
 800f99a:	d108      	bne.n	800f9ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f99c:	68fb      	ldr	r3, [r7, #12]
 800f99e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f9a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f9a4:	683b      	ldr	r3, [r7, #0]
 800f9a6:	685b      	ldr	r3, [r3, #4]
 800f9a8:	68fa      	ldr	r2, [r7, #12]
 800f9aa:	4313      	orrs	r3, r2
 800f9ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	4a2f      	ldr	r2, [pc, #188]	; (800fa70 <TIM_Base_SetConfig+0x114>)
 800f9b2:	4293      	cmp	r3, r2
 800f9b4:	d02b      	beq.n	800fa0e <TIM_Base_SetConfig+0xb2>
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f9bc:	d027      	beq.n	800fa0e <TIM_Base_SetConfig+0xb2>
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	4a2c      	ldr	r2, [pc, #176]	; (800fa74 <TIM_Base_SetConfig+0x118>)
 800f9c2:	4293      	cmp	r3, r2
 800f9c4:	d023      	beq.n	800fa0e <TIM_Base_SetConfig+0xb2>
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	4a2b      	ldr	r2, [pc, #172]	; (800fa78 <TIM_Base_SetConfig+0x11c>)
 800f9ca:	4293      	cmp	r3, r2
 800f9cc:	d01f      	beq.n	800fa0e <TIM_Base_SetConfig+0xb2>
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	4a2a      	ldr	r2, [pc, #168]	; (800fa7c <TIM_Base_SetConfig+0x120>)
 800f9d2:	4293      	cmp	r3, r2
 800f9d4:	d01b      	beq.n	800fa0e <TIM_Base_SetConfig+0xb2>
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	4a29      	ldr	r2, [pc, #164]	; (800fa80 <TIM_Base_SetConfig+0x124>)
 800f9da:	4293      	cmp	r3, r2
 800f9dc:	d017      	beq.n	800fa0e <TIM_Base_SetConfig+0xb2>
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	4a28      	ldr	r2, [pc, #160]	; (800fa84 <TIM_Base_SetConfig+0x128>)
 800f9e2:	4293      	cmp	r3, r2
 800f9e4:	d013      	beq.n	800fa0e <TIM_Base_SetConfig+0xb2>
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	4a27      	ldr	r2, [pc, #156]	; (800fa88 <TIM_Base_SetConfig+0x12c>)
 800f9ea:	4293      	cmp	r3, r2
 800f9ec:	d00f      	beq.n	800fa0e <TIM_Base_SetConfig+0xb2>
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	4a26      	ldr	r2, [pc, #152]	; (800fa8c <TIM_Base_SetConfig+0x130>)
 800f9f2:	4293      	cmp	r3, r2
 800f9f4:	d00b      	beq.n	800fa0e <TIM_Base_SetConfig+0xb2>
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	4a25      	ldr	r2, [pc, #148]	; (800fa90 <TIM_Base_SetConfig+0x134>)
 800f9fa:	4293      	cmp	r3, r2
 800f9fc:	d007      	beq.n	800fa0e <TIM_Base_SetConfig+0xb2>
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	4a24      	ldr	r2, [pc, #144]	; (800fa94 <TIM_Base_SetConfig+0x138>)
 800fa02:	4293      	cmp	r3, r2
 800fa04:	d003      	beq.n	800fa0e <TIM_Base_SetConfig+0xb2>
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	4a23      	ldr	r2, [pc, #140]	; (800fa98 <TIM_Base_SetConfig+0x13c>)
 800fa0a:	4293      	cmp	r3, r2
 800fa0c:	d108      	bne.n	800fa20 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800fa0e:	68fb      	ldr	r3, [r7, #12]
 800fa10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fa14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800fa16:	683b      	ldr	r3, [r7, #0]
 800fa18:	68db      	ldr	r3, [r3, #12]
 800fa1a:	68fa      	ldr	r2, [r7, #12]
 800fa1c:	4313      	orrs	r3, r2
 800fa1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800fa20:	68fb      	ldr	r3, [r7, #12]
 800fa22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800fa26:	683b      	ldr	r3, [r7, #0]
 800fa28:	695b      	ldr	r3, [r3, #20]
 800fa2a:	4313      	orrs	r3, r2
 800fa2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	68fa      	ldr	r2, [r7, #12]
 800fa32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800fa34:	683b      	ldr	r3, [r7, #0]
 800fa36:	689a      	ldr	r2, [r3, #8]
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800fa3c:	683b      	ldr	r3, [r7, #0]
 800fa3e:	681a      	ldr	r2, [r3, #0]
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	4a0a      	ldr	r2, [pc, #40]	; (800fa70 <TIM_Base_SetConfig+0x114>)
 800fa48:	4293      	cmp	r3, r2
 800fa4a:	d003      	beq.n	800fa54 <TIM_Base_SetConfig+0xf8>
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	4a0c      	ldr	r2, [pc, #48]	; (800fa80 <TIM_Base_SetConfig+0x124>)
 800fa50:	4293      	cmp	r3, r2
 800fa52:	d103      	bne.n	800fa5c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800fa54:	683b      	ldr	r3, [r7, #0]
 800fa56:	691a      	ldr	r2, [r3, #16]
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	2201      	movs	r2, #1
 800fa60:	615a      	str	r2, [r3, #20]
}
 800fa62:	bf00      	nop
 800fa64:	3714      	adds	r7, #20
 800fa66:	46bd      	mov	sp, r7
 800fa68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa6c:	4770      	bx	lr
 800fa6e:	bf00      	nop
 800fa70:	40010000 	.word	0x40010000
 800fa74:	40000400 	.word	0x40000400
 800fa78:	40000800 	.word	0x40000800
 800fa7c:	40000c00 	.word	0x40000c00
 800fa80:	40010400 	.word	0x40010400
 800fa84:	40014000 	.word	0x40014000
 800fa88:	40014400 	.word	0x40014400
 800fa8c:	40014800 	.word	0x40014800
 800fa90:	40001800 	.word	0x40001800
 800fa94:	40001c00 	.word	0x40001c00
 800fa98:	40002000 	.word	0x40002000

0800fa9c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800fa9c:	b480      	push	{r7}
 800fa9e:	b087      	sub	sp, #28
 800faa0:	af00      	add	r7, sp, #0
 800faa2:	6078      	str	r0, [r7, #4]
 800faa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	6a1b      	ldr	r3, [r3, #32]
 800faaa:	f023 0201 	bic.w	r2, r3, #1
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	6a1b      	ldr	r3, [r3, #32]
 800fab6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	685b      	ldr	r3, [r3, #4]
 800fabc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	699b      	ldr	r3, [r3, #24]
 800fac2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800fac4:	68fa      	ldr	r2, [r7, #12]
 800fac6:	4b2b      	ldr	r3, [pc, #172]	; (800fb74 <TIM_OC1_SetConfig+0xd8>)
 800fac8:	4013      	ands	r3, r2
 800faca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800facc:	68fb      	ldr	r3, [r7, #12]
 800face:	f023 0303 	bic.w	r3, r3, #3
 800fad2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fad4:	683b      	ldr	r3, [r7, #0]
 800fad6:	681b      	ldr	r3, [r3, #0]
 800fad8:	68fa      	ldr	r2, [r7, #12]
 800fada:	4313      	orrs	r3, r2
 800fadc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800fade:	697b      	ldr	r3, [r7, #20]
 800fae0:	f023 0302 	bic.w	r3, r3, #2
 800fae4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800fae6:	683b      	ldr	r3, [r7, #0]
 800fae8:	689b      	ldr	r3, [r3, #8]
 800faea:	697a      	ldr	r2, [r7, #20]
 800faec:	4313      	orrs	r3, r2
 800faee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	4a21      	ldr	r2, [pc, #132]	; (800fb78 <TIM_OC1_SetConfig+0xdc>)
 800faf4:	4293      	cmp	r3, r2
 800faf6:	d003      	beq.n	800fb00 <TIM_OC1_SetConfig+0x64>
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	4a20      	ldr	r2, [pc, #128]	; (800fb7c <TIM_OC1_SetConfig+0xe0>)
 800fafc:	4293      	cmp	r3, r2
 800fafe:	d10c      	bne.n	800fb1a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800fb00:	697b      	ldr	r3, [r7, #20]
 800fb02:	f023 0308 	bic.w	r3, r3, #8
 800fb06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800fb08:	683b      	ldr	r3, [r7, #0]
 800fb0a:	68db      	ldr	r3, [r3, #12]
 800fb0c:	697a      	ldr	r2, [r7, #20]
 800fb0e:	4313      	orrs	r3, r2
 800fb10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800fb12:	697b      	ldr	r3, [r7, #20]
 800fb14:	f023 0304 	bic.w	r3, r3, #4
 800fb18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	4a16      	ldr	r2, [pc, #88]	; (800fb78 <TIM_OC1_SetConfig+0xdc>)
 800fb1e:	4293      	cmp	r3, r2
 800fb20:	d003      	beq.n	800fb2a <TIM_OC1_SetConfig+0x8e>
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	4a15      	ldr	r2, [pc, #84]	; (800fb7c <TIM_OC1_SetConfig+0xe0>)
 800fb26:	4293      	cmp	r3, r2
 800fb28:	d111      	bne.n	800fb4e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800fb2a:	693b      	ldr	r3, [r7, #16]
 800fb2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fb30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800fb32:	693b      	ldr	r3, [r7, #16]
 800fb34:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800fb38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800fb3a:	683b      	ldr	r3, [r7, #0]
 800fb3c:	695b      	ldr	r3, [r3, #20]
 800fb3e:	693a      	ldr	r2, [r7, #16]
 800fb40:	4313      	orrs	r3, r2
 800fb42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800fb44:	683b      	ldr	r3, [r7, #0]
 800fb46:	699b      	ldr	r3, [r3, #24]
 800fb48:	693a      	ldr	r2, [r7, #16]
 800fb4a:	4313      	orrs	r3, r2
 800fb4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	693a      	ldr	r2, [r7, #16]
 800fb52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	68fa      	ldr	r2, [r7, #12]
 800fb58:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800fb5a:	683b      	ldr	r3, [r7, #0]
 800fb5c:	685a      	ldr	r2, [r3, #4]
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	697a      	ldr	r2, [r7, #20]
 800fb66:	621a      	str	r2, [r3, #32]
}
 800fb68:	bf00      	nop
 800fb6a:	371c      	adds	r7, #28
 800fb6c:	46bd      	mov	sp, r7
 800fb6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb72:	4770      	bx	lr
 800fb74:	fffeff8f 	.word	0xfffeff8f
 800fb78:	40010000 	.word	0x40010000
 800fb7c:	40010400 	.word	0x40010400

0800fb80 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800fb80:	b480      	push	{r7}
 800fb82:	b087      	sub	sp, #28
 800fb84:	af00      	add	r7, sp, #0
 800fb86:	6078      	str	r0, [r7, #4]
 800fb88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	6a1b      	ldr	r3, [r3, #32]
 800fb8e:	f023 0210 	bic.w	r2, r3, #16
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	6a1b      	ldr	r3, [r3, #32]
 800fb9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	685b      	ldr	r3, [r3, #4]
 800fba0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	699b      	ldr	r3, [r3, #24]
 800fba6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800fba8:	68fa      	ldr	r2, [r7, #12]
 800fbaa:	4b2e      	ldr	r3, [pc, #184]	; (800fc64 <TIM_OC2_SetConfig+0xe4>)
 800fbac:	4013      	ands	r3, r2
 800fbae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800fbb0:	68fb      	ldr	r3, [r7, #12]
 800fbb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fbb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fbb8:	683b      	ldr	r3, [r7, #0]
 800fbba:	681b      	ldr	r3, [r3, #0]
 800fbbc:	021b      	lsls	r3, r3, #8
 800fbbe:	68fa      	ldr	r2, [r7, #12]
 800fbc0:	4313      	orrs	r3, r2
 800fbc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800fbc4:	697b      	ldr	r3, [r7, #20]
 800fbc6:	f023 0320 	bic.w	r3, r3, #32
 800fbca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800fbcc:	683b      	ldr	r3, [r7, #0]
 800fbce:	689b      	ldr	r3, [r3, #8]
 800fbd0:	011b      	lsls	r3, r3, #4
 800fbd2:	697a      	ldr	r2, [r7, #20]
 800fbd4:	4313      	orrs	r3, r2
 800fbd6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	4a23      	ldr	r2, [pc, #140]	; (800fc68 <TIM_OC2_SetConfig+0xe8>)
 800fbdc:	4293      	cmp	r3, r2
 800fbde:	d003      	beq.n	800fbe8 <TIM_OC2_SetConfig+0x68>
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	4a22      	ldr	r2, [pc, #136]	; (800fc6c <TIM_OC2_SetConfig+0xec>)
 800fbe4:	4293      	cmp	r3, r2
 800fbe6:	d10d      	bne.n	800fc04 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800fbe8:	697b      	ldr	r3, [r7, #20]
 800fbea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fbee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800fbf0:	683b      	ldr	r3, [r7, #0]
 800fbf2:	68db      	ldr	r3, [r3, #12]
 800fbf4:	011b      	lsls	r3, r3, #4
 800fbf6:	697a      	ldr	r2, [r7, #20]
 800fbf8:	4313      	orrs	r3, r2
 800fbfa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800fbfc:	697b      	ldr	r3, [r7, #20]
 800fbfe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fc02:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	4a18      	ldr	r2, [pc, #96]	; (800fc68 <TIM_OC2_SetConfig+0xe8>)
 800fc08:	4293      	cmp	r3, r2
 800fc0a:	d003      	beq.n	800fc14 <TIM_OC2_SetConfig+0x94>
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	4a17      	ldr	r2, [pc, #92]	; (800fc6c <TIM_OC2_SetConfig+0xec>)
 800fc10:	4293      	cmp	r3, r2
 800fc12:	d113      	bne.n	800fc3c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800fc14:	693b      	ldr	r3, [r7, #16]
 800fc16:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800fc1a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800fc1c:	693b      	ldr	r3, [r7, #16]
 800fc1e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800fc22:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800fc24:	683b      	ldr	r3, [r7, #0]
 800fc26:	695b      	ldr	r3, [r3, #20]
 800fc28:	009b      	lsls	r3, r3, #2
 800fc2a:	693a      	ldr	r2, [r7, #16]
 800fc2c:	4313      	orrs	r3, r2
 800fc2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800fc30:	683b      	ldr	r3, [r7, #0]
 800fc32:	699b      	ldr	r3, [r3, #24]
 800fc34:	009b      	lsls	r3, r3, #2
 800fc36:	693a      	ldr	r2, [r7, #16]
 800fc38:	4313      	orrs	r3, r2
 800fc3a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	693a      	ldr	r2, [r7, #16]
 800fc40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	68fa      	ldr	r2, [r7, #12]
 800fc46:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800fc48:	683b      	ldr	r3, [r7, #0]
 800fc4a:	685a      	ldr	r2, [r3, #4]
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	697a      	ldr	r2, [r7, #20]
 800fc54:	621a      	str	r2, [r3, #32]
}
 800fc56:	bf00      	nop
 800fc58:	371c      	adds	r7, #28
 800fc5a:	46bd      	mov	sp, r7
 800fc5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc60:	4770      	bx	lr
 800fc62:	bf00      	nop
 800fc64:	feff8fff 	.word	0xfeff8fff
 800fc68:	40010000 	.word	0x40010000
 800fc6c:	40010400 	.word	0x40010400

0800fc70 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800fc70:	b480      	push	{r7}
 800fc72:	b087      	sub	sp, #28
 800fc74:	af00      	add	r7, sp, #0
 800fc76:	6078      	str	r0, [r7, #4]
 800fc78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	6a1b      	ldr	r3, [r3, #32]
 800fc7e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	6a1b      	ldr	r3, [r3, #32]
 800fc8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	685b      	ldr	r3, [r3, #4]
 800fc90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	69db      	ldr	r3, [r3, #28]
 800fc96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800fc98:	68fa      	ldr	r2, [r7, #12]
 800fc9a:	4b2d      	ldr	r3, [pc, #180]	; (800fd50 <TIM_OC3_SetConfig+0xe0>)
 800fc9c:	4013      	ands	r3, r2
 800fc9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800fca0:	68fb      	ldr	r3, [r7, #12]
 800fca2:	f023 0303 	bic.w	r3, r3, #3
 800fca6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fca8:	683b      	ldr	r3, [r7, #0]
 800fcaa:	681b      	ldr	r3, [r3, #0]
 800fcac:	68fa      	ldr	r2, [r7, #12]
 800fcae:	4313      	orrs	r3, r2
 800fcb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800fcb2:	697b      	ldr	r3, [r7, #20]
 800fcb4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800fcb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800fcba:	683b      	ldr	r3, [r7, #0]
 800fcbc:	689b      	ldr	r3, [r3, #8]
 800fcbe:	021b      	lsls	r3, r3, #8
 800fcc0:	697a      	ldr	r2, [r7, #20]
 800fcc2:	4313      	orrs	r3, r2
 800fcc4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	4a22      	ldr	r2, [pc, #136]	; (800fd54 <TIM_OC3_SetConfig+0xe4>)
 800fcca:	4293      	cmp	r3, r2
 800fccc:	d003      	beq.n	800fcd6 <TIM_OC3_SetConfig+0x66>
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	4a21      	ldr	r2, [pc, #132]	; (800fd58 <TIM_OC3_SetConfig+0xe8>)
 800fcd2:	4293      	cmp	r3, r2
 800fcd4:	d10d      	bne.n	800fcf2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800fcd6:	697b      	ldr	r3, [r7, #20]
 800fcd8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800fcdc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800fcde:	683b      	ldr	r3, [r7, #0]
 800fce0:	68db      	ldr	r3, [r3, #12]
 800fce2:	021b      	lsls	r3, r3, #8
 800fce4:	697a      	ldr	r2, [r7, #20]
 800fce6:	4313      	orrs	r3, r2
 800fce8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800fcea:	697b      	ldr	r3, [r7, #20]
 800fcec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800fcf0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	4a17      	ldr	r2, [pc, #92]	; (800fd54 <TIM_OC3_SetConfig+0xe4>)
 800fcf6:	4293      	cmp	r3, r2
 800fcf8:	d003      	beq.n	800fd02 <TIM_OC3_SetConfig+0x92>
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	4a16      	ldr	r2, [pc, #88]	; (800fd58 <TIM_OC3_SetConfig+0xe8>)
 800fcfe:	4293      	cmp	r3, r2
 800fd00:	d113      	bne.n	800fd2a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800fd02:	693b      	ldr	r3, [r7, #16]
 800fd04:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fd08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800fd0a:	693b      	ldr	r3, [r7, #16]
 800fd0c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800fd10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800fd12:	683b      	ldr	r3, [r7, #0]
 800fd14:	695b      	ldr	r3, [r3, #20]
 800fd16:	011b      	lsls	r3, r3, #4
 800fd18:	693a      	ldr	r2, [r7, #16]
 800fd1a:	4313      	orrs	r3, r2
 800fd1c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800fd1e:	683b      	ldr	r3, [r7, #0]
 800fd20:	699b      	ldr	r3, [r3, #24]
 800fd22:	011b      	lsls	r3, r3, #4
 800fd24:	693a      	ldr	r2, [r7, #16]
 800fd26:	4313      	orrs	r3, r2
 800fd28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	693a      	ldr	r2, [r7, #16]
 800fd2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	68fa      	ldr	r2, [r7, #12]
 800fd34:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800fd36:	683b      	ldr	r3, [r7, #0]
 800fd38:	685a      	ldr	r2, [r3, #4]
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	697a      	ldr	r2, [r7, #20]
 800fd42:	621a      	str	r2, [r3, #32]
}
 800fd44:	bf00      	nop
 800fd46:	371c      	adds	r7, #28
 800fd48:	46bd      	mov	sp, r7
 800fd4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd4e:	4770      	bx	lr
 800fd50:	fffeff8f 	.word	0xfffeff8f
 800fd54:	40010000 	.word	0x40010000
 800fd58:	40010400 	.word	0x40010400

0800fd5c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800fd5c:	b480      	push	{r7}
 800fd5e:	b087      	sub	sp, #28
 800fd60:	af00      	add	r7, sp, #0
 800fd62:	6078      	str	r0, [r7, #4]
 800fd64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	6a1b      	ldr	r3, [r3, #32]
 800fd6a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	6a1b      	ldr	r3, [r3, #32]
 800fd76:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	685b      	ldr	r3, [r3, #4]
 800fd7c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	69db      	ldr	r3, [r3, #28]
 800fd82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800fd84:	68fa      	ldr	r2, [r7, #12]
 800fd86:	4b1e      	ldr	r3, [pc, #120]	; (800fe00 <TIM_OC4_SetConfig+0xa4>)
 800fd88:	4013      	ands	r3, r2
 800fd8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800fd8c:	68fb      	ldr	r3, [r7, #12]
 800fd8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fd92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fd94:	683b      	ldr	r3, [r7, #0]
 800fd96:	681b      	ldr	r3, [r3, #0]
 800fd98:	021b      	lsls	r3, r3, #8
 800fd9a:	68fa      	ldr	r2, [r7, #12]
 800fd9c:	4313      	orrs	r3, r2
 800fd9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800fda0:	693b      	ldr	r3, [r7, #16]
 800fda2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800fda6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800fda8:	683b      	ldr	r3, [r7, #0]
 800fdaa:	689b      	ldr	r3, [r3, #8]
 800fdac:	031b      	lsls	r3, r3, #12
 800fdae:	693a      	ldr	r2, [r7, #16]
 800fdb0:	4313      	orrs	r3, r2
 800fdb2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	4a13      	ldr	r2, [pc, #76]	; (800fe04 <TIM_OC4_SetConfig+0xa8>)
 800fdb8:	4293      	cmp	r3, r2
 800fdba:	d003      	beq.n	800fdc4 <TIM_OC4_SetConfig+0x68>
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	4a12      	ldr	r2, [pc, #72]	; (800fe08 <TIM_OC4_SetConfig+0xac>)
 800fdc0:	4293      	cmp	r3, r2
 800fdc2:	d109      	bne.n	800fdd8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800fdc4:	697b      	ldr	r3, [r7, #20]
 800fdc6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800fdca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800fdcc:	683b      	ldr	r3, [r7, #0]
 800fdce:	695b      	ldr	r3, [r3, #20]
 800fdd0:	019b      	lsls	r3, r3, #6
 800fdd2:	697a      	ldr	r2, [r7, #20]
 800fdd4:	4313      	orrs	r3, r2
 800fdd6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	697a      	ldr	r2, [r7, #20]
 800fddc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	68fa      	ldr	r2, [r7, #12]
 800fde2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800fde4:	683b      	ldr	r3, [r7, #0]
 800fde6:	685a      	ldr	r2, [r3, #4]
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	693a      	ldr	r2, [r7, #16]
 800fdf0:	621a      	str	r2, [r3, #32]
}
 800fdf2:	bf00      	nop
 800fdf4:	371c      	adds	r7, #28
 800fdf6:	46bd      	mov	sp, r7
 800fdf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdfc:	4770      	bx	lr
 800fdfe:	bf00      	nop
 800fe00:	feff8fff 	.word	0xfeff8fff
 800fe04:	40010000 	.word	0x40010000
 800fe08:	40010400 	.word	0x40010400

0800fe0c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800fe0c:	b480      	push	{r7}
 800fe0e:	b087      	sub	sp, #28
 800fe10:	af00      	add	r7, sp, #0
 800fe12:	6078      	str	r0, [r7, #4]
 800fe14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	6a1b      	ldr	r3, [r3, #32]
 800fe1a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	6a1b      	ldr	r3, [r3, #32]
 800fe26:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	685b      	ldr	r3, [r3, #4]
 800fe2c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fe32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800fe34:	68fa      	ldr	r2, [r7, #12]
 800fe36:	4b1b      	ldr	r3, [pc, #108]	; (800fea4 <TIM_OC5_SetConfig+0x98>)
 800fe38:	4013      	ands	r3, r2
 800fe3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fe3c:	683b      	ldr	r3, [r7, #0]
 800fe3e:	681b      	ldr	r3, [r3, #0]
 800fe40:	68fa      	ldr	r2, [r7, #12]
 800fe42:	4313      	orrs	r3, r2
 800fe44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800fe46:	693b      	ldr	r3, [r7, #16]
 800fe48:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800fe4c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800fe4e:	683b      	ldr	r3, [r7, #0]
 800fe50:	689b      	ldr	r3, [r3, #8]
 800fe52:	041b      	lsls	r3, r3, #16
 800fe54:	693a      	ldr	r2, [r7, #16]
 800fe56:	4313      	orrs	r3, r2
 800fe58:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	4a12      	ldr	r2, [pc, #72]	; (800fea8 <TIM_OC5_SetConfig+0x9c>)
 800fe5e:	4293      	cmp	r3, r2
 800fe60:	d003      	beq.n	800fe6a <TIM_OC5_SetConfig+0x5e>
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	4a11      	ldr	r2, [pc, #68]	; (800feac <TIM_OC5_SetConfig+0xa0>)
 800fe66:	4293      	cmp	r3, r2
 800fe68:	d109      	bne.n	800fe7e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800fe6a:	697b      	ldr	r3, [r7, #20]
 800fe6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800fe70:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800fe72:	683b      	ldr	r3, [r7, #0]
 800fe74:	695b      	ldr	r3, [r3, #20]
 800fe76:	021b      	lsls	r3, r3, #8
 800fe78:	697a      	ldr	r2, [r7, #20]
 800fe7a:	4313      	orrs	r3, r2
 800fe7c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	697a      	ldr	r2, [r7, #20]
 800fe82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	68fa      	ldr	r2, [r7, #12]
 800fe88:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800fe8a:	683b      	ldr	r3, [r7, #0]
 800fe8c:	685a      	ldr	r2, [r3, #4]
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	693a      	ldr	r2, [r7, #16]
 800fe96:	621a      	str	r2, [r3, #32]
}
 800fe98:	bf00      	nop
 800fe9a:	371c      	adds	r7, #28
 800fe9c:	46bd      	mov	sp, r7
 800fe9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fea2:	4770      	bx	lr
 800fea4:	fffeff8f 	.word	0xfffeff8f
 800fea8:	40010000 	.word	0x40010000
 800feac:	40010400 	.word	0x40010400

0800feb0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800feb0:	b480      	push	{r7}
 800feb2:	b087      	sub	sp, #28
 800feb4:	af00      	add	r7, sp, #0
 800feb6:	6078      	str	r0, [r7, #4]
 800feb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	6a1b      	ldr	r3, [r3, #32]
 800febe:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	6a1b      	ldr	r3, [r3, #32]
 800feca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	685b      	ldr	r3, [r3, #4]
 800fed0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fed6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800fed8:	68fa      	ldr	r2, [r7, #12]
 800feda:	4b1c      	ldr	r3, [pc, #112]	; (800ff4c <TIM_OC6_SetConfig+0x9c>)
 800fedc:	4013      	ands	r3, r2
 800fede:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fee0:	683b      	ldr	r3, [r7, #0]
 800fee2:	681b      	ldr	r3, [r3, #0]
 800fee4:	021b      	lsls	r3, r3, #8
 800fee6:	68fa      	ldr	r2, [r7, #12]
 800fee8:	4313      	orrs	r3, r2
 800feea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800feec:	693b      	ldr	r3, [r7, #16]
 800feee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800fef2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800fef4:	683b      	ldr	r3, [r7, #0]
 800fef6:	689b      	ldr	r3, [r3, #8]
 800fef8:	051b      	lsls	r3, r3, #20
 800fefa:	693a      	ldr	r2, [r7, #16]
 800fefc:	4313      	orrs	r3, r2
 800fefe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	4a13      	ldr	r2, [pc, #76]	; (800ff50 <TIM_OC6_SetConfig+0xa0>)
 800ff04:	4293      	cmp	r3, r2
 800ff06:	d003      	beq.n	800ff10 <TIM_OC6_SetConfig+0x60>
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	4a12      	ldr	r2, [pc, #72]	; (800ff54 <TIM_OC6_SetConfig+0xa4>)
 800ff0c:	4293      	cmp	r3, r2
 800ff0e:	d109      	bne.n	800ff24 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ff10:	697b      	ldr	r3, [r7, #20]
 800ff12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ff16:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ff18:	683b      	ldr	r3, [r7, #0]
 800ff1a:	695b      	ldr	r3, [r3, #20]
 800ff1c:	029b      	lsls	r3, r3, #10
 800ff1e:	697a      	ldr	r2, [r7, #20]
 800ff20:	4313      	orrs	r3, r2
 800ff22:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	697a      	ldr	r2, [r7, #20]
 800ff28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	68fa      	ldr	r2, [r7, #12]
 800ff2e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ff30:	683b      	ldr	r3, [r7, #0]
 800ff32:	685a      	ldr	r2, [r3, #4]
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	693a      	ldr	r2, [r7, #16]
 800ff3c:	621a      	str	r2, [r3, #32]
}
 800ff3e:	bf00      	nop
 800ff40:	371c      	adds	r7, #28
 800ff42:	46bd      	mov	sp, r7
 800ff44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff48:	4770      	bx	lr
 800ff4a:	bf00      	nop
 800ff4c:	feff8fff 	.word	0xfeff8fff
 800ff50:	40010000 	.word	0x40010000
 800ff54:	40010400 	.word	0x40010400

0800ff58 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ff58:	b480      	push	{r7}
 800ff5a:	b087      	sub	sp, #28
 800ff5c:	af00      	add	r7, sp, #0
 800ff5e:	60f8      	str	r0, [r7, #12]
 800ff60:	60b9      	str	r1, [r7, #8]
 800ff62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ff64:	68fb      	ldr	r3, [r7, #12]
 800ff66:	6a1b      	ldr	r3, [r3, #32]
 800ff68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ff6a:	68fb      	ldr	r3, [r7, #12]
 800ff6c:	6a1b      	ldr	r3, [r3, #32]
 800ff6e:	f023 0201 	bic.w	r2, r3, #1
 800ff72:	68fb      	ldr	r3, [r7, #12]
 800ff74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ff76:	68fb      	ldr	r3, [r7, #12]
 800ff78:	699b      	ldr	r3, [r3, #24]
 800ff7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ff7c:	693b      	ldr	r3, [r7, #16]
 800ff7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ff82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	011b      	lsls	r3, r3, #4
 800ff88:	693a      	ldr	r2, [r7, #16]
 800ff8a:	4313      	orrs	r3, r2
 800ff8c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ff8e:	697b      	ldr	r3, [r7, #20]
 800ff90:	f023 030a 	bic.w	r3, r3, #10
 800ff94:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ff96:	697a      	ldr	r2, [r7, #20]
 800ff98:	68bb      	ldr	r3, [r7, #8]
 800ff9a:	4313      	orrs	r3, r2
 800ff9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ff9e:	68fb      	ldr	r3, [r7, #12]
 800ffa0:	693a      	ldr	r2, [r7, #16]
 800ffa2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ffa4:	68fb      	ldr	r3, [r7, #12]
 800ffa6:	697a      	ldr	r2, [r7, #20]
 800ffa8:	621a      	str	r2, [r3, #32]
}
 800ffaa:	bf00      	nop
 800ffac:	371c      	adds	r7, #28
 800ffae:	46bd      	mov	sp, r7
 800ffb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffb4:	4770      	bx	lr

0800ffb6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ffb6:	b480      	push	{r7}
 800ffb8:	b087      	sub	sp, #28
 800ffba:	af00      	add	r7, sp, #0
 800ffbc:	60f8      	str	r0, [r7, #12]
 800ffbe:	60b9      	str	r1, [r7, #8]
 800ffc0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ffc2:	68fb      	ldr	r3, [r7, #12]
 800ffc4:	6a1b      	ldr	r3, [r3, #32]
 800ffc6:	f023 0210 	bic.w	r2, r3, #16
 800ffca:	68fb      	ldr	r3, [r7, #12]
 800ffcc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ffce:	68fb      	ldr	r3, [r7, #12]
 800ffd0:	699b      	ldr	r3, [r3, #24]
 800ffd2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ffd4:	68fb      	ldr	r3, [r7, #12]
 800ffd6:	6a1b      	ldr	r3, [r3, #32]
 800ffd8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ffda:	697b      	ldr	r3, [r7, #20]
 800ffdc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ffe0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	031b      	lsls	r3, r3, #12
 800ffe6:	697a      	ldr	r2, [r7, #20]
 800ffe8:	4313      	orrs	r3, r2
 800ffea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ffec:	693b      	ldr	r3, [r7, #16]
 800ffee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800fff2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800fff4:	68bb      	ldr	r3, [r7, #8]
 800fff6:	011b      	lsls	r3, r3, #4
 800fff8:	693a      	ldr	r2, [r7, #16]
 800fffa:	4313      	orrs	r3, r2
 800fffc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800fffe:	68fb      	ldr	r3, [r7, #12]
 8010000:	697a      	ldr	r2, [r7, #20]
 8010002:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010004:	68fb      	ldr	r3, [r7, #12]
 8010006:	693a      	ldr	r2, [r7, #16]
 8010008:	621a      	str	r2, [r3, #32]
}
 801000a:	bf00      	nop
 801000c:	371c      	adds	r7, #28
 801000e:	46bd      	mov	sp, r7
 8010010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010014:	4770      	bx	lr

08010016 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8010016:	b480      	push	{r7}
 8010018:	b085      	sub	sp, #20
 801001a:	af00      	add	r7, sp, #0
 801001c:	6078      	str	r0, [r7, #4]
 801001e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	689b      	ldr	r3, [r3, #8]
 8010024:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8010026:	68fb      	ldr	r3, [r7, #12]
 8010028:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801002c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 801002e:	683a      	ldr	r2, [r7, #0]
 8010030:	68fb      	ldr	r3, [r7, #12]
 8010032:	4313      	orrs	r3, r2
 8010034:	f043 0307 	orr.w	r3, r3, #7
 8010038:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	68fa      	ldr	r2, [r7, #12]
 801003e:	609a      	str	r2, [r3, #8]
}
 8010040:	bf00      	nop
 8010042:	3714      	adds	r7, #20
 8010044:	46bd      	mov	sp, r7
 8010046:	f85d 7b04 	ldr.w	r7, [sp], #4
 801004a:	4770      	bx	lr

0801004c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 801004c:	b480      	push	{r7}
 801004e:	b087      	sub	sp, #28
 8010050:	af00      	add	r7, sp, #0
 8010052:	60f8      	str	r0, [r7, #12]
 8010054:	60b9      	str	r1, [r7, #8]
 8010056:	607a      	str	r2, [r7, #4]
 8010058:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801005a:	68fb      	ldr	r3, [r7, #12]
 801005c:	689b      	ldr	r3, [r3, #8]
 801005e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010060:	697b      	ldr	r3, [r7, #20]
 8010062:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8010066:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8010068:	683b      	ldr	r3, [r7, #0]
 801006a:	021a      	lsls	r2, r3, #8
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	431a      	orrs	r2, r3
 8010070:	68bb      	ldr	r3, [r7, #8]
 8010072:	4313      	orrs	r3, r2
 8010074:	697a      	ldr	r2, [r7, #20]
 8010076:	4313      	orrs	r3, r2
 8010078:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801007a:	68fb      	ldr	r3, [r7, #12]
 801007c:	697a      	ldr	r2, [r7, #20]
 801007e:	609a      	str	r2, [r3, #8]
}
 8010080:	bf00      	nop
 8010082:	371c      	adds	r7, #28
 8010084:	46bd      	mov	sp, r7
 8010086:	f85d 7b04 	ldr.w	r7, [sp], #4
 801008a:	4770      	bx	lr

0801008c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 801008c:	b480      	push	{r7}
 801008e:	b085      	sub	sp, #20
 8010090:	af00      	add	r7, sp, #0
 8010092:	6078      	str	r0, [r7, #4]
 8010094:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801009c:	2b01      	cmp	r3, #1
 801009e:	d101      	bne.n	80100a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80100a0:	2302      	movs	r3, #2
 80100a2:	e06d      	b.n	8010180 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	2201      	movs	r2, #1
 80100a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	2202      	movs	r2, #2
 80100b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	681b      	ldr	r3, [r3, #0]
 80100b8:	685b      	ldr	r3, [r3, #4]
 80100ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	681b      	ldr	r3, [r3, #0]
 80100c0:	689b      	ldr	r3, [r3, #8]
 80100c2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	681b      	ldr	r3, [r3, #0]
 80100c8:	4a30      	ldr	r2, [pc, #192]	; (801018c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80100ca:	4293      	cmp	r3, r2
 80100cc:	d004      	beq.n	80100d8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	681b      	ldr	r3, [r3, #0]
 80100d2:	4a2f      	ldr	r2, [pc, #188]	; (8010190 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80100d4:	4293      	cmp	r3, r2
 80100d6:	d108      	bne.n	80100ea <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80100d8:	68fb      	ldr	r3, [r7, #12]
 80100da:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80100de:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80100e0:	683b      	ldr	r3, [r7, #0]
 80100e2:	685b      	ldr	r3, [r3, #4]
 80100e4:	68fa      	ldr	r2, [r7, #12]
 80100e6:	4313      	orrs	r3, r2
 80100e8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80100ea:	68fb      	ldr	r3, [r7, #12]
 80100ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80100f0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80100f2:	683b      	ldr	r3, [r7, #0]
 80100f4:	681b      	ldr	r3, [r3, #0]
 80100f6:	68fa      	ldr	r2, [r7, #12]
 80100f8:	4313      	orrs	r3, r2
 80100fa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	681b      	ldr	r3, [r3, #0]
 8010100:	68fa      	ldr	r2, [r7, #12]
 8010102:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	681b      	ldr	r3, [r3, #0]
 8010108:	4a20      	ldr	r2, [pc, #128]	; (801018c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 801010a:	4293      	cmp	r3, r2
 801010c:	d022      	beq.n	8010154 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	681b      	ldr	r3, [r3, #0]
 8010112:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010116:	d01d      	beq.n	8010154 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	681b      	ldr	r3, [r3, #0]
 801011c:	4a1d      	ldr	r2, [pc, #116]	; (8010194 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 801011e:	4293      	cmp	r3, r2
 8010120:	d018      	beq.n	8010154 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	681b      	ldr	r3, [r3, #0]
 8010126:	4a1c      	ldr	r2, [pc, #112]	; (8010198 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8010128:	4293      	cmp	r3, r2
 801012a:	d013      	beq.n	8010154 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	681b      	ldr	r3, [r3, #0]
 8010130:	4a1a      	ldr	r2, [pc, #104]	; (801019c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8010132:	4293      	cmp	r3, r2
 8010134:	d00e      	beq.n	8010154 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	681b      	ldr	r3, [r3, #0]
 801013a:	4a15      	ldr	r2, [pc, #84]	; (8010190 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 801013c:	4293      	cmp	r3, r2
 801013e:	d009      	beq.n	8010154 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	681b      	ldr	r3, [r3, #0]
 8010144:	4a16      	ldr	r2, [pc, #88]	; (80101a0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8010146:	4293      	cmp	r3, r2
 8010148:	d004      	beq.n	8010154 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	681b      	ldr	r3, [r3, #0]
 801014e:	4a15      	ldr	r2, [pc, #84]	; (80101a4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8010150:	4293      	cmp	r3, r2
 8010152:	d10c      	bne.n	801016e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8010154:	68bb      	ldr	r3, [r7, #8]
 8010156:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801015a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801015c:	683b      	ldr	r3, [r7, #0]
 801015e:	689b      	ldr	r3, [r3, #8]
 8010160:	68ba      	ldr	r2, [r7, #8]
 8010162:	4313      	orrs	r3, r2
 8010164:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	681b      	ldr	r3, [r3, #0]
 801016a:	68ba      	ldr	r2, [r7, #8]
 801016c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	2201      	movs	r2, #1
 8010172:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	2200      	movs	r2, #0
 801017a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801017e:	2300      	movs	r3, #0
}
 8010180:	4618      	mov	r0, r3
 8010182:	3714      	adds	r7, #20
 8010184:	46bd      	mov	sp, r7
 8010186:	f85d 7b04 	ldr.w	r7, [sp], #4
 801018a:	4770      	bx	lr
 801018c:	40010000 	.word	0x40010000
 8010190:	40010400 	.word	0x40010400
 8010194:	40000400 	.word	0x40000400
 8010198:	40000800 	.word	0x40000800
 801019c:	40000c00 	.word	0x40000c00
 80101a0:	40014000 	.word	0x40014000
 80101a4:	40001800 	.word	0x40001800

080101a8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80101a8:	b480      	push	{r7}
 80101aa:	b085      	sub	sp, #20
 80101ac:	af00      	add	r7, sp, #0
 80101ae:	6078      	str	r0, [r7, #4]
 80101b0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80101b2:	2300      	movs	r3, #0
 80101b4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80101bc:	2b01      	cmp	r3, #1
 80101be:	d101      	bne.n	80101c4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80101c0:	2302      	movs	r3, #2
 80101c2:	e065      	b.n	8010290 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	2201      	movs	r2, #1
 80101c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80101cc:	68fb      	ldr	r3, [r7, #12]
 80101ce:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80101d2:	683b      	ldr	r3, [r7, #0]
 80101d4:	68db      	ldr	r3, [r3, #12]
 80101d6:	4313      	orrs	r3, r2
 80101d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80101da:	68fb      	ldr	r3, [r7, #12]
 80101dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80101e0:	683b      	ldr	r3, [r7, #0]
 80101e2:	689b      	ldr	r3, [r3, #8]
 80101e4:	4313      	orrs	r3, r2
 80101e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80101e8:	68fb      	ldr	r3, [r7, #12]
 80101ea:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80101ee:	683b      	ldr	r3, [r7, #0]
 80101f0:	685b      	ldr	r3, [r3, #4]
 80101f2:	4313      	orrs	r3, r2
 80101f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80101f6:	68fb      	ldr	r3, [r7, #12]
 80101f8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80101fc:	683b      	ldr	r3, [r7, #0]
 80101fe:	681b      	ldr	r3, [r3, #0]
 8010200:	4313      	orrs	r3, r2
 8010202:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8010204:	68fb      	ldr	r3, [r7, #12]
 8010206:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801020a:	683b      	ldr	r3, [r7, #0]
 801020c:	691b      	ldr	r3, [r3, #16]
 801020e:	4313      	orrs	r3, r2
 8010210:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8010212:	68fb      	ldr	r3, [r7, #12]
 8010214:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8010218:	683b      	ldr	r3, [r7, #0]
 801021a:	695b      	ldr	r3, [r3, #20]
 801021c:	4313      	orrs	r3, r2
 801021e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8010220:	68fb      	ldr	r3, [r7, #12]
 8010222:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8010226:	683b      	ldr	r3, [r7, #0]
 8010228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801022a:	4313      	orrs	r3, r2
 801022c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 801022e:	68fb      	ldr	r3, [r7, #12]
 8010230:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8010234:	683b      	ldr	r3, [r7, #0]
 8010236:	699b      	ldr	r3, [r3, #24]
 8010238:	041b      	lsls	r3, r3, #16
 801023a:	4313      	orrs	r3, r2
 801023c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	681b      	ldr	r3, [r3, #0]
 8010242:	4a16      	ldr	r2, [pc, #88]	; (801029c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8010244:	4293      	cmp	r3, r2
 8010246:	d004      	beq.n	8010252 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	681b      	ldr	r3, [r3, #0]
 801024c:	4a14      	ldr	r2, [pc, #80]	; (80102a0 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 801024e:	4293      	cmp	r3, r2
 8010250:	d115      	bne.n	801027e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8010252:	68fb      	ldr	r3, [r7, #12]
 8010254:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8010258:	683b      	ldr	r3, [r7, #0]
 801025a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801025c:	051b      	lsls	r3, r3, #20
 801025e:	4313      	orrs	r3, r2
 8010260:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8010262:	68fb      	ldr	r3, [r7, #12]
 8010264:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8010268:	683b      	ldr	r3, [r7, #0]
 801026a:	69db      	ldr	r3, [r3, #28]
 801026c:	4313      	orrs	r3, r2
 801026e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8010270:	68fb      	ldr	r3, [r7, #12]
 8010272:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8010276:	683b      	ldr	r3, [r7, #0]
 8010278:	6a1b      	ldr	r3, [r3, #32]
 801027a:	4313      	orrs	r3, r2
 801027c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	681b      	ldr	r3, [r3, #0]
 8010282:	68fa      	ldr	r2, [r7, #12]
 8010284:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	2200      	movs	r2, #0
 801028a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801028e:	2300      	movs	r3, #0
}
 8010290:	4618      	mov	r0, r3
 8010292:	3714      	adds	r7, #20
 8010294:	46bd      	mov	sp, r7
 8010296:	f85d 7b04 	ldr.w	r7, [sp], #4
 801029a:	4770      	bx	lr
 801029c:	40010000 	.word	0x40010000
 80102a0:	40010400 	.word	0x40010400

080102a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80102a4:	b480      	push	{r7}
 80102a6:	b083      	sub	sp, #12
 80102a8:	af00      	add	r7, sp, #0
 80102aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80102ac:	bf00      	nop
 80102ae:	370c      	adds	r7, #12
 80102b0:	46bd      	mov	sp, r7
 80102b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102b6:	4770      	bx	lr

080102b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80102b8:	b480      	push	{r7}
 80102ba:	b083      	sub	sp, #12
 80102bc:	af00      	add	r7, sp, #0
 80102be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80102c0:	bf00      	nop
 80102c2:	370c      	adds	r7, #12
 80102c4:	46bd      	mov	sp, r7
 80102c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102ca:	4770      	bx	lr

080102cc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80102cc:	b480      	push	{r7}
 80102ce:	b083      	sub	sp, #12
 80102d0:	af00      	add	r7, sp, #0
 80102d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80102d4:	bf00      	nop
 80102d6:	370c      	adds	r7, #12
 80102d8:	46bd      	mov	sp, r7
 80102da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102de:	4770      	bx	lr

080102e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80102e0:	b580      	push	{r7, lr}
 80102e2:	b082      	sub	sp, #8
 80102e4:	af00      	add	r7, sp, #0
 80102e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	2b00      	cmp	r3, #0
 80102ec:	d101      	bne.n	80102f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80102ee:	2301      	movs	r3, #1
 80102f0:	e040      	b.n	8010374 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80102f6:	2b00      	cmp	r3, #0
 80102f8:	d106      	bne.n	8010308 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	2200      	movs	r2, #0
 80102fe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8010302:	6878      	ldr	r0, [r7, #4]
 8010304:	f7f3 fad6 	bl	80038b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	2224      	movs	r2, #36	; 0x24
 801030c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	681b      	ldr	r3, [r3, #0]
 8010312:	681a      	ldr	r2, [r3, #0]
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	681b      	ldr	r3, [r3, #0]
 8010318:	f022 0201 	bic.w	r2, r2, #1
 801031c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801031e:	6878      	ldr	r0, [r7, #4]
 8010320:	f000 f8c0 	bl	80104a4 <UART_SetConfig>
 8010324:	4603      	mov	r3, r0
 8010326:	2b01      	cmp	r3, #1
 8010328:	d101      	bne.n	801032e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 801032a:	2301      	movs	r3, #1
 801032c:	e022      	b.n	8010374 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010332:	2b00      	cmp	r3, #0
 8010334:	d002      	beq.n	801033c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8010336:	6878      	ldr	r0, [r7, #4]
 8010338:	f000 fb16 	bl	8010968 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	681b      	ldr	r3, [r3, #0]
 8010340:	685a      	ldr	r2, [r3, #4]
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	681b      	ldr	r3, [r3, #0]
 8010346:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801034a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	681b      	ldr	r3, [r3, #0]
 8010350:	689a      	ldr	r2, [r3, #8]
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	681b      	ldr	r3, [r3, #0]
 8010356:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801035a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	681b      	ldr	r3, [r3, #0]
 8010360:	681a      	ldr	r2, [r3, #0]
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	681b      	ldr	r3, [r3, #0]
 8010366:	f042 0201 	orr.w	r2, r2, #1
 801036a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801036c:	6878      	ldr	r0, [r7, #4]
 801036e:	f000 fb9d 	bl	8010aac <UART_CheckIdleState>
 8010372:	4603      	mov	r3, r0
}
 8010374:	4618      	mov	r0, r3
 8010376:	3708      	adds	r7, #8
 8010378:	46bd      	mov	sp, r7
 801037a:	bd80      	pop	{r7, pc}

0801037c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801037c:	b580      	push	{r7, lr}
 801037e:	b08a      	sub	sp, #40	; 0x28
 8010380:	af02      	add	r7, sp, #8
 8010382:	60f8      	str	r0, [r7, #12]
 8010384:	60b9      	str	r1, [r7, #8]
 8010386:	603b      	str	r3, [r7, #0]
 8010388:	4613      	mov	r3, r2
 801038a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801038c:	68fb      	ldr	r3, [r7, #12]
 801038e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010390:	2b20      	cmp	r3, #32
 8010392:	f040 8081 	bne.w	8010498 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8010396:	68bb      	ldr	r3, [r7, #8]
 8010398:	2b00      	cmp	r3, #0
 801039a:	d002      	beq.n	80103a2 <HAL_UART_Transmit+0x26>
 801039c:	88fb      	ldrh	r3, [r7, #6]
 801039e:	2b00      	cmp	r3, #0
 80103a0:	d101      	bne.n	80103a6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80103a2:	2301      	movs	r3, #1
 80103a4:	e079      	b.n	801049a <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80103a6:	68fb      	ldr	r3, [r7, #12]
 80103a8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80103ac:	2b01      	cmp	r3, #1
 80103ae:	d101      	bne.n	80103b4 <HAL_UART_Transmit+0x38>
 80103b0:	2302      	movs	r3, #2
 80103b2:	e072      	b.n	801049a <HAL_UART_Transmit+0x11e>
 80103b4:	68fb      	ldr	r3, [r7, #12]
 80103b6:	2201      	movs	r2, #1
 80103b8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80103bc:	68fb      	ldr	r3, [r7, #12]
 80103be:	2200      	movs	r2, #0
 80103c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80103c4:	68fb      	ldr	r3, [r7, #12]
 80103c6:	2221      	movs	r2, #33	; 0x21
 80103c8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80103ca:	f7f5 fc97 	bl	8005cfc <HAL_GetTick>
 80103ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80103d0:	68fb      	ldr	r3, [r7, #12]
 80103d2:	88fa      	ldrh	r2, [r7, #6]
 80103d4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80103d8:	68fb      	ldr	r3, [r7, #12]
 80103da:	88fa      	ldrh	r2, [r7, #6]
 80103dc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80103e0:	68fb      	ldr	r3, [r7, #12]
 80103e2:	689b      	ldr	r3, [r3, #8]
 80103e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80103e8:	d108      	bne.n	80103fc <HAL_UART_Transmit+0x80>
 80103ea:	68fb      	ldr	r3, [r7, #12]
 80103ec:	691b      	ldr	r3, [r3, #16]
 80103ee:	2b00      	cmp	r3, #0
 80103f0:	d104      	bne.n	80103fc <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80103f2:	2300      	movs	r3, #0
 80103f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80103f6:	68bb      	ldr	r3, [r7, #8]
 80103f8:	61bb      	str	r3, [r7, #24]
 80103fa:	e003      	b.n	8010404 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80103fc:	68bb      	ldr	r3, [r7, #8]
 80103fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8010400:	2300      	movs	r3, #0
 8010402:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8010404:	68fb      	ldr	r3, [r7, #12]
 8010406:	2200      	movs	r2, #0
 8010408:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 801040c:	e02c      	b.n	8010468 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801040e:	683b      	ldr	r3, [r7, #0]
 8010410:	9300      	str	r3, [sp, #0]
 8010412:	697b      	ldr	r3, [r7, #20]
 8010414:	2200      	movs	r2, #0
 8010416:	2180      	movs	r1, #128	; 0x80
 8010418:	68f8      	ldr	r0, [r7, #12]
 801041a:	f000 fb7a 	bl	8010b12 <UART_WaitOnFlagUntilTimeout>
 801041e:	4603      	mov	r3, r0
 8010420:	2b00      	cmp	r3, #0
 8010422:	d001      	beq.n	8010428 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8010424:	2303      	movs	r3, #3
 8010426:	e038      	b.n	801049a <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8010428:	69fb      	ldr	r3, [r7, #28]
 801042a:	2b00      	cmp	r3, #0
 801042c:	d10b      	bne.n	8010446 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 801042e:	69bb      	ldr	r3, [r7, #24]
 8010430:	881b      	ldrh	r3, [r3, #0]
 8010432:	461a      	mov	r2, r3
 8010434:	68fb      	ldr	r3, [r7, #12]
 8010436:	681b      	ldr	r3, [r3, #0]
 8010438:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801043c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 801043e:	69bb      	ldr	r3, [r7, #24]
 8010440:	3302      	adds	r3, #2
 8010442:	61bb      	str	r3, [r7, #24]
 8010444:	e007      	b.n	8010456 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8010446:	69fb      	ldr	r3, [r7, #28]
 8010448:	781a      	ldrb	r2, [r3, #0]
 801044a:	68fb      	ldr	r3, [r7, #12]
 801044c:	681b      	ldr	r3, [r3, #0]
 801044e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8010450:	69fb      	ldr	r3, [r7, #28]
 8010452:	3301      	adds	r3, #1
 8010454:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8010456:	68fb      	ldr	r3, [r7, #12]
 8010458:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 801045c:	b29b      	uxth	r3, r3
 801045e:	3b01      	subs	r3, #1
 8010460:	b29a      	uxth	r2, r3
 8010462:	68fb      	ldr	r3, [r7, #12]
 8010464:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8010468:	68fb      	ldr	r3, [r7, #12]
 801046a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 801046e:	b29b      	uxth	r3, r3
 8010470:	2b00      	cmp	r3, #0
 8010472:	d1cc      	bne.n	801040e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8010474:	683b      	ldr	r3, [r7, #0]
 8010476:	9300      	str	r3, [sp, #0]
 8010478:	697b      	ldr	r3, [r7, #20]
 801047a:	2200      	movs	r2, #0
 801047c:	2140      	movs	r1, #64	; 0x40
 801047e:	68f8      	ldr	r0, [r7, #12]
 8010480:	f000 fb47 	bl	8010b12 <UART_WaitOnFlagUntilTimeout>
 8010484:	4603      	mov	r3, r0
 8010486:	2b00      	cmp	r3, #0
 8010488:	d001      	beq.n	801048e <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 801048a:	2303      	movs	r3, #3
 801048c:	e005      	b.n	801049a <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801048e:	68fb      	ldr	r3, [r7, #12]
 8010490:	2220      	movs	r2, #32
 8010492:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8010494:	2300      	movs	r3, #0
 8010496:	e000      	b.n	801049a <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8010498:	2302      	movs	r3, #2
  }
}
 801049a:	4618      	mov	r0, r3
 801049c:	3720      	adds	r7, #32
 801049e:	46bd      	mov	sp, r7
 80104a0:	bd80      	pop	{r7, pc}
	...

080104a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80104a4:	b580      	push	{r7, lr}
 80104a6:	b088      	sub	sp, #32
 80104a8:	af00      	add	r7, sp, #0
 80104aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80104ac:	2300      	movs	r3, #0
 80104ae:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	689a      	ldr	r2, [r3, #8]
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	691b      	ldr	r3, [r3, #16]
 80104b8:	431a      	orrs	r2, r3
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	695b      	ldr	r3, [r3, #20]
 80104be:	431a      	orrs	r2, r3
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	69db      	ldr	r3, [r3, #28]
 80104c4:	4313      	orrs	r3, r2
 80104c6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	681b      	ldr	r3, [r3, #0]
 80104cc:	681a      	ldr	r2, [r3, #0]
 80104ce:	4ba7      	ldr	r3, [pc, #668]	; (801076c <UART_SetConfig+0x2c8>)
 80104d0:	4013      	ands	r3, r2
 80104d2:	687a      	ldr	r2, [r7, #4]
 80104d4:	6812      	ldr	r2, [r2, #0]
 80104d6:	6979      	ldr	r1, [r7, #20]
 80104d8:	430b      	orrs	r3, r1
 80104da:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	681b      	ldr	r3, [r3, #0]
 80104e0:	685b      	ldr	r3, [r3, #4]
 80104e2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	68da      	ldr	r2, [r3, #12]
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	681b      	ldr	r3, [r3, #0]
 80104ee:	430a      	orrs	r2, r1
 80104f0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	699b      	ldr	r3, [r3, #24]
 80104f6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	6a1b      	ldr	r3, [r3, #32]
 80104fc:	697a      	ldr	r2, [r7, #20]
 80104fe:	4313      	orrs	r3, r2
 8010500:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	681b      	ldr	r3, [r3, #0]
 8010506:	689b      	ldr	r3, [r3, #8]
 8010508:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	681b      	ldr	r3, [r3, #0]
 8010510:	697a      	ldr	r2, [r7, #20]
 8010512:	430a      	orrs	r2, r1
 8010514:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	681b      	ldr	r3, [r3, #0]
 801051a:	4a95      	ldr	r2, [pc, #596]	; (8010770 <UART_SetConfig+0x2cc>)
 801051c:	4293      	cmp	r3, r2
 801051e:	d120      	bne.n	8010562 <UART_SetConfig+0xbe>
 8010520:	4b94      	ldr	r3, [pc, #592]	; (8010774 <UART_SetConfig+0x2d0>)
 8010522:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010526:	f003 0303 	and.w	r3, r3, #3
 801052a:	2b03      	cmp	r3, #3
 801052c:	d816      	bhi.n	801055c <UART_SetConfig+0xb8>
 801052e:	a201      	add	r2, pc, #4	; (adr r2, 8010534 <UART_SetConfig+0x90>)
 8010530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010534:	08010545 	.word	0x08010545
 8010538:	08010551 	.word	0x08010551
 801053c:	0801054b 	.word	0x0801054b
 8010540:	08010557 	.word	0x08010557
 8010544:	2301      	movs	r3, #1
 8010546:	77fb      	strb	r3, [r7, #31]
 8010548:	e14f      	b.n	80107ea <UART_SetConfig+0x346>
 801054a:	2302      	movs	r3, #2
 801054c:	77fb      	strb	r3, [r7, #31]
 801054e:	e14c      	b.n	80107ea <UART_SetConfig+0x346>
 8010550:	2304      	movs	r3, #4
 8010552:	77fb      	strb	r3, [r7, #31]
 8010554:	e149      	b.n	80107ea <UART_SetConfig+0x346>
 8010556:	2308      	movs	r3, #8
 8010558:	77fb      	strb	r3, [r7, #31]
 801055a:	e146      	b.n	80107ea <UART_SetConfig+0x346>
 801055c:	2310      	movs	r3, #16
 801055e:	77fb      	strb	r3, [r7, #31]
 8010560:	e143      	b.n	80107ea <UART_SetConfig+0x346>
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	681b      	ldr	r3, [r3, #0]
 8010566:	4a84      	ldr	r2, [pc, #528]	; (8010778 <UART_SetConfig+0x2d4>)
 8010568:	4293      	cmp	r3, r2
 801056a:	d132      	bne.n	80105d2 <UART_SetConfig+0x12e>
 801056c:	4b81      	ldr	r3, [pc, #516]	; (8010774 <UART_SetConfig+0x2d0>)
 801056e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010572:	f003 030c 	and.w	r3, r3, #12
 8010576:	2b0c      	cmp	r3, #12
 8010578:	d828      	bhi.n	80105cc <UART_SetConfig+0x128>
 801057a:	a201      	add	r2, pc, #4	; (adr r2, 8010580 <UART_SetConfig+0xdc>)
 801057c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010580:	080105b5 	.word	0x080105b5
 8010584:	080105cd 	.word	0x080105cd
 8010588:	080105cd 	.word	0x080105cd
 801058c:	080105cd 	.word	0x080105cd
 8010590:	080105c1 	.word	0x080105c1
 8010594:	080105cd 	.word	0x080105cd
 8010598:	080105cd 	.word	0x080105cd
 801059c:	080105cd 	.word	0x080105cd
 80105a0:	080105bb 	.word	0x080105bb
 80105a4:	080105cd 	.word	0x080105cd
 80105a8:	080105cd 	.word	0x080105cd
 80105ac:	080105cd 	.word	0x080105cd
 80105b0:	080105c7 	.word	0x080105c7
 80105b4:	2300      	movs	r3, #0
 80105b6:	77fb      	strb	r3, [r7, #31]
 80105b8:	e117      	b.n	80107ea <UART_SetConfig+0x346>
 80105ba:	2302      	movs	r3, #2
 80105bc:	77fb      	strb	r3, [r7, #31]
 80105be:	e114      	b.n	80107ea <UART_SetConfig+0x346>
 80105c0:	2304      	movs	r3, #4
 80105c2:	77fb      	strb	r3, [r7, #31]
 80105c4:	e111      	b.n	80107ea <UART_SetConfig+0x346>
 80105c6:	2308      	movs	r3, #8
 80105c8:	77fb      	strb	r3, [r7, #31]
 80105ca:	e10e      	b.n	80107ea <UART_SetConfig+0x346>
 80105cc:	2310      	movs	r3, #16
 80105ce:	77fb      	strb	r3, [r7, #31]
 80105d0:	e10b      	b.n	80107ea <UART_SetConfig+0x346>
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	681b      	ldr	r3, [r3, #0]
 80105d6:	4a69      	ldr	r2, [pc, #420]	; (801077c <UART_SetConfig+0x2d8>)
 80105d8:	4293      	cmp	r3, r2
 80105da:	d120      	bne.n	801061e <UART_SetConfig+0x17a>
 80105dc:	4b65      	ldr	r3, [pc, #404]	; (8010774 <UART_SetConfig+0x2d0>)
 80105de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80105e2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80105e6:	2b30      	cmp	r3, #48	; 0x30
 80105e8:	d013      	beq.n	8010612 <UART_SetConfig+0x16e>
 80105ea:	2b30      	cmp	r3, #48	; 0x30
 80105ec:	d814      	bhi.n	8010618 <UART_SetConfig+0x174>
 80105ee:	2b20      	cmp	r3, #32
 80105f0:	d009      	beq.n	8010606 <UART_SetConfig+0x162>
 80105f2:	2b20      	cmp	r3, #32
 80105f4:	d810      	bhi.n	8010618 <UART_SetConfig+0x174>
 80105f6:	2b00      	cmp	r3, #0
 80105f8:	d002      	beq.n	8010600 <UART_SetConfig+0x15c>
 80105fa:	2b10      	cmp	r3, #16
 80105fc:	d006      	beq.n	801060c <UART_SetConfig+0x168>
 80105fe:	e00b      	b.n	8010618 <UART_SetConfig+0x174>
 8010600:	2300      	movs	r3, #0
 8010602:	77fb      	strb	r3, [r7, #31]
 8010604:	e0f1      	b.n	80107ea <UART_SetConfig+0x346>
 8010606:	2302      	movs	r3, #2
 8010608:	77fb      	strb	r3, [r7, #31]
 801060a:	e0ee      	b.n	80107ea <UART_SetConfig+0x346>
 801060c:	2304      	movs	r3, #4
 801060e:	77fb      	strb	r3, [r7, #31]
 8010610:	e0eb      	b.n	80107ea <UART_SetConfig+0x346>
 8010612:	2308      	movs	r3, #8
 8010614:	77fb      	strb	r3, [r7, #31]
 8010616:	e0e8      	b.n	80107ea <UART_SetConfig+0x346>
 8010618:	2310      	movs	r3, #16
 801061a:	77fb      	strb	r3, [r7, #31]
 801061c:	e0e5      	b.n	80107ea <UART_SetConfig+0x346>
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	681b      	ldr	r3, [r3, #0]
 8010622:	4a57      	ldr	r2, [pc, #348]	; (8010780 <UART_SetConfig+0x2dc>)
 8010624:	4293      	cmp	r3, r2
 8010626:	d120      	bne.n	801066a <UART_SetConfig+0x1c6>
 8010628:	4b52      	ldr	r3, [pc, #328]	; (8010774 <UART_SetConfig+0x2d0>)
 801062a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801062e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8010632:	2bc0      	cmp	r3, #192	; 0xc0
 8010634:	d013      	beq.n	801065e <UART_SetConfig+0x1ba>
 8010636:	2bc0      	cmp	r3, #192	; 0xc0
 8010638:	d814      	bhi.n	8010664 <UART_SetConfig+0x1c0>
 801063a:	2b80      	cmp	r3, #128	; 0x80
 801063c:	d009      	beq.n	8010652 <UART_SetConfig+0x1ae>
 801063e:	2b80      	cmp	r3, #128	; 0x80
 8010640:	d810      	bhi.n	8010664 <UART_SetConfig+0x1c0>
 8010642:	2b00      	cmp	r3, #0
 8010644:	d002      	beq.n	801064c <UART_SetConfig+0x1a8>
 8010646:	2b40      	cmp	r3, #64	; 0x40
 8010648:	d006      	beq.n	8010658 <UART_SetConfig+0x1b4>
 801064a:	e00b      	b.n	8010664 <UART_SetConfig+0x1c0>
 801064c:	2300      	movs	r3, #0
 801064e:	77fb      	strb	r3, [r7, #31]
 8010650:	e0cb      	b.n	80107ea <UART_SetConfig+0x346>
 8010652:	2302      	movs	r3, #2
 8010654:	77fb      	strb	r3, [r7, #31]
 8010656:	e0c8      	b.n	80107ea <UART_SetConfig+0x346>
 8010658:	2304      	movs	r3, #4
 801065a:	77fb      	strb	r3, [r7, #31]
 801065c:	e0c5      	b.n	80107ea <UART_SetConfig+0x346>
 801065e:	2308      	movs	r3, #8
 8010660:	77fb      	strb	r3, [r7, #31]
 8010662:	e0c2      	b.n	80107ea <UART_SetConfig+0x346>
 8010664:	2310      	movs	r3, #16
 8010666:	77fb      	strb	r3, [r7, #31]
 8010668:	e0bf      	b.n	80107ea <UART_SetConfig+0x346>
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	681b      	ldr	r3, [r3, #0]
 801066e:	4a45      	ldr	r2, [pc, #276]	; (8010784 <UART_SetConfig+0x2e0>)
 8010670:	4293      	cmp	r3, r2
 8010672:	d125      	bne.n	80106c0 <UART_SetConfig+0x21c>
 8010674:	4b3f      	ldr	r3, [pc, #252]	; (8010774 <UART_SetConfig+0x2d0>)
 8010676:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801067a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801067e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010682:	d017      	beq.n	80106b4 <UART_SetConfig+0x210>
 8010684:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010688:	d817      	bhi.n	80106ba <UART_SetConfig+0x216>
 801068a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801068e:	d00b      	beq.n	80106a8 <UART_SetConfig+0x204>
 8010690:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010694:	d811      	bhi.n	80106ba <UART_SetConfig+0x216>
 8010696:	2b00      	cmp	r3, #0
 8010698:	d003      	beq.n	80106a2 <UART_SetConfig+0x1fe>
 801069a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801069e:	d006      	beq.n	80106ae <UART_SetConfig+0x20a>
 80106a0:	e00b      	b.n	80106ba <UART_SetConfig+0x216>
 80106a2:	2300      	movs	r3, #0
 80106a4:	77fb      	strb	r3, [r7, #31]
 80106a6:	e0a0      	b.n	80107ea <UART_SetConfig+0x346>
 80106a8:	2302      	movs	r3, #2
 80106aa:	77fb      	strb	r3, [r7, #31]
 80106ac:	e09d      	b.n	80107ea <UART_SetConfig+0x346>
 80106ae:	2304      	movs	r3, #4
 80106b0:	77fb      	strb	r3, [r7, #31]
 80106b2:	e09a      	b.n	80107ea <UART_SetConfig+0x346>
 80106b4:	2308      	movs	r3, #8
 80106b6:	77fb      	strb	r3, [r7, #31]
 80106b8:	e097      	b.n	80107ea <UART_SetConfig+0x346>
 80106ba:	2310      	movs	r3, #16
 80106bc:	77fb      	strb	r3, [r7, #31]
 80106be:	e094      	b.n	80107ea <UART_SetConfig+0x346>
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	681b      	ldr	r3, [r3, #0]
 80106c4:	4a30      	ldr	r2, [pc, #192]	; (8010788 <UART_SetConfig+0x2e4>)
 80106c6:	4293      	cmp	r3, r2
 80106c8:	d125      	bne.n	8010716 <UART_SetConfig+0x272>
 80106ca:	4b2a      	ldr	r3, [pc, #168]	; (8010774 <UART_SetConfig+0x2d0>)
 80106cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80106d0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80106d4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80106d8:	d017      	beq.n	801070a <UART_SetConfig+0x266>
 80106da:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80106de:	d817      	bhi.n	8010710 <UART_SetConfig+0x26c>
 80106e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80106e4:	d00b      	beq.n	80106fe <UART_SetConfig+0x25a>
 80106e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80106ea:	d811      	bhi.n	8010710 <UART_SetConfig+0x26c>
 80106ec:	2b00      	cmp	r3, #0
 80106ee:	d003      	beq.n	80106f8 <UART_SetConfig+0x254>
 80106f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80106f4:	d006      	beq.n	8010704 <UART_SetConfig+0x260>
 80106f6:	e00b      	b.n	8010710 <UART_SetConfig+0x26c>
 80106f8:	2301      	movs	r3, #1
 80106fa:	77fb      	strb	r3, [r7, #31]
 80106fc:	e075      	b.n	80107ea <UART_SetConfig+0x346>
 80106fe:	2302      	movs	r3, #2
 8010700:	77fb      	strb	r3, [r7, #31]
 8010702:	e072      	b.n	80107ea <UART_SetConfig+0x346>
 8010704:	2304      	movs	r3, #4
 8010706:	77fb      	strb	r3, [r7, #31]
 8010708:	e06f      	b.n	80107ea <UART_SetConfig+0x346>
 801070a:	2308      	movs	r3, #8
 801070c:	77fb      	strb	r3, [r7, #31]
 801070e:	e06c      	b.n	80107ea <UART_SetConfig+0x346>
 8010710:	2310      	movs	r3, #16
 8010712:	77fb      	strb	r3, [r7, #31]
 8010714:	e069      	b.n	80107ea <UART_SetConfig+0x346>
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	681b      	ldr	r3, [r3, #0]
 801071a:	4a1c      	ldr	r2, [pc, #112]	; (801078c <UART_SetConfig+0x2e8>)
 801071c:	4293      	cmp	r3, r2
 801071e:	d137      	bne.n	8010790 <UART_SetConfig+0x2ec>
 8010720:	4b14      	ldr	r3, [pc, #80]	; (8010774 <UART_SetConfig+0x2d0>)
 8010722:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010726:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 801072a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 801072e:	d017      	beq.n	8010760 <UART_SetConfig+0x2bc>
 8010730:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8010734:	d817      	bhi.n	8010766 <UART_SetConfig+0x2c2>
 8010736:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801073a:	d00b      	beq.n	8010754 <UART_SetConfig+0x2b0>
 801073c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010740:	d811      	bhi.n	8010766 <UART_SetConfig+0x2c2>
 8010742:	2b00      	cmp	r3, #0
 8010744:	d003      	beq.n	801074e <UART_SetConfig+0x2aa>
 8010746:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801074a:	d006      	beq.n	801075a <UART_SetConfig+0x2b6>
 801074c:	e00b      	b.n	8010766 <UART_SetConfig+0x2c2>
 801074e:	2300      	movs	r3, #0
 8010750:	77fb      	strb	r3, [r7, #31]
 8010752:	e04a      	b.n	80107ea <UART_SetConfig+0x346>
 8010754:	2302      	movs	r3, #2
 8010756:	77fb      	strb	r3, [r7, #31]
 8010758:	e047      	b.n	80107ea <UART_SetConfig+0x346>
 801075a:	2304      	movs	r3, #4
 801075c:	77fb      	strb	r3, [r7, #31]
 801075e:	e044      	b.n	80107ea <UART_SetConfig+0x346>
 8010760:	2308      	movs	r3, #8
 8010762:	77fb      	strb	r3, [r7, #31]
 8010764:	e041      	b.n	80107ea <UART_SetConfig+0x346>
 8010766:	2310      	movs	r3, #16
 8010768:	77fb      	strb	r3, [r7, #31]
 801076a:	e03e      	b.n	80107ea <UART_SetConfig+0x346>
 801076c:	efff69f3 	.word	0xefff69f3
 8010770:	40011000 	.word	0x40011000
 8010774:	40023800 	.word	0x40023800
 8010778:	40004400 	.word	0x40004400
 801077c:	40004800 	.word	0x40004800
 8010780:	40004c00 	.word	0x40004c00
 8010784:	40005000 	.word	0x40005000
 8010788:	40011400 	.word	0x40011400
 801078c:	40007800 	.word	0x40007800
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	681b      	ldr	r3, [r3, #0]
 8010794:	4a71      	ldr	r2, [pc, #452]	; (801095c <UART_SetConfig+0x4b8>)
 8010796:	4293      	cmp	r3, r2
 8010798:	d125      	bne.n	80107e6 <UART_SetConfig+0x342>
 801079a:	4b71      	ldr	r3, [pc, #452]	; (8010960 <UART_SetConfig+0x4bc>)
 801079c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80107a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80107a4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80107a8:	d017      	beq.n	80107da <UART_SetConfig+0x336>
 80107aa:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80107ae:	d817      	bhi.n	80107e0 <UART_SetConfig+0x33c>
 80107b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80107b4:	d00b      	beq.n	80107ce <UART_SetConfig+0x32a>
 80107b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80107ba:	d811      	bhi.n	80107e0 <UART_SetConfig+0x33c>
 80107bc:	2b00      	cmp	r3, #0
 80107be:	d003      	beq.n	80107c8 <UART_SetConfig+0x324>
 80107c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80107c4:	d006      	beq.n	80107d4 <UART_SetConfig+0x330>
 80107c6:	e00b      	b.n	80107e0 <UART_SetConfig+0x33c>
 80107c8:	2300      	movs	r3, #0
 80107ca:	77fb      	strb	r3, [r7, #31]
 80107cc:	e00d      	b.n	80107ea <UART_SetConfig+0x346>
 80107ce:	2302      	movs	r3, #2
 80107d0:	77fb      	strb	r3, [r7, #31]
 80107d2:	e00a      	b.n	80107ea <UART_SetConfig+0x346>
 80107d4:	2304      	movs	r3, #4
 80107d6:	77fb      	strb	r3, [r7, #31]
 80107d8:	e007      	b.n	80107ea <UART_SetConfig+0x346>
 80107da:	2308      	movs	r3, #8
 80107dc:	77fb      	strb	r3, [r7, #31]
 80107de:	e004      	b.n	80107ea <UART_SetConfig+0x346>
 80107e0:	2310      	movs	r3, #16
 80107e2:	77fb      	strb	r3, [r7, #31]
 80107e4:	e001      	b.n	80107ea <UART_SetConfig+0x346>
 80107e6:	2310      	movs	r3, #16
 80107e8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	69db      	ldr	r3, [r3, #28]
 80107ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80107f2:	d15b      	bne.n	80108ac <UART_SetConfig+0x408>
  {
    switch (clocksource)
 80107f4:	7ffb      	ldrb	r3, [r7, #31]
 80107f6:	2b08      	cmp	r3, #8
 80107f8:	d827      	bhi.n	801084a <UART_SetConfig+0x3a6>
 80107fa:	a201      	add	r2, pc, #4	; (adr r2, 8010800 <UART_SetConfig+0x35c>)
 80107fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010800:	08010825 	.word	0x08010825
 8010804:	0801082d 	.word	0x0801082d
 8010808:	08010835 	.word	0x08010835
 801080c:	0801084b 	.word	0x0801084b
 8010810:	0801083b 	.word	0x0801083b
 8010814:	0801084b 	.word	0x0801084b
 8010818:	0801084b 	.word	0x0801084b
 801081c:	0801084b 	.word	0x0801084b
 8010820:	08010843 	.word	0x08010843
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010824:	f7fb fd9e 	bl	800c364 <HAL_RCC_GetPCLK1Freq>
 8010828:	61b8      	str	r0, [r7, #24]
        break;
 801082a:	e013      	b.n	8010854 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801082c:	f7fb fdae 	bl	800c38c <HAL_RCC_GetPCLK2Freq>
 8010830:	61b8      	str	r0, [r7, #24]
        break;
 8010832:	e00f      	b.n	8010854 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8010834:	4b4b      	ldr	r3, [pc, #300]	; (8010964 <UART_SetConfig+0x4c0>)
 8010836:	61bb      	str	r3, [r7, #24]
        break;
 8010838:	e00c      	b.n	8010854 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801083a:	f7fb fcd1 	bl	800c1e0 <HAL_RCC_GetSysClockFreq>
 801083e:	61b8      	str	r0, [r7, #24]
        break;
 8010840:	e008      	b.n	8010854 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010842:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010846:	61bb      	str	r3, [r7, #24]
        break;
 8010848:	e004      	b.n	8010854 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 801084a:	2300      	movs	r3, #0
 801084c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 801084e:	2301      	movs	r3, #1
 8010850:	77bb      	strb	r3, [r7, #30]
        break;
 8010852:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8010854:	69bb      	ldr	r3, [r7, #24]
 8010856:	2b00      	cmp	r3, #0
 8010858:	d074      	beq.n	8010944 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 801085a:	69bb      	ldr	r3, [r7, #24]
 801085c:	005a      	lsls	r2, r3, #1
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	685b      	ldr	r3, [r3, #4]
 8010862:	085b      	lsrs	r3, r3, #1
 8010864:	441a      	add	r2, r3
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	685b      	ldr	r3, [r3, #4]
 801086a:	fbb2 f3f3 	udiv	r3, r2, r3
 801086e:	b29b      	uxth	r3, r3
 8010870:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010872:	693b      	ldr	r3, [r7, #16]
 8010874:	2b0f      	cmp	r3, #15
 8010876:	d916      	bls.n	80108a6 <UART_SetConfig+0x402>
 8010878:	693b      	ldr	r3, [r7, #16]
 801087a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801087e:	d212      	bcs.n	80108a6 <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8010880:	693b      	ldr	r3, [r7, #16]
 8010882:	b29b      	uxth	r3, r3
 8010884:	f023 030f 	bic.w	r3, r3, #15
 8010888:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801088a:	693b      	ldr	r3, [r7, #16]
 801088c:	085b      	lsrs	r3, r3, #1
 801088e:	b29b      	uxth	r3, r3
 8010890:	f003 0307 	and.w	r3, r3, #7
 8010894:	b29a      	uxth	r2, r3
 8010896:	89fb      	ldrh	r3, [r7, #14]
 8010898:	4313      	orrs	r3, r2
 801089a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	681b      	ldr	r3, [r3, #0]
 80108a0:	89fa      	ldrh	r2, [r7, #14]
 80108a2:	60da      	str	r2, [r3, #12]
 80108a4:	e04e      	b.n	8010944 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80108a6:	2301      	movs	r3, #1
 80108a8:	77bb      	strb	r3, [r7, #30]
 80108aa:	e04b      	b.n	8010944 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80108ac:	7ffb      	ldrb	r3, [r7, #31]
 80108ae:	2b08      	cmp	r3, #8
 80108b0:	d827      	bhi.n	8010902 <UART_SetConfig+0x45e>
 80108b2:	a201      	add	r2, pc, #4	; (adr r2, 80108b8 <UART_SetConfig+0x414>)
 80108b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80108b8:	080108dd 	.word	0x080108dd
 80108bc:	080108e5 	.word	0x080108e5
 80108c0:	080108ed 	.word	0x080108ed
 80108c4:	08010903 	.word	0x08010903
 80108c8:	080108f3 	.word	0x080108f3
 80108cc:	08010903 	.word	0x08010903
 80108d0:	08010903 	.word	0x08010903
 80108d4:	08010903 	.word	0x08010903
 80108d8:	080108fb 	.word	0x080108fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80108dc:	f7fb fd42 	bl	800c364 <HAL_RCC_GetPCLK1Freq>
 80108e0:	61b8      	str	r0, [r7, #24]
        break;
 80108e2:	e013      	b.n	801090c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80108e4:	f7fb fd52 	bl	800c38c <HAL_RCC_GetPCLK2Freq>
 80108e8:	61b8      	str	r0, [r7, #24]
        break;
 80108ea:	e00f      	b.n	801090c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80108ec:	4b1d      	ldr	r3, [pc, #116]	; (8010964 <UART_SetConfig+0x4c0>)
 80108ee:	61bb      	str	r3, [r7, #24]
        break;
 80108f0:	e00c      	b.n	801090c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80108f2:	f7fb fc75 	bl	800c1e0 <HAL_RCC_GetSysClockFreq>
 80108f6:	61b8      	str	r0, [r7, #24]
        break;
 80108f8:	e008      	b.n	801090c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80108fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80108fe:	61bb      	str	r3, [r7, #24]
        break;
 8010900:	e004      	b.n	801090c <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8010902:	2300      	movs	r3, #0
 8010904:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8010906:	2301      	movs	r3, #1
 8010908:	77bb      	strb	r3, [r7, #30]
        break;
 801090a:	bf00      	nop
    }

    if (pclk != 0U)
 801090c:	69bb      	ldr	r3, [r7, #24]
 801090e:	2b00      	cmp	r3, #0
 8010910:	d018      	beq.n	8010944 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	685b      	ldr	r3, [r3, #4]
 8010916:	085a      	lsrs	r2, r3, #1
 8010918:	69bb      	ldr	r3, [r7, #24]
 801091a:	441a      	add	r2, r3
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	685b      	ldr	r3, [r3, #4]
 8010920:	fbb2 f3f3 	udiv	r3, r2, r3
 8010924:	b29b      	uxth	r3, r3
 8010926:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010928:	693b      	ldr	r3, [r7, #16]
 801092a:	2b0f      	cmp	r3, #15
 801092c:	d908      	bls.n	8010940 <UART_SetConfig+0x49c>
 801092e:	693b      	ldr	r3, [r7, #16]
 8010930:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010934:	d204      	bcs.n	8010940 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	681b      	ldr	r3, [r3, #0]
 801093a:	693a      	ldr	r2, [r7, #16]
 801093c:	60da      	str	r2, [r3, #12]
 801093e:	e001      	b.n	8010944 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8010940:	2301      	movs	r3, #1
 8010942:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	2200      	movs	r2, #0
 8010948:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	2200      	movs	r2, #0
 801094e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8010950:	7fbb      	ldrb	r3, [r7, #30]
}
 8010952:	4618      	mov	r0, r3
 8010954:	3720      	adds	r7, #32
 8010956:	46bd      	mov	sp, r7
 8010958:	bd80      	pop	{r7, pc}
 801095a:	bf00      	nop
 801095c:	40007c00 	.word	0x40007c00
 8010960:	40023800 	.word	0x40023800
 8010964:	00f42400 	.word	0x00f42400

08010968 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8010968:	b480      	push	{r7}
 801096a:	b083      	sub	sp, #12
 801096c:	af00      	add	r7, sp, #0
 801096e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010974:	f003 0301 	and.w	r3, r3, #1
 8010978:	2b00      	cmp	r3, #0
 801097a:	d00a      	beq.n	8010992 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	681b      	ldr	r3, [r3, #0]
 8010980:	685b      	ldr	r3, [r3, #4]
 8010982:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	681b      	ldr	r3, [r3, #0]
 801098e:	430a      	orrs	r2, r1
 8010990:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010996:	f003 0302 	and.w	r3, r3, #2
 801099a:	2b00      	cmp	r3, #0
 801099c:	d00a      	beq.n	80109b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	681b      	ldr	r3, [r3, #0]
 80109a2:	685b      	ldr	r3, [r3, #4]
 80109a4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	681b      	ldr	r3, [r3, #0]
 80109b0:	430a      	orrs	r2, r1
 80109b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80109b8:	f003 0304 	and.w	r3, r3, #4
 80109bc:	2b00      	cmp	r3, #0
 80109be:	d00a      	beq.n	80109d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	681b      	ldr	r3, [r3, #0]
 80109c4:	685b      	ldr	r3, [r3, #4]
 80109c6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	681b      	ldr	r3, [r3, #0]
 80109d2:	430a      	orrs	r2, r1
 80109d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80109da:	f003 0308 	and.w	r3, r3, #8
 80109de:	2b00      	cmp	r3, #0
 80109e0:	d00a      	beq.n	80109f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	681b      	ldr	r3, [r3, #0]
 80109e6:	685b      	ldr	r3, [r3, #4]
 80109e8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	681b      	ldr	r3, [r3, #0]
 80109f4:	430a      	orrs	r2, r1
 80109f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80109fc:	f003 0310 	and.w	r3, r3, #16
 8010a00:	2b00      	cmp	r3, #0
 8010a02:	d00a      	beq.n	8010a1a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	681b      	ldr	r3, [r3, #0]
 8010a08:	689b      	ldr	r3, [r3, #8]
 8010a0a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	681b      	ldr	r3, [r3, #0]
 8010a16:	430a      	orrs	r2, r1
 8010a18:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a1e:	f003 0320 	and.w	r3, r3, #32
 8010a22:	2b00      	cmp	r3, #0
 8010a24:	d00a      	beq.n	8010a3c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	681b      	ldr	r3, [r3, #0]
 8010a2a:	689b      	ldr	r3, [r3, #8]
 8010a2c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	681b      	ldr	r3, [r3, #0]
 8010a38:	430a      	orrs	r2, r1
 8010a3a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010a44:	2b00      	cmp	r3, #0
 8010a46:	d01a      	beq.n	8010a7e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	681b      	ldr	r3, [r3, #0]
 8010a4c:	685b      	ldr	r3, [r3, #4]
 8010a4e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010a56:	687b      	ldr	r3, [r7, #4]
 8010a58:	681b      	ldr	r3, [r3, #0]
 8010a5a:	430a      	orrs	r2, r1
 8010a5c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010a66:	d10a      	bne.n	8010a7e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	681b      	ldr	r3, [r3, #0]
 8010a6c:	685b      	ldr	r3, [r3, #4]
 8010a6e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	681b      	ldr	r3, [r3, #0]
 8010a7a:	430a      	orrs	r2, r1
 8010a7c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010a86:	2b00      	cmp	r3, #0
 8010a88:	d00a      	beq.n	8010aa0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	681b      	ldr	r3, [r3, #0]
 8010a8e:	685b      	ldr	r3, [r3, #4]
 8010a90:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	681b      	ldr	r3, [r3, #0]
 8010a9c:	430a      	orrs	r2, r1
 8010a9e:	605a      	str	r2, [r3, #4]
  }
}
 8010aa0:	bf00      	nop
 8010aa2:	370c      	adds	r7, #12
 8010aa4:	46bd      	mov	sp, r7
 8010aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aaa:	4770      	bx	lr

08010aac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8010aac:	b580      	push	{r7, lr}
 8010aae:	b086      	sub	sp, #24
 8010ab0:	af02      	add	r7, sp, #8
 8010ab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	2200      	movs	r2, #0
 8010ab8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8010abc:	f7f5 f91e 	bl	8005cfc <HAL_GetTick>
 8010ac0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	681b      	ldr	r3, [r3, #0]
 8010ac6:	681b      	ldr	r3, [r3, #0]
 8010ac8:	f003 0308 	and.w	r3, r3, #8
 8010acc:	2b08      	cmp	r3, #8
 8010ace:	d10e      	bne.n	8010aee <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010ad0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8010ad4:	9300      	str	r3, [sp, #0]
 8010ad6:	68fb      	ldr	r3, [r7, #12]
 8010ad8:	2200      	movs	r2, #0
 8010ada:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8010ade:	6878      	ldr	r0, [r7, #4]
 8010ae0:	f000 f817 	bl	8010b12 <UART_WaitOnFlagUntilTimeout>
 8010ae4:	4603      	mov	r3, r0
 8010ae6:	2b00      	cmp	r3, #0
 8010ae8:	d001      	beq.n	8010aee <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010aea:	2303      	movs	r3, #3
 8010aec:	e00d      	b.n	8010b0a <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	2220      	movs	r2, #32
 8010af2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	2220      	movs	r2, #32
 8010af8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	2200      	movs	r2, #0
 8010afe:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	2200      	movs	r2, #0
 8010b04:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8010b08:	2300      	movs	r3, #0
}
 8010b0a:	4618      	mov	r0, r3
 8010b0c:	3710      	adds	r7, #16
 8010b0e:	46bd      	mov	sp, r7
 8010b10:	bd80      	pop	{r7, pc}

08010b12 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8010b12:	b580      	push	{r7, lr}
 8010b14:	b084      	sub	sp, #16
 8010b16:	af00      	add	r7, sp, #0
 8010b18:	60f8      	str	r0, [r7, #12]
 8010b1a:	60b9      	str	r1, [r7, #8]
 8010b1c:	603b      	str	r3, [r7, #0]
 8010b1e:	4613      	mov	r3, r2
 8010b20:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010b22:	e05e      	b.n	8010be2 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010b24:	69bb      	ldr	r3, [r7, #24]
 8010b26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b2a:	d05a      	beq.n	8010be2 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010b2c:	f7f5 f8e6 	bl	8005cfc <HAL_GetTick>
 8010b30:	4602      	mov	r2, r0
 8010b32:	683b      	ldr	r3, [r7, #0]
 8010b34:	1ad3      	subs	r3, r2, r3
 8010b36:	69ba      	ldr	r2, [r7, #24]
 8010b38:	429a      	cmp	r2, r3
 8010b3a:	d302      	bcc.n	8010b42 <UART_WaitOnFlagUntilTimeout+0x30>
 8010b3c:	69bb      	ldr	r3, [r7, #24]
 8010b3e:	2b00      	cmp	r3, #0
 8010b40:	d11b      	bne.n	8010b7a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8010b42:	68fb      	ldr	r3, [r7, #12]
 8010b44:	681b      	ldr	r3, [r3, #0]
 8010b46:	681a      	ldr	r2, [r3, #0]
 8010b48:	68fb      	ldr	r3, [r7, #12]
 8010b4a:	681b      	ldr	r3, [r3, #0]
 8010b4c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8010b50:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010b52:	68fb      	ldr	r3, [r7, #12]
 8010b54:	681b      	ldr	r3, [r3, #0]
 8010b56:	689a      	ldr	r2, [r3, #8]
 8010b58:	68fb      	ldr	r3, [r7, #12]
 8010b5a:	681b      	ldr	r3, [r3, #0]
 8010b5c:	f022 0201 	bic.w	r2, r2, #1
 8010b60:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8010b62:	68fb      	ldr	r3, [r7, #12]
 8010b64:	2220      	movs	r2, #32
 8010b66:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8010b68:	68fb      	ldr	r3, [r7, #12]
 8010b6a:	2220      	movs	r2, #32
 8010b6c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8010b6e:	68fb      	ldr	r3, [r7, #12]
 8010b70:	2200      	movs	r2, #0
 8010b72:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8010b76:	2303      	movs	r3, #3
 8010b78:	e043      	b.n	8010c02 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8010b7a:	68fb      	ldr	r3, [r7, #12]
 8010b7c:	681b      	ldr	r3, [r3, #0]
 8010b7e:	681b      	ldr	r3, [r3, #0]
 8010b80:	f003 0304 	and.w	r3, r3, #4
 8010b84:	2b00      	cmp	r3, #0
 8010b86:	d02c      	beq.n	8010be2 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8010b88:	68fb      	ldr	r3, [r7, #12]
 8010b8a:	681b      	ldr	r3, [r3, #0]
 8010b8c:	69db      	ldr	r3, [r3, #28]
 8010b8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010b92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010b96:	d124      	bne.n	8010be2 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010b98:	68fb      	ldr	r3, [r7, #12]
 8010b9a:	681b      	ldr	r3, [r3, #0]
 8010b9c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010ba0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8010ba2:	68fb      	ldr	r3, [r7, #12]
 8010ba4:	681b      	ldr	r3, [r3, #0]
 8010ba6:	681a      	ldr	r2, [r3, #0]
 8010ba8:	68fb      	ldr	r3, [r7, #12]
 8010baa:	681b      	ldr	r3, [r3, #0]
 8010bac:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8010bb0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010bb2:	68fb      	ldr	r3, [r7, #12]
 8010bb4:	681b      	ldr	r3, [r3, #0]
 8010bb6:	689a      	ldr	r2, [r3, #8]
 8010bb8:	68fb      	ldr	r3, [r7, #12]
 8010bba:	681b      	ldr	r3, [r3, #0]
 8010bbc:	f022 0201 	bic.w	r2, r2, #1
 8010bc0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8010bc2:	68fb      	ldr	r3, [r7, #12]
 8010bc4:	2220      	movs	r2, #32
 8010bc6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8010bc8:	68fb      	ldr	r3, [r7, #12]
 8010bca:	2220      	movs	r2, #32
 8010bcc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8010bce:	68fb      	ldr	r3, [r7, #12]
 8010bd0:	2220      	movs	r2, #32
 8010bd2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010bd6:	68fb      	ldr	r3, [r7, #12]
 8010bd8:	2200      	movs	r2, #0
 8010bda:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8010bde:	2303      	movs	r3, #3
 8010be0:	e00f      	b.n	8010c02 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010be2:	68fb      	ldr	r3, [r7, #12]
 8010be4:	681b      	ldr	r3, [r3, #0]
 8010be6:	69da      	ldr	r2, [r3, #28]
 8010be8:	68bb      	ldr	r3, [r7, #8]
 8010bea:	4013      	ands	r3, r2
 8010bec:	68ba      	ldr	r2, [r7, #8]
 8010bee:	429a      	cmp	r2, r3
 8010bf0:	bf0c      	ite	eq
 8010bf2:	2301      	moveq	r3, #1
 8010bf4:	2300      	movne	r3, #0
 8010bf6:	b2db      	uxtb	r3, r3
 8010bf8:	461a      	mov	r2, r3
 8010bfa:	79fb      	ldrb	r3, [r7, #7]
 8010bfc:	429a      	cmp	r2, r3
 8010bfe:	d091      	beq.n	8010b24 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010c00:	2300      	movs	r3, #0
}
 8010c02:	4618      	mov	r0, r3
 8010c04:	3710      	adds	r7, #16
 8010c06:	46bd      	mov	sp, r7
 8010c08:	bd80      	pop	{r7, pc}
	...

08010c0c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8010c0c:	b480      	push	{r7}
 8010c0e:	b085      	sub	sp, #20
 8010c10:	af00      	add	r7, sp, #0
 8010c12:	6078      	str	r0, [r7, #4]
 8010c14:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 8010c16:	2300      	movs	r3, #0
 8010c18:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 8010c1a:	2300      	movs	r3, #0
 8010c1c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8010c1e:	683b      	ldr	r3, [r7, #0]
 8010c20:	681b      	ldr	r3, [r3, #0]
 8010c22:	2b01      	cmp	r3, #1
 8010c24:	d027      	beq.n	8010c76 <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	681b      	ldr	r3, [r3, #0]
 8010c2a:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8010c2c:	68fa      	ldr	r2, [r7, #12]
 8010c2e:	4b2f      	ldr	r3, [pc, #188]	; (8010cec <FMC_SDRAM_Init+0xe0>)
 8010c30:	4013      	ands	r3, r2
 8010c32:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8010c34:	683b      	ldr	r3, [r7, #0]
 8010c36:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 8010c38:	683b      	ldr	r3, [r7, #0]
 8010c3a:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8010c3c:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 8010c3e:	683b      	ldr	r3, [r7, #0]
 8010c40:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 8010c42:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 8010c44:	683b      	ldr	r3, [r7, #0]
 8010c46:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 8010c48:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 8010c4a:	683b      	ldr	r3, [r7, #0]
 8010c4c:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 8010c4e:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 8010c50:	683b      	ldr	r3, [r7, #0]
 8010c52:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 8010c54:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 8010c56:	683b      	ldr	r3, [r7, #0]
 8010c58:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 8010c5a:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 8010c5c:	683b      	ldr	r3, [r7, #0]
 8010c5e:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 8010c60:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 8010c62:	683b      	ldr	r3, [r7, #0]
 8010c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8010c66:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8010c68:	68fa      	ldr	r2, [r7, #12]
 8010c6a:	4313      	orrs	r3, r2
 8010c6c:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	68fa      	ldr	r2, [r7, #12]
 8010c72:	601a      	str	r2, [r3, #0]
 8010c74:	e032      	b.n	8010cdc <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	681b      	ldr	r3, [r3, #0]
 8010c7a:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8010c7c:	68fb      	ldr	r3, [r7, #12]
 8010c7e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8010c82:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8010c84:	683b      	ldr	r3, [r7, #0]
 8010c86:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8010c88:	683b      	ldr	r3, [r7, #0]
 8010c8a:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8010c8c:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 8010c8e:	683b      	ldr	r3, [r7, #0]
 8010c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8010c92:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8010c94:	68fa      	ldr	r2, [r7, #12]
 8010c96:	4313      	orrs	r3, r2
 8010c98:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	685b      	ldr	r3, [r3, #4]
 8010c9e:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8010ca0:	68ba      	ldr	r2, [r7, #8]
 8010ca2:	4b12      	ldr	r3, [pc, #72]	; (8010cec <FMC_SDRAM_Init+0xe0>)
 8010ca4:	4013      	ands	r3, r2
 8010ca6:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8010ca8:	683b      	ldr	r3, [r7, #0]
 8010caa:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 8010cac:	683b      	ldr	r3, [r7, #0]
 8010cae:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8010cb0:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 8010cb2:	683b      	ldr	r3, [r7, #0]
 8010cb4:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 8010cb6:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 8010cb8:	683b      	ldr	r3, [r7, #0]
 8010cba:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 8010cbc:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 8010cbe:	683b      	ldr	r3, [r7, #0]
 8010cc0:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 8010cc2:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8010cc4:	683b      	ldr	r3, [r7, #0]
 8010cc6:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 8010cc8:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8010cca:	68ba      	ldr	r2, [r7, #8]
 8010ccc:	4313      	orrs	r3, r2
 8010cce:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	68fa      	ldr	r2, [r7, #12]
 8010cd4:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	68ba      	ldr	r2, [r7, #8]
 8010cda:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 8010cdc:	2300      	movs	r3, #0
}
 8010cde:	4618      	mov	r0, r3
 8010ce0:	3714      	adds	r7, #20
 8010ce2:	46bd      	mov	sp, r7
 8010ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ce8:	4770      	bx	lr
 8010cea:	bf00      	nop
 8010cec:	ffff8000 	.word	0xffff8000

08010cf0 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8010cf0:	b480      	push	{r7}
 8010cf2:	b087      	sub	sp, #28
 8010cf4:	af00      	add	r7, sp, #0
 8010cf6:	60f8      	str	r0, [r7, #12]
 8010cf8:	60b9      	str	r1, [r7, #8]
 8010cfa:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 8010cfc:	2300      	movs	r3, #0
 8010cfe:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 8010d00:	2300      	movs	r3, #0
 8010d02:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	2b01      	cmp	r3, #1
 8010d08:	d02e      	beq.n	8010d68 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8010d0a:	68fb      	ldr	r3, [r7, #12]
 8010d0c:	689b      	ldr	r3, [r3, #8]
 8010d0e:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8010d10:	697b      	ldr	r3, [r7, #20]
 8010d12:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8010d16:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8010d18:	68bb      	ldr	r3, [r7, #8]
 8010d1a:	681b      	ldr	r3, [r3, #0]
 8010d1c:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8010d1e:	68bb      	ldr	r3, [r7, #8]
 8010d20:	685b      	ldr	r3, [r3, #4]
 8010d22:	3b01      	subs	r3, #1
 8010d24:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8010d26:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8010d28:	68bb      	ldr	r3, [r7, #8]
 8010d2a:	689b      	ldr	r3, [r3, #8]
 8010d2c:	3b01      	subs	r3, #1
 8010d2e:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8010d30:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8010d32:	68bb      	ldr	r3, [r7, #8]
 8010d34:	68db      	ldr	r3, [r3, #12]
 8010d36:	3b01      	subs	r3, #1
 8010d38:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8010d3a:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8010d3c:	68bb      	ldr	r3, [r7, #8]
 8010d3e:	691b      	ldr	r3, [r3, #16]
 8010d40:	3b01      	subs	r3, #1
 8010d42:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8010d44:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 8010d46:	68bb      	ldr	r3, [r7, #8]
 8010d48:	695b      	ldr	r3, [r3, #20]
 8010d4a:	3b01      	subs	r3, #1
 8010d4c:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8010d4e:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 8010d50:	68bb      	ldr	r3, [r7, #8]
 8010d52:	699b      	ldr	r3, [r3, #24]
 8010d54:	3b01      	subs	r3, #1
 8010d56:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8010d58:	4313      	orrs	r3, r2
 8010d5a:	697a      	ldr	r2, [r7, #20]
 8010d5c:	4313      	orrs	r3, r2
 8010d5e:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8010d60:	68fb      	ldr	r3, [r7, #12]
 8010d62:	697a      	ldr	r2, [r7, #20]
 8010d64:	609a      	str	r2, [r3, #8]
 8010d66:	e039      	b.n	8010ddc <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8010d68:	68fb      	ldr	r3, [r7, #12]
 8010d6a:	689b      	ldr	r3, [r3, #8]
 8010d6c:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8010d6e:	697a      	ldr	r2, [r7, #20]
 8010d70:	4b1e      	ldr	r3, [pc, #120]	; (8010dec <FMC_SDRAM_Timing_Init+0xfc>)
 8010d72:	4013      	ands	r3, r2
 8010d74:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8010d76:	68bb      	ldr	r3, [r7, #8]
 8010d78:	68db      	ldr	r3, [r3, #12]
 8010d7a:	3b01      	subs	r3, #1
 8010d7c:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 8010d7e:	68bb      	ldr	r3, [r7, #8]
 8010d80:	695b      	ldr	r3, [r3, #20]
 8010d82:	3b01      	subs	r3, #1
 8010d84:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8010d86:	4313      	orrs	r3, r2
 8010d88:	697a      	ldr	r2, [r7, #20]
 8010d8a:	4313      	orrs	r3, r2
 8010d8c:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8010d8e:	68fb      	ldr	r3, [r7, #12]
 8010d90:	68db      	ldr	r3, [r3, #12]
 8010d92:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8010d94:	693b      	ldr	r3, [r7, #16]
 8010d96:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8010d9a:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8010d9c:	68bb      	ldr	r3, [r7, #8]
 8010d9e:	681b      	ldr	r3, [r3, #0]
 8010da0:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8010da2:	68bb      	ldr	r3, [r7, #8]
 8010da4:	685b      	ldr	r3, [r3, #4]
 8010da6:	3b01      	subs	r3, #1
 8010da8:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8010daa:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8010dac:	68bb      	ldr	r3, [r7, #8]
 8010dae:	689b      	ldr	r3, [r3, #8]
 8010db0:	3b01      	subs	r3, #1
 8010db2:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8010db4:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 8010db6:	68bb      	ldr	r3, [r7, #8]
 8010db8:	691b      	ldr	r3, [r3, #16]
 8010dba:	3b01      	subs	r3, #1
 8010dbc:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8010dbe:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 8010dc0:	68bb      	ldr	r3, [r7, #8]
 8010dc2:	699b      	ldr	r3, [r3, #24]
 8010dc4:	3b01      	subs	r3, #1
 8010dc6:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8010dc8:	4313      	orrs	r3, r2
 8010dca:	693a      	ldr	r2, [r7, #16]
 8010dcc:	4313      	orrs	r3, r2
 8010dce:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8010dd0:	68fb      	ldr	r3, [r7, #12]
 8010dd2:	697a      	ldr	r2, [r7, #20]
 8010dd4:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8010dd6:	68fb      	ldr	r3, [r7, #12]
 8010dd8:	693a      	ldr	r2, [r7, #16]
 8010dda:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 8010ddc:	2300      	movs	r3, #0
}
 8010dde:	4618      	mov	r0, r3
 8010de0:	371c      	adds	r7, #28
 8010de2:	46bd      	mov	sp, r7
 8010de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010de8:	4770      	bx	lr
 8010dea:	bf00      	nop
 8010dec:	ff0f0fff 	.word	0xff0f0fff

08010df0 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{ 
 8010df0:	b480      	push	{r7}
 8010df2:	b085      	sub	sp, #20
 8010df4:	af00      	add	r7, sp, #0
 8010df6:	60f8      	str	r0, [r7, #12]
 8010df8:	60b9      	str	r1, [r7, #8]
 8010dfa:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | 
 8010dfc:	68fb      	ldr	r3, [r7, #12]
 8010dfe:	691a      	ldr	r2, [r3, #16]
 8010e00:	4b0c      	ldr	r3, [pc, #48]	; (8010e34 <FMC_SDRAM_SendCommand+0x44>)
 8010e02:	4013      	ands	r3, r2
 8010e04:	68ba      	ldr	r2, [r7, #8]
 8010e06:	6811      	ldr	r1, [r2, #0]
 8010e08:	68ba      	ldr	r2, [r7, #8]
 8010e0a:	6852      	ldr	r2, [r2, #4]
 8010e0c:	4311      	orrs	r1, r2
 8010e0e:	68ba      	ldr	r2, [r7, #8]
 8010e10:	6892      	ldr	r2, [r2, #8]
 8010e12:	3a01      	subs	r2, #1
 8010e14:	0152      	lsls	r2, r2, #5
 8010e16:	4311      	orrs	r1, r2
 8010e18:	68ba      	ldr	r2, [r7, #8]
 8010e1a:	68d2      	ldr	r2, [r2, #12]
 8010e1c:	0252      	lsls	r2, r2, #9
 8010e1e:	430a      	orrs	r2, r1
 8010e20:	431a      	orrs	r2, r3
 8010e22:	68fb      	ldr	r3, [r7, #12]
 8010e24:	611a      	str	r2, [r3, #16]
             FMC_SDCMR_NRFS | FMC_SDCMR_MRD), ((Command->CommandMode) | 
             (Command->CommandTarget) | (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
             ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  
  return HAL_OK;  
 8010e26:	2300      	movs	r3, #0
}
 8010e28:	4618      	mov	r0, r3
 8010e2a:	3714      	adds	r7, #20
 8010e2c:	46bd      	mov	sp, r7
 8010e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e32:	4770      	bx	lr
 8010e34:	ffc00000 	.word	0xffc00000

08010e38 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8010e38:	b480      	push	{r7}
 8010e3a:	b083      	sub	sp, #12
 8010e3c:	af00      	add	r7, sp, #0
 8010e3e:	6078      	str	r0, [r7, #4]
 8010e40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	695a      	ldr	r2, [r3, #20]
 8010e46:	683b      	ldr	r3, [r7, #0]
 8010e48:	005b      	lsls	r3, r3, #1
 8010e4a:	431a      	orrs	r2, r3
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8010e50:	2300      	movs	r3, #0
}
 8010e52:	4618      	mov	r0, r3
 8010e54:	370c      	adds	r7, #12
 8010e56:	46bd      	mov	sp, r7
 8010e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e5c:	4770      	bx	lr
	...

08010e60 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8010e60:	b084      	sub	sp, #16
 8010e62:	b480      	push	{r7}
 8010e64:	b085      	sub	sp, #20
 8010e66:	af00      	add	r7, sp, #0
 8010e68:	6078      	str	r0, [r7, #4]
 8010e6a:	f107 001c 	add.w	r0, r7, #28
 8010e6e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8010e72:	2300      	movs	r3, #0
 8010e74:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8010e76:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8010e78:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8010e7a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8010e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8010e7e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8010e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8010e82:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8010e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8010e86:	431a      	orrs	r2, r3
             Init.ClockDiv
 8010e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8010e8a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8010e8c:	68fa      	ldr	r2, [r7, #12]
 8010e8e:	4313      	orrs	r3, r2
 8010e90:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	685a      	ldr	r2, [r3, #4]
 8010e96:	4b07      	ldr	r3, [pc, #28]	; (8010eb4 <SDMMC_Init+0x54>)
 8010e98:	4013      	ands	r3, r2
 8010e9a:	68fa      	ldr	r2, [r7, #12]
 8010e9c:	431a      	orrs	r2, r3
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8010ea2:	2300      	movs	r3, #0
}
 8010ea4:	4618      	mov	r0, r3
 8010ea6:	3714      	adds	r7, #20
 8010ea8:	46bd      	mov	sp, r7
 8010eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eae:	b004      	add	sp, #16
 8010eb0:	4770      	bx	lr
 8010eb2:	bf00      	nop
 8010eb4:	ffff8100 	.word	0xffff8100

08010eb8 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8010eb8:	b480      	push	{r7}
 8010eba:	b083      	sub	sp, #12
 8010ebc:	af00      	add	r7, sp, #0
 8010ebe:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8010ec6:	4618      	mov	r0, r3
 8010ec8:	370c      	adds	r7, #12
 8010eca:	46bd      	mov	sp, r7
 8010ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ed0:	4770      	bx	lr

08010ed2 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 8010ed2:	b580      	push	{r7, lr}
 8010ed4:	b082      	sub	sp, #8
 8010ed6:	af00      	add	r7, sp, #0
 8010ed8:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8010eda:	687b      	ldr	r3, [r7, #4]
 8010edc:	2203      	movs	r2, #3
 8010ede:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8010ee0:	2002      	movs	r0, #2
 8010ee2:	f7f4 ff17 	bl	8005d14 <HAL_Delay>
  
  return HAL_OK;
 8010ee6:	2300      	movs	r3, #0
}
 8010ee8:	4618      	mov	r0, r3
 8010eea:	3708      	adds	r7, #8
 8010eec:	46bd      	mov	sp, r7
 8010eee:	bd80      	pop	{r7, pc}

08010ef0 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 8010ef0:	b480      	push	{r7}
 8010ef2:	b083      	sub	sp, #12
 8010ef4:	af00      	add	r7, sp, #0
 8010ef6:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	681b      	ldr	r3, [r3, #0]
 8010efc:	f003 0303 	and.w	r3, r3, #3
}
 8010f00:	4618      	mov	r0, r3
 8010f02:	370c      	adds	r7, #12
 8010f04:	46bd      	mov	sp, r7
 8010f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f0a:	4770      	bx	lr

08010f0c <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8010f0c:	b480      	push	{r7}
 8010f0e:	b085      	sub	sp, #20
 8010f10:	af00      	add	r7, sp, #0
 8010f12:	6078      	str	r0, [r7, #4]
 8010f14:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8010f16:	2300      	movs	r3, #0
 8010f18:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8010f1a:	683b      	ldr	r3, [r7, #0]
 8010f1c:	681a      	ldr	r2, [r3, #0]
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8010f22:	683b      	ldr	r3, [r7, #0]
 8010f24:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8010f26:	683b      	ldr	r3, [r7, #0]
 8010f28:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8010f2a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8010f2c:	683b      	ldr	r3, [r7, #0]
 8010f2e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8010f30:	431a      	orrs	r2, r3
                       Command->CPSM);
 8010f32:	683b      	ldr	r3, [r7, #0]
 8010f34:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8010f36:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8010f38:	68fa      	ldr	r2, [r7, #12]
 8010f3a:	4313      	orrs	r3, r2
 8010f3c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	68da      	ldr	r2, [r3, #12]
 8010f42:	4b06      	ldr	r3, [pc, #24]	; (8010f5c <SDMMC_SendCommand+0x50>)
 8010f44:	4013      	ands	r3, r2
 8010f46:	68fa      	ldr	r2, [r7, #12]
 8010f48:	431a      	orrs	r2, r3
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8010f4e:	2300      	movs	r3, #0
}
 8010f50:	4618      	mov	r0, r3
 8010f52:	3714      	adds	r7, #20
 8010f54:	46bd      	mov	sp, r7
 8010f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f5a:	4770      	bx	lr
 8010f5c:	fffff000 	.word	0xfffff000

08010f60 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8010f60:	b480      	push	{r7}
 8010f62:	b083      	sub	sp, #12
 8010f64:	af00      	add	r7, sp, #0
 8010f66:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	691b      	ldr	r3, [r3, #16]
 8010f6c:	b2db      	uxtb	r3, r3
}
 8010f6e:	4618      	mov	r0, r3
 8010f70:	370c      	adds	r7, #12
 8010f72:	46bd      	mov	sp, r7
 8010f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f78:	4770      	bx	lr

08010f7a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8010f7a:	b480      	push	{r7}
 8010f7c:	b085      	sub	sp, #20
 8010f7e:	af00      	add	r7, sp, #0
 8010f80:	6078      	str	r0, [r7, #4]
 8010f82:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	3314      	adds	r3, #20
 8010f88:	461a      	mov	r2, r3
 8010f8a:	683b      	ldr	r3, [r7, #0]
 8010f8c:	4413      	add	r3, r2
 8010f8e:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8010f90:	68fb      	ldr	r3, [r7, #12]
 8010f92:	681b      	ldr	r3, [r3, #0]
}  
 8010f94:	4618      	mov	r0, r3
 8010f96:	3714      	adds	r7, #20
 8010f98:	46bd      	mov	sp, r7
 8010f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f9e:	4770      	bx	lr

08010fa0 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8010fa0:	b480      	push	{r7}
 8010fa2:	b085      	sub	sp, #20
 8010fa4:	af00      	add	r7, sp, #0
 8010fa6:	6078      	str	r0, [r7, #4]
 8010fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8010faa:	2300      	movs	r3, #0
 8010fac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8010fae:	683b      	ldr	r3, [r7, #0]
 8010fb0:	681a      	ldr	r2, [r3, #0]
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8010fb6:	683b      	ldr	r3, [r7, #0]
 8010fb8:	685a      	ldr	r2, [r3, #4]
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8010fbe:	683b      	ldr	r3, [r7, #0]
 8010fc0:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8010fc2:	683b      	ldr	r3, [r7, #0]
 8010fc4:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8010fc6:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8010fc8:	683b      	ldr	r3, [r7, #0]
 8010fca:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8010fcc:	431a      	orrs	r2, r3
                       Data->DPSM);
 8010fce:	683b      	ldr	r3, [r7, #0]
 8010fd0:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8010fd2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8010fd4:	68fa      	ldr	r2, [r7, #12]
 8010fd6:	4313      	orrs	r3, r2
 8010fd8:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010fde:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8010fe2:	68fb      	ldr	r3, [r7, #12]
 8010fe4:	431a      	orrs	r2, r3
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8010fea:	2300      	movs	r3, #0

}
 8010fec:	4618      	mov	r0, r3
 8010fee:	3714      	adds	r7, #20
 8010ff0:	46bd      	mov	sp, r7
 8010ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ff6:	4770      	bx	lr

08010ff8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8010ff8:	b580      	push	{r7, lr}
 8010ffa:	b088      	sub	sp, #32
 8010ffc:	af00      	add	r7, sp, #0
 8010ffe:	6078      	str	r0, [r7, #4]
 8011000:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8011002:	683b      	ldr	r3, [r7, #0]
 8011004:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8011006:	2310      	movs	r3, #16
 8011008:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801100a:	2340      	movs	r3, #64	; 0x40
 801100c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801100e:	2300      	movs	r3, #0
 8011010:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011012:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011016:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011018:	f107 0308 	add.w	r3, r7, #8
 801101c:	4619      	mov	r1, r3
 801101e:	6878      	ldr	r0, [r7, #4]
 8011020:	f7ff ff74 	bl	8010f0c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8011024:	f241 3288 	movw	r2, #5000	; 0x1388
 8011028:	2110      	movs	r1, #16
 801102a:	6878      	ldr	r0, [r7, #4]
 801102c:	f000 fa46 	bl	80114bc <SDMMC_GetCmdResp1>
 8011030:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011032:	69fb      	ldr	r3, [r7, #28]
}
 8011034:	4618      	mov	r0, r3
 8011036:	3720      	adds	r7, #32
 8011038:	46bd      	mov	sp, r7
 801103a:	bd80      	pop	{r7, pc}

0801103c <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 801103c:	b580      	push	{r7, lr}
 801103e:	b088      	sub	sp, #32
 8011040:	af00      	add	r7, sp, #0
 8011042:	6078      	str	r0, [r7, #4]
 8011044:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8011046:	683b      	ldr	r3, [r7, #0]
 8011048:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 801104a:	2311      	movs	r3, #17
 801104c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801104e:	2340      	movs	r3, #64	; 0x40
 8011050:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011052:	2300      	movs	r3, #0
 8011054:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011056:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801105a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801105c:	f107 0308 	add.w	r3, r7, #8
 8011060:	4619      	mov	r1, r3
 8011062:	6878      	ldr	r0, [r7, #4]
 8011064:	f7ff ff52 	bl	8010f0c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8011068:	f241 3288 	movw	r2, #5000	; 0x1388
 801106c:	2111      	movs	r1, #17
 801106e:	6878      	ldr	r0, [r7, #4]
 8011070:	f000 fa24 	bl	80114bc <SDMMC_GetCmdResp1>
 8011074:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011076:	69fb      	ldr	r3, [r7, #28]
}
 8011078:	4618      	mov	r0, r3
 801107a:	3720      	adds	r7, #32
 801107c:	46bd      	mov	sp, r7
 801107e:	bd80      	pop	{r7, pc}

08011080 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8011080:	b580      	push	{r7, lr}
 8011082:	b088      	sub	sp, #32
 8011084:	af00      	add	r7, sp, #0
 8011086:	6078      	str	r0, [r7, #4]
 8011088:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 801108a:	683b      	ldr	r3, [r7, #0]
 801108c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 801108e:	2312      	movs	r3, #18
 8011090:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011092:	2340      	movs	r3, #64	; 0x40
 8011094:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011096:	2300      	movs	r3, #0
 8011098:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801109a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801109e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80110a0:	f107 0308 	add.w	r3, r7, #8
 80110a4:	4619      	mov	r1, r3
 80110a6:	6878      	ldr	r0, [r7, #4]
 80110a8:	f7ff ff30 	bl	8010f0c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80110ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80110b0:	2112      	movs	r1, #18
 80110b2:	6878      	ldr	r0, [r7, #4]
 80110b4:	f000 fa02 	bl	80114bc <SDMMC_GetCmdResp1>
 80110b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80110ba:	69fb      	ldr	r3, [r7, #28]
}
 80110bc:	4618      	mov	r0, r3
 80110be:	3720      	adds	r7, #32
 80110c0:	46bd      	mov	sp, r7
 80110c2:	bd80      	pop	{r7, pc}

080110c4 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80110c4:	b580      	push	{r7, lr}
 80110c6:	b088      	sub	sp, #32
 80110c8:	af00      	add	r7, sp, #0
 80110ca:	6078      	str	r0, [r7, #4]
 80110cc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80110ce:	683b      	ldr	r3, [r7, #0]
 80110d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80110d2:	2318      	movs	r3, #24
 80110d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80110d6:	2340      	movs	r3, #64	; 0x40
 80110d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80110da:	2300      	movs	r3, #0
 80110dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80110de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80110e2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80110e4:	f107 0308 	add.w	r3, r7, #8
 80110e8:	4619      	mov	r1, r3
 80110ea:	6878      	ldr	r0, [r7, #4]
 80110ec:	f7ff ff0e 	bl	8010f0c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80110f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80110f4:	2118      	movs	r1, #24
 80110f6:	6878      	ldr	r0, [r7, #4]
 80110f8:	f000 f9e0 	bl	80114bc <SDMMC_GetCmdResp1>
 80110fc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80110fe:	69fb      	ldr	r3, [r7, #28]
}
 8011100:	4618      	mov	r0, r3
 8011102:	3720      	adds	r7, #32
 8011104:	46bd      	mov	sp, r7
 8011106:	bd80      	pop	{r7, pc}

08011108 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8011108:	b580      	push	{r7, lr}
 801110a:	b088      	sub	sp, #32
 801110c:	af00      	add	r7, sp, #0
 801110e:	6078      	str	r0, [r7, #4]
 8011110:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8011112:	683b      	ldr	r3, [r7, #0]
 8011114:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8011116:	2319      	movs	r3, #25
 8011118:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801111a:	2340      	movs	r3, #64	; 0x40
 801111c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801111e:	2300      	movs	r3, #0
 8011120:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011122:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011126:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011128:	f107 0308 	add.w	r3, r7, #8
 801112c:	4619      	mov	r1, r3
 801112e:	6878      	ldr	r0, [r7, #4]
 8011130:	f7ff feec 	bl	8010f0c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8011134:	f241 3288 	movw	r2, #5000	; 0x1388
 8011138:	2119      	movs	r1, #25
 801113a:	6878      	ldr	r0, [r7, #4]
 801113c:	f000 f9be 	bl	80114bc <SDMMC_GetCmdResp1>
 8011140:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011142:	69fb      	ldr	r3, [r7, #28]
}
 8011144:	4618      	mov	r0, r3
 8011146:	3720      	adds	r7, #32
 8011148:	46bd      	mov	sp, r7
 801114a:	bd80      	pop	{r7, pc}

0801114c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 801114c:	b580      	push	{r7, lr}
 801114e:	b088      	sub	sp, #32
 8011150:	af00      	add	r7, sp, #0
 8011152:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8011154:	2300      	movs	r3, #0
 8011156:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8011158:	230c      	movs	r3, #12
 801115a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801115c:	2340      	movs	r3, #64	; 0x40
 801115e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011160:	2300      	movs	r3, #0
 8011162:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011164:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011168:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801116a:	f107 0308 	add.w	r3, r7, #8
 801116e:	4619      	mov	r1, r3
 8011170:	6878      	ldr	r0, [r7, #4]
 8011172:	f7ff fecb 	bl	8010f0c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8011176:	4a05      	ldr	r2, [pc, #20]	; (801118c <SDMMC_CmdStopTransfer+0x40>)
 8011178:	210c      	movs	r1, #12
 801117a:	6878      	ldr	r0, [r7, #4]
 801117c:	f000 f99e 	bl	80114bc <SDMMC_GetCmdResp1>
 8011180:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011182:	69fb      	ldr	r3, [r7, #28]
}
 8011184:	4618      	mov	r0, r3
 8011186:	3720      	adds	r7, #32
 8011188:	46bd      	mov	sp, r7
 801118a:	bd80      	pop	{r7, pc}
 801118c:	05f5e100 	.word	0x05f5e100

08011190 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8011190:	b580      	push	{r7, lr}
 8011192:	b08a      	sub	sp, #40	; 0x28
 8011194:	af00      	add	r7, sp, #0
 8011196:	60f8      	str	r0, [r7, #12]
 8011198:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 801119c:	683b      	ldr	r3, [r7, #0]
 801119e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80111a0:	2307      	movs	r3, #7
 80111a2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80111a4:	2340      	movs	r3, #64	; 0x40
 80111a6:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80111a8:	2300      	movs	r3, #0
 80111aa:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80111ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80111b0:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80111b2:	f107 0310 	add.w	r3, r7, #16
 80111b6:	4619      	mov	r1, r3
 80111b8:	68f8      	ldr	r0, [r7, #12]
 80111ba:	f7ff fea7 	bl	8010f0c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80111be:	f241 3288 	movw	r2, #5000	; 0x1388
 80111c2:	2107      	movs	r1, #7
 80111c4:	68f8      	ldr	r0, [r7, #12]
 80111c6:	f000 f979 	bl	80114bc <SDMMC_GetCmdResp1>
 80111ca:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80111cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80111ce:	4618      	mov	r0, r3
 80111d0:	3728      	adds	r7, #40	; 0x28
 80111d2:	46bd      	mov	sp, r7
 80111d4:	bd80      	pop	{r7, pc}

080111d6 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 80111d6:	b580      	push	{r7, lr}
 80111d8:	b088      	sub	sp, #32
 80111da:	af00      	add	r7, sp, #0
 80111dc:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80111de:	2300      	movs	r3, #0
 80111e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80111e2:	2300      	movs	r3, #0
 80111e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 80111e6:	2300      	movs	r3, #0
 80111e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80111ea:	2300      	movs	r3, #0
 80111ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80111ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80111f2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80111f4:	f107 0308 	add.w	r3, r7, #8
 80111f8:	4619      	mov	r1, r3
 80111fa:	6878      	ldr	r0, [r7, #4]
 80111fc:	f7ff fe86 	bl	8010f0c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8011200:	6878      	ldr	r0, [r7, #4]
 8011202:	f000 f92f 	bl	8011464 <SDMMC_GetCmdError>
 8011206:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011208:	69fb      	ldr	r3, [r7, #28]
}
 801120a:	4618      	mov	r0, r3
 801120c:	3720      	adds	r7, #32
 801120e:	46bd      	mov	sp, r7
 8011210:	bd80      	pop	{r7, pc}

08011212 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8011212:	b580      	push	{r7, lr}
 8011214:	b088      	sub	sp, #32
 8011216:	af00      	add	r7, sp, #0
 8011218:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 801121a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 801121e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8011220:	2308      	movs	r3, #8
 8011222:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011224:	2340      	movs	r3, #64	; 0x40
 8011226:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011228:	2300      	movs	r3, #0
 801122a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801122c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011230:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011232:	f107 0308 	add.w	r3, r7, #8
 8011236:	4619      	mov	r1, r3
 8011238:	6878      	ldr	r0, [r7, #4]
 801123a:	f7ff fe67 	bl	8010f0c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 801123e:	6878      	ldr	r0, [r7, #4]
 8011240:	f000 fb26 	bl	8011890 <SDMMC_GetCmdResp7>
 8011244:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011246:	69fb      	ldr	r3, [r7, #28]
}
 8011248:	4618      	mov	r0, r3
 801124a:	3720      	adds	r7, #32
 801124c:	46bd      	mov	sp, r7
 801124e:	bd80      	pop	{r7, pc}

08011250 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8011250:	b580      	push	{r7, lr}
 8011252:	b088      	sub	sp, #32
 8011254:	af00      	add	r7, sp, #0
 8011256:	6078      	str	r0, [r7, #4]
 8011258:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 801125a:	683b      	ldr	r3, [r7, #0]
 801125c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 801125e:	2337      	movs	r3, #55	; 0x37
 8011260:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011262:	2340      	movs	r3, #64	; 0x40
 8011264:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011266:	2300      	movs	r3, #0
 8011268:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801126a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801126e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011270:	f107 0308 	add.w	r3, r7, #8
 8011274:	4619      	mov	r1, r3
 8011276:	6878      	ldr	r0, [r7, #4]
 8011278:	f7ff fe48 	bl	8010f0c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 801127c:	f241 3288 	movw	r2, #5000	; 0x1388
 8011280:	2137      	movs	r1, #55	; 0x37
 8011282:	6878      	ldr	r0, [r7, #4]
 8011284:	f000 f91a 	bl	80114bc <SDMMC_GetCmdResp1>
 8011288:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801128a:	69fb      	ldr	r3, [r7, #28]
}
 801128c:	4618      	mov	r0, r3
 801128e:	3720      	adds	r7, #32
 8011290:	46bd      	mov	sp, r7
 8011292:	bd80      	pop	{r7, pc}

08011294 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8011294:	b580      	push	{r7, lr}
 8011296:	b088      	sub	sp, #32
 8011298:	af00      	add	r7, sp, #0
 801129a:	6078      	str	r0, [r7, #4]
 801129c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 801129e:	683a      	ldr	r2, [r7, #0]
 80112a0:	4b0d      	ldr	r3, [pc, #52]	; (80112d8 <SDMMC_CmdAppOperCommand+0x44>)
 80112a2:	4313      	orrs	r3, r2
 80112a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80112a6:	2329      	movs	r3, #41	; 0x29
 80112a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80112aa:	2340      	movs	r3, #64	; 0x40
 80112ac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80112ae:	2300      	movs	r3, #0
 80112b0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80112b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80112b6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80112b8:	f107 0308 	add.w	r3, r7, #8
 80112bc:	4619      	mov	r1, r3
 80112be:	6878      	ldr	r0, [r7, #4]
 80112c0:	f7ff fe24 	bl	8010f0c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 80112c4:	6878      	ldr	r0, [r7, #4]
 80112c6:	f000 fa2f 	bl	8011728 <SDMMC_GetCmdResp3>
 80112ca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80112cc:	69fb      	ldr	r3, [r7, #28]
}
 80112ce:	4618      	mov	r0, r3
 80112d0:	3720      	adds	r7, #32
 80112d2:	46bd      	mov	sp, r7
 80112d4:	bd80      	pop	{r7, pc}
 80112d6:	bf00      	nop
 80112d8:	80100000 	.word	0x80100000

080112dc <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 80112dc:	b580      	push	{r7, lr}
 80112de:	b088      	sub	sp, #32
 80112e0:	af00      	add	r7, sp, #0
 80112e2:	6078      	str	r0, [r7, #4]
 80112e4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80112e6:	683b      	ldr	r3, [r7, #0]
 80112e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80112ea:	2306      	movs	r3, #6
 80112ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80112ee:	2340      	movs	r3, #64	; 0x40
 80112f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80112f2:	2300      	movs	r3, #0
 80112f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80112f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80112fa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80112fc:	f107 0308 	add.w	r3, r7, #8
 8011300:	4619      	mov	r1, r3
 8011302:	6878      	ldr	r0, [r7, #4]
 8011304:	f7ff fe02 	bl	8010f0c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8011308:	f241 3288 	movw	r2, #5000	; 0x1388
 801130c:	2106      	movs	r1, #6
 801130e:	6878      	ldr	r0, [r7, #4]
 8011310:	f000 f8d4 	bl	80114bc <SDMMC_GetCmdResp1>
 8011314:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011316:	69fb      	ldr	r3, [r7, #28]
}
 8011318:	4618      	mov	r0, r3
 801131a:	3720      	adds	r7, #32
 801131c:	46bd      	mov	sp, r7
 801131e:	bd80      	pop	{r7, pc}

08011320 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8011320:	b580      	push	{r7, lr}
 8011322:	b088      	sub	sp, #32
 8011324:	af00      	add	r7, sp, #0
 8011326:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8011328:	2300      	movs	r3, #0
 801132a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 801132c:	2333      	movs	r3, #51	; 0x33
 801132e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011330:	2340      	movs	r3, #64	; 0x40
 8011332:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011334:	2300      	movs	r3, #0
 8011336:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011338:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801133c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801133e:	f107 0308 	add.w	r3, r7, #8
 8011342:	4619      	mov	r1, r3
 8011344:	6878      	ldr	r0, [r7, #4]
 8011346:	f7ff fde1 	bl	8010f0c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 801134a:	f241 3288 	movw	r2, #5000	; 0x1388
 801134e:	2133      	movs	r1, #51	; 0x33
 8011350:	6878      	ldr	r0, [r7, #4]
 8011352:	f000 f8b3 	bl	80114bc <SDMMC_GetCmdResp1>
 8011356:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011358:	69fb      	ldr	r3, [r7, #28]
}
 801135a:	4618      	mov	r0, r3
 801135c:	3720      	adds	r7, #32
 801135e:	46bd      	mov	sp, r7
 8011360:	bd80      	pop	{r7, pc}

08011362 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8011362:	b580      	push	{r7, lr}
 8011364:	b088      	sub	sp, #32
 8011366:	af00      	add	r7, sp, #0
 8011368:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 801136a:	2300      	movs	r3, #0
 801136c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 801136e:	2302      	movs	r3, #2
 8011370:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8011372:	23c0      	movs	r3, #192	; 0xc0
 8011374:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011376:	2300      	movs	r3, #0
 8011378:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801137a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801137e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011380:	f107 0308 	add.w	r3, r7, #8
 8011384:	4619      	mov	r1, r3
 8011386:	6878      	ldr	r0, [r7, #4]
 8011388:	f7ff fdc0 	bl	8010f0c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 801138c:	6878      	ldr	r0, [r7, #4]
 801138e:	f000 f983 	bl	8011698 <SDMMC_GetCmdResp2>
 8011392:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011394:	69fb      	ldr	r3, [r7, #28]
}
 8011396:	4618      	mov	r0, r3
 8011398:	3720      	adds	r7, #32
 801139a:	46bd      	mov	sp, r7
 801139c:	bd80      	pop	{r7, pc}

0801139e <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 801139e:	b580      	push	{r7, lr}
 80113a0:	b088      	sub	sp, #32
 80113a2:	af00      	add	r7, sp, #0
 80113a4:	6078      	str	r0, [r7, #4]
 80113a6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80113a8:	683b      	ldr	r3, [r7, #0]
 80113aa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80113ac:	2309      	movs	r3, #9
 80113ae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80113b0:	23c0      	movs	r3, #192	; 0xc0
 80113b2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80113b4:	2300      	movs	r3, #0
 80113b6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80113b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80113bc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80113be:	f107 0308 	add.w	r3, r7, #8
 80113c2:	4619      	mov	r1, r3
 80113c4:	6878      	ldr	r0, [r7, #4]
 80113c6:	f7ff fda1 	bl	8010f0c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80113ca:	6878      	ldr	r0, [r7, #4]
 80113cc:	f000 f964 	bl	8011698 <SDMMC_GetCmdResp2>
 80113d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80113d2:	69fb      	ldr	r3, [r7, #28]
}
 80113d4:	4618      	mov	r0, r3
 80113d6:	3720      	adds	r7, #32
 80113d8:	46bd      	mov	sp, r7
 80113da:	bd80      	pop	{r7, pc}

080113dc <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 80113dc:	b580      	push	{r7, lr}
 80113de:	b088      	sub	sp, #32
 80113e0:	af00      	add	r7, sp, #0
 80113e2:	6078      	str	r0, [r7, #4]
 80113e4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80113e6:	2300      	movs	r3, #0
 80113e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80113ea:	2303      	movs	r3, #3
 80113ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80113ee:	2340      	movs	r3, #64	; 0x40
 80113f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80113f2:	2300      	movs	r3, #0
 80113f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80113f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80113fa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80113fc:	f107 0308 	add.w	r3, r7, #8
 8011400:	4619      	mov	r1, r3
 8011402:	6878      	ldr	r0, [r7, #4]
 8011404:	f7ff fd82 	bl	8010f0c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8011408:	683a      	ldr	r2, [r7, #0]
 801140a:	2103      	movs	r1, #3
 801140c:	6878      	ldr	r0, [r7, #4]
 801140e:	f000 f9c9 	bl	80117a4 <SDMMC_GetCmdResp6>
 8011412:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011414:	69fb      	ldr	r3, [r7, #28]
}
 8011416:	4618      	mov	r0, r3
 8011418:	3720      	adds	r7, #32
 801141a:	46bd      	mov	sp, r7
 801141c:	bd80      	pop	{r7, pc}

0801141e <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 801141e:	b580      	push	{r7, lr}
 8011420:	b088      	sub	sp, #32
 8011422:	af00      	add	r7, sp, #0
 8011424:	6078      	str	r0, [r7, #4]
 8011426:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8011428:	683b      	ldr	r3, [r7, #0]
 801142a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 801142c:	230d      	movs	r3, #13
 801142e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011430:	2340      	movs	r3, #64	; 0x40
 8011432:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011434:	2300      	movs	r3, #0
 8011436:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011438:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801143c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801143e:	f107 0308 	add.w	r3, r7, #8
 8011442:	4619      	mov	r1, r3
 8011444:	6878      	ldr	r0, [r7, #4]
 8011446:	f7ff fd61 	bl	8010f0c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 801144a:	f241 3288 	movw	r2, #5000	; 0x1388
 801144e:	210d      	movs	r1, #13
 8011450:	6878      	ldr	r0, [r7, #4]
 8011452:	f000 f833 	bl	80114bc <SDMMC_GetCmdResp1>
 8011456:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011458:	69fb      	ldr	r3, [r7, #28]
}
 801145a:	4618      	mov	r0, r3
 801145c:	3720      	adds	r7, #32
 801145e:	46bd      	mov	sp, r7
 8011460:	bd80      	pop	{r7, pc}
	...

08011464 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8011464:	b480      	push	{r7}
 8011466:	b085      	sub	sp, #20
 8011468:	af00      	add	r7, sp, #0
 801146a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 801146c:	4b11      	ldr	r3, [pc, #68]	; (80114b4 <SDMMC_GetCmdError+0x50>)
 801146e:	681b      	ldr	r3, [r3, #0]
 8011470:	4a11      	ldr	r2, [pc, #68]	; (80114b8 <SDMMC_GetCmdError+0x54>)
 8011472:	fba2 2303 	umull	r2, r3, r2, r3
 8011476:	0a5b      	lsrs	r3, r3, #9
 8011478:	f241 3288 	movw	r2, #5000	; 0x1388
 801147c:	fb02 f303 	mul.w	r3, r2, r3
 8011480:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8011482:	68fb      	ldr	r3, [r7, #12]
 8011484:	1e5a      	subs	r2, r3, #1
 8011486:	60fa      	str	r2, [r7, #12]
 8011488:	2b00      	cmp	r3, #0
 801148a:	d102      	bne.n	8011492 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 801148c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011490:	e009      	b.n	80114a6 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8011492:	687b      	ldr	r3, [r7, #4]
 8011494:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011496:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801149a:	2b00      	cmp	r3, #0
 801149c:	d0f1      	beq.n	8011482 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	22c5      	movs	r2, #197	; 0xc5
 80114a2:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80114a4:	2300      	movs	r3, #0
}
 80114a6:	4618      	mov	r0, r3
 80114a8:	3714      	adds	r7, #20
 80114aa:	46bd      	mov	sp, r7
 80114ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114b0:	4770      	bx	lr
 80114b2:	bf00      	nop
 80114b4:	20000010 	.word	0x20000010
 80114b8:	10624dd3 	.word	0x10624dd3

080114bc <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 80114bc:	b580      	push	{r7, lr}
 80114be:	b088      	sub	sp, #32
 80114c0:	af00      	add	r7, sp, #0
 80114c2:	60f8      	str	r0, [r7, #12]
 80114c4:	460b      	mov	r3, r1
 80114c6:	607a      	str	r2, [r7, #4]
 80114c8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80114ca:	4b70      	ldr	r3, [pc, #448]	; (801168c <SDMMC_GetCmdResp1+0x1d0>)
 80114cc:	681b      	ldr	r3, [r3, #0]
 80114ce:	4a70      	ldr	r2, [pc, #448]	; (8011690 <SDMMC_GetCmdResp1+0x1d4>)
 80114d0:	fba2 2303 	umull	r2, r3, r2, r3
 80114d4:	0a5a      	lsrs	r2, r3, #9
 80114d6:	687b      	ldr	r3, [r7, #4]
 80114d8:	fb02 f303 	mul.w	r3, r2, r3
 80114dc:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80114de:	69fb      	ldr	r3, [r7, #28]
 80114e0:	1e5a      	subs	r2, r3, #1
 80114e2:	61fa      	str	r2, [r7, #28]
 80114e4:	2b00      	cmp	r3, #0
 80114e6:	d102      	bne.n	80114ee <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80114e8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80114ec:	e0c9      	b.n	8011682 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 80114ee:	68fb      	ldr	r3, [r7, #12]
 80114f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80114f2:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80114f4:	69bb      	ldr	r3, [r7, #24]
 80114f6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80114fa:	2b00      	cmp	r3, #0
 80114fc:	d0ef      	beq.n	80114de <SDMMC_GetCmdResp1+0x22>
 80114fe:	69bb      	ldr	r3, [r7, #24]
 8011500:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011504:	2b00      	cmp	r3, #0
 8011506:	d1ea      	bne.n	80114de <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011508:	68fb      	ldr	r3, [r7, #12]
 801150a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801150c:	f003 0304 	and.w	r3, r3, #4
 8011510:	2b00      	cmp	r3, #0
 8011512:	d004      	beq.n	801151e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011514:	68fb      	ldr	r3, [r7, #12]
 8011516:	2204      	movs	r2, #4
 8011518:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801151a:	2304      	movs	r3, #4
 801151c:	e0b1      	b.n	8011682 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801151e:	68fb      	ldr	r3, [r7, #12]
 8011520:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011522:	f003 0301 	and.w	r3, r3, #1
 8011526:	2b00      	cmp	r3, #0
 8011528:	d004      	beq.n	8011534 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801152a:	68fb      	ldr	r3, [r7, #12]
 801152c:	2201      	movs	r2, #1
 801152e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011530:	2301      	movs	r3, #1
 8011532:	e0a6      	b.n	8011682 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8011534:	68fb      	ldr	r3, [r7, #12]
 8011536:	22c5      	movs	r2, #197	; 0xc5
 8011538:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801153a:	68f8      	ldr	r0, [r7, #12]
 801153c:	f7ff fd10 	bl	8010f60 <SDMMC_GetCommandResponse>
 8011540:	4603      	mov	r3, r0
 8011542:	461a      	mov	r2, r3
 8011544:	7afb      	ldrb	r3, [r7, #11]
 8011546:	4293      	cmp	r3, r2
 8011548:	d001      	beq.n	801154e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801154a:	2301      	movs	r3, #1
 801154c:	e099      	b.n	8011682 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 801154e:	2100      	movs	r1, #0
 8011550:	68f8      	ldr	r0, [r7, #12]
 8011552:	f7ff fd12 	bl	8010f7a <SDMMC_GetResponse>
 8011556:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8011558:	697a      	ldr	r2, [r7, #20]
 801155a:	4b4e      	ldr	r3, [pc, #312]	; (8011694 <SDMMC_GetCmdResp1+0x1d8>)
 801155c:	4013      	ands	r3, r2
 801155e:	2b00      	cmp	r3, #0
 8011560:	d101      	bne.n	8011566 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8011562:	2300      	movs	r3, #0
 8011564:	e08d      	b.n	8011682 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8011566:	697b      	ldr	r3, [r7, #20]
 8011568:	2b00      	cmp	r3, #0
 801156a:	da02      	bge.n	8011572 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 801156c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8011570:	e087      	b.n	8011682 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8011572:	697b      	ldr	r3, [r7, #20]
 8011574:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8011578:	2b00      	cmp	r3, #0
 801157a:	d001      	beq.n	8011580 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 801157c:	2340      	movs	r3, #64	; 0x40
 801157e:	e080      	b.n	8011682 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8011580:	697b      	ldr	r3, [r7, #20]
 8011582:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8011586:	2b00      	cmp	r3, #0
 8011588:	d001      	beq.n	801158e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 801158a:	2380      	movs	r3, #128	; 0x80
 801158c:	e079      	b.n	8011682 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 801158e:	697b      	ldr	r3, [r7, #20]
 8011590:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011594:	2b00      	cmp	r3, #0
 8011596:	d002      	beq.n	801159e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8011598:	f44f 7380 	mov.w	r3, #256	; 0x100
 801159c:	e071      	b.n	8011682 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 801159e:	697b      	ldr	r3, [r7, #20]
 80115a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80115a4:	2b00      	cmp	r3, #0
 80115a6:	d002      	beq.n	80115ae <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80115a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80115ac:	e069      	b.n	8011682 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80115ae:	697b      	ldr	r3, [r7, #20]
 80115b0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80115b4:	2b00      	cmp	r3, #0
 80115b6:	d002      	beq.n	80115be <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80115b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80115bc:	e061      	b.n	8011682 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80115be:	697b      	ldr	r3, [r7, #20]
 80115c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80115c4:	2b00      	cmp	r3, #0
 80115c6:	d002      	beq.n	80115ce <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80115c8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80115cc:	e059      	b.n	8011682 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80115ce:	697b      	ldr	r3, [r7, #20]
 80115d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80115d4:	2b00      	cmp	r3, #0
 80115d6:	d002      	beq.n	80115de <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80115d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80115dc:	e051      	b.n	8011682 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80115de:	697b      	ldr	r3, [r7, #20]
 80115e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80115e4:	2b00      	cmp	r3, #0
 80115e6:	d002      	beq.n	80115ee <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80115e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80115ec:	e049      	b.n	8011682 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80115ee:	697b      	ldr	r3, [r7, #20]
 80115f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80115f4:	2b00      	cmp	r3, #0
 80115f6:	d002      	beq.n	80115fe <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80115f8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80115fc:	e041      	b.n	8011682 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80115fe:	697b      	ldr	r3, [r7, #20]
 8011600:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8011604:	2b00      	cmp	r3, #0
 8011606:	d002      	beq.n	801160e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8011608:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801160c:	e039      	b.n	8011682 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 801160e:	697b      	ldr	r3, [r7, #20]
 8011610:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8011614:	2b00      	cmp	r3, #0
 8011616:	d002      	beq.n	801161e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8011618:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 801161c:	e031      	b.n	8011682 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 801161e:	697b      	ldr	r3, [r7, #20]
 8011620:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011624:	2b00      	cmp	r3, #0
 8011626:	d002      	beq.n	801162e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8011628:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801162c:	e029      	b.n	8011682 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 801162e:	697b      	ldr	r3, [r7, #20]
 8011630:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011634:	2b00      	cmp	r3, #0
 8011636:	d002      	beq.n	801163e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8011638:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 801163c:	e021      	b.n	8011682 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 801163e:	697b      	ldr	r3, [r7, #20]
 8011640:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011644:	2b00      	cmp	r3, #0
 8011646:	d002      	beq.n	801164e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8011648:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 801164c:	e019      	b.n	8011682 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 801164e:	697b      	ldr	r3, [r7, #20]
 8011650:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011654:	2b00      	cmp	r3, #0
 8011656:	d002      	beq.n	801165e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8011658:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 801165c:	e011      	b.n	8011682 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 801165e:	697b      	ldr	r3, [r7, #20]
 8011660:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8011664:	2b00      	cmp	r3, #0
 8011666:	d002      	beq.n	801166e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8011668:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 801166c:	e009      	b.n	8011682 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 801166e:	697b      	ldr	r3, [r7, #20]
 8011670:	f003 0308 	and.w	r3, r3, #8
 8011674:	2b00      	cmp	r3, #0
 8011676:	d002      	beq.n	801167e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8011678:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 801167c:	e001      	b.n	8011682 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 801167e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8011682:	4618      	mov	r0, r3
 8011684:	3720      	adds	r7, #32
 8011686:	46bd      	mov	sp, r7
 8011688:	bd80      	pop	{r7, pc}
 801168a:	bf00      	nop
 801168c:	20000010 	.word	0x20000010
 8011690:	10624dd3 	.word	0x10624dd3
 8011694:	fdffe008 	.word	0xfdffe008

08011698 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8011698:	b480      	push	{r7}
 801169a:	b085      	sub	sp, #20
 801169c:	af00      	add	r7, sp, #0
 801169e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80116a0:	4b1f      	ldr	r3, [pc, #124]	; (8011720 <SDMMC_GetCmdResp2+0x88>)
 80116a2:	681b      	ldr	r3, [r3, #0]
 80116a4:	4a1f      	ldr	r2, [pc, #124]	; (8011724 <SDMMC_GetCmdResp2+0x8c>)
 80116a6:	fba2 2303 	umull	r2, r3, r2, r3
 80116aa:	0a5b      	lsrs	r3, r3, #9
 80116ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80116b0:	fb02 f303 	mul.w	r3, r2, r3
 80116b4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80116b6:	68fb      	ldr	r3, [r7, #12]
 80116b8:	1e5a      	subs	r2, r3, #1
 80116ba:	60fa      	str	r2, [r7, #12]
 80116bc:	2b00      	cmp	r3, #0
 80116be:	d102      	bne.n	80116c6 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80116c0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80116c4:	e026      	b.n	8011714 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 80116c6:	687b      	ldr	r3, [r7, #4]
 80116c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80116ca:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80116cc:	68bb      	ldr	r3, [r7, #8]
 80116ce:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80116d2:	2b00      	cmp	r3, #0
 80116d4:	d0ef      	beq.n	80116b6 <SDMMC_GetCmdResp2+0x1e>
 80116d6:	68bb      	ldr	r3, [r7, #8]
 80116d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80116dc:	2b00      	cmp	r3, #0
 80116de:	d1ea      	bne.n	80116b6 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80116e0:	687b      	ldr	r3, [r7, #4]
 80116e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80116e4:	f003 0304 	and.w	r3, r3, #4
 80116e8:	2b00      	cmp	r3, #0
 80116ea:	d004      	beq.n	80116f6 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80116ec:	687b      	ldr	r3, [r7, #4]
 80116ee:	2204      	movs	r2, #4
 80116f0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80116f2:	2304      	movs	r3, #4
 80116f4:	e00e      	b.n	8011714 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80116f6:	687b      	ldr	r3, [r7, #4]
 80116f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80116fa:	f003 0301 	and.w	r3, r3, #1
 80116fe:	2b00      	cmp	r3, #0
 8011700:	d004      	beq.n	801170c <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	2201      	movs	r2, #1
 8011706:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011708:	2301      	movs	r3, #1
 801170a:	e003      	b.n	8011714 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	22c5      	movs	r2, #197	; 0xc5
 8011710:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8011712:	2300      	movs	r3, #0
}
 8011714:	4618      	mov	r0, r3
 8011716:	3714      	adds	r7, #20
 8011718:	46bd      	mov	sp, r7
 801171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801171e:	4770      	bx	lr
 8011720:	20000010 	.word	0x20000010
 8011724:	10624dd3 	.word	0x10624dd3

08011728 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8011728:	b480      	push	{r7}
 801172a:	b085      	sub	sp, #20
 801172c:	af00      	add	r7, sp, #0
 801172e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011730:	4b1a      	ldr	r3, [pc, #104]	; (801179c <SDMMC_GetCmdResp3+0x74>)
 8011732:	681b      	ldr	r3, [r3, #0]
 8011734:	4a1a      	ldr	r2, [pc, #104]	; (80117a0 <SDMMC_GetCmdResp3+0x78>)
 8011736:	fba2 2303 	umull	r2, r3, r2, r3
 801173a:	0a5b      	lsrs	r3, r3, #9
 801173c:	f241 3288 	movw	r2, #5000	; 0x1388
 8011740:	fb02 f303 	mul.w	r3, r2, r3
 8011744:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8011746:	68fb      	ldr	r3, [r7, #12]
 8011748:	1e5a      	subs	r2, r3, #1
 801174a:	60fa      	str	r2, [r7, #12]
 801174c:	2b00      	cmp	r3, #0
 801174e:	d102      	bne.n	8011756 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011750:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011754:	e01b      	b.n	801178e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8011756:	687b      	ldr	r3, [r7, #4]
 8011758:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801175a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801175c:	68bb      	ldr	r3, [r7, #8]
 801175e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8011762:	2b00      	cmp	r3, #0
 8011764:	d0ef      	beq.n	8011746 <SDMMC_GetCmdResp3+0x1e>
 8011766:	68bb      	ldr	r3, [r7, #8]
 8011768:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801176c:	2b00      	cmp	r3, #0
 801176e:	d1ea      	bne.n	8011746 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011770:	687b      	ldr	r3, [r7, #4]
 8011772:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011774:	f003 0304 	and.w	r3, r3, #4
 8011778:	2b00      	cmp	r3, #0
 801177a:	d004      	beq.n	8011786 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801177c:	687b      	ldr	r3, [r7, #4]
 801177e:	2204      	movs	r2, #4
 8011780:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011782:	2304      	movs	r3, #4
 8011784:	e003      	b.n	801178e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8011786:	687b      	ldr	r3, [r7, #4]
 8011788:	22c5      	movs	r2, #197	; 0xc5
 801178a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 801178c:	2300      	movs	r3, #0
}
 801178e:	4618      	mov	r0, r3
 8011790:	3714      	adds	r7, #20
 8011792:	46bd      	mov	sp, r7
 8011794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011798:	4770      	bx	lr
 801179a:	bf00      	nop
 801179c:	20000010 	.word	0x20000010
 80117a0:	10624dd3 	.word	0x10624dd3

080117a4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80117a4:	b580      	push	{r7, lr}
 80117a6:	b088      	sub	sp, #32
 80117a8:	af00      	add	r7, sp, #0
 80117aa:	60f8      	str	r0, [r7, #12]
 80117ac:	460b      	mov	r3, r1
 80117ae:	607a      	str	r2, [r7, #4]
 80117b0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80117b2:	4b35      	ldr	r3, [pc, #212]	; (8011888 <SDMMC_GetCmdResp6+0xe4>)
 80117b4:	681b      	ldr	r3, [r3, #0]
 80117b6:	4a35      	ldr	r2, [pc, #212]	; (801188c <SDMMC_GetCmdResp6+0xe8>)
 80117b8:	fba2 2303 	umull	r2, r3, r2, r3
 80117bc:	0a5b      	lsrs	r3, r3, #9
 80117be:	f241 3288 	movw	r2, #5000	; 0x1388
 80117c2:	fb02 f303 	mul.w	r3, r2, r3
 80117c6:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80117c8:	69fb      	ldr	r3, [r7, #28]
 80117ca:	1e5a      	subs	r2, r3, #1
 80117cc:	61fa      	str	r2, [r7, #28]
 80117ce:	2b00      	cmp	r3, #0
 80117d0:	d102      	bne.n	80117d8 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80117d2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80117d6:	e052      	b.n	801187e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 80117d8:	68fb      	ldr	r3, [r7, #12]
 80117da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80117dc:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80117de:	69bb      	ldr	r3, [r7, #24]
 80117e0:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80117e4:	2b00      	cmp	r3, #0
 80117e6:	d0ef      	beq.n	80117c8 <SDMMC_GetCmdResp6+0x24>
 80117e8:	69bb      	ldr	r3, [r7, #24]
 80117ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80117ee:	2b00      	cmp	r3, #0
 80117f0:	d1ea      	bne.n	80117c8 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80117f2:	68fb      	ldr	r3, [r7, #12]
 80117f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80117f6:	f003 0304 	and.w	r3, r3, #4
 80117fa:	2b00      	cmp	r3, #0
 80117fc:	d004      	beq.n	8011808 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80117fe:	68fb      	ldr	r3, [r7, #12]
 8011800:	2204      	movs	r2, #4
 8011802:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011804:	2304      	movs	r3, #4
 8011806:	e03a      	b.n	801187e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8011808:	68fb      	ldr	r3, [r7, #12]
 801180a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801180c:	f003 0301 	and.w	r3, r3, #1
 8011810:	2b00      	cmp	r3, #0
 8011812:	d004      	beq.n	801181e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8011814:	68fb      	ldr	r3, [r7, #12]
 8011816:	2201      	movs	r2, #1
 8011818:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801181a:	2301      	movs	r3, #1
 801181c:	e02f      	b.n	801187e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801181e:	68f8      	ldr	r0, [r7, #12]
 8011820:	f7ff fb9e 	bl	8010f60 <SDMMC_GetCommandResponse>
 8011824:	4603      	mov	r3, r0
 8011826:	461a      	mov	r2, r3
 8011828:	7afb      	ldrb	r3, [r7, #11]
 801182a:	4293      	cmp	r3, r2
 801182c:	d001      	beq.n	8011832 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801182e:	2301      	movs	r3, #1
 8011830:	e025      	b.n	801187e <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8011832:	68fb      	ldr	r3, [r7, #12]
 8011834:	22c5      	movs	r2, #197	; 0xc5
 8011836:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8011838:	2100      	movs	r1, #0
 801183a:	68f8      	ldr	r0, [r7, #12]
 801183c:	f7ff fb9d 	bl	8010f7a <SDMMC_GetResponse>
 8011840:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8011842:	697b      	ldr	r3, [r7, #20]
 8011844:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8011848:	2b00      	cmp	r3, #0
 801184a:	d106      	bne.n	801185a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 801184c:	697b      	ldr	r3, [r7, #20]
 801184e:	0c1b      	lsrs	r3, r3, #16
 8011850:	b29a      	uxth	r2, r3
 8011852:	687b      	ldr	r3, [r7, #4]
 8011854:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8011856:	2300      	movs	r3, #0
 8011858:	e011      	b.n	801187e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 801185a:	697b      	ldr	r3, [r7, #20]
 801185c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011860:	2b00      	cmp	r3, #0
 8011862:	d002      	beq.n	801186a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8011864:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8011868:	e009      	b.n	801187e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 801186a:	697b      	ldr	r3, [r7, #20]
 801186c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011870:	2b00      	cmp	r3, #0
 8011872:	d002      	beq.n	801187a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8011874:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011878:	e001      	b.n	801187e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 801187a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 801187e:	4618      	mov	r0, r3
 8011880:	3720      	adds	r7, #32
 8011882:	46bd      	mov	sp, r7
 8011884:	bd80      	pop	{r7, pc}
 8011886:	bf00      	nop
 8011888:	20000010 	.word	0x20000010
 801188c:	10624dd3 	.word	0x10624dd3

08011890 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8011890:	b480      	push	{r7}
 8011892:	b085      	sub	sp, #20
 8011894:	af00      	add	r7, sp, #0
 8011896:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011898:	4b22      	ldr	r3, [pc, #136]	; (8011924 <SDMMC_GetCmdResp7+0x94>)
 801189a:	681b      	ldr	r3, [r3, #0]
 801189c:	4a22      	ldr	r2, [pc, #136]	; (8011928 <SDMMC_GetCmdResp7+0x98>)
 801189e:	fba2 2303 	umull	r2, r3, r2, r3
 80118a2:	0a5b      	lsrs	r3, r3, #9
 80118a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80118a8:	fb02 f303 	mul.w	r3, r2, r3
 80118ac:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80118ae:	68fb      	ldr	r3, [r7, #12]
 80118b0:	1e5a      	subs	r2, r3, #1
 80118b2:	60fa      	str	r2, [r7, #12]
 80118b4:	2b00      	cmp	r3, #0
 80118b6:	d102      	bne.n	80118be <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80118b8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80118bc:	e02c      	b.n	8011918 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 80118be:	687b      	ldr	r3, [r7, #4]
 80118c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80118c2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80118c4:	68bb      	ldr	r3, [r7, #8]
 80118c6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80118ca:	2b00      	cmp	r3, #0
 80118cc:	d0ef      	beq.n	80118ae <SDMMC_GetCmdResp7+0x1e>
 80118ce:	68bb      	ldr	r3, [r7, #8]
 80118d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80118d4:	2b00      	cmp	r3, #0
 80118d6:	d1ea      	bne.n	80118ae <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80118dc:	f003 0304 	and.w	r3, r3, #4
 80118e0:	2b00      	cmp	r3, #0
 80118e2:	d004      	beq.n	80118ee <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80118e4:	687b      	ldr	r3, [r7, #4]
 80118e6:	2204      	movs	r2, #4
 80118e8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80118ea:	2304      	movs	r3, #4
 80118ec:	e014      	b.n	8011918 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80118ee:	687b      	ldr	r3, [r7, #4]
 80118f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80118f2:	f003 0301 	and.w	r3, r3, #1
 80118f6:	2b00      	cmp	r3, #0
 80118f8:	d004      	beq.n	8011904 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	2201      	movs	r2, #1
 80118fe:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011900:	2301      	movs	r3, #1
 8011902:	e009      	b.n	8011918 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011908:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801190c:	2b00      	cmp	r3, #0
 801190e:	d002      	beq.n	8011916 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	2240      	movs	r2, #64	; 0x40
 8011914:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8011916:	2300      	movs	r3, #0
  
}
 8011918:	4618      	mov	r0, r3
 801191a:	3714      	adds	r7, #20
 801191c:	46bd      	mov	sp, r7
 801191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011922:	4770      	bx	lr
 8011924:	20000010 	.word	0x20000010
 8011928:	10624dd3 	.word	0x10624dd3

0801192c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 801192c:	b084      	sub	sp, #16
 801192e:	b580      	push	{r7, lr}
 8011930:	b084      	sub	sp, #16
 8011932:	af00      	add	r7, sp, #0
 8011934:	6078      	str	r0, [r7, #4]
 8011936:	f107 001c 	add.w	r0, r7, #28
 801193a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801193e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011940:	2b01      	cmp	r3, #1
 8011942:	d120      	bne.n	8011986 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8011944:	687b      	ldr	r3, [r7, #4]
 8011946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011948:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	68da      	ldr	r2, [r3, #12]
 8011954:	4b20      	ldr	r3, [pc, #128]	; (80119d8 <USB_CoreInit+0xac>)
 8011956:	4013      	ands	r3, r2
 8011958:	687a      	ldr	r2, [r7, #4]
 801195a:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	68db      	ldr	r3, [r3, #12]
 8011960:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8011968:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801196a:	2b01      	cmp	r3, #1
 801196c:	d105      	bne.n	801197a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 801196e:	687b      	ldr	r3, [r7, #4]
 8011970:	68db      	ldr	r3, [r3, #12]
 8011972:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 801197a:	6878      	ldr	r0, [r7, #4]
 801197c:	f000 f942 	bl	8011c04 <USB_CoreReset>
 8011980:	4603      	mov	r3, r0
 8011982:	73fb      	strb	r3, [r7, #15]
 8011984:	e010      	b.n	80119a8 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8011986:	687b      	ldr	r3, [r7, #4]
 8011988:	68db      	ldr	r3, [r3, #12]
 801198a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8011992:	6878      	ldr	r0, [r7, #4]
 8011994:	f000 f936 	bl	8011c04 <USB_CoreReset>
 8011998:	4603      	mov	r3, r0
 801199a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80119a0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80119a4:	687b      	ldr	r3, [r7, #4]
 80119a6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80119a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119aa:	2b01      	cmp	r3, #1
 80119ac:	d10b      	bne.n	80119c6 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80119ae:	687b      	ldr	r3, [r7, #4]
 80119b0:	689b      	ldr	r3, [r3, #8]
 80119b2:	f043 0206 	orr.w	r2, r3, #6
 80119b6:	687b      	ldr	r3, [r7, #4]
 80119b8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80119ba:	687b      	ldr	r3, [r7, #4]
 80119bc:	689b      	ldr	r3, [r3, #8]
 80119be:	f043 0220 	orr.w	r2, r3, #32
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80119c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80119c8:	4618      	mov	r0, r3
 80119ca:	3710      	adds	r7, #16
 80119cc:	46bd      	mov	sp, r7
 80119ce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80119d2:	b004      	add	sp, #16
 80119d4:	4770      	bx	lr
 80119d6:	bf00      	nop
 80119d8:	ffbdffbf 	.word	0xffbdffbf

080119dc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80119dc:	b480      	push	{r7}
 80119de:	b083      	sub	sp, #12
 80119e0:	af00      	add	r7, sp, #0
 80119e2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80119e4:	687b      	ldr	r3, [r7, #4]
 80119e6:	689b      	ldr	r3, [r3, #8]
 80119e8:	f043 0201 	orr.w	r2, r3, #1
 80119ec:	687b      	ldr	r3, [r7, #4]
 80119ee:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80119f0:	2300      	movs	r3, #0
}
 80119f2:	4618      	mov	r0, r3
 80119f4:	370c      	adds	r7, #12
 80119f6:	46bd      	mov	sp, r7
 80119f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119fc:	4770      	bx	lr

080119fe <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80119fe:	b480      	push	{r7}
 8011a00:	b083      	sub	sp, #12
 8011a02:	af00      	add	r7, sp, #0
 8011a04:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8011a06:	687b      	ldr	r3, [r7, #4]
 8011a08:	689b      	ldr	r3, [r3, #8]
 8011a0a:	f023 0201 	bic.w	r2, r3, #1
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8011a12:	2300      	movs	r3, #0
}
 8011a14:	4618      	mov	r0, r3
 8011a16:	370c      	adds	r7, #12
 8011a18:	46bd      	mov	sp, r7
 8011a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a1e:	4770      	bx	lr

08011a20 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8011a20:	b580      	push	{r7, lr}
 8011a22:	b082      	sub	sp, #8
 8011a24:	af00      	add	r7, sp, #0
 8011a26:	6078      	str	r0, [r7, #4]
 8011a28:	460b      	mov	r3, r1
 8011a2a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	68db      	ldr	r3, [r3, #12]
 8011a30:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8011a38:	78fb      	ldrb	r3, [r7, #3]
 8011a3a:	2b01      	cmp	r3, #1
 8011a3c:	d106      	bne.n	8011a4c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8011a3e:	687b      	ldr	r3, [r7, #4]
 8011a40:	68db      	ldr	r3, [r3, #12]
 8011a42:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8011a46:	687b      	ldr	r3, [r7, #4]
 8011a48:	60da      	str	r2, [r3, #12]
 8011a4a:	e00b      	b.n	8011a64 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8011a4c:	78fb      	ldrb	r3, [r7, #3]
 8011a4e:	2b00      	cmp	r3, #0
 8011a50:	d106      	bne.n	8011a60 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	68db      	ldr	r3, [r3, #12]
 8011a56:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	60da      	str	r2, [r3, #12]
 8011a5e:	e001      	b.n	8011a64 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8011a60:	2301      	movs	r3, #1
 8011a62:	e003      	b.n	8011a6c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8011a64:	2032      	movs	r0, #50	; 0x32
 8011a66:	f7f4 f955 	bl	8005d14 <HAL_Delay>

  return HAL_OK;
 8011a6a:	2300      	movs	r3, #0
}
 8011a6c:	4618      	mov	r0, r3
 8011a6e:	3708      	adds	r7, #8
 8011a70:	46bd      	mov	sp, r7
 8011a72:	bd80      	pop	{r7, pc}

08011a74 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8011a74:	b480      	push	{r7}
 8011a76:	b085      	sub	sp, #20
 8011a78:	af00      	add	r7, sp, #0
 8011a7a:	6078      	str	r0, [r7, #4]
 8011a7c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8011a7e:	2300      	movs	r3, #0
 8011a80:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8011a82:	683b      	ldr	r3, [r7, #0]
 8011a84:	019b      	lsls	r3, r3, #6
 8011a86:	f043 0220 	orr.w	r2, r3, #32
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8011a8e:	68fb      	ldr	r3, [r7, #12]
 8011a90:	3301      	adds	r3, #1
 8011a92:	60fb      	str	r3, [r7, #12]
 8011a94:	68fb      	ldr	r3, [r7, #12]
 8011a96:	4a09      	ldr	r2, [pc, #36]	; (8011abc <USB_FlushTxFifo+0x48>)
 8011a98:	4293      	cmp	r3, r2
 8011a9a:	d901      	bls.n	8011aa0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8011a9c:	2303      	movs	r3, #3
 8011a9e:	e006      	b.n	8011aae <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	691b      	ldr	r3, [r3, #16]
 8011aa4:	f003 0320 	and.w	r3, r3, #32
 8011aa8:	2b20      	cmp	r3, #32
 8011aaa:	d0f0      	beq.n	8011a8e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8011aac:	2300      	movs	r3, #0
}
 8011aae:	4618      	mov	r0, r3
 8011ab0:	3714      	adds	r7, #20
 8011ab2:	46bd      	mov	sp, r7
 8011ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ab8:	4770      	bx	lr
 8011aba:	bf00      	nop
 8011abc:	00030d40 	.word	0x00030d40

08011ac0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8011ac0:	b480      	push	{r7}
 8011ac2:	b085      	sub	sp, #20
 8011ac4:	af00      	add	r7, sp, #0
 8011ac6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8011ac8:	2300      	movs	r3, #0
 8011aca:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8011acc:	687b      	ldr	r3, [r7, #4]
 8011ace:	2210      	movs	r2, #16
 8011ad0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8011ad2:	68fb      	ldr	r3, [r7, #12]
 8011ad4:	3301      	adds	r3, #1
 8011ad6:	60fb      	str	r3, [r7, #12]
 8011ad8:	68fb      	ldr	r3, [r7, #12]
 8011ada:	4a09      	ldr	r2, [pc, #36]	; (8011b00 <USB_FlushRxFifo+0x40>)
 8011adc:	4293      	cmp	r3, r2
 8011ade:	d901      	bls.n	8011ae4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8011ae0:	2303      	movs	r3, #3
 8011ae2:	e006      	b.n	8011af2 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8011ae4:	687b      	ldr	r3, [r7, #4]
 8011ae6:	691b      	ldr	r3, [r3, #16]
 8011ae8:	f003 0310 	and.w	r3, r3, #16
 8011aec:	2b10      	cmp	r3, #16
 8011aee:	d0f0      	beq.n	8011ad2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8011af0:	2300      	movs	r3, #0
}
 8011af2:	4618      	mov	r0, r3
 8011af4:	3714      	adds	r7, #20
 8011af6:	46bd      	mov	sp, r7
 8011af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011afc:	4770      	bx	lr
 8011afe:	bf00      	nop
 8011b00:	00030d40 	.word	0x00030d40

08011b04 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8011b04:	b480      	push	{r7}
 8011b06:	b089      	sub	sp, #36	; 0x24
 8011b08:	af00      	add	r7, sp, #0
 8011b0a:	60f8      	str	r0, [r7, #12]
 8011b0c:	60b9      	str	r1, [r7, #8]
 8011b0e:	4611      	mov	r1, r2
 8011b10:	461a      	mov	r2, r3
 8011b12:	460b      	mov	r3, r1
 8011b14:	71fb      	strb	r3, [r7, #7]
 8011b16:	4613      	mov	r3, r2
 8011b18:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011b1a:	68fb      	ldr	r3, [r7, #12]
 8011b1c:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8011b1e:	68bb      	ldr	r3, [r7, #8]
 8011b20:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8011b22:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011b26:	2b00      	cmp	r3, #0
 8011b28:	d11a      	bne.n	8011b60 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8011b2a:	88bb      	ldrh	r3, [r7, #4]
 8011b2c:	3303      	adds	r3, #3
 8011b2e:	089b      	lsrs	r3, r3, #2
 8011b30:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8011b32:	2300      	movs	r3, #0
 8011b34:	61bb      	str	r3, [r7, #24]
 8011b36:	e00f      	b.n	8011b58 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8011b38:	79fb      	ldrb	r3, [r7, #7]
 8011b3a:	031a      	lsls	r2, r3, #12
 8011b3c:	697b      	ldr	r3, [r7, #20]
 8011b3e:	4413      	add	r3, r2
 8011b40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011b44:	461a      	mov	r2, r3
 8011b46:	69fb      	ldr	r3, [r7, #28]
 8011b48:	681b      	ldr	r3, [r3, #0]
 8011b4a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8011b4c:	69fb      	ldr	r3, [r7, #28]
 8011b4e:	3304      	adds	r3, #4
 8011b50:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8011b52:	69bb      	ldr	r3, [r7, #24]
 8011b54:	3301      	adds	r3, #1
 8011b56:	61bb      	str	r3, [r7, #24]
 8011b58:	69ba      	ldr	r2, [r7, #24]
 8011b5a:	693b      	ldr	r3, [r7, #16]
 8011b5c:	429a      	cmp	r2, r3
 8011b5e:	d3eb      	bcc.n	8011b38 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8011b60:	2300      	movs	r3, #0
}
 8011b62:	4618      	mov	r0, r3
 8011b64:	3724      	adds	r7, #36	; 0x24
 8011b66:	46bd      	mov	sp, r7
 8011b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b6c:	4770      	bx	lr

08011b6e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8011b6e:	b480      	push	{r7}
 8011b70:	b089      	sub	sp, #36	; 0x24
 8011b72:	af00      	add	r7, sp, #0
 8011b74:	60f8      	str	r0, [r7, #12]
 8011b76:	60b9      	str	r1, [r7, #8]
 8011b78:	4613      	mov	r3, r2
 8011b7a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011b7c:	68fb      	ldr	r3, [r7, #12]
 8011b7e:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8011b80:	68bb      	ldr	r3, [r7, #8]
 8011b82:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8011b84:	88fb      	ldrh	r3, [r7, #6]
 8011b86:	3303      	adds	r3, #3
 8011b88:	089b      	lsrs	r3, r3, #2
 8011b8a:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8011b8c:	2300      	movs	r3, #0
 8011b8e:	61bb      	str	r3, [r7, #24]
 8011b90:	e00b      	b.n	8011baa <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8011b92:	697b      	ldr	r3, [r7, #20]
 8011b94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011b98:	681a      	ldr	r2, [r3, #0]
 8011b9a:	69fb      	ldr	r3, [r7, #28]
 8011b9c:	601a      	str	r2, [r3, #0]
    pDest++;
 8011b9e:	69fb      	ldr	r3, [r7, #28]
 8011ba0:	3304      	adds	r3, #4
 8011ba2:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8011ba4:	69bb      	ldr	r3, [r7, #24]
 8011ba6:	3301      	adds	r3, #1
 8011ba8:	61bb      	str	r3, [r7, #24]
 8011baa:	69ba      	ldr	r2, [r7, #24]
 8011bac:	693b      	ldr	r3, [r7, #16]
 8011bae:	429a      	cmp	r2, r3
 8011bb0:	d3ef      	bcc.n	8011b92 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8011bb2:	69fb      	ldr	r3, [r7, #28]
}
 8011bb4:	4618      	mov	r0, r3
 8011bb6:	3724      	adds	r7, #36	; 0x24
 8011bb8:	46bd      	mov	sp, r7
 8011bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bbe:	4770      	bx	lr

08011bc0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8011bc0:	b480      	push	{r7}
 8011bc2:	b085      	sub	sp, #20
 8011bc4:	af00      	add	r7, sp, #0
 8011bc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8011bc8:	687b      	ldr	r3, [r7, #4]
 8011bca:	695b      	ldr	r3, [r3, #20]
 8011bcc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8011bce:	687b      	ldr	r3, [r7, #4]
 8011bd0:	699b      	ldr	r3, [r3, #24]
 8011bd2:	68fa      	ldr	r2, [r7, #12]
 8011bd4:	4013      	ands	r3, r2
 8011bd6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8011bd8:	68fb      	ldr	r3, [r7, #12]
}
 8011bda:	4618      	mov	r0, r3
 8011bdc:	3714      	adds	r7, #20
 8011bde:	46bd      	mov	sp, r7
 8011be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011be4:	4770      	bx	lr

08011be6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8011be6:	b480      	push	{r7}
 8011be8:	b083      	sub	sp, #12
 8011bea:	af00      	add	r7, sp, #0
 8011bec:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8011bee:	687b      	ldr	r3, [r7, #4]
 8011bf0:	695b      	ldr	r3, [r3, #20]
 8011bf2:	f003 0301 	and.w	r3, r3, #1
}
 8011bf6:	4618      	mov	r0, r3
 8011bf8:	370c      	adds	r7, #12
 8011bfa:	46bd      	mov	sp, r7
 8011bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c00:	4770      	bx	lr
	...

08011c04 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8011c04:	b480      	push	{r7}
 8011c06:	b085      	sub	sp, #20
 8011c08:	af00      	add	r7, sp, #0
 8011c0a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8011c0c:	2300      	movs	r3, #0
 8011c0e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8011c10:	68fb      	ldr	r3, [r7, #12]
 8011c12:	3301      	adds	r3, #1
 8011c14:	60fb      	str	r3, [r7, #12]
 8011c16:	68fb      	ldr	r3, [r7, #12]
 8011c18:	4a13      	ldr	r2, [pc, #76]	; (8011c68 <USB_CoreReset+0x64>)
 8011c1a:	4293      	cmp	r3, r2
 8011c1c:	d901      	bls.n	8011c22 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8011c1e:	2303      	movs	r3, #3
 8011c20:	e01b      	b.n	8011c5a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8011c22:	687b      	ldr	r3, [r7, #4]
 8011c24:	691b      	ldr	r3, [r3, #16]
 8011c26:	2b00      	cmp	r3, #0
 8011c28:	daf2      	bge.n	8011c10 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8011c2a:	2300      	movs	r3, #0
 8011c2c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8011c2e:	687b      	ldr	r3, [r7, #4]
 8011c30:	691b      	ldr	r3, [r3, #16]
 8011c32:	f043 0201 	orr.w	r2, r3, #1
 8011c36:	687b      	ldr	r3, [r7, #4]
 8011c38:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8011c3a:	68fb      	ldr	r3, [r7, #12]
 8011c3c:	3301      	adds	r3, #1
 8011c3e:	60fb      	str	r3, [r7, #12]
 8011c40:	68fb      	ldr	r3, [r7, #12]
 8011c42:	4a09      	ldr	r2, [pc, #36]	; (8011c68 <USB_CoreReset+0x64>)
 8011c44:	4293      	cmp	r3, r2
 8011c46:	d901      	bls.n	8011c4c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8011c48:	2303      	movs	r3, #3
 8011c4a:	e006      	b.n	8011c5a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	691b      	ldr	r3, [r3, #16]
 8011c50:	f003 0301 	and.w	r3, r3, #1
 8011c54:	2b01      	cmp	r3, #1
 8011c56:	d0f0      	beq.n	8011c3a <USB_CoreReset+0x36>

  return HAL_OK;
 8011c58:	2300      	movs	r3, #0
}
 8011c5a:	4618      	mov	r0, r3
 8011c5c:	3714      	adds	r7, #20
 8011c5e:	46bd      	mov	sp, r7
 8011c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c64:	4770      	bx	lr
 8011c66:	bf00      	nop
 8011c68:	00030d40 	.word	0x00030d40

08011c6c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8011c6c:	b084      	sub	sp, #16
 8011c6e:	b580      	push	{r7, lr}
 8011c70:	b084      	sub	sp, #16
 8011c72:	af00      	add	r7, sp, #0
 8011c74:	6078      	str	r0, [r7, #4]
 8011c76:	f107 001c 	add.w	r0, r7, #28
 8011c7a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011c7e:	687b      	ldr	r3, [r7, #4]
 8011c80:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8011c82:	68bb      	ldr	r3, [r7, #8]
 8011c84:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8011c88:	461a      	mov	r2, r3
 8011c8a:	2300      	movs	r3, #0
 8011c8c:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011c92:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8011c96:	687b      	ldr	r3, [r7, #4]
 8011c98:	639a      	str	r2, [r3, #56]	; 0x38

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8011c9a:	687b      	ldr	r3, [r7, #4]
 8011c9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011c9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011ca2:	2b00      	cmp	r3, #0
 8011ca4:	d018      	beq.n	8011cd8 <USB_HostInit+0x6c>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8011ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ca8:	2b01      	cmp	r3, #1
 8011caa:	d10a      	bne.n	8011cc2 <USB_HostInit+0x56>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8011cac:	68bb      	ldr	r3, [r7, #8]
 8011cae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011cb2:	681b      	ldr	r3, [r3, #0]
 8011cb4:	68ba      	ldr	r2, [r7, #8]
 8011cb6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8011cba:	f043 0304 	orr.w	r3, r3, #4
 8011cbe:	6013      	str	r3, [r2, #0]
 8011cc0:	e014      	b.n	8011cec <USB_HostInit+0x80>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8011cc2:	68bb      	ldr	r3, [r7, #8]
 8011cc4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011cc8:	681b      	ldr	r3, [r3, #0]
 8011cca:	68ba      	ldr	r2, [r7, #8]
 8011ccc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8011cd0:	f023 0304 	bic.w	r3, r3, #4
 8011cd4:	6013      	str	r3, [r2, #0]
 8011cd6:	e009      	b.n	8011cec <USB_HostInit+0x80>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8011cd8:	68bb      	ldr	r3, [r7, #8]
 8011cda:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011cde:	681b      	ldr	r3, [r3, #0]
 8011ce0:	68ba      	ldr	r2, [r7, #8]
 8011ce2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8011ce6:	f023 0304 	bic.w	r3, r3, #4
 8011cea:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8011cec:	2110      	movs	r1, #16
 8011cee:	6878      	ldr	r0, [r7, #4]
 8011cf0:	f7ff fec0 	bl	8011a74 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8011cf4:	6878      	ldr	r0, [r7, #4]
 8011cf6:	f7ff fee3 	bl	8011ac0 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8011cfa:	2300      	movs	r3, #0
 8011cfc:	60fb      	str	r3, [r7, #12]
 8011cfe:	e015      	b.n	8011d2c <USB_HostInit+0xc0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8011d00:	68fb      	ldr	r3, [r7, #12]
 8011d02:	015a      	lsls	r2, r3, #5
 8011d04:	68bb      	ldr	r3, [r7, #8]
 8011d06:	4413      	add	r3, r2
 8011d08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011d0c:	461a      	mov	r2, r3
 8011d0e:	f04f 33ff 	mov.w	r3, #4294967295
 8011d12:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8011d14:	68fb      	ldr	r3, [r7, #12]
 8011d16:	015a      	lsls	r2, r3, #5
 8011d18:	68bb      	ldr	r3, [r7, #8]
 8011d1a:	4413      	add	r3, r2
 8011d1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011d20:	461a      	mov	r2, r3
 8011d22:	2300      	movs	r3, #0
 8011d24:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8011d26:	68fb      	ldr	r3, [r7, #12]
 8011d28:	3301      	adds	r3, #1
 8011d2a:	60fb      	str	r3, [r7, #12]
 8011d2c:	6a3b      	ldr	r3, [r7, #32]
 8011d2e:	68fa      	ldr	r2, [r7, #12]
 8011d30:	429a      	cmp	r2, r3
 8011d32:	d3e5      	bcc.n	8011d00 <USB_HostInit+0x94>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8011d34:	2101      	movs	r1, #1
 8011d36:	6878      	ldr	r0, [r7, #4]
 8011d38:	f000 f8ac 	bl	8011e94 <USB_DriveVbus>

  HAL_Delay(200U);
 8011d3c:	20c8      	movs	r0, #200	; 0xc8
 8011d3e:	f7f3 ffe9 	bl	8005d14 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	2200      	movs	r2, #0
 8011d46:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8011d48:	687b      	ldr	r3, [r7, #4]
 8011d4a:	f04f 32ff 	mov.w	r2, #4294967295
 8011d4e:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8011d50:	687b      	ldr	r3, [r7, #4]
 8011d52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011d54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011d58:	2b00      	cmp	r3, #0
 8011d5a:	d00b      	beq.n	8011d74 <USB_HostInit+0x108>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8011d5c:	687b      	ldr	r3, [r7, #4]
 8011d5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011d62:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	4a14      	ldr	r2, [pc, #80]	; (8011db8 <USB_HostInit+0x14c>)
 8011d68:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8011d6a:	687b      	ldr	r3, [r7, #4]
 8011d6c:	4a13      	ldr	r2, [pc, #76]	; (8011dbc <USB_HostInit+0x150>)
 8011d6e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8011d72:	e009      	b.n	8011d88 <USB_HostInit+0x11c>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	2280      	movs	r2, #128	; 0x80
 8011d78:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8011d7a:	687b      	ldr	r3, [r7, #4]
 8011d7c:	4a10      	ldr	r2, [pc, #64]	; (8011dc0 <USB_HostInit+0x154>)
 8011d7e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	4a10      	ldr	r2, [pc, #64]	; (8011dc4 <USB_HostInit+0x158>)
 8011d84:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8011d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d8a:	2b00      	cmp	r3, #0
 8011d8c:	d105      	bne.n	8011d9a <USB_HostInit+0x12e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8011d8e:	687b      	ldr	r3, [r7, #4]
 8011d90:	699b      	ldr	r3, [r3, #24]
 8011d92:	f043 0210 	orr.w	r2, r3, #16
 8011d96:	687b      	ldr	r3, [r7, #4]
 8011d98:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8011d9a:	687b      	ldr	r3, [r7, #4]
 8011d9c:	699a      	ldr	r2, [r3, #24]
 8011d9e:	4b0a      	ldr	r3, [pc, #40]	; (8011dc8 <USB_HostInit+0x15c>)
 8011da0:	4313      	orrs	r3, r2
 8011da2:	687a      	ldr	r2, [r7, #4]
 8011da4:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8011da6:	2300      	movs	r3, #0
}
 8011da8:	4618      	mov	r0, r3
 8011daa:	3710      	adds	r7, #16
 8011dac:	46bd      	mov	sp, r7
 8011dae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8011db2:	b004      	add	sp, #16
 8011db4:	4770      	bx	lr
 8011db6:	bf00      	nop
 8011db8:	01000200 	.word	0x01000200
 8011dbc:	00e00300 	.word	0x00e00300
 8011dc0:	00600080 	.word	0x00600080
 8011dc4:	004000e0 	.word	0x004000e0
 8011dc8:	a3200008 	.word	0xa3200008

08011dcc <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8011dcc:	b480      	push	{r7}
 8011dce:	b085      	sub	sp, #20
 8011dd0:	af00      	add	r7, sp, #0
 8011dd2:	6078      	str	r0, [r7, #4]
 8011dd4:	460b      	mov	r3, r1
 8011dd6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8011ddc:	68fb      	ldr	r3, [r7, #12]
 8011dde:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011de2:	681b      	ldr	r3, [r3, #0]
 8011de4:	68fa      	ldr	r2, [r7, #12]
 8011de6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8011dea:	f023 0303 	bic.w	r3, r3, #3
 8011dee:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8011df0:	68fb      	ldr	r3, [r7, #12]
 8011df2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011df6:	681a      	ldr	r2, [r3, #0]
 8011df8:	78fb      	ldrb	r3, [r7, #3]
 8011dfa:	f003 0303 	and.w	r3, r3, #3
 8011dfe:	68f9      	ldr	r1, [r7, #12]
 8011e00:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8011e04:	4313      	orrs	r3, r2
 8011e06:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8011e08:	78fb      	ldrb	r3, [r7, #3]
 8011e0a:	2b01      	cmp	r3, #1
 8011e0c:	d107      	bne.n	8011e1e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8011e0e:	68fb      	ldr	r3, [r7, #12]
 8011e10:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011e14:	461a      	mov	r2, r3
 8011e16:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8011e1a:	6053      	str	r3, [r2, #4]
 8011e1c:	e009      	b.n	8011e32 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8011e1e:	78fb      	ldrb	r3, [r7, #3]
 8011e20:	2b02      	cmp	r3, #2
 8011e22:	d106      	bne.n	8011e32 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8011e24:	68fb      	ldr	r3, [r7, #12]
 8011e26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011e2a:	461a      	mov	r2, r3
 8011e2c:	f241 7370 	movw	r3, #6000	; 0x1770
 8011e30:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8011e32:	2300      	movs	r3, #0
}
 8011e34:	4618      	mov	r0, r3
 8011e36:	3714      	adds	r7, #20
 8011e38:	46bd      	mov	sp, r7
 8011e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e3e:	4770      	bx	lr

08011e40 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8011e40:	b580      	push	{r7, lr}
 8011e42:	b084      	sub	sp, #16
 8011e44:	af00      	add	r7, sp, #0
 8011e46:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011e48:	687b      	ldr	r3, [r7, #4]
 8011e4a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8011e4c:	2300      	movs	r3, #0
 8011e4e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8011e50:	68fb      	ldr	r3, [r7, #12]
 8011e52:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8011e56:	681b      	ldr	r3, [r3, #0]
 8011e58:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8011e5a:	68bb      	ldr	r3, [r7, #8]
 8011e5c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8011e60:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8011e62:	68bb      	ldr	r3, [r7, #8]
 8011e64:	68fa      	ldr	r2, [r7, #12]
 8011e66:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8011e6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011e6e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8011e70:	2064      	movs	r0, #100	; 0x64
 8011e72:	f7f3 ff4f 	bl	8005d14 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8011e76:	68bb      	ldr	r3, [r7, #8]
 8011e78:	68fa      	ldr	r2, [r7, #12]
 8011e7a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8011e7e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011e82:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8011e84:	200a      	movs	r0, #10
 8011e86:	f7f3 ff45 	bl	8005d14 <HAL_Delay>

  return HAL_OK;
 8011e8a:	2300      	movs	r3, #0
}
 8011e8c:	4618      	mov	r0, r3
 8011e8e:	3710      	adds	r7, #16
 8011e90:	46bd      	mov	sp, r7
 8011e92:	bd80      	pop	{r7, pc}

08011e94 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8011e94:	b480      	push	{r7}
 8011e96:	b085      	sub	sp, #20
 8011e98:	af00      	add	r7, sp, #0
 8011e9a:	6078      	str	r0, [r7, #4]
 8011e9c:	460b      	mov	r3, r1
 8011e9e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011ea0:	687b      	ldr	r3, [r7, #4]
 8011ea2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8011ea4:	2300      	movs	r3, #0
 8011ea6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8011ea8:	68fb      	ldr	r3, [r7, #12]
 8011eaa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8011eae:	681b      	ldr	r3, [r3, #0]
 8011eb0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8011eb2:	68bb      	ldr	r3, [r7, #8]
 8011eb4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8011eb8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8011eba:	68bb      	ldr	r3, [r7, #8]
 8011ebc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8011ec0:	2b00      	cmp	r3, #0
 8011ec2:	d109      	bne.n	8011ed8 <USB_DriveVbus+0x44>
 8011ec4:	78fb      	ldrb	r3, [r7, #3]
 8011ec6:	2b01      	cmp	r3, #1
 8011ec8:	d106      	bne.n	8011ed8 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8011eca:	68bb      	ldr	r3, [r7, #8]
 8011ecc:	68fa      	ldr	r2, [r7, #12]
 8011ece:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8011ed2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8011ed6:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8011ed8:	68bb      	ldr	r3, [r7, #8]
 8011eda:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8011ede:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011ee2:	d109      	bne.n	8011ef8 <USB_DriveVbus+0x64>
 8011ee4:	78fb      	ldrb	r3, [r7, #3]
 8011ee6:	2b00      	cmp	r3, #0
 8011ee8:	d106      	bne.n	8011ef8 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8011eea:	68bb      	ldr	r3, [r7, #8]
 8011eec:	68fa      	ldr	r2, [r7, #12]
 8011eee:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8011ef2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011ef6:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8011ef8:	2300      	movs	r3, #0
}
 8011efa:	4618      	mov	r0, r3
 8011efc:	3714      	adds	r7, #20
 8011efe:	46bd      	mov	sp, r7
 8011f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f04:	4770      	bx	lr

08011f06 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8011f06:	b480      	push	{r7}
 8011f08:	b085      	sub	sp, #20
 8011f0a:	af00      	add	r7, sp, #0
 8011f0c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011f0e:	687b      	ldr	r3, [r7, #4]
 8011f10:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8011f12:	2300      	movs	r3, #0
 8011f14:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8011f16:	68fb      	ldr	r3, [r7, #12]
 8011f18:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8011f1c:	681b      	ldr	r3, [r3, #0]
 8011f1e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8011f20:	68bb      	ldr	r3, [r7, #8]
 8011f22:	0c5b      	lsrs	r3, r3, #17
 8011f24:	f003 0303 	and.w	r3, r3, #3
}
 8011f28:	4618      	mov	r0, r3
 8011f2a:	3714      	adds	r7, #20
 8011f2c:	46bd      	mov	sp, r7
 8011f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f32:	4770      	bx	lr

08011f34 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8011f34:	b480      	push	{r7}
 8011f36:	b085      	sub	sp, #20
 8011f38:	af00      	add	r7, sp, #0
 8011f3a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011f3c:	687b      	ldr	r3, [r7, #4]
 8011f3e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8011f40:	68fb      	ldr	r3, [r7, #12]
 8011f42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011f46:	689b      	ldr	r3, [r3, #8]
 8011f48:	b29b      	uxth	r3, r3
}
 8011f4a:	4618      	mov	r0, r3
 8011f4c:	3714      	adds	r7, #20
 8011f4e:	46bd      	mov	sp, r7
 8011f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f54:	4770      	bx	lr
	...

08011f58 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8011f58:	b580      	push	{r7, lr}
 8011f5a:	b088      	sub	sp, #32
 8011f5c:	af00      	add	r7, sp, #0
 8011f5e:	6078      	str	r0, [r7, #4]
 8011f60:	4608      	mov	r0, r1
 8011f62:	4611      	mov	r1, r2
 8011f64:	461a      	mov	r2, r3
 8011f66:	4603      	mov	r3, r0
 8011f68:	70fb      	strb	r3, [r7, #3]
 8011f6a:	460b      	mov	r3, r1
 8011f6c:	70bb      	strb	r3, [r7, #2]
 8011f6e:	4613      	mov	r3, r2
 8011f70:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8011f72:	2300      	movs	r3, #0
 8011f74:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011f76:	687b      	ldr	r3, [r7, #4]
 8011f78:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir, HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8011f7a:	78fb      	ldrb	r3, [r7, #3]
 8011f7c:	015a      	lsls	r2, r3, #5
 8011f7e:	693b      	ldr	r3, [r7, #16]
 8011f80:	4413      	add	r3, r2
 8011f82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011f86:	461a      	mov	r2, r3
 8011f88:	f04f 33ff 	mov.w	r3, #4294967295
 8011f8c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8011f8e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8011f92:	2b03      	cmp	r3, #3
 8011f94:	d87e      	bhi.n	8012094 <USB_HC_Init+0x13c>
 8011f96:	a201      	add	r2, pc, #4	; (adr r2, 8011f9c <USB_HC_Init+0x44>)
 8011f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011f9c:	08011fad 	.word	0x08011fad
 8011fa0:	08012057 	.word	0x08012057
 8011fa4:	08011fad 	.word	0x08011fad
 8011fa8:	08012019 	.word	0x08012019
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8011fac:	78fb      	ldrb	r3, [r7, #3]
 8011fae:	015a      	lsls	r2, r3, #5
 8011fb0:	693b      	ldr	r3, [r7, #16]
 8011fb2:	4413      	add	r3, r2
 8011fb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011fb8:	461a      	mov	r2, r3
 8011fba:	f240 439d 	movw	r3, #1181	; 0x49d
 8011fbe:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8011fc0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8011fc4:	2b00      	cmp	r3, #0
 8011fc6:	da10      	bge.n	8011fea <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8011fc8:	78fb      	ldrb	r3, [r7, #3]
 8011fca:	015a      	lsls	r2, r3, #5
 8011fcc:	693b      	ldr	r3, [r7, #16]
 8011fce:	4413      	add	r3, r2
 8011fd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011fd4:	68db      	ldr	r3, [r3, #12]
 8011fd6:	78fa      	ldrb	r2, [r7, #3]
 8011fd8:	0151      	lsls	r1, r2, #5
 8011fda:	693a      	ldr	r2, [r7, #16]
 8011fdc:	440a      	add	r2, r1
 8011fde:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8011fe2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011fe6:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8011fe8:	e057      	b.n	801209a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8011fea:	687b      	ldr	r3, [r7, #4]
 8011fec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011fee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011ff2:	2b00      	cmp	r3, #0
 8011ff4:	d051      	beq.n	801209a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8011ff6:	78fb      	ldrb	r3, [r7, #3]
 8011ff8:	015a      	lsls	r2, r3, #5
 8011ffa:	693b      	ldr	r3, [r7, #16]
 8011ffc:	4413      	add	r3, r2
 8011ffe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012002:	68db      	ldr	r3, [r3, #12]
 8012004:	78fa      	ldrb	r2, [r7, #3]
 8012006:	0151      	lsls	r1, r2, #5
 8012008:	693a      	ldr	r2, [r7, #16]
 801200a:	440a      	add	r2, r1
 801200c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8012010:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8012014:	60d3      	str	r3, [r2, #12]
      break;
 8012016:	e040      	b.n	801209a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8012018:	78fb      	ldrb	r3, [r7, #3]
 801201a:	015a      	lsls	r2, r3, #5
 801201c:	693b      	ldr	r3, [r7, #16]
 801201e:	4413      	add	r3, r2
 8012020:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012024:	461a      	mov	r2, r3
 8012026:	f240 639d 	movw	r3, #1693	; 0x69d
 801202a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 801202c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8012030:	2b00      	cmp	r3, #0
 8012032:	da34      	bge.n	801209e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8012034:	78fb      	ldrb	r3, [r7, #3]
 8012036:	015a      	lsls	r2, r3, #5
 8012038:	693b      	ldr	r3, [r7, #16]
 801203a:	4413      	add	r3, r2
 801203c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012040:	68db      	ldr	r3, [r3, #12]
 8012042:	78fa      	ldrb	r2, [r7, #3]
 8012044:	0151      	lsls	r1, r2, #5
 8012046:	693a      	ldr	r2, [r7, #16]
 8012048:	440a      	add	r2, r1
 801204a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801204e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8012052:	60d3      	str	r3, [r2, #12]
      }

      break;
 8012054:	e023      	b.n	801209e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8012056:	78fb      	ldrb	r3, [r7, #3]
 8012058:	015a      	lsls	r2, r3, #5
 801205a:	693b      	ldr	r3, [r7, #16]
 801205c:	4413      	add	r3, r2
 801205e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012062:	461a      	mov	r2, r3
 8012064:	f240 2325 	movw	r3, #549	; 0x225
 8012068:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 801206a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 801206e:	2b00      	cmp	r3, #0
 8012070:	da17      	bge.n	80120a2 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8012072:	78fb      	ldrb	r3, [r7, #3]
 8012074:	015a      	lsls	r2, r3, #5
 8012076:	693b      	ldr	r3, [r7, #16]
 8012078:	4413      	add	r3, r2
 801207a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801207e:	68db      	ldr	r3, [r3, #12]
 8012080:	78fa      	ldrb	r2, [r7, #3]
 8012082:	0151      	lsls	r1, r2, #5
 8012084:	693a      	ldr	r2, [r7, #16]
 8012086:	440a      	add	r2, r1
 8012088:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801208c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8012090:	60d3      	str	r3, [r2, #12]
      }
      break;
 8012092:	e006      	b.n	80120a2 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8012094:	2301      	movs	r3, #1
 8012096:	77fb      	strb	r3, [r7, #31]
      break;
 8012098:	e004      	b.n	80120a4 <USB_HC_Init+0x14c>
      break;
 801209a:	bf00      	nop
 801209c:	e002      	b.n	80120a4 <USB_HC_Init+0x14c>
      break;
 801209e:	bf00      	nop
 80120a0:	e000      	b.n	80120a4 <USB_HC_Init+0x14c>
      break;
 80120a2:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80120a4:	693b      	ldr	r3, [r7, #16]
 80120a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80120aa:	699a      	ldr	r2, [r3, #24]
 80120ac:	78fb      	ldrb	r3, [r7, #3]
 80120ae:	f003 030f 	and.w	r3, r3, #15
 80120b2:	2101      	movs	r1, #1
 80120b4:	fa01 f303 	lsl.w	r3, r1, r3
 80120b8:	6939      	ldr	r1, [r7, #16]
 80120ba:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80120be:	4313      	orrs	r3, r2
 80120c0:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80120c2:	687b      	ldr	r3, [r7, #4]
 80120c4:	699b      	ldr	r3, [r3, #24]
 80120c6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80120ca:	687b      	ldr	r3, [r7, #4]
 80120cc:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80120ce:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80120d2:	2b00      	cmp	r3, #0
 80120d4:	da03      	bge.n	80120de <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80120d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80120da:	61bb      	str	r3, [r7, #24]
 80120dc:	e001      	b.n	80120e2 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 80120de:	2300      	movs	r3, #0
 80120e0:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80120e2:	6878      	ldr	r0, [r7, #4]
 80120e4:	f7ff ff0f 	bl	8011f06 <USB_GetHostSpeed>
 80120e8:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80120ea:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80120ee:	2b02      	cmp	r3, #2
 80120f0:	d106      	bne.n	8012100 <USB_HC_Init+0x1a8>
 80120f2:	68fb      	ldr	r3, [r7, #12]
 80120f4:	2b02      	cmp	r3, #2
 80120f6:	d003      	beq.n	8012100 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80120f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80120fc:	617b      	str	r3, [r7, #20]
 80120fe:	e001      	b.n	8012104 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8012100:	2300      	movs	r3, #0
 8012102:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8012104:	787b      	ldrb	r3, [r7, #1]
 8012106:	059b      	lsls	r3, r3, #22
 8012108:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 801210c:	78bb      	ldrb	r3, [r7, #2]
 801210e:	02db      	lsls	r3, r3, #11
 8012110:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8012114:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8012116:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801211a:	049b      	lsls	r3, r3, #18
 801211c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8012120:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8012122:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8012124:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8012128:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 801212a:	69bb      	ldr	r3, [r7, #24]
 801212c:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 801212e:	78fb      	ldrb	r3, [r7, #3]
 8012130:	0159      	lsls	r1, r3, #5
 8012132:	693b      	ldr	r3, [r7, #16]
 8012134:	440b      	add	r3, r1
 8012136:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801213a:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 801213c:	697b      	ldr	r3, [r7, #20]
 801213e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8012140:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8012142:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8012146:	2b03      	cmp	r3, #3
 8012148:	d10f      	bne.n	801216a <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 801214a:	78fb      	ldrb	r3, [r7, #3]
 801214c:	015a      	lsls	r2, r3, #5
 801214e:	693b      	ldr	r3, [r7, #16]
 8012150:	4413      	add	r3, r2
 8012152:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012156:	681b      	ldr	r3, [r3, #0]
 8012158:	78fa      	ldrb	r2, [r7, #3]
 801215a:	0151      	lsls	r1, r2, #5
 801215c:	693a      	ldr	r2, [r7, #16]
 801215e:	440a      	add	r2, r1
 8012160:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8012164:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8012168:	6013      	str	r3, [r2, #0]
  }

  return ret;
 801216a:	7ffb      	ldrb	r3, [r7, #31]
}
 801216c:	4618      	mov	r0, r3
 801216e:	3720      	adds	r7, #32
 8012170:	46bd      	mov	sp, r7
 8012172:	bd80      	pop	{r7, pc}

08012174 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8012174:	b580      	push	{r7, lr}
 8012176:	b08c      	sub	sp, #48	; 0x30
 8012178:	af02      	add	r7, sp, #8
 801217a:	60f8      	str	r0, [r7, #12]
 801217c:	60b9      	str	r1, [r7, #8]
 801217e:	4613      	mov	r3, r2
 8012180:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012182:	68fb      	ldr	r3, [r7, #12]
 8012184:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8012186:	68bb      	ldr	r3, [r7, #8]
 8012188:	785b      	ldrb	r3, [r3, #1]
 801218a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 801218c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012190:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8012192:	68fb      	ldr	r3, [r7, #12]
 8012194:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012196:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801219a:	2b00      	cmp	r3, #0
 801219c:	d02d      	beq.n	80121fa <USB_HC_StartXfer+0x86>
 801219e:	68bb      	ldr	r3, [r7, #8]
 80121a0:	791b      	ldrb	r3, [r3, #4]
 80121a2:	2b00      	cmp	r3, #0
 80121a4:	d129      	bne.n	80121fa <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 80121a6:	79fb      	ldrb	r3, [r7, #7]
 80121a8:	2b01      	cmp	r3, #1
 80121aa:	d117      	bne.n	80121dc <USB_HC_StartXfer+0x68>
 80121ac:	68bb      	ldr	r3, [r7, #8]
 80121ae:	79db      	ldrb	r3, [r3, #7]
 80121b0:	2b00      	cmp	r3, #0
 80121b2:	d003      	beq.n	80121bc <USB_HC_StartXfer+0x48>
 80121b4:	68bb      	ldr	r3, [r7, #8]
 80121b6:	79db      	ldrb	r3, [r3, #7]
 80121b8:	2b02      	cmp	r3, #2
 80121ba:	d10f      	bne.n	80121dc <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80121bc:	69fb      	ldr	r3, [r7, #28]
 80121be:	015a      	lsls	r2, r3, #5
 80121c0:	6a3b      	ldr	r3, [r7, #32]
 80121c2:	4413      	add	r3, r2
 80121c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80121c8:	68db      	ldr	r3, [r3, #12]
 80121ca:	69fa      	ldr	r2, [r7, #28]
 80121cc:	0151      	lsls	r1, r2, #5
 80121ce:	6a3a      	ldr	r2, [r7, #32]
 80121d0:	440a      	add	r2, r1
 80121d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80121d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80121da:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 80121dc:	79fb      	ldrb	r3, [r7, #7]
 80121de:	2b00      	cmp	r3, #0
 80121e0:	d10b      	bne.n	80121fa <USB_HC_StartXfer+0x86>
 80121e2:	68bb      	ldr	r3, [r7, #8]
 80121e4:	795b      	ldrb	r3, [r3, #5]
 80121e6:	2b01      	cmp	r3, #1
 80121e8:	d107      	bne.n	80121fa <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80121ea:	68bb      	ldr	r3, [r7, #8]
 80121ec:	785b      	ldrb	r3, [r3, #1]
 80121ee:	4619      	mov	r1, r3
 80121f0:	68f8      	ldr	r0, [r7, #12]
 80121f2:	f000 fa2f 	bl	8012654 <USB_DoPing>
      return HAL_OK;
 80121f6:	2300      	movs	r3, #0
 80121f8:	e0f8      	b.n	80123ec <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80121fa:	68bb      	ldr	r3, [r7, #8]
 80121fc:	695b      	ldr	r3, [r3, #20]
 80121fe:	2b00      	cmp	r3, #0
 8012200:	d018      	beq.n	8012234 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8012202:	68bb      	ldr	r3, [r7, #8]
 8012204:	695b      	ldr	r3, [r3, #20]
 8012206:	68ba      	ldr	r2, [r7, #8]
 8012208:	8912      	ldrh	r2, [r2, #8]
 801220a:	4413      	add	r3, r2
 801220c:	3b01      	subs	r3, #1
 801220e:	68ba      	ldr	r2, [r7, #8]
 8012210:	8912      	ldrh	r2, [r2, #8]
 8012212:	fbb3 f3f2 	udiv	r3, r3, r2
 8012216:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8012218:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801221a:	8b7b      	ldrh	r3, [r7, #26]
 801221c:	429a      	cmp	r2, r3
 801221e:	d90b      	bls.n	8012238 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8012220:	8b7b      	ldrh	r3, [r7, #26]
 8012222:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8012224:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012226:	68ba      	ldr	r2, [r7, #8]
 8012228:	8912      	ldrh	r2, [r2, #8]
 801222a:	fb02 f203 	mul.w	r2, r2, r3
 801222e:	68bb      	ldr	r3, [r7, #8]
 8012230:	611a      	str	r2, [r3, #16]
 8012232:	e001      	b.n	8012238 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8012234:	2301      	movs	r3, #1
 8012236:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8012238:	68bb      	ldr	r3, [r7, #8]
 801223a:	78db      	ldrb	r3, [r3, #3]
 801223c:	2b00      	cmp	r3, #0
 801223e:	d007      	beq.n	8012250 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8012240:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012242:	68ba      	ldr	r2, [r7, #8]
 8012244:	8912      	ldrh	r2, [r2, #8]
 8012246:	fb02 f203 	mul.w	r2, r2, r3
 801224a:	68bb      	ldr	r3, [r7, #8]
 801224c:	611a      	str	r2, [r3, #16]
 801224e:	e003      	b.n	8012258 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8012250:	68bb      	ldr	r3, [r7, #8]
 8012252:	695a      	ldr	r2, [r3, #20]
 8012254:	68bb      	ldr	r3, [r7, #8]
 8012256:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8012258:	68bb      	ldr	r3, [r7, #8]
 801225a:	691b      	ldr	r3, [r3, #16]
 801225c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8012260:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012262:	04d9      	lsls	r1, r3, #19
 8012264:	4b63      	ldr	r3, [pc, #396]	; (80123f4 <USB_HC_StartXfer+0x280>)
 8012266:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8012268:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 801226a:	68bb      	ldr	r3, [r7, #8]
 801226c:	7a9b      	ldrb	r3, [r3, #10]
 801226e:	075b      	lsls	r3, r3, #29
 8012270:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8012274:	69f9      	ldr	r1, [r7, #28]
 8012276:	0148      	lsls	r0, r1, #5
 8012278:	6a39      	ldr	r1, [r7, #32]
 801227a:	4401      	add	r1, r0
 801227c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8012280:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8012282:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8012284:	79fb      	ldrb	r3, [r7, #7]
 8012286:	2b00      	cmp	r3, #0
 8012288:	d009      	beq.n	801229e <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 801228a:	68bb      	ldr	r3, [r7, #8]
 801228c:	68d9      	ldr	r1, [r3, #12]
 801228e:	69fb      	ldr	r3, [r7, #28]
 8012290:	015a      	lsls	r2, r3, #5
 8012292:	6a3b      	ldr	r3, [r7, #32]
 8012294:	4413      	add	r3, r2
 8012296:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801229a:	460a      	mov	r2, r1
 801229c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 801229e:	6a3b      	ldr	r3, [r7, #32]
 80122a0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80122a4:	689b      	ldr	r3, [r3, #8]
 80122a6:	f003 0301 	and.w	r3, r3, #1
 80122aa:	2b00      	cmp	r3, #0
 80122ac:	bf0c      	ite	eq
 80122ae:	2301      	moveq	r3, #1
 80122b0:	2300      	movne	r3, #0
 80122b2:	b2db      	uxtb	r3, r3
 80122b4:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80122b6:	69fb      	ldr	r3, [r7, #28]
 80122b8:	015a      	lsls	r2, r3, #5
 80122ba:	6a3b      	ldr	r3, [r7, #32]
 80122bc:	4413      	add	r3, r2
 80122be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80122c2:	681b      	ldr	r3, [r3, #0]
 80122c4:	69fa      	ldr	r2, [r7, #28]
 80122c6:	0151      	lsls	r1, r2, #5
 80122c8:	6a3a      	ldr	r2, [r7, #32]
 80122ca:	440a      	add	r2, r1
 80122cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80122d0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80122d4:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80122d6:	69fb      	ldr	r3, [r7, #28]
 80122d8:	015a      	lsls	r2, r3, #5
 80122da:	6a3b      	ldr	r3, [r7, #32]
 80122dc:	4413      	add	r3, r2
 80122de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80122e2:	681a      	ldr	r2, [r3, #0]
 80122e4:	7e7b      	ldrb	r3, [r7, #25]
 80122e6:	075b      	lsls	r3, r3, #29
 80122e8:	69f9      	ldr	r1, [r7, #28]
 80122ea:	0148      	lsls	r0, r1, #5
 80122ec:	6a39      	ldr	r1, [r7, #32]
 80122ee:	4401      	add	r1, r0
 80122f0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80122f4:	4313      	orrs	r3, r2
 80122f6:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80122f8:	69fb      	ldr	r3, [r7, #28]
 80122fa:	015a      	lsls	r2, r3, #5
 80122fc:	6a3b      	ldr	r3, [r7, #32]
 80122fe:	4413      	add	r3, r2
 8012300:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012304:	681b      	ldr	r3, [r3, #0]
 8012306:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8012308:	693b      	ldr	r3, [r7, #16]
 801230a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801230e:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8012310:	68bb      	ldr	r3, [r7, #8]
 8012312:	78db      	ldrb	r3, [r3, #3]
 8012314:	2b00      	cmp	r3, #0
 8012316:	d004      	beq.n	8012322 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8012318:	693b      	ldr	r3, [r7, #16]
 801231a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801231e:	613b      	str	r3, [r7, #16]
 8012320:	e003      	b.n	801232a <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8012322:	693b      	ldr	r3, [r7, #16]
 8012324:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8012328:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 801232a:	693b      	ldr	r3, [r7, #16]
 801232c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8012330:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8012332:	69fb      	ldr	r3, [r7, #28]
 8012334:	015a      	lsls	r2, r3, #5
 8012336:	6a3b      	ldr	r3, [r7, #32]
 8012338:	4413      	add	r3, r2
 801233a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801233e:	461a      	mov	r2, r3
 8012340:	693b      	ldr	r3, [r7, #16]
 8012342:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8012344:	79fb      	ldrb	r3, [r7, #7]
 8012346:	2b00      	cmp	r3, #0
 8012348:	d001      	beq.n	801234e <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 801234a:	2300      	movs	r3, #0
 801234c:	e04e      	b.n	80123ec <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 801234e:	68bb      	ldr	r3, [r7, #8]
 8012350:	78db      	ldrb	r3, [r3, #3]
 8012352:	2b00      	cmp	r3, #0
 8012354:	d149      	bne.n	80123ea <USB_HC_StartXfer+0x276>
 8012356:	68bb      	ldr	r3, [r7, #8]
 8012358:	695b      	ldr	r3, [r3, #20]
 801235a:	2b00      	cmp	r3, #0
 801235c:	d045      	beq.n	80123ea <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 801235e:	68bb      	ldr	r3, [r7, #8]
 8012360:	79db      	ldrb	r3, [r3, #7]
 8012362:	2b03      	cmp	r3, #3
 8012364:	d830      	bhi.n	80123c8 <USB_HC_StartXfer+0x254>
 8012366:	a201      	add	r2, pc, #4	; (adr r2, 801236c <USB_HC_StartXfer+0x1f8>)
 8012368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801236c:	0801237d 	.word	0x0801237d
 8012370:	080123a1 	.word	0x080123a1
 8012374:	0801237d 	.word	0x0801237d
 8012378:	080123a1 	.word	0x080123a1
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 801237c:	68bb      	ldr	r3, [r7, #8]
 801237e:	695b      	ldr	r3, [r3, #20]
 8012380:	3303      	adds	r3, #3
 8012382:	089b      	lsrs	r3, r3, #2
 8012384:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8012386:	8afa      	ldrh	r2, [r7, #22]
 8012388:	68fb      	ldr	r3, [r7, #12]
 801238a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801238c:	b29b      	uxth	r3, r3
 801238e:	429a      	cmp	r2, r3
 8012390:	d91c      	bls.n	80123cc <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8012392:	68fb      	ldr	r3, [r7, #12]
 8012394:	699b      	ldr	r3, [r3, #24]
 8012396:	f043 0220 	orr.w	r2, r3, #32
 801239a:	68fb      	ldr	r3, [r7, #12]
 801239c:	619a      	str	r2, [r3, #24]
        }
        break;
 801239e:	e015      	b.n	80123cc <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80123a0:	68bb      	ldr	r3, [r7, #8]
 80123a2:	695b      	ldr	r3, [r3, #20]
 80123a4:	3303      	adds	r3, #3
 80123a6:	089b      	lsrs	r3, r3, #2
 80123a8:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80123aa:	8afa      	ldrh	r2, [r7, #22]
 80123ac:	6a3b      	ldr	r3, [r7, #32]
 80123ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80123b2:	691b      	ldr	r3, [r3, #16]
 80123b4:	b29b      	uxth	r3, r3
 80123b6:	429a      	cmp	r2, r3
 80123b8:	d90a      	bls.n	80123d0 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80123ba:	68fb      	ldr	r3, [r7, #12]
 80123bc:	699b      	ldr	r3, [r3, #24]
 80123be:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80123c2:	68fb      	ldr	r3, [r7, #12]
 80123c4:	619a      	str	r2, [r3, #24]
        }
        break;
 80123c6:	e003      	b.n	80123d0 <USB_HC_StartXfer+0x25c>

      default:
        break;
 80123c8:	bf00      	nop
 80123ca:	e002      	b.n	80123d2 <USB_HC_StartXfer+0x25e>
        break;
 80123cc:	bf00      	nop
 80123ce:	e000      	b.n	80123d2 <USB_HC_StartXfer+0x25e>
        break;
 80123d0:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80123d2:	68bb      	ldr	r3, [r7, #8]
 80123d4:	68d9      	ldr	r1, [r3, #12]
 80123d6:	68bb      	ldr	r3, [r7, #8]
 80123d8:	785a      	ldrb	r2, [r3, #1]
 80123da:	68bb      	ldr	r3, [r7, #8]
 80123dc:	695b      	ldr	r3, [r3, #20]
 80123de:	b29b      	uxth	r3, r3
 80123e0:	2000      	movs	r0, #0
 80123e2:	9000      	str	r0, [sp, #0]
 80123e4:	68f8      	ldr	r0, [r7, #12]
 80123e6:	f7ff fb8d 	bl	8011b04 <USB_WritePacket>
  }

  return HAL_OK;
 80123ea:	2300      	movs	r3, #0
}
 80123ec:	4618      	mov	r0, r3
 80123ee:	3728      	adds	r7, #40	; 0x28
 80123f0:	46bd      	mov	sp, r7
 80123f2:	bd80      	pop	{r7, pc}
 80123f4:	1ff80000 	.word	0x1ff80000

080123f8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80123f8:	b480      	push	{r7}
 80123fa:	b085      	sub	sp, #20
 80123fc:	af00      	add	r7, sp, #0
 80123fe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012400:	687b      	ldr	r3, [r7, #4]
 8012402:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8012404:	68fb      	ldr	r3, [r7, #12]
 8012406:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801240a:	695b      	ldr	r3, [r3, #20]
 801240c:	b29b      	uxth	r3, r3
}
 801240e:	4618      	mov	r0, r3
 8012410:	3714      	adds	r7, #20
 8012412:	46bd      	mov	sp, r7
 8012414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012418:	4770      	bx	lr

0801241a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 801241a:	b480      	push	{r7}
 801241c:	b089      	sub	sp, #36	; 0x24
 801241e:	af00      	add	r7, sp, #0
 8012420:	6078      	str	r0, [r7, #4]
 8012422:	460b      	mov	r3, r1
 8012424:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012426:	687b      	ldr	r3, [r7, #4]
 8012428:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 801242a:	78fb      	ldrb	r3, [r7, #3]
 801242c:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 801242e:	2300      	movs	r3, #0
 8012430:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8012432:	697b      	ldr	r3, [r7, #20]
 8012434:	015a      	lsls	r2, r3, #5
 8012436:	69bb      	ldr	r3, [r7, #24]
 8012438:	4413      	add	r3, r2
 801243a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801243e:	681b      	ldr	r3, [r3, #0]
 8012440:	0c9b      	lsrs	r3, r3, #18
 8012442:	f003 0303 	and.w	r3, r3, #3
 8012446:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8012448:	697b      	ldr	r3, [r7, #20]
 801244a:	015a      	lsls	r2, r3, #5
 801244c:	69bb      	ldr	r3, [r7, #24]
 801244e:	4413      	add	r3, r2
 8012450:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012454:	681b      	ldr	r3, [r3, #0]
 8012456:	0fdb      	lsrs	r3, r3, #31
 8012458:	f003 0301 	and.w	r3, r3, #1
 801245c:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 801245e:	687b      	ldr	r3, [r7, #4]
 8012460:	689b      	ldr	r3, [r3, #8]
 8012462:	f003 0320 	and.w	r3, r3, #32
 8012466:	2b20      	cmp	r3, #32
 8012468:	d104      	bne.n	8012474 <USB_HC_Halt+0x5a>
 801246a:	68fb      	ldr	r3, [r7, #12]
 801246c:	2b00      	cmp	r3, #0
 801246e:	d101      	bne.n	8012474 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8012470:	2300      	movs	r3, #0
 8012472:	e0e8      	b.n	8012646 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8012474:	693b      	ldr	r3, [r7, #16]
 8012476:	2b00      	cmp	r3, #0
 8012478:	d002      	beq.n	8012480 <USB_HC_Halt+0x66>
 801247a:	693b      	ldr	r3, [r7, #16]
 801247c:	2b02      	cmp	r3, #2
 801247e:	d173      	bne.n	8012568 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8012480:	697b      	ldr	r3, [r7, #20]
 8012482:	015a      	lsls	r2, r3, #5
 8012484:	69bb      	ldr	r3, [r7, #24]
 8012486:	4413      	add	r3, r2
 8012488:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801248c:	681b      	ldr	r3, [r3, #0]
 801248e:	697a      	ldr	r2, [r7, #20]
 8012490:	0151      	lsls	r1, r2, #5
 8012492:	69ba      	ldr	r2, [r7, #24]
 8012494:	440a      	add	r2, r1
 8012496:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801249a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801249e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80124a0:	687b      	ldr	r3, [r7, #4]
 80124a2:	689b      	ldr	r3, [r3, #8]
 80124a4:	f003 0320 	and.w	r3, r3, #32
 80124a8:	2b00      	cmp	r3, #0
 80124aa:	f040 80cb 	bne.w	8012644 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80124ae:	687b      	ldr	r3, [r7, #4]
 80124b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80124b2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80124b6:	2b00      	cmp	r3, #0
 80124b8:	d143      	bne.n	8012542 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80124ba:	697b      	ldr	r3, [r7, #20]
 80124bc:	015a      	lsls	r2, r3, #5
 80124be:	69bb      	ldr	r3, [r7, #24]
 80124c0:	4413      	add	r3, r2
 80124c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80124c6:	681b      	ldr	r3, [r3, #0]
 80124c8:	697a      	ldr	r2, [r7, #20]
 80124ca:	0151      	lsls	r1, r2, #5
 80124cc:	69ba      	ldr	r2, [r7, #24]
 80124ce:	440a      	add	r2, r1
 80124d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80124d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80124d8:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80124da:	697b      	ldr	r3, [r7, #20]
 80124dc:	015a      	lsls	r2, r3, #5
 80124de:	69bb      	ldr	r3, [r7, #24]
 80124e0:	4413      	add	r3, r2
 80124e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80124e6:	681b      	ldr	r3, [r3, #0]
 80124e8:	697a      	ldr	r2, [r7, #20]
 80124ea:	0151      	lsls	r1, r2, #5
 80124ec:	69ba      	ldr	r2, [r7, #24]
 80124ee:	440a      	add	r2, r1
 80124f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80124f4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80124f8:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80124fa:	697b      	ldr	r3, [r7, #20]
 80124fc:	015a      	lsls	r2, r3, #5
 80124fe:	69bb      	ldr	r3, [r7, #24]
 8012500:	4413      	add	r3, r2
 8012502:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012506:	681b      	ldr	r3, [r3, #0]
 8012508:	697a      	ldr	r2, [r7, #20]
 801250a:	0151      	lsls	r1, r2, #5
 801250c:	69ba      	ldr	r2, [r7, #24]
 801250e:	440a      	add	r2, r1
 8012510:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8012514:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8012518:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 801251a:	69fb      	ldr	r3, [r7, #28]
 801251c:	3301      	adds	r3, #1
 801251e:	61fb      	str	r3, [r7, #28]
 8012520:	69fb      	ldr	r3, [r7, #28]
 8012522:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8012526:	d81d      	bhi.n	8012564 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8012528:	697b      	ldr	r3, [r7, #20]
 801252a:	015a      	lsls	r2, r3, #5
 801252c:	69bb      	ldr	r3, [r7, #24]
 801252e:	4413      	add	r3, r2
 8012530:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012534:	681b      	ldr	r3, [r3, #0]
 8012536:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801253a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801253e:	d0ec      	beq.n	801251a <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8012540:	e080      	b.n	8012644 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8012542:	697b      	ldr	r3, [r7, #20]
 8012544:	015a      	lsls	r2, r3, #5
 8012546:	69bb      	ldr	r3, [r7, #24]
 8012548:	4413      	add	r3, r2
 801254a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801254e:	681b      	ldr	r3, [r3, #0]
 8012550:	697a      	ldr	r2, [r7, #20]
 8012552:	0151      	lsls	r1, r2, #5
 8012554:	69ba      	ldr	r2, [r7, #24]
 8012556:	440a      	add	r2, r1
 8012558:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801255c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8012560:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8012562:	e06f      	b.n	8012644 <USB_HC_Halt+0x22a>
            break;
 8012564:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8012566:	e06d      	b.n	8012644 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8012568:	697b      	ldr	r3, [r7, #20]
 801256a:	015a      	lsls	r2, r3, #5
 801256c:	69bb      	ldr	r3, [r7, #24]
 801256e:	4413      	add	r3, r2
 8012570:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012574:	681b      	ldr	r3, [r3, #0]
 8012576:	697a      	ldr	r2, [r7, #20]
 8012578:	0151      	lsls	r1, r2, #5
 801257a:	69ba      	ldr	r2, [r7, #24]
 801257c:	440a      	add	r2, r1
 801257e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8012582:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8012586:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8012588:	69bb      	ldr	r3, [r7, #24]
 801258a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801258e:	691b      	ldr	r3, [r3, #16]
 8012590:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8012594:	2b00      	cmp	r3, #0
 8012596:	d143      	bne.n	8012620 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8012598:	697b      	ldr	r3, [r7, #20]
 801259a:	015a      	lsls	r2, r3, #5
 801259c:	69bb      	ldr	r3, [r7, #24]
 801259e:	4413      	add	r3, r2
 80125a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80125a4:	681b      	ldr	r3, [r3, #0]
 80125a6:	697a      	ldr	r2, [r7, #20]
 80125a8:	0151      	lsls	r1, r2, #5
 80125aa:	69ba      	ldr	r2, [r7, #24]
 80125ac:	440a      	add	r2, r1
 80125ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80125b2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80125b6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80125b8:	697b      	ldr	r3, [r7, #20]
 80125ba:	015a      	lsls	r2, r3, #5
 80125bc:	69bb      	ldr	r3, [r7, #24]
 80125be:	4413      	add	r3, r2
 80125c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80125c4:	681b      	ldr	r3, [r3, #0]
 80125c6:	697a      	ldr	r2, [r7, #20]
 80125c8:	0151      	lsls	r1, r2, #5
 80125ca:	69ba      	ldr	r2, [r7, #24]
 80125cc:	440a      	add	r2, r1
 80125ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80125d2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80125d6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80125d8:	697b      	ldr	r3, [r7, #20]
 80125da:	015a      	lsls	r2, r3, #5
 80125dc:	69bb      	ldr	r3, [r7, #24]
 80125de:	4413      	add	r3, r2
 80125e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80125e4:	681b      	ldr	r3, [r3, #0]
 80125e6:	697a      	ldr	r2, [r7, #20]
 80125e8:	0151      	lsls	r1, r2, #5
 80125ea:	69ba      	ldr	r2, [r7, #24]
 80125ec:	440a      	add	r2, r1
 80125ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80125f2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80125f6:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80125f8:	69fb      	ldr	r3, [r7, #28]
 80125fa:	3301      	adds	r3, #1
 80125fc:	61fb      	str	r3, [r7, #28]
 80125fe:	69fb      	ldr	r3, [r7, #28]
 8012600:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8012604:	d81d      	bhi.n	8012642 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8012606:	697b      	ldr	r3, [r7, #20]
 8012608:	015a      	lsls	r2, r3, #5
 801260a:	69bb      	ldr	r3, [r7, #24]
 801260c:	4413      	add	r3, r2
 801260e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012612:	681b      	ldr	r3, [r3, #0]
 8012614:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012618:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801261c:	d0ec      	beq.n	80125f8 <USB_HC_Halt+0x1de>
 801261e:	e011      	b.n	8012644 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8012620:	697b      	ldr	r3, [r7, #20]
 8012622:	015a      	lsls	r2, r3, #5
 8012624:	69bb      	ldr	r3, [r7, #24]
 8012626:	4413      	add	r3, r2
 8012628:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801262c:	681b      	ldr	r3, [r3, #0]
 801262e:	697a      	ldr	r2, [r7, #20]
 8012630:	0151      	lsls	r1, r2, #5
 8012632:	69ba      	ldr	r2, [r7, #24]
 8012634:	440a      	add	r2, r1
 8012636:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801263a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801263e:	6013      	str	r3, [r2, #0]
 8012640:	e000      	b.n	8012644 <USB_HC_Halt+0x22a>
          break;
 8012642:	bf00      	nop
    }
  }

  return HAL_OK;
 8012644:	2300      	movs	r3, #0
}
 8012646:	4618      	mov	r0, r3
 8012648:	3724      	adds	r7, #36	; 0x24
 801264a:	46bd      	mov	sp, r7
 801264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012650:	4770      	bx	lr
	...

08012654 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8012654:	b480      	push	{r7}
 8012656:	b087      	sub	sp, #28
 8012658:	af00      	add	r7, sp, #0
 801265a:	6078      	str	r0, [r7, #4]
 801265c:	460b      	mov	r3, r1
 801265e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012660:	687b      	ldr	r3, [r7, #4]
 8012662:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8012664:	78fb      	ldrb	r3, [r7, #3]
 8012666:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8012668:	2301      	movs	r3, #1
 801266a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 801266c:	68fb      	ldr	r3, [r7, #12]
 801266e:	04da      	lsls	r2, r3, #19
 8012670:	4b15      	ldr	r3, [pc, #84]	; (80126c8 <USB_DoPing+0x74>)
 8012672:	4013      	ands	r3, r2
 8012674:	693a      	ldr	r2, [r7, #16]
 8012676:	0151      	lsls	r1, r2, #5
 8012678:	697a      	ldr	r2, [r7, #20]
 801267a:	440a      	add	r2, r1
 801267c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8012680:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8012684:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8012686:	693b      	ldr	r3, [r7, #16]
 8012688:	015a      	lsls	r2, r3, #5
 801268a:	697b      	ldr	r3, [r7, #20]
 801268c:	4413      	add	r3, r2
 801268e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012692:	681b      	ldr	r3, [r3, #0]
 8012694:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8012696:	68bb      	ldr	r3, [r7, #8]
 8012698:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801269c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 801269e:	68bb      	ldr	r3, [r7, #8]
 80126a0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80126a4:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80126a6:	693b      	ldr	r3, [r7, #16]
 80126a8:	015a      	lsls	r2, r3, #5
 80126aa:	697b      	ldr	r3, [r7, #20]
 80126ac:	4413      	add	r3, r2
 80126ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80126b2:	461a      	mov	r2, r3
 80126b4:	68bb      	ldr	r3, [r7, #8]
 80126b6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80126b8:	2300      	movs	r3, #0
}
 80126ba:	4618      	mov	r0, r3
 80126bc:	371c      	adds	r7, #28
 80126be:	46bd      	mov	sp, r7
 80126c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126c4:	4770      	bx	lr
 80126c6:	bf00      	nop
 80126c8:	1ff80000 	.word	0x1ff80000

080126cc <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80126cc:	b580      	push	{r7, lr}
 80126ce:	b086      	sub	sp, #24
 80126d0:	af00      	add	r7, sp, #0
 80126d2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80126d4:	687b      	ldr	r3, [r7, #4]
 80126d6:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80126d8:	2300      	movs	r3, #0
 80126da:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80126dc:	6878      	ldr	r0, [r7, #4]
 80126de:	f7ff f98e 	bl	80119fe <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 80126e2:	2110      	movs	r1, #16
 80126e4:	6878      	ldr	r0, [r7, #4]
 80126e6:	f7ff f9c5 	bl	8011a74 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80126ea:	6878      	ldr	r0, [r7, #4]
 80126ec:	f7ff f9e8 	bl	8011ac0 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80126f0:	2300      	movs	r3, #0
 80126f2:	613b      	str	r3, [r7, #16]
 80126f4:	e01f      	b.n	8012736 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 80126f6:	693b      	ldr	r3, [r7, #16]
 80126f8:	015a      	lsls	r2, r3, #5
 80126fa:	68fb      	ldr	r3, [r7, #12]
 80126fc:	4413      	add	r3, r2
 80126fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012702:	681b      	ldr	r3, [r3, #0]
 8012704:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8012706:	68bb      	ldr	r3, [r7, #8]
 8012708:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801270c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 801270e:	68bb      	ldr	r3, [r7, #8]
 8012710:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012714:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8012716:	68bb      	ldr	r3, [r7, #8]
 8012718:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 801271c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 801271e:	693b      	ldr	r3, [r7, #16]
 8012720:	015a      	lsls	r2, r3, #5
 8012722:	68fb      	ldr	r3, [r7, #12]
 8012724:	4413      	add	r3, r2
 8012726:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801272a:	461a      	mov	r2, r3
 801272c:	68bb      	ldr	r3, [r7, #8]
 801272e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8012730:	693b      	ldr	r3, [r7, #16]
 8012732:	3301      	adds	r3, #1
 8012734:	613b      	str	r3, [r7, #16]
 8012736:	693b      	ldr	r3, [r7, #16]
 8012738:	2b0f      	cmp	r3, #15
 801273a:	d9dc      	bls.n	80126f6 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 801273c:	2300      	movs	r3, #0
 801273e:	613b      	str	r3, [r7, #16]
 8012740:	e034      	b.n	80127ac <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8012742:	693b      	ldr	r3, [r7, #16]
 8012744:	015a      	lsls	r2, r3, #5
 8012746:	68fb      	ldr	r3, [r7, #12]
 8012748:	4413      	add	r3, r2
 801274a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801274e:	681b      	ldr	r3, [r3, #0]
 8012750:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8012752:	68bb      	ldr	r3, [r7, #8]
 8012754:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8012758:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 801275a:	68bb      	ldr	r3, [r7, #8]
 801275c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8012760:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8012762:	68bb      	ldr	r3, [r7, #8]
 8012764:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8012768:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 801276a:	693b      	ldr	r3, [r7, #16]
 801276c:	015a      	lsls	r2, r3, #5
 801276e:	68fb      	ldr	r3, [r7, #12]
 8012770:	4413      	add	r3, r2
 8012772:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012776:	461a      	mov	r2, r3
 8012778:	68bb      	ldr	r3, [r7, #8]
 801277a:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 801277c:	697b      	ldr	r3, [r7, #20]
 801277e:	3301      	adds	r3, #1
 8012780:	617b      	str	r3, [r7, #20]
 8012782:	697b      	ldr	r3, [r7, #20]
 8012784:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8012788:	d80c      	bhi.n	80127a4 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 801278a:	693b      	ldr	r3, [r7, #16]
 801278c:	015a      	lsls	r2, r3, #5
 801278e:	68fb      	ldr	r3, [r7, #12]
 8012790:	4413      	add	r3, r2
 8012792:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012796:	681b      	ldr	r3, [r3, #0]
 8012798:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801279c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80127a0:	d0ec      	beq.n	801277c <USB_StopHost+0xb0>
 80127a2:	e000      	b.n	80127a6 <USB_StopHost+0xda>
        break;
 80127a4:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80127a6:	693b      	ldr	r3, [r7, #16]
 80127a8:	3301      	adds	r3, #1
 80127aa:	613b      	str	r3, [r7, #16]
 80127ac:	693b      	ldr	r3, [r7, #16]
 80127ae:	2b0f      	cmp	r3, #15
 80127b0:	d9c7      	bls.n	8012742 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80127b2:	68fb      	ldr	r3, [r7, #12]
 80127b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80127b8:	461a      	mov	r2, r3
 80127ba:	f04f 33ff 	mov.w	r3, #4294967295
 80127be:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80127c0:	687b      	ldr	r3, [r7, #4]
 80127c2:	f04f 32ff 	mov.w	r2, #4294967295
 80127c6:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80127c8:	6878      	ldr	r0, [r7, #4]
 80127ca:	f7ff f907 	bl	80119dc <USB_EnableGlobalInt>

  return HAL_OK;
 80127ce:	2300      	movs	r3, #0
}
 80127d0:	4618      	mov	r0, r3
 80127d2:	3718      	adds	r7, #24
 80127d4:	46bd      	mov	sp, r7
 80127d6:	bd80      	pop	{r7, pc}

080127d8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80127d8:	b580      	push	{r7, lr}
 80127da:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80127dc:	4904      	ldr	r1, [pc, #16]	; (80127f0 <MX_FATFS_Init+0x18>)
 80127de:	4805      	ldr	r0, [pc, #20]	; (80127f4 <MX_FATFS_Init+0x1c>)
 80127e0:	f002 fbf0 	bl	8014fc4 <FATFS_LinkDriver>
 80127e4:	4603      	mov	r3, r0
 80127e6:	461a      	mov	r2, r3
 80127e8:	4b03      	ldr	r3, [pc, #12]	; (80127f8 <MX_FATFS_Init+0x20>)
 80127ea:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80127ec:	bf00      	nop
 80127ee:	bd80      	pop	{r7, pc}
 80127f0:	20049bd0 	.word	0x20049bd0
 80127f4:	0801d730 	.word	0x0801d730
 80127f8:	20049bcc 	.word	0x20049bcc

080127fc <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80127fc:	b580      	push	{r7, lr}
 80127fe:	b082      	sub	sp, #8
 8012800:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8012802:	2300      	movs	r3, #0
 8012804:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8012806:	f000 f87b 	bl	8012900 <BSP_SD_IsDetected>
 801280a:	4603      	mov	r3, r0
 801280c:	2b01      	cmp	r3, #1
 801280e:	d001      	beq.n	8012814 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8012810:	2302      	movs	r3, #2
 8012812:	e012      	b.n	801283a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8012814:	480b      	ldr	r0, [pc, #44]	; (8012844 <BSP_SD_Init+0x48>)
 8012816:	f7fb fae4 	bl	800dde2 <HAL_SD_Init>
 801281a:	4603      	mov	r3, r0
 801281c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 801281e:	79fb      	ldrb	r3, [r7, #7]
 8012820:	2b00      	cmp	r3, #0
 8012822:	d109      	bne.n	8012838 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8012824:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8012828:	4806      	ldr	r0, [pc, #24]	; (8012844 <BSP_SD_Init+0x48>)
 801282a:	f7fb ff33 	bl	800e694 <HAL_SD_ConfigWideBusOperation>
 801282e:	4603      	mov	r3, r0
 8012830:	2b00      	cmp	r3, #0
 8012832:	d001      	beq.n	8012838 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8012834:	2301      	movs	r3, #1
 8012836:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8012838:	79fb      	ldrb	r3, [r7, #7]
}
 801283a:	4618      	mov	r0, r3
 801283c:	3708      	adds	r7, #8
 801283e:	46bd      	mov	sp, r7
 8012840:	bd80      	pop	{r7, pc}
 8012842:	bf00      	nop
 8012844:	200099f0 	.word	0x200099f0

08012848 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8012848:	b580      	push	{r7, lr}
 801284a:	b086      	sub	sp, #24
 801284c:	af00      	add	r7, sp, #0
 801284e:	60f8      	str	r0, [r7, #12]
 8012850:	60b9      	str	r1, [r7, #8]
 8012852:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8012854:	2300      	movs	r3, #0
 8012856:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8012858:	687b      	ldr	r3, [r7, #4]
 801285a:	68ba      	ldr	r2, [r7, #8]
 801285c:	68f9      	ldr	r1, [r7, #12]
 801285e:	4806      	ldr	r0, [pc, #24]	; (8012878 <BSP_SD_ReadBlocks_DMA+0x30>)
 8012860:	f7fb fb76 	bl	800df50 <HAL_SD_ReadBlocks_DMA>
 8012864:	4603      	mov	r3, r0
 8012866:	2b00      	cmp	r3, #0
 8012868:	d001      	beq.n	801286e <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 801286a:	2301      	movs	r3, #1
 801286c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 801286e:	7dfb      	ldrb	r3, [r7, #23]
}
 8012870:	4618      	mov	r0, r3
 8012872:	3718      	adds	r7, #24
 8012874:	46bd      	mov	sp, r7
 8012876:	bd80      	pop	{r7, pc}
 8012878:	200099f0 	.word	0x200099f0

0801287c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 801287c:	b580      	push	{r7, lr}
 801287e:	b086      	sub	sp, #24
 8012880:	af00      	add	r7, sp, #0
 8012882:	60f8      	str	r0, [r7, #12]
 8012884:	60b9      	str	r1, [r7, #8]
 8012886:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8012888:	2300      	movs	r3, #0
 801288a:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 801288c:	687b      	ldr	r3, [r7, #4]
 801288e:	68ba      	ldr	r2, [r7, #8]
 8012890:	68f9      	ldr	r1, [r7, #12]
 8012892:	4806      	ldr	r0, [pc, #24]	; (80128ac <BSP_SD_WriteBlocks_DMA+0x30>)
 8012894:	f7fb fc3e 	bl	800e114 <HAL_SD_WriteBlocks_DMA>
 8012898:	4603      	mov	r3, r0
 801289a:	2b00      	cmp	r3, #0
 801289c:	d001      	beq.n	80128a2 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 801289e:	2301      	movs	r3, #1
 80128a0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80128a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80128a4:	4618      	mov	r0, r3
 80128a6:	3718      	adds	r7, #24
 80128a8:	46bd      	mov	sp, r7
 80128aa:	bd80      	pop	{r7, pc}
 80128ac:	200099f0 	.word	0x200099f0

080128b0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80128b0:	b580      	push	{r7, lr}
 80128b2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80128b4:	4805      	ldr	r0, [pc, #20]	; (80128cc <BSP_SD_GetCardState+0x1c>)
 80128b6:	f7fb ff87 	bl	800e7c8 <HAL_SD_GetCardState>
 80128ba:	4603      	mov	r3, r0
 80128bc:	2b04      	cmp	r3, #4
 80128be:	bf14      	ite	ne
 80128c0:	2301      	movne	r3, #1
 80128c2:	2300      	moveq	r3, #0
 80128c4:	b2db      	uxtb	r3, r3
}
 80128c6:	4618      	mov	r0, r3
 80128c8:	bd80      	pop	{r7, pc}
 80128ca:	bf00      	nop
 80128cc:	200099f0 	.word	0x200099f0

080128d0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80128d0:	b580      	push	{r7, lr}
 80128d2:	b082      	sub	sp, #8
 80128d4:	af00      	add	r7, sp, #0
 80128d6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 80128d8:	6879      	ldr	r1, [r7, #4]
 80128da:	4803      	ldr	r0, [pc, #12]	; (80128e8 <BSP_SD_GetCardInfo+0x18>)
 80128dc:	f7fb feae 	bl	800e63c <HAL_SD_GetCardInfo>
}
 80128e0:	bf00      	nop
 80128e2:	3708      	adds	r7, #8
 80128e4:	46bd      	mov	sp, r7
 80128e6:	bd80      	pop	{r7, pc}
 80128e8:	200099f0 	.word	0x200099f0

080128ec <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80128ec:	b580      	push	{r7, lr}
 80128ee:	b082      	sub	sp, #8
 80128f0:	af00      	add	r7, sp, #0
 80128f2:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80128f4:	f000 f9b2 	bl	8012c5c <BSP_SD_ReadCpltCallback>
}
 80128f8:	bf00      	nop
 80128fa:	3708      	adds	r7, #8
 80128fc:	46bd      	mov	sp, r7
 80128fe:	bd80      	pop	{r7, pc}

08012900 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8012900:	b580      	push	{r7, lr}
 8012902:	b082      	sub	sp, #8
 8012904:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8012906:	2301      	movs	r3, #1
 8012908:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 801290a:	f000 f80b 	bl	8012924 <BSP_PlatformIsDetected>
 801290e:	4603      	mov	r3, r0
 8012910:	2b00      	cmp	r3, #0
 8012912:	d101      	bne.n	8012918 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8012914:	2300      	movs	r3, #0
 8012916:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8012918:	79fb      	ldrb	r3, [r7, #7]
 801291a:	b2db      	uxtb	r3, r3
}
 801291c:	4618      	mov	r0, r3
 801291e:	3708      	adds	r7, #8
 8012920:	46bd      	mov	sp, r7
 8012922:	bd80      	pop	{r7, pc}

08012924 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8012924:	b580      	push	{r7, lr}
 8012926:	b082      	sub	sp, #8
 8012928:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 801292a:	2301      	movs	r3, #1
 801292c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 801292e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8012932:	4806      	ldr	r0, [pc, #24]	; (801294c <BSP_PlatformIsDetected+0x28>)
 8012934:	f7f5 fa4c 	bl	8007dd0 <HAL_GPIO_ReadPin>
 8012938:	4603      	mov	r3, r0
 801293a:	2b00      	cmp	r3, #0
 801293c:	d001      	beq.n	8012942 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 801293e:	2300      	movs	r3, #0
 8012940:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8012942:	79fb      	ldrb	r3, [r7, #7]
}
 8012944:	4618      	mov	r0, r3
 8012946:	3708      	adds	r7, #8
 8012948:	46bd      	mov	sp, r7
 801294a:	bd80      	pop	{r7, pc}
 801294c:	40020800 	.word	0x40020800

08012950 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8012950:	b580      	push	{r7, lr}
 8012952:	b084      	sub	sp, #16
 8012954:	af00      	add	r7, sp, #0
 8012956:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 8012958:	f002 fb80 	bl	801505c <osKernelSysTick>
 801295c:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 801295e:	e006      	b.n	801296e <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8012960:	f7ff ffa6 	bl	80128b0 <BSP_SD_GetCardState>
 8012964:	4603      	mov	r3, r0
 8012966:	2b00      	cmp	r3, #0
 8012968:	d101      	bne.n	801296e <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 801296a:	2300      	movs	r3, #0
 801296c:	e009      	b.n	8012982 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 801296e:	f002 fb75 	bl	801505c <osKernelSysTick>
 8012972:	4602      	mov	r2, r0
 8012974:	68fb      	ldr	r3, [r7, #12]
 8012976:	1ad3      	subs	r3, r2, r3
 8012978:	687a      	ldr	r2, [r7, #4]
 801297a:	429a      	cmp	r2, r3
 801297c:	d8f0      	bhi.n	8012960 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 801297e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012982:	4618      	mov	r0, r3
 8012984:	3710      	adds	r7, #16
 8012986:	46bd      	mov	sp, r7
 8012988:	bd80      	pop	{r7, pc}
	...

0801298c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 801298c:	b580      	push	{r7, lr}
 801298e:	b082      	sub	sp, #8
 8012990:	af00      	add	r7, sp, #0
 8012992:	4603      	mov	r3, r0
 8012994:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8012996:	4b0b      	ldr	r3, [pc, #44]	; (80129c4 <SD_CheckStatus+0x38>)
 8012998:	2201      	movs	r2, #1
 801299a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801299c:	f7ff ff88 	bl	80128b0 <BSP_SD_GetCardState>
 80129a0:	4603      	mov	r3, r0
 80129a2:	2b00      	cmp	r3, #0
 80129a4:	d107      	bne.n	80129b6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80129a6:	4b07      	ldr	r3, [pc, #28]	; (80129c4 <SD_CheckStatus+0x38>)
 80129a8:	781b      	ldrb	r3, [r3, #0]
 80129aa:	b2db      	uxtb	r3, r3
 80129ac:	f023 0301 	bic.w	r3, r3, #1
 80129b0:	b2da      	uxtb	r2, r3
 80129b2:	4b04      	ldr	r3, [pc, #16]	; (80129c4 <SD_CheckStatus+0x38>)
 80129b4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80129b6:	4b03      	ldr	r3, [pc, #12]	; (80129c4 <SD_CheckStatus+0x38>)
 80129b8:	781b      	ldrb	r3, [r3, #0]
 80129ba:	b2db      	uxtb	r3, r3
}
 80129bc:	4618      	mov	r0, r3
 80129be:	3708      	adds	r7, #8
 80129c0:	46bd      	mov	sp, r7
 80129c2:	bd80      	pop	{r7, pc}
 80129c4:	20000031 	.word	0x20000031

080129c8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80129c8:	b590      	push	{r4, r7, lr}
 80129ca:	b087      	sub	sp, #28
 80129cc:	af00      	add	r7, sp, #0
 80129ce:	4603      	mov	r3, r0
 80129d0:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 80129d2:	4b20      	ldr	r3, [pc, #128]	; (8012a54 <SD_initialize+0x8c>)
 80129d4:	2201      	movs	r2, #1
 80129d6:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 80129d8:	f002 fb34 	bl	8015044 <osKernelRunning>
 80129dc:	4603      	mov	r3, r0
 80129de:	2b00      	cmp	r3, #0
 80129e0:	d030      	beq.n	8012a44 <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 80129e2:	f7ff ff0b 	bl	80127fc <BSP_SD_Init>
 80129e6:	4603      	mov	r3, r0
 80129e8:	2b00      	cmp	r3, #0
 80129ea:	d107      	bne.n	80129fc <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 80129ec:	79fb      	ldrb	r3, [r7, #7]
 80129ee:	4618      	mov	r0, r3
 80129f0:	f7ff ffcc 	bl	801298c <SD_CheckStatus>
 80129f4:	4603      	mov	r3, r0
 80129f6:	461a      	mov	r2, r3
 80129f8:	4b16      	ldr	r3, [pc, #88]	; (8012a54 <SD_initialize+0x8c>)
 80129fa:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 80129fc:	4b15      	ldr	r3, [pc, #84]	; (8012a54 <SD_initialize+0x8c>)
 80129fe:	781b      	ldrb	r3, [r3, #0]
 8012a00:	b2db      	uxtb	r3, r3
 8012a02:	2b01      	cmp	r3, #1
 8012a04:	d01e      	beq.n	8012a44 <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 8012a06:	4b14      	ldr	r3, [pc, #80]	; (8012a58 <SD_initialize+0x90>)
 8012a08:	681b      	ldr	r3, [r3, #0]
 8012a0a:	2b00      	cmp	r3, #0
 8012a0c:	d10e      	bne.n	8012a2c <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 8012a0e:	4b13      	ldr	r3, [pc, #76]	; (8012a5c <SD_initialize+0x94>)
 8012a10:	f107 0408 	add.w	r4, r7, #8
 8012a14:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8012a16:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 8012a1a:	f107 0308 	add.w	r3, r7, #8
 8012a1e:	2100      	movs	r1, #0
 8012a20:	4618      	mov	r0, r3
 8012a22:	f002 fc17 	bl	8015254 <osMessageCreate>
 8012a26:	4603      	mov	r3, r0
 8012a28:	4a0b      	ldr	r2, [pc, #44]	; (8012a58 <SD_initialize+0x90>)
 8012a2a:	6013      	str	r3, [r2, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 8012a2c:	4b0a      	ldr	r3, [pc, #40]	; (8012a58 <SD_initialize+0x90>)
 8012a2e:	681b      	ldr	r3, [r3, #0]
 8012a30:	2b00      	cmp	r3, #0
 8012a32:	d107      	bne.n	8012a44 <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 8012a34:	4b07      	ldr	r3, [pc, #28]	; (8012a54 <SD_initialize+0x8c>)
 8012a36:	781b      	ldrb	r3, [r3, #0]
 8012a38:	b2db      	uxtb	r3, r3
 8012a3a:	f043 0301 	orr.w	r3, r3, #1
 8012a3e:	b2da      	uxtb	r2, r3
 8012a40:	4b04      	ldr	r3, [pc, #16]	; (8012a54 <SD_initialize+0x8c>)
 8012a42:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 8012a44:	4b03      	ldr	r3, [pc, #12]	; (8012a54 <SD_initialize+0x8c>)
 8012a46:	781b      	ldrb	r3, [r3, #0]
 8012a48:	b2db      	uxtb	r3, r3
}
 8012a4a:	4618      	mov	r0, r3
 8012a4c:	371c      	adds	r7, #28
 8012a4e:	46bd      	mov	sp, r7
 8012a50:	bd90      	pop	{r4, r7, pc}
 8012a52:	bf00      	nop
 8012a54:	20000031 	.word	0x20000031
 8012a58:	20000504 	.word	0x20000504
 8012a5c:	0801b790 	.word	0x0801b790

08012a60 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8012a60:	b580      	push	{r7, lr}
 8012a62:	b082      	sub	sp, #8
 8012a64:	af00      	add	r7, sp, #0
 8012a66:	4603      	mov	r3, r0
 8012a68:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8012a6a:	79fb      	ldrb	r3, [r7, #7]
 8012a6c:	4618      	mov	r0, r3
 8012a6e:	f7ff ff8d 	bl	801298c <SD_CheckStatus>
 8012a72:	4603      	mov	r3, r0
}
 8012a74:	4618      	mov	r0, r3
 8012a76:	3708      	adds	r7, #8
 8012a78:	46bd      	mov	sp, r7
 8012a7a:	bd80      	pop	{r7, pc}

08012a7c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8012a7c:	b580      	push	{r7, lr}
 8012a7e:	b08a      	sub	sp, #40	; 0x28
 8012a80:	af00      	add	r7, sp, #0
 8012a82:	60b9      	str	r1, [r7, #8]
 8012a84:	607a      	str	r2, [r7, #4]
 8012a86:	603b      	str	r3, [r7, #0]
 8012a88:	4603      	mov	r3, r0
 8012a8a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8012a8c:	2301      	movs	r3, #1
 8012a8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8012a92:	f247 5030 	movw	r0, #30000	; 0x7530
 8012a96:	f7ff ff5b 	bl	8012950 <SD_CheckStatusWithTimeout>
 8012a9a:	4603      	mov	r3, r0
 8012a9c:	2b00      	cmp	r3, #0
 8012a9e:	da02      	bge.n	8012aa6 <SD_read+0x2a>
  {
    return res;
 8012aa0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012aa4:	e032      	b.n	8012b0c <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 8012aa6:	683a      	ldr	r2, [r7, #0]
 8012aa8:	6879      	ldr	r1, [r7, #4]
 8012aaa:	68b8      	ldr	r0, [r7, #8]
 8012aac:	f7ff fecc 	bl	8012848 <BSP_SD_ReadBlocks_DMA>
 8012ab0:	4603      	mov	r3, r0
 8012ab2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (ret == MSD_OK) {
 8012ab6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012aba:	2b00      	cmp	r3, #0
 8012abc:	d124      	bne.n	8012b08 <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8012abe:	4b15      	ldr	r3, [pc, #84]	; (8012b14 <SD_read+0x98>)
 8012ac0:	6819      	ldr	r1, [r3, #0]
 8012ac2:	f107 0314 	add.w	r3, r7, #20
 8012ac6:	f247 5230 	movw	r2, #30000	; 0x7530
 8012aca:	4618      	mov	r0, r3
 8012acc:	f002 fc2a 	bl	8015324 <osMessageGet>

    if (event.status == osEventMessage)
 8012ad0:	697b      	ldr	r3, [r7, #20]
 8012ad2:	2b10      	cmp	r3, #16
 8012ad4:	d118      	bne.n	8012b08 <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 8012ad6:	69bb      	ldr	r3, [r7, #24]
 8012ad8:	2b01      	cmp	r3, #1
 8012ada:	d115      	bne.n	8012b08 <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 8012adc:	f002 fabe 	bl	801505c <osKernelSysTick>
 8012ae0:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 8012ae2:	e008      	b.n	8012af6 <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8012ae4:	f7ff fee4 	bl	80128b0 <BSP_SD_GetCardState>
 8012ae8:	4603      	mov	r3, r0
 8012aea:	2b00      	cmp	r3, #0
 8012aec:	d103      	bne.n	8012af6 <SD_read+0x7a>
              {
                res = RES_OK;
 8012aee:	2300      	movs	r3, #0
 8012af0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 8012af4:	e008      	b.n	8012b08 <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 8012af6:	f002 fab1 	bl	801505c <osKernelSysTick>
 8012afa:	4602      	mov	r2, r0
 8012afc:	6a3b      	ldr	r3, [r7, #32]
 8012afe:	1ad3      	subs	r3, r2, r3
 8012b00:	f247 522f 	movw	r2, #29999	; 0x752f
 8012b04:	4293      	cmp	r3, r2
 8012b06:	d9ed      	bls.n	8012ae4 <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 8012b08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8012b0c:	4618      	mov	r0, r3
 8012b0e:	3728      	adds	r7, #40	; 0x28
 8012b10:	46bd      	mov	sp, r7
 8012b12:	bd80      	pop	{r7, pc}
 8012b14:	20000504 	.word	0x20000504

08012b18 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8012b18:	b580      	push	{r7, lr}
 8012b1a:	b08a      	sub	sp, #40	; 0x28
 8012b1c:	af00      	add	r7, sp, #0
 8012b1e:	60b9      	str	r1, [r7, #8]
 8012b20:	607a      	str	r2, [r7, #4]
 8012b22:	603b      	str	r3, [r7, #0]
 8012b24:	4603      	mov	r3, r0
 8012b26:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8012b28:	2301      	movs	r3, #1
 8012b2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8012b2e:	f247 5030 	movw	r0, #30000	; 0x7530
 8012b32:	f7ff ff0d 	bl	8012950 <SD_CheckStatusWithTimeout>
 8012b36:	4603      	mov	r3, r0
 8012b38:	2b00      	cmp	r3, #0
 8012b3a:	da02      	bge.n	8012b42 <SD_write+0x2a>
  {
    return res;
 8012b3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012b40:	e02e      	b.n	8012ba0 <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8012b42:	683a      	ldr	r2, [r7, #0]
 8012b44:	6879      	ldr	r1, [r7, #4]
 8012b46:	68b8      	ldr	r0, [r7, #8]
 8012b48:	f7ff fe98 	bl	801287c <BSP_SD_WriteBlocks_DMA>
 8012b4c:	4603      	mov	r3, r0
 8012b4e:	2b00      	cmp	r3, #0
 8012b50:	d124      	bne.n	8012b9c <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8012b52:	4b15      	ldr	r3, [pc, #84]	; (8012ba8 <SD_write+0x90>)
 8012b54:	6819      	ldr	r1, [r3, #0]
 8012b56:	f107 0314 	add.w	r3, r7, #20
 8012b5a:	f247 5230 	movw	r2, #30000	; 0x7530
 8012b5e:	4618      	mov	r0, r3
 8012b60:	f002 fbe0 	bl	8015324 <osMessageGet>

    if (event.status == osEventMessage)
 8012b64:	697b      	ldr	r3, [r7, #20]
 8012b66:	2b10      	cmp	r3, #16
 8012b68:	d118      	bne.n	8012b9c <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 8012b6a:	69bb      	ldr	r3, [r7, #24]
 8012b6c:	2b02      	cmp	r3, #2
 8012b6e:	d115      	bne.n	8012b9c <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 8012b70:	f002 fa74 	bl	801505c <osKernelSysTick>
 8012b74:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 8012b76:	e008      	b.n	8012b8a <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8012b78:	f7ff fe9a 	bl	80128b0 <BSP_SD_GetCardState>
 8012b7c:	4603      	mov	r3, r0
 8012b7e:	2b00      	cmp	r3, #0
 8012b80:	d103      	bne.n	8012b8a <SD_write+0x72>
          {
            res = RES_OK;
 8012b82:	2300      	movs	r3, #0
 8012b84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8012b88:	e008      	b.n	8012b9c <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 8012b8a:	f002 fa67 	bl	801505c <osKernelSysTick>
 8012b8e:	4602      	mov	r2, r0
 8012b90:	6a3b      	ldr	r3, [r7, #32]
 8012b92:	1ad3      	subs	r3, r2, r3
 8012b94:	f247 522f 	movw	r2, #29999	; 0x752f
 8012b98:	4293      	cmp	r3, r2
 8012b9a:	d9ed      	bls.n	8012b78 <SD_write+0x60>
    }

  }
#endif

  return res;
 8012b9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8012ba0:	4618      	mov	r0, r3
 8012ba2:	3728      	adds	r7, #40	; 0x28
 8012ba4:	46bd      	mov	sp, r7
 8012ba6:	bd80      	pop	{r7, pc}
 8012ba8:	20000504 	.word	0x20000504

08012bac <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8012bac:	b580      	push	{r7, lr}
 8012bae:	b08c      	sub	sp, #48	; 0x30
 8012bb0:	af00      	add	r7, sp, #0
 8012bb2:	4603      	mov	r3, r0
 8012bb4:	603a      	str	r2, [r7, #0]
 8012bb6:	71fb      	strb	r3, [r7, #7]
 8012bb8:	460b      	mov	r3, r1
 8012bba:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8012bbc:	2301      	movs	r3, #1
 8012bbe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8012bc2:	4b25      	ldr	r3, [pc, #148]	; (8012c58 <SD_ioctl+0xac>)
 8012bc4:	781b      	ldrb	r3, [r3, #0]
 8012bc6:	b2db      	uxtb	r3, r3
 8012bc8:	f003 0301 	and.w	r3, r3, #1
 8012bcc:	2b00      	cmp	r3, #0
 8012bce:	d001      	beq.n	8012bd4 <SD_ioctl+0x28>
 8012bd0:	2303      	movs	r3, #3
 8012bd2:	e03c      	b.n	8012c4e <SD_ioctl+0xa2>

  switch (cmd)
 8012bd4:	79bb      	ldrb	r3, [r7, #6]
 8012bd6:	2b03      	cmp	r3, #3
 8012bd8:	d834      	bhi.n	8012c44 <SD_ioctl+0x98>
 8012bda:	a201      	add	r2, pc, #4	; (adr r2, 8012be0 <SD_ioctl+0x34>)
 8012bdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012be0:	08012bf1 	.word	0x08012bf1
 8012be4:	08012bf9 	.word	0x08012bf9
 8012be8:	08012c11 	.word	0x08012c11
 8012bec:	08012c2b 	.word	0x08012c2b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8012bf0:	2300      	movs	r3, #0
 8012bf2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8012bf6:	e028      	b.n	8012c4a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8012bf8:	f107 030c 	add.w	r3, r7, #12
 8012bfc:	4618      	mov	r0, r3
 8012bfe:	f7ff fe67 	bl	80128d0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8012c02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012c04:	683b      	ldr	r3, [r7, #0]
 8012c06:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8012c08:	2300      	movs	r3, #0
 8012c0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8012c0e:	e01c      	b.n	8012c4a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8012c10:	f107 030c 	add.w	r3, r7, #12
 8012c14:	4618      	mov	r0, r3
 8012c16:	f7ff fe5b 	bl	80128d0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8012c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c1c:	b29a      	uxth	r2, r3
 8012c1e:	683b      	ldr	r3, [r7, #0]
 8012c20:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8012c22:	2300      	movs	r3, #0
 8012c24:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8012c28:	e00f      	b.n	8012c4a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8012c2a:	f107 030c 	add.w	r3, r7, #12
 8012c2e:	4618      	mov	r0, r3
 8012c30:	f7ff fe4e 	bl	80128d0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8012c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c36:	0a5a      	lsrs	r2, r3, #9
 8012c38:	683b      	ldr	r3, [r7, #0]
 8012c3a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8012c3c:	2300      	movs	r3, #0
 8012c3e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8012c42:	e002      	b.n	8012c4a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8012c44:	2304      	movs	r3, #4
 8012c46:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8012c4a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8012c4e:	4618      	mov	r0, r3
 8012c50:	3730      	adds	r7, #48	; 0x30
 8012c52:	46bd      	mov	sp, r7
 8012c54:	bd80      	pop	{r7, pc}
 8012c56:	bf00      	nop
 8012c58:	20000031 	.word	0x20000031

08012c5c <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8012c5c:	b580      	push	{r7, lr}
 8012c5e:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 8012c60:	4b04      	ldr	r3, [pc, #16]	; (8012c74 <BSP_SD_ReadCpltCallback+0x18>)
 8012c62:	681b      	ldr	r3, [r3, #0]
 8012c64:	2200      	movs	r2, #0
 8012c66:	2101      	movs	r1, #1
 8012c68:	4618      	mov	r0, r3
 8012c6a:	f002 fb1b 	bl	80152a4 <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 8012c6e:	bf00      	nop
 8012c70:	bd80      	pop	{r7, pc}
 8012c72:	bf00      	nop
 8012c74:	20000504 	.word	0x20000504

08012c78 <MX_LIBJPEG_Init>:
/* USER CODE BEGIN 2 */
/* USER CODE END 2 */

/* LIBJPEG init function */
void MX_LIBJPEG_Init(void)
{
 8012c78:	b480      	push	{r7}
 8012c7a:	af00      	add	r7, sp, #0
  */

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 8012c7c:	bf00      	nop
 8012c7e:	46bd      	mov	sp, r7
 8012c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c84:	4770      	bx	lr

08012c86 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8012c86:	b590      	push	{r4, r7, lr}
 8012c88:	b089      	sub	sp, #36	; 0x24
 8012c8a:	af04      	add	r7, sp, #16
 8012c8c:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8012c8e:	2301      	movs	r3, #1
 8012c90:	2202      	movs	r2, #2
 8012c92:	2102      	movs	r1, #2
 8012c94:	6878      	ldr	r0, [r7, #4]
 8012c96:	f000 fcb9 	bl	801360c <USBH_FindInterface>
 8012c9a:	4603      	mov	r3, r0
 8012c9c:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8012c9e:	7bfb      	ldrb	r3, [r7, #15]
 8012ca0:	2bff      	cmp	r3, #255	; 0xff
 8012ca2:	d002      	beq.n	8012caa <USBH_CDC_InterfaceInit+0x24>
 8012ca4:	7bfb      	ldrb	r3, [r7, #15]
 8012ca6:	2b01      	cmp	r3, #1
 8012ca8:	d901      	bls.n	8012cae <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8012caa:	2302      	movs	r3, #2
 8012cac:	e13d      	b.n	8012f2a <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8012cae:	7bfb      	ldrb	r3, [r7, #15]
 8012cb0:	4619      	mov	r1, r3
 8012cb2:	6878      	ldr	r0, [r7, #4]
 8012cb4:	f000 fc8e 	bl	80135d4 <USBH_SelectInterface>
 8012cb8:	4603      	mov	r3, r0
 8012cba:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8012cbc:	7bbb      	ldrb	r3, [r7, #14]
 8012cbe:	2b00      	cmp	r3, #0
 8012cc0:	d001      	beq.n	8012cc6 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8012cc2:	2302      	movs	r3, #2
 8012cc4:	e131      	b.n	8012f2a <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8012cc6:	687b      	ldr	r3, [r7, #4]
 8012cc8:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8012ccc:	2050      	movs	r0, #80	; 0x50
 8012cce:	f005 fa43 	bl	8018158 <malloc>
 8012cd2:	4603      	mov	r3, r0
 8012cd4:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8012cd6:	687b      	ldr	r3, [r7, #4]
 8012cd8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8012cdc:	69db      	ldr	r3, [r3, #28]
 8012cde:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8012ce0:	68bb      	ldr	r3, [r7, #8]
 8012ce2:	2b00      	cmp	r3, #0
 8012ce4:	d101      	bne.n	8012cea <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8012ce6:	2302      	movs	r3, #2
 8012ce8:	e11f      	b.n	8012f2a <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8012cea:	2250      	movs	r2, #80	; 0x50
 8012cec:	2100      	movs	r1, #0
 8012cee:	68b8      	ldr	r0, [r7, #8]
 8012cf0:	f005 fa50 	bl	8018194 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8012cf4:	7bfb      	ldrb	r3, [r7, #15]
 8012cf6:	687a      	ldr	r2, [r7, #4]
 8012cf8:	211a      	movs	r1, #26
 8012cfa:	fb01 f303 	mul.w	r3, r1, r3
 8012cfe:	4413      	add	r3, r2
 8012d00:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8012d04:	781b      	ldrb	r3, [r3, #0]
 8012d06:	b25b      	sxtb	r3, r3
 8012d08:	2b00      	cmp	r3, #0
 8012d0a:	da15      	bge.n	8012d38 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8012d0c:	7bfb      	ldrb	r3, [r7, #15]
 8012d0e:	687a      	ldr	r2, [r7, #4]
 8012d10:	211a      	movs	r1, #26
 8012d12:	fb01 f303 	mul.w	r3, r1, r3
 8012d16:	4413      	add	r3, r2
 8012d18:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8012d1c:	781a      	ldrb	r2, [r3, #0]
 8012d1e:	68bb      	ldr	r3, [r7, #8]
 8012d20:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8012d22:	7bfb      	ldrb	r3, [r7, #15]
 8012d24:	687a      	ldr	r2, [r7, #4]
 8012d26:	211a      	movs	r1, #26
 8012d28:	fb01 f303 	mul.w	r3, r1, r3
 8012d2c:	4413      	add	r3, r2
 8012d2e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8012d32:	881a      	ldrh	r2, [r3, #0]
 8012d34:	68bb      	ldr	r3, [r7, #8]
 8012d36:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8012d38:	68bb      	ldr	r3, [r7, #8]
 8012d3a:	785b      	ldrb	r3, [r3, #1]
 8012d3c:	4619      	mov	r1, r3
 8012d3e:	6878      	ldr	r0, [r7, #4]
 8012d40:	f002 f891 	bl	8014e66 <USBH_AllocPipe>
 8012d44:	4603      	mov	r3, r0
 8012d46:	461a      	mov	r2, r3
 8012d48:	68bb      	ldr	r3, [r7, #8]
 8012d4a:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8012d4c:	68bb      	ldr	r3, [r7, #8]
 8012d4e:	7819      	ldrb	r1, [r3, #0]
 8012d50:	68bb      	ldr	r3, [r7, #8]
 8012d52:	7858      	ldrb	r0, [r3, #1]
 8012d54:	687b      	ldr	r3, [r7, #4]
 8012d56:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8012d5a:	687b      	ldr	r3, [r7, #4]
 8012d5c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8012d60:	68ba      	ldr	r2, [r7, #8]
 8012d62:	8952      	ldrh	r2, [r2, #10]
 8012d64:	9202      	str	r2, [sp, #8]
 8012d66:	2203      	movs	r2, #3
 8012d68:	9201      	str	r2, [sp, #4]
 8012d6a:	9300      	str	r3, [sp, #0]
 8012d6c:	4623      	mov	r3, r4
 8012d6e:	4602      	mov	r2, r0
 8012d70:	6878      	ldr	r0, [r7, #4]
 8012d72:	f002 f849 	bl	8014e08 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8012d76:	68bb      	ldr	r3, [r7, #8]
 8012d78:	781b      	ldrb	r3, [r3, #0]
 8012d7a:	2200      	movs	r2, #0
 8012d7c:	4619      	mov	r1, r3
 8012d7e:	6878      	ldr	r0, [r7, #4]
 8012d80:	f005 f93c 	bl	8017ffc <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8012d84:	2300      	movs	r3, #0
 8012d86:	2200      	movs	r2, #0
 8012d88:	210a      	movs	r1, #10
 8012d8a:	6878      	ldr	r0, [r7, #4]
 8012d8c:	f000 fc3e 	bl	801360c <USBH_FindInterface>
 8012d90:	4603      	mov	r3, r0
 8012d92:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8012d94:	7bfb      	ldrb	r3, [r7, #15]
 8012d96:	2bff      	cmp	r3, #255	; 0xff
 8012d98:	d002      	beq.n	8012da0 <USBH_CDC_InterfaceInit+0x11a>
 8012d9a:	7bfb      	ldrb	r3, [r7, #15]
 8012d9c:	2b01      	cmp	r3, #1
 8012d9e:	d901      	bls.n	8012da4 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8012da0:	2302      	movs	r3, #2
 8012da2:	e0c2      	b.n	8012f2a <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8012da4:	7bfb      	ldrb	r3, [r7, #15]
 8012da6:	687a      	ldr	r2, [r7, #4]
 8012da8:	211a      	movs	r1, #26
 8012daa:	fb01 f303 	mul.w	r3, r1, r3
 8012dae:	4413      	add	r3, r2
 8012db0:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8012db4:	781b      	ldrb	r3, [r3, #0]
 8012db6:	b25b      	sxtb	r3, r3
 8012db8:	2b00      	cmp	r3, #0
 8012dba:	da16      	bge.n	8012dea <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8012dbc:	7bfb      	ldrb	r3, [r7, #15]
 8012dbe:	687a      	ldr	r2, [r7, #4]
 8012dc0:	211a      	movs	r1, #26
 8012dc2:	fb01 f303 	mul.w	r3, r1, r3
 8012dc6:	4413      	add	r3, r2
 8012dc8:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8012dcc:	781a      	ldrb	r2, [r3, #0]
 8012dce:	68bb      	ldr	r3, [r7, #8]
 8012dd0:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8012dd2:	7bfb      	ldrb	r3, [r7, #15]
 8012dd4:	687a      	ldr	r2, [r7, #4]
 8012dd6:	211a      	movs	r1, #26
 8012dd8:	fb01 f303 	mul.w	r3, r1, r3
 8012ddc:	4413      	add	r3, r2
 8012dde:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8012de2:	881a      	ldrh	r2, [r3, #0]
 8012de4:	68bb      	ldr	r3, [r7, #8]
 8012de6:	835a      	strh	r2, [r3, #26]
 8012de8:	e015      	b.n	8012e16 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8012dea:	7bfb      	ldrb	r3, [r7, #15]
 8012dec:	687a      	ldr	r2, [r7, #4]
 8012dee:	211a      	movs	r1, #26
 8012df0:	fb01 f303 	mul.w	r3, r1, r3
 8012df4:	4413      	add	r3, r2
 8012df6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8012dfa:	781a      	ldrb	r2, [r3, #0]
 8012dfc:	68bb      	ldr	r3, [r7, #8]
 8012dfe:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8012e00:	7bfb      	ldrb	r3, [r7, #15]
 8012e02:	687a      	ldr	r2, [r7, #4]
 8012e04:	211a      	movs	r1, #26
 8012e06:	fb01 f303 	mul.w	r3, r1, r3
 8012e0a:	4413      	add	r3, r2
 8012e0c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8012e10:	881a      	ldrh	r2, [r3, #0]
 8012e12:	68bb      	ldr	r3, [r7, #8]
 8012e14:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8012e16:	7bfb      	ldrb	r3, [r7, #15]
 8012e18:	687a      	ldr	r2, [r7, #4]
 8012e1a:	211a      	movs	r1, #26
 8012e1c:	fb01 f303 	mul.w	r3, r1, r3
 8012e20:	4413      	add	r3, r2
 8012e22:	f203 3356 	addw	r3, r3, #854	; 0x356
 8012e26:	781b      	ldrb	r3, [r3, #0]
 8012e28:	b25b      	sxtb	r3, r3
 8012e2a:	2b00      	cmp	r3, #0
 8012e2c:	da16      	bge.n	8012e5c <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8012e2e:	7bfb      	ldrb	r3, [r7, #15]
 8012e30:	687a      	ldr	r2, [r7, #4]
 8012e32:	211a      	movs	r1, #26
 8012e34:	fb01 f303 	mul.w	r3, r1, r3
 8012e38:	4413      	add	r3, r2
 8012e3a:	f203 3356 	addw	r3, r3, #854	; 0x356
 8012e3e:	781a      	ldrb	r2, [r3, #0]
 8012e40:	68bb      	ldr	r3, [r7, #8]
 8012e42:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8012e44:	7bfb      	ldrb	r3, [r7, #15]
 8012e46:	687a      	ldr	r2, [r7, #4]
 8012e48:	211a      	movs	r1, #26
 8012e4a:	fb01 f303 	mul.w	r3, r1, r3
 8012e4e:	4413      	add	r3, r2
 8012e50:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8012e54:	881a      	ldrh	r2, [r3, #0]
 8012e56:	68bb      	ldr	r3, [r7, #8]
 8012e58:	835a      	strh	r2, [r3, #26]
 8012e5a:	e015      	b.n	8012e88 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8012e5c:	7bfb      	ldrb	r3, [r7, #15]
 8012e5e:	687a      	ldr	r2, [r7, #4]
 8012e60:	211a      	movs	r1, #26
 8012e62:	fb01 f303 	mul.w	r3, r1, r3
 8012e66:	4413      	add	r3, r2
 8012e68:	f203 3356 	addw	r3, r3, #854	; 0x356
 8012e6c:	781a      	ldrb	r2, [r3, #0]
 8012e6e:	68bb      	ldr	r3, [r7, #8]
 8012e70:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8012e72:	7bfb      	ldrb	r3, [r7, #15]
 8012e74:	687a      	ldr	r2, [r7, #4]
 8012e76:	211a      	movs	r1, #26
 8012e78:	fb01 f303 	mul.w	r3, r1, r3
 8012e7c:	4413      	add	r3, r2
 8012e7e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8012e82:	881a      	ldrh	r2, [r3, #0]
 8012e84:	68bb      	ldr	r3, [r7, #8]
 8012e86:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8012e88:	68bb      	ldr	r3, [r7, #8]
 8012e8a:	7b9b      	ldrb	r3, [r3, #14]
 8012e8c:	4619      	mov	r1, r3
 8012e8e:	6878      	ldr	r0, [r7, #4]
 8012e90:	f001 ffe9 	bl	8014e66 <USBH_AllocPipe>
 8012e94:	4603      	mov	r3, r0
 8012e96:	461a      	mov	r2, r3
 8012e98:	68bb      	ldr	r3, [r7, #8]
 8012e9a:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8012e9c:	68bb      	ldr	r3, [r7, #8]
 8012e9e:	7bdb      	ldrb	r3, [r3, #15]
 8012ea0:	4619      	mov	r1, r3
 8012ea2:	6878      	ldr	r0, [r7, #4]
 8012ea4:	f001 ffdf 	bl	8014e66 <USBH_AllocPipe>
 8012ea8:	4603      	mov	r3, r0
 8012eaa:	461a      	mov	r2, r3
 8012eac:	68bb      	ldr	r3, [r7, #8]
 8012eae:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8012eb0:	68bb      	ldr	r3, [r7, #8]
 8012eb2:	7b59      	ldrb	r1, [r3, #13]
 8012eb4:	68bb      	ldr	r3, [r7, #8]
 8012eb6:	7b98      	ldrb	r0, [r3, #14]
 8012eb8:	687b      	ldr	r3, [r7, #4]
 8012eba:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8012ebe:	687b      	ldr	r3, [r7, #4]
 8012ec0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8012ec4:	68ba      	ldr	r2, [r7, #8]
 8012ec6:	8b12      	ldrh	r2, [r2, #24]
 8012ec8:	9202      	str	r2, [sp, #8]
 8012eca:	2202      	movs	r2, #2
 8012ecc:	9201      	str	r2, [sp, #4]
 8012ece:	9300      	str	r3, [sp, #0]
 8012ed0:	4623      	mov	r3, r4
 8012ed2:	4602      	mov	r2, r0
 8012ed4:	6878      	ldr	r0, [r7, #4]
 8012ed6:	f001 ff97 	bl	8014e08 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8012eda:	68bb      	ldr	r3, [r7, #8]
 8012edc:	7b19      	ldrb	r1, [r3, #12]
 8012ede:	68bb      	ldr	r3, [r7, #8]
 8012ee0:	7bd8      	ldrb	r0, [r3, #15]
 8012ee2:	687b      	ldr	r3, [r7, #4]
 8012ee4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8012ee8:	687b      	ldr	r3, [r7, #4]
 8012eea:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8012eee:	68ba      	ldr	r2, [r7, #8]
 8012ef0:	8b52      	ldrh	r2, [r2, #26]
 8012ef2:	9202      	str	r2, [sp, #8]
 8012ef4:	2202      	movs	r2, #2
 8012ef6:	9201      	str	r2, [sp, #4]
 8012ef8:	9300      	str	r3, [sp, #0]
 8012efa:	4623      	mov	r3, r4
 8012efc:	4602      	mov	r2, r0
 8012efe:	6878      	ldr	r0, [r7, #4]
 8012f00:	f001 ff82 	bl	8014e08 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8012f04:	68bb      	ldr	r3, [r7, #8]
 8012f06:	2200      	movs	r2, #0
 8012f08:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8012f0c:	68bb      	ldr	r3, [r7, #8]
 8012f0e:	7b5b      	ldrb	r3, [r3, #13]
 8012f10:	2200      	movs	r2, #0
 8012f12:	4619      	mov	r1, r3
 8012f14:	6878      	ldr	r0, [r7, #4]
 8012f16:	f005 f871 	bl	8017ffc <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8012f1a:	68bb      	ldr	r3, [r7, #8]
 8012f1c:	7b1b      	ldrb	r3, [r3, #12]
 8012f1e:	2200      	movs	r2, #0
 8012f20:	4619      	mov	r1, r3
 8012f22:	6878      	ldr	r0, [r7, #4]
 8012f24:	f005 f86a 	bl	8017ffc <USBH_LL_SetToggle>

  return USBH_OK;
 8012f28:	2300      	movs	r3, #0
}
 8012f2a:	4618      	mov	r0, r3
 8012f2c:	3714      	adds	r7, #20
 8012f2e:	46bd      	mov	sp, r7
 8012f30:	bd90      	pop	{r4, r7, pc}

08012f32 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8012f32:	b580      	push	{r7, lr}
 8012f34:	b084      	sub	sp, #16
 8012f36:	af00      	add	r7, sp, #0
 8012f38:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8012f3a:	687b      	ldr	r3, [r7, #4]
 8012f3c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8012f40:	69db      	ldr	r3, [r3, #28]
 8012f42:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8012f44:	68fb      	ldr	r3, [r7, #12]
 8012f46:	781b      	ldrb	r3, [r3, #0]
 8012f48:	2b00      	cmp	r3, #0
 8012f4a:	d00e      	beq.n	8012f6a <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8012f4c:	68fb      	ldr	r3, [r7, #12]
 8012f4e:	781b      	ldrb	r3, [r3, #0]
 8012f50:	4619      	mov	r1, r3
 8012f52:	6878      	ldr	r0, [r7, #4]
 8012f54:	f001 ff77 	bl	8014e46 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8012f58:	68fb      	ldr	r3, [r7, #12]
 8012f5a:	781b      	ldrb	r3, [r3, #0]
 8012f5c:	4619      	mov	r1, r3
 8012f5e:	6878      	ldr	r0, [r7, #4]
 8012f60:	f001 ffa2 	bl	8014ea8 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8012f64:	68fb      	ldr	r3, [r7, #12]
 8012f66:	2200      	movs	r2, #0
 8012f68:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8012f6a:	68fb      	ldr	r3, [r7, #12]
 8012f6c:	7b1b      	ldrb	r3, [r3, #12]
 8012f6e:	2b00      	cmp	r3, #0
 8012f70:	d00e      	beq.n	8012f90 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8012f72:	68fb      	ldr	r3, [r7, #12]
 8012f74:	7b1b      	ldrb	r3, [r3, #12]
 8012f76:	4619      	mov	r1, r3
 8012f78:	6878      	ldr	r0, [r7, #4]
 8012f7a:	f001 ff64 	bl	8014e46 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8012f7e:	68fb      	ldr	r3, [r7, #12]
 8012f80:	7b1b      	ldrb	r3, [r3, #12]
 8012f82:	4619      	mov	r1, r3
 8012f84:	6878      	ldr	r0, [r7, #4]
 8012f86:	f001 ff8f 	bl	8014ea8 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8012f8a:	68fb      	ldr	r3, [r7, #12]
 8012f8c:	2200      	movs	r2, #0
 8012f8e:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8012f90:	68fb      	ldr	r3, [r7, #12]
 8012f92:	7b5b      	ldrb	r3, [r3, #13]
 8012f94:	2b00      	cmp	r3, #0
 8012f96:	d00e      	beq.n	8012fb6 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8012f98:	68fb      	ldr	r3, [r7, #12]
 8012f9a:	7b5b      	ldrb	r3, [r3, #13]
 8012f9c:	4619      	mov	r1, r3
 8012f9e:	6878      	ldr	r0, [r7, #4]
 8012fa0:	f001 ff51 	bl	8014e46 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8012fa4:	68fb      	ldr	r3, [r7, #12]
 8012fa6:	7b5b      	ldrb	r3, [r3, #13]
 8012fa8:	4619      	mov	r1, r3
 8012faa:	6878      	ldr	r0, [r7, #4]
 8012fac:	f001 ff7c 	bl	8014ea8 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8012fb0:	68fb      	ldr	r3, [r7, #12]
 8012fb2:	2200      	movs	r2, #0
 8012fb4:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8012fb6:	687b      	ldr	r3, [r7, #4]
 8012fb8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8012fbc:	69db      	ldr	r3, [r3, #28]
 8012fbe:	2b00      	cmp	r3, #0
 8012fc0:	d00b      	beq.n	8012fda <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8012fc2:	687b      	ldr	r3, [r7, #4]
 8012fc4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8012fc8:	69db      	ldr	r3, [r3, #28]
 8012fca:	4618      	mov	r0, r3
 8012fcc:	f005 f8cc 	bl	8018168 <free>
    phost->pActiveClass->pData = 0U;
 8012fd0:	687b      	ldr	r3, [r7, #4]
 8012fd2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8012fd6:	2200      	movs	r2, #0
 8012fd8:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8012fda:	2300      	movs	r3, #0
}
 8012fdc:	4618      	mov	r0, r3
 8012fde:	3710      	adds	r7, #16
 8012fe0:	46bd      	mov	sp, r7
 8012fe2:	bd80      	pop	{r7, pc}

08012fe4 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8012fe4:	b580      	push	{r7, lr}
 8012fe6:	b084      	sub	sp, #16
 8012fe8:	af00      	add	r7, sp, #0
 8012fea:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8012fec:	687b      	ldr	r3, [r7, #4]
 8012fee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8012ff2:	69db      	ldr	r3, [r3, #28]
 8012ff4:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8012ff6:	68fb      	ldr	r3, [r7, #12]
 8012ff8:	3340      	adds	r3, #64	; 0x40
 8012ffa:	4619      	mov	r1, r3
 8012ffc:	6878      	ldr	r0, [r7, #4]
 8012ffe:	f000 f8b2 	bl	8013166 <GetLineCoding>
 8013002:	4603      	mov	r3, r0
 8013004:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8013006:	7afb      	ldrb	r3, [r7, #11]
 8013008:	2b00      	cmp	r3, #0
 801300a:	d105      	bne.n	8013018 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 801300c:	687b      	ldr	r3, [r7, #4]
 801300e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8013012:	2102      	movs	r1, #2
 8013014:	6878      	ldr	r0, [r7, #4]
 8013016:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8013018:	7afb      	ldrb	r3, [r7, #11]
}
 801301a:	4618      	mov	r0, r3
 801301c:	3710      	adds	r7, #16
 801301e:	46bd      	mov	sp, r7
 8013020:	bd80      	pop	{r7, pc}
	...

08013024 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8013024:	b580      	push	{r7, lr}
 8013026:	b084      	sub	sp, #16
 8013028:	af00      	add	r7, sp, #0
 801302a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 801302c:	2301      	movs	r3, #1
 801302e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8013030:	2300      	movs	r3, #0
 8013032:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8013034:	687b      	ldr	r3, [r7, #4]
 8013036:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 801303a:	69db      	ldr	r3, [r3, #28]
 801303c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 801303e:	68bb      	ldr	r3, [r7, #8]
 8013040:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8013044:	2b04      	cmp	r3, #4
 8013046:	d877      	bhi.n	8013138 <USBH_CDC_Process+0x114>
 8013048:	a201      	add	r2, pc, #4	; (adr r2, 8013050 <USBH_CDC_Process+0x2c>)
 801304a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801304e:	bf00      	nop
 8013050:	08013065 	.word	0x08013065
 8013054:	0801306b 	.word	0x0801306b
 8013058:	0801309b 	.word	0x0801309b
 801305c:	0801310f 	.word	0x0801310f
 8013060:	0801311d 	.word	0x0801311d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8013064:	2300      	movs	r3, #0
 8013066:	73fb      	strb	r3, [r7, #15]
      break;
 8013068:	e06d      	b.n	8013146 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 801306a:	68bb      	ldr	r3, [r7, #8]
 801306c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801306e:	4619      	mov	r1, r3
 8013070:	6878      	ldr	r0, [r7, #4]
 8013072:	f000 f897 	bl	80131a4 <SetLineCoding>
 8013076:	4603      	mov	r3, r0
 8013078:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 801307a:	7bbb      	ldrb	r3, [r7, #14]
 801307c:	2b00      	cmp	r3, #0
 801307e:	d104      	bne.n	801308a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8013080:	68bb      	ldr	r3, [r7, #8]
 8013082:	2202      	movs	r2, #2
 8013084:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8013088:	e058      	b.n	801313c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 801308a:	7bbb      	ldrb	r3, [r7, #14]
 801308c:	2b01      	cmp	r3, #1
 801308e:	d055      	beq.n	801313c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8013090:	68bb      	ldr	r3, [r7, #8]
 8013092:	2204      	movs	r2, #4
 8013094:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8013098:	e050      	b.n	801313c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 801309a:	68bb      	ldr	r3, [r7, #8]
 801309c:	3340      	adds	r3, #64	; 0x40
 801309e:	4619      	mov	r1, r3
 80130a0:	6878      	ldr	r0, [r7, #4]
 80130a2:	f000 f860 	bl	8013166 <GetLineCoding>
 80130a6:	4603      	mov	r3, r0
 80130a8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80130aa:	7bbb      	ldrb	r3, [r7, #14]
 80130ac:	2b00      	cmp	r3, #0
 80130ae:	d126      	bne.n	80130fe <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80130b0:	68bb      	ldr	r3, [r7, #8]
 80130b2:	2200      	movs	r2, #0
 80130b4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80130b8:	68bb      	ldr	r3, [r7, #8]
 80130ba:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80130be:	68bb      	ldr	r3, [r7, #8]
 80130c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80130c2:	791b      	ldrb	r3, [r3, #4]
 80130c4:	429a      	cmp	r2, r3
 80130c6:	d13b      	bne.n	8013140 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80130c8:	68bb      	ldr	r3, [r7, #8]
 80130ca:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80130ce:	68bb      	ldr	r3, [r7, #8]
 80130d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80130d2:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80130d4:	429a      	cmp	r2, r3
 80130d6:	d133      	bne.n	8013140 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80130d8:	68bb      	ldr	r3, [r7, #8]
 80130da:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80130de:	68bb      	ldr	r3, [r7, #8]
 80130e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80130e2:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80130e4:	429a      	cmp	r2, r3
 80130e6:	d12b      	bne.n	8013140 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80130e8:	68bb      	ldr	r3, [r7, #8]
 80130ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80130ec:	68bb      	ldr	r3, [r7, #8]
 80130ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80130f0:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80130f2:	429a      	cmp	r2, r3
 80130f4:	d124      	bne.n	8013140 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80130f6:	6878      	ldr	r0, [r7, #4]
 80130f8:	f000 f982 	bl	8013400 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80130fc:	e020      	b.n	8013140 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80130fe:	7bbb      	ldrb	r3, [r7, #14]
 8013100:	2b01      	cmp	r3, #1
 8013102:	d01d      	beq.n	8013140 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8013104:	68bb      	ldr	r3, [r7, #8]
 8013106:	2204      	movs	r2, #4
 8013108:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 801310c:	e018      	b.n	8013140 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 801310e:	6878      	ldr	r0, [r7, #4]
 8013110:	f000 f867 	bl	80131e2 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8013114:	6878      	ldr	r0, [r7, #4]
 8013116:	f000 f8f6 	bl	8013306 <CDC_ProcessReception>
      break;
 801311a:	e014      	b.n	8013146 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 801311c:	2100      	movs	r1, #0
 801311e:	6878      	ldr	r0, [r7, #4]
 8013120:	f001 f951 	bl	80143c6 <USBH_ClrFeature>
 8013124:	4603      	mov	r3, r0
 8013126:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8013128:	7bbb      	ldrb	r3, [r7, #14]
 801312a:	2b00      	cmp	r3, #0
 801312c:	d10a      	bne.n	8013144 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 801312e:	68bb      	ldr	r3, [r7, #8]
 8013130:	2200      	movs	r2, #0
 8013132:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8013136:	e005      	b.n	8013144 <USBH_CDC_Process+0x120>

    default:
      break;
 8013138:	bf00      	nop
 801313a:	e004      	b.n	8013146 <USBH_CDC_Process+0x122>
      break;
 801313c:	bf00      	nop
 801313e:	e002      	b.n	8013146 <USBH_CDC_Process+0x122>
      break;
 8013140:	bf00      	nop
 8013142:	e000      	b.n	8013146 <USBH_CDC_Process+0x122>
      break;
 8013144:	bf00      	nop

  }

  return status;
 8013146:	7bfb      	ldrb	r3, [r7, #15]
}
 8013148:	4618      	mov	r0, r3
 801314a:	3710      	adds	r7, #16
 801314c:	46bd      	mov	sp, r7
 801314e:	bd80      	pop	{r7, pc}

08013150 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8013150:	b480      	push	{r7}
 8013152:	b083      	sub	sp, #12
 8013154:	af00      	add	r7, sp, #0
 8013156:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8013158:	2300      	movs	r3, #0
}
 801315a:	4618      	mov	r0, r3
 801315c:	370c      	adds	r7, #12
 801315e:	46bd      	mov	sp, r7
 8013160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013164:	4770      	bx	lr

08013166 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8013166:	b580      	push	{r7, lr}
 8013168:	b082      	sub	sp, #8
 801316a:	af00      	add	r7, sp, #0
 801316c:	6078      	str	r0, [r7, #4]
 801316e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8013170:	687b      	ldr	r3, [r7, #4]
 8013172:	22a1      	movs	r2, #161	; 0xa1
 8013174:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8013176:	687b      	ldr	r3, [r7, #4]
 8013178:	2221      	movs	r2, #33	; 0x21
 801317a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 801317c:	687b      	ldr	r3, [r7, #4]
 801317e:	2200      	movs	r2, #0
 8013180:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8013182:	687b      	ldr	r3, [r7, #4]
 8013184:	2200      	movs	r2, #0
 8013186:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8013188:	687b      	ldr	r3, [r7, #4]
 801318a:	2207      	movs	r2, #7
 801318c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 801318e:	683b      	ldr	r3, [r7, #0]
 8013190:	2207      	movs	r2, #7
 8013192:	4619      	mov	r1, r3
 8013194:	6878      	ldr	r0, [r7, #4]
 8013196:	f001 faf6 	bl	8014786 <USBH_CtlReq>
 801319a:	4603      	mov	r3, r0
}
 801319c:	4618      	mov	r0, r3
 801319e:	3708      	adds	r7, #8
 80131a0:	46bd      	mov	sp, r7
 80131a2:	bd80      	pop	{r7, pc}

080131a4 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80131a4:	b580      	push	{r7, lr}
 80131a6:	b082      	sub	sp, #8
 80131a8:	af00      	add	r7, sp, #0
 80131aa:	6078      	str	r0, [r7, #4]
 80131ac:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80131ae:	687b      	ldr	r3, [r7, #4]
 80131b0:	2221      	movs	r2, #33	; 0x21
 80131b2:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80131b4:	687b      	ldr	r3, [r7, #4]
 80131b6:	2220      	movs	r2, #32
 80131b8:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80131ba:	687b      	ldr	r3, [r7, #4]
 80131bc:	2200      	movs	r2, #0
 80131be:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80131c0:	687b      	ldr	r3, [r7, #4]
 80131c2:	2200      	movs	r2, #0
 80131c4:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80131c6:	687b      	ldr	r3, [r7, #4]
 80131c8:	2207      	movs	r2, #7
 80131ca:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80131cc:	683b      	ldr	r3, [r7, #0]
 80131ce:	2207      	movs	r2, #7
 80131d0:	4619      	mov	r1, r3
 80131d2:	6878      	ldr	r0, [r7, #4]
 80131d4:	f001 fad7 	bl	8014786 <USBH_CtlReq>
 80131d8:	4603      	mov	r3, r0
}
 80131da:	4618      	mov	r0, r3
 80131dc:	3708      	adds	r7, #8
 80131de:	46bd      	mov	sp, r7
 80131e0:	bd80      	pop	{r7, pc}

080131e2 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80131e2:	b580      	push	{r7, lr}
 80131e4:	b086      	sub	sp, #24
 80131e6:	af02      	add	r7, sp, #8
 80131e8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80131ea:	687b      	ldr	r3, [r7, #4]
 80131ec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80131f0:	69db      	ldr	r3, [r3, #28]
 80131f2:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80131f4:	2300      	movs	r3, #0
 80131f6:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80131f8:	68fb      	ldr	r3, [r7, #12]
 80131fa:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80131fe:	2b01      	cmp	r3, #1
 8013200:	d002      	beq.n	8013208 <CDC_ProcessTransmission+0x26>
 8013202:	2b02      	cmp	r3, #2
 8013204:	d023      	beq.n	801324e <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8013206:	e07a      	b.n	80132fe <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8013208:	68fb      	ldr	r3, [r7, #12]
 801320a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801320c:	68fa      	ldr	r2, [r7, #12]
 801320e:	8b12      	ldrh	r2, [r2, #24]
 8013210:	4293      	cmp	r3, r2
 8013212:	d90b      	bls.n	801322c <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 8013214:	68fb      	ldr	r3, [r7, #12]
 8013216:	69d9      	ldr	r1, [r3, #28]
 8013218:	68fb      	ldr	r3, [r7, #12]
 801321a:	8b1a      	ldrh	r2, [r3, #24]
 801321c:	68fb      	ldr	r3, [r7, #12]
 801321e:	7b5b      	ldrb	r3, [r3, #13]
 8013220:	2001      	movs	r0, #1
 8013222:	9000      	str	r0, [sp, #0]
 8013224:	6878      	ldr	r0, [r7, #4]
 8013226:	f001 fdac 	bl	8014d82 <USBH_BulkSendData>
 801322a:	e00b      	b.n	8013244 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 801322c:	68fb      	ldr	r3, [r7, #12]
 801322e:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8013230:	68fb      	ldr	r3, [r7, #12]
 8013232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8013234:	b29a      	uxth	r2, r3
 8013236:	68fb      	ldr	r3, [r7, #12]
 8013238:	7b5b      	ldrb	r3, [r3, #13]
 801323a:	2001      	movs	r0, #1
 801323c:	9000      	str	r0, [sp, #0]
 801323e:	6878      	ldr	r0, [r7, #4]
 8013240:	f001 fd9f 	bl	8014d82 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8013244:	68fb      	ldr	r3, [r7, #12]
 8013246:	2202      	movs	r2, #2
 8013248:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 801324c:	e057      	b.n	80132fe <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 801324e:	68fb      	ldr	r3, [r7, #12]
 8013250:	7b5b      	ldrb	r3, [r3, #13]
 8013252:	4619      	mov	r1, r3
 8013254:	6878      	ldr	r0, [r7, #4]
 8013256:	f004 fea7 	bl	8017fa8 <USBH_LL_GetURBState>
 801325a:	4603      	mov	r3, r0
 801325c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 801325e:	7afb      	ldrb	r3, [r7, #11]
 8013260:	2b01      	cmp	r3, #1
 8013262:	d136      	bne.n	80132d2 <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8013264:	68fb      	ldr	r3, [r7, #12]
 8013266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013268:	68fa      	ldr	r2, [r7, #12]
 801326a:	8b12      	ldrh	r2, [r2, #24]
 801326c:	4293      	cmp	r3, r2
 801326e:	d90e      	bls.n	801328e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8013270:	68fb      	ldr	r3, [r7, #12]
 8013272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013274:	68fa      	ldr	r2, [r7, #12]
 8013276:	8b12      	ldrh	r2, [r2, #24]
 8013278:	1a9a      	subs	r2, r3, r2
 801327a:	68fb      	ldr	r3, [r7, #12]
 801327c:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 801327e:	68fb      	ldr	r3, [r7, #12]
 8013280:	69db      	ldr	r3, [r3, #28]
 8013282:	68fa      	ldr	r2, [r7, #12]
 8013284:	8b12      	ldrh	r2, [r2, #24]
 8013286:	441a      	add	r2, r3
 8013288:	68fb      	ldr	r3, [r7, #12]
 801328a:	61da      	str	r2, [r3, #28]
 801328c:	e002      	b.n	8013294 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 801328e:	68fb      	ldr	r3, [r7, #12]
 8013290:	2200      	movs	r2, #0
 8013292:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8013294:	68fb      	ldr	r3, [r7, #12]
 8013296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013298:	2b00      	cmp	r3, #0
 801329a:	d004      	beq.n	80132a6 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 801329c:	68fb      	ldr	r3, [r7, #12]
 801329e:	2201      	movs	r2, #1
 80132a0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 80132a4:	e006      	b.n	80132b4 <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80132a6:	68fb      	ldr	r3, [r7, #12]
 80132a8:	2200      	movs	r2, #0
 80132aa:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 80132ae:	6878      	ldr	r0, [r7, #4]
 80132b0:	f000 f892 	bl	80133d8 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 80132b4:	687b      	ldr	r3, [r7, #4]
 80132b6:	2204      	movs	r2, #4
 80132b8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80132bc:	687b      	ldr	r3, [r7, #4]
 80132be:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80132c2:	687b      	ldr	r3, [r7, #4]
 80132c4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80132c8:	2200      	movs	r2, #0
 80132ca:	4619      	mov	r1, r3
 80132cc:	f001 ffea 	bl	80152a4 <osMessagePut>
      break;
 80132d0:	e014      	b.n	80132fc <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 80132d2:	7afb      	ldrb	r3, [r7, #11]
 80132d4:	2b02      	cmp	r3, #2
 80132d6:	d111      	bne.n	80132fc <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80132d8:	68fb      	ldr	r3, [r7, #12]
 80132da:	2201      	movs	r2, #1
 80132dc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 80132e0:	687b      	ldr	r3, [r7, #4]
 80132e2:	2204      	movs	r2, #4
 80132e4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80132e8:	687b      	ldr	r3, [r7, #4]
 80132ea:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80132ee:	687b      	ldr	r3, [r7, #4]
 80132f0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80132f4:	2200      	movs	r2, #0
 80132f6:	4619      	mov	r1, r3
 80132f8:	f001 ffd4 	bl	80152a4 <osMessagePut>
      break;
 80132fc:	bf00      	nop
  }
}
 80132fe:	bf00      	nop
 8013300:	3710      	adds	r7, #16
 8013302:	46bd      	mov	sp, r7
 8013304:	bd80      	pop	{r7, pc}

08013306 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8013306:	b580      	push	{r7, lr}
 8013308:	b086      	sub	sp, #24
 801330a:	af00      	add	r7, sp, #0
 801330c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 801330e:	687b      	ldr	r3, [r7, #4]
 8013310:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8013314:	69db      	ldr	r3, [r3, #28]
 8013316:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8013318:	2300      	movs	r3, #0
 801331a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 801331c:	697b      	ldr	r3, [r7, #20]
 801331e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8013322:	2b03      	cmp	r3, #3
 8013324:	d002      	beq.n	801332c <CDC_ProcessReception+0x26>
 8013326:	2b04      	cmp	r3, #4
 8013328:	d00e      	beq.n	8013348 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 801332a:	e051      	b.n	80133d0 <CDC_ProcessReception+0xca>
      USBH_BulkReceiveData(phost,
 801332c:	697b      	ldr	r3, [r7, #20]
 801332e:	6a19      	ldr	r1, [r3, #32]
 8013330:	697b      	ldr	r3, [r7, #20]
 8013332:	8b5a      	ldrh	r2, [r3, #26]
 8013334:	697b      	ldr	r3, [r7, #20]
 8013336:	7b1b      	ldrb	r3, [r3, #12]
 8013338:	6878      	ldr	r0, [r7, #4]
 801333a:	f001 fd47 	bl	8014dcc <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 801333e:	697b      	ldr	r3, [r7, #20]
 8013340:	2204      	movs	r2, #4
 8013342:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8013346:	e043      	b.n	80133d0 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8013348:	697b      	ldr	r3, [r7, #20]
 801334a:	7b1b      	ldrb	r3, [r3, #12]
 801334c:	4619      	mov	r1, r3
 801334e:	6878      	ldr	r0, [r7, #4]
 8013350:	f004 fe2a 	bl	8017fa8 <USBH_LL_GetURBState>
 8013354:	4603      	mov	r3, r0
 8013356:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8013358:	7cfb      	ldrb	r3, [r7, #19]
 801335a:	2b01      	cmp	r3, #1
 801335c:	d137      	bne.n	80133ce <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 801335e:	697b      	ldr	r3, [r7, #20]
 8013360:	7b1b      	ldrb	r3, [r3, #12]
 8013362:	4619      	mov	r1, r3
 8013364:	6878      	ldr	r0, [r7, #4]
 8013366:	f004 fd8d 	bl	8017e84 <USBH_LL_GetLastXferSize>
 801336a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 801336c:	697b      	ldr	r3, [r7, #20]
 801336e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013370:	68fa      	ldr	r2, [r7, #12]
 8013372:	429a      	cmp	r2, r3
 8013374:	d016      	beq.n	80133a4 <CDC_ProcessReception+0x9e>
 8013376:	697b      	ldr	r3, [r7, #20]
 8013378:	8b5b      	ldrh	r3, [r3, #26]
 801337a:	461a      	mov	r2, r3
 801337c:	68fb      	ldr	r3, [r7, #12]
 801337e:	4293      	cmp	r3, r2
 8013380:	d910      	bls.n	80133a4 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8013382:	697b      	ldr	r3, [r7, #20]
 8013384:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8013386:	68fb      	ldr	r3, [r7, #12]
 8013388:	1ad2      	subs	r2, r2, r3
 801338a:	697b      	ldr	r3, [r7, #20]
 801338c:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 801338e:	697b      	ldr	r3, [r7, #20]
 8013390:	6a1a      	ldr	r2, [r3, #32]
 8013392:	68fb      	ldr	r3, [r7, #12]
 8013394:	441a      	add	r2, r3
 8013396:	697b      	ldr	r3, [r7, #20]
 8013398:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 801339a:	697b      	ldr	r3, [r7, #20]
 801339c:	2203      	movs	r2, #3
 801339e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 80133a2:	e006      	b.n	80133b2 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80133a4:	697b      	ldr	r3, [r7, #20]
 80133a6:	2200      	movs	r2, #0
 80133a8:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80133ac:	6878      	ldr	r0, [r7, #4]
 80133ae:	f000 f81d 	bl	80133ec <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 80133b2:	687b      	ldr	r3, [r7, #4]
 80133b4:	2204      	movs	r2, #4
 80133b6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80133ba:	687b      	ldr	r3, [r7, #4]
 80133bc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80133c0:	687b      	ldr	r3, [r7, #4]
 80133c2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80133c6:	2200      	movs	r2, #0
 80133c8:	4619      	mov	r1, r3
 80133ca:	f001 ff6b 	bl	80152a4 <osMessagePut>
      break;
 80133ce:	bf00      	nop
  }
}
 80133d0:	bf00      	nop
 80133d2:	3718      	adds	r7, #24
 80133d4:	46bd      	mov	sp, r7
 80133d6:	bd80      	pop	{r7, pc}

080133d8 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80133d8:	b480      	push	{r7}
 80133da:	b083      	sub	sp, #12
 80133dc:	af00      	add	r7, sp, #0
 80133de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80133e0:	bf00      	nop
 80133e2:	370c      	adds	r7, #12
 80133e4:	46bd      	mov	sp, r7
 80133e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133ea:	4770      	bx	lr

080133ec <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80133ec:	b480      	push	{r7}
 80133ee:	b083      	sub	sp, #12
 80133f0:	af00      	add	r7, sp, #0
 80133f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80133f4:	bf00      	nop
 80133f6:	370c      	adds	r7, #12
 80133f8:	46bd      	mov	sp, r7
 80133fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133fe:	4770      	bx	lr

08013400 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8013400:	b480      	push	{r7}
 8013402:	b083      	sub	sp, #12
 8013404:	af00      	add	r7, sp, #0
 8013406:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8013408:	bf00      	nop
 801340a:	370c      	adds	r7, #12
 801340c:	46bd      	mov	sp, r7
 801340e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013412:	4770      	bx	lr

08013414 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8013414:	b5b0      	push	{r4, r5, r7, lr}
 8013416:	b090      	sub	sp, #64	; 0x40
 8013418:	af00      	add	r7, sp, #0
 801341a:	60f8      	str	r0, [r7, #12]
 801341c:	60b9      	str	r1, [r7, #8]
 801341e:	4613      	mov	r3, r2
 8013420:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8013422:	68fb      	ldr	r3, [r7, #12]
 8013424:	2b00      	cmp	r3, #0
 8013426:	d101      	bne.n	801342c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8013428:	2302      	movs	r3, #2
 801342a:	e04d      	b.n	80134c8 <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 801342c:	68fb      	ldr	r3, [r7, #12]
 801342e:	79fa      	ldrb	r2, [r7, #7]
 8013430:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8013434:	68fb      	ldr	r3, [r7, #12]
 8013436:	2200      	movs	r2, #0
 8013438:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 801343c:	68fb      	ldr	r3, [r7, #12]
 801343e:	2200      	movs	r2, #0
 8013440:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8013444:	68f8      	ldr	r0, [r7, #12]
 8013446:	f000 f847 	bl	80134d8 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 801344a:	68fb      	ldr	r3, [r7, #12]
 801344c:	2200      	movs	r2, #0
 801344e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8013452:	68fb      	ldr	r3, [r7, #12]
 8013454:	2200      	movs	r2, #0
 8013456:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 801345a:	68fb      	ldr	r3, [r7, #12]
 801345c:	2200      	movs	r2, #0
 801345e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8013462:	68fb      	ldr	r3, [r7, #12]
 8013464:	2200      	movs	r2, #0
 8013466:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 801346a:	68bb      	ldr	r3, [r7, #8]
 801346c:	2b00      	cmp	r3, #0
 801346e:	d003      	beq.n	8013478 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8013470:	68fb      	ldr	r3, [r7, #12]
 8013472:	68ba      	ldr	r2, [r7, #8]
 8013474:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 8013478:	4b15      	ldr	r3, [pc, #84]	; (80134d0 <USBH_Init+0xbc>)
 801347a:	f107 0430 	add.w	r4, r7, #48	; 0x30
 801347e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8013480:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 8013484:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8013488:	2100      	movs	r1, #0
 801348a:	4618      	mov	r0, r3
 801348c:	f001 fee2 	bl	8015254 <osMessageCreate>
 8013490:	4602      	mov	r2, r0
 8013492:	68fb      	ldr	r3, [r7, #12]
 8013494:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 8013498:	4b0e      	ldr	r3, [pc, #56]	; (80134d4 <USBH_Init+0xc0>)
 801349a:	f107 0414 	add.w	r4, r7, #20
 801349e:	461d      	mov	r5, r3
 80134a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80134a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80134a4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80134a8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 80134ac:	f107 0314 	add.w	r3, r7, #20
 80134b0:	68f9      	ldr	r1, [r7, #12]
 80134b2:	4618      	mov	r0, r3
 80134b4:	f001 fde2 	bl	801507c <osThreadCreate>
 80134b8:	4602      	mov	r2, r0
 80134ba:	68fb      	ldr	r3, [r7, #12]
 80134bc:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 80134c0:	68f8      	ldr	r0, [r7, #12]
 80134c2:	f004 fc2b 	bl	8017d1c <USBH_LL_Init>

  return USBH_OK;
 80134c6:	2300      	movs	r3, #0
}
 80134c8:	4618      	mov	r0, r3
 80134ca:	3740      	adds	r7, #64	; 0x40
 80134cc:	46bd      	mov	sp, r7
 80134ce:	bdb0      	pop	{r4, r5, r7, pc}
 80134d0:	0801b7b0 	.word	0x0801b7b0
 80134d4:	0801b7c0 	.word	0x0801b7c0

080134d8 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80134d8:	b480      	push	{r7}
 80134da:	b085      	sub	sp, #20
 80134dc:	af00      	add	r7, sp, #0
 80134de:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80134e0:	2300      	movs	r3, #0
 80134e2:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80134e4:	2300      	movs	r3, #0
 80134e6:	60fb      	str	r3, [r7, #12]
 80134e8:	e009      	b.n	80134fe <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80134ea:	687a      	ldr	r2, [r7, #4]
 80134ec:	68fb      	ldr	r3, [r7, #12]
 80134ee:	33e0      	adds	r3, #224	; 0xe0
 80134f0:	009b      	lsls	r3, r3, #2
 80134f2:	4413      	add	r3, r2
 80134f4:	2200      	movs	r2, #0
 80134f6:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80134f8:	68fb      	ldr	r3, [r7, #12]
 80134fa:	3301      	adds	r3, #1
 80134fc:	60fb      	str	r3, [r7, #12]
 80134fe:	68fb      	ldr	r3, [r7, #12]
 8013500:	2b0e      	cmp	r3, #14
 8013502:	d9f2      	bls.n	80134ea <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8013504:	2300      	movs	r3, #0
 8013506:	60fb      	str	r3, [r7, #12]
 8013508:	e009      	b.n	801351e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 801350a:	687a      	ldr	r2, [r7, #4]
 801350c:	68fb      	ldr	r3, [r7, #12]
 801350e:	4413      	add	r3, r2
 8013510:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8013514:	2200      	movs	r2, #0
 8013516:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8013518:	68fb      	ldr	r3, [r7, #12]
 801351a:	3301      	adds	r3, #1
 801351c:	60fb      	str	r3, [r7, #12]
 801351e:	68fb      	ldr	r3, [r7, #12]
 8013520:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013524:	d3f1      	bcc.n	801350a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8013526:	687b      	ldr	r3, [r7, #4]
 8013528:	2200      	movs	r2, #0
 801352a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 801352c:	687b      	ldr	r3, [r7, #4]
 801352e:	2200      	movs	r2, #0
 8013530:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8013532:	687b      	ldr	r3, [r7, #4]
 8013534:	2201      	movs	r2, #1
 8013536:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8013538:	687b      	ldr	r3, [r7, #4]
 801353a:	2200      	movs	r2, #0
 801353c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8013540:	687b      	ldr	r3, [r7, #4]
 8013542:	2201      	movs	r2, #1
 8013544:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8013546:	687b      	ldr	r3, [r7, #4]
 8013548:	2240      	movs	r2, #64	; 0x40
 801354a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 801354c:	687b      	ldr	r3, [r7, #4]
 801354e:	2200      	movs	r2, #0
 8013550:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8013552:	687b      	ldr	r3, [r7, #4]
 8013554:	2200      	movs	r2, #0
 8013556:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 801355a:	687b      	ldr	r3, [r7, #4]
 801355c:	2201      	movs	r2, #1
 801355e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8013562:	687b      	ldr	r3, [r7, #4]
 8013564:	2200      	movs	r2, #0
 8013566:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 801356a:	687b      	ldr	r3, [r7, #4]
 801356c:	2200      	movs	r2, #0
 801356e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8013572:	2300      	movs	r3, #0
}
 8013574:	4618      	mov	r0, r3
 8013576:	3714      	adds	r7, #20
 8013578:	46bd      	mov	sp, r7
 801357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801357e:	4770      	bx	lr

08013580 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8013580:	b480      	push	{r7}
 8013582:	b085      	sub	sp, #20
 8013584:	af00      	add	r7, sp, #0
 8013586:	6078      	str	r0, [r7, #4]
 8013588:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 801358a:	2300      	movs	r3, #0
 801358c:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 801358e:	683b      	ldr	r3, [r7, #0]
 8013590:	2b00      	cmp	r3, #0
 8013592:	d016      	beq.n	80135c2 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8013594:	687b      	ldr	r3, [r7, #4]
 8013596:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 801359a:	2b00      	cmp	r3, #0
 801359c:	d10e      	bne.n	80135bc <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 801359e:	687b      	ldr	r3, [r7, #4]
 80135a0:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80135a4:	1c59      	adds	r1, r3, #1
 80135a6:	687a      	ldr	r2, [r7, #4]
 80135a8:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80135ac:	687a      	ldr	r2, [r7, #4]
 80135ae:	33de      	adds	r3, #222	; 0xde
 80135b0:	6839      	ldr	r1, [r7, #0]
 80135b2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80135b6:	2300      	movs	r3, #0
 80135b8:	73fb      	strb	r3, [r7, #15]
 80135ba:	e004      	b.n	80135c6 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80135bc:	2302      	movs	r3, #2
 80135be:	73fb      	strb	r3, [r7, #15]
 80135c0:	e001      	b.n	80135c6 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80135c2:	2302      	movs	r3, #2
 80135c4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80135c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80135c8:	4618      	mov	r0, r3
 80135ca:	3714      	adds	r7, #20
 80135cc:	46bd      	mov	sp, r7
 80135ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135d2:	4770      	bx	lr

080135d4 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80135d4:	b480      	push	{r7}
 80135d6:	b085      	sub	sp, #20
 80135d8:	af00      	add	r7, sp, #0
 80135da:	6078      	str	r0, [r7, #4]
 80135dc:	460b      	mov	r3, r1
 80135de:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80135e0:	2300      	movs	r3, #0
 80135e2:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80135e4:	687b      	ldr	r3, [r7, #4]
 80135e6:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80135ea:	78fa      	ldrb	r2, [r7, #3]
 80135ec:	429a      	cmp	r2, r3
 80135ee:	d204      	bcs.n	80135fa <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80135f0:	687b      	ldr	r3, [r7, #4]
 80135f2:	78fa      	ldrb	r2, [r7, #3]
 80135f4:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 80135f8:	e001      	b.n	80135fe <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80135fa:	2302      	movs	r3, #2
 80135fc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80135fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8013600:	4618      	mov	r0, r3
 8013602:	3714      	adds	r7, #20
 8013604:	46bd      	mov	sp, r7
 8013606:	f85d 7b04 	ldr.w	r7, [sp], #4
 801360a:	4770      	bx	lr

0801360c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 801360c:	b480      	push	{r7}
 801360e:	b087      	sub	sp, #28
 8013610:	af00      	add	r7, sp, #0
 8013612:	6078      	str	r0, [r7, #4]
 8013614:	4608      	mov	r0, r1
 8013616:	4611      	mov	r1, r2
 8013618:	461a      	mov	r2, r3
 801361a:	4603      	mov	r3, r0
 801361c:	70fb      	strb	r3, [r7, #3]
 801361e:	460b      	mov	r3, r1
 8013620:	70bb      	strb	r3, [r7, #2]
 8013622:	4613      	mov	r3, r2
 8013624:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8013626:	2300      	movs	r3, #0
 8013628:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 801362a:	2300      	movs	r3, #0
 801362c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 801362e:	687b      	ldr	r3, [r7, #4]
 8013630:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8013634:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8013636:	e025      	b.n	8013684 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8013638:	7dfb      	ldrb	r3, [r7, #23]
 801363a:	221a      	movs	r2, #26
 801363c:	fb02 f303 	mul.w	r3, r2, r3
 8013640:	3308      	adds	r3, #8
 8013642:	68fa      	ldr	r2, [r7, #12]
 8013644:	4413      	add	r3, r2
 8013646:	3302      	adds	r3, #2
 8013648:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 801364a:	693b      	ldr	r3, [r7, #16]
 801364c:	795b      	ldrb	r3, [r3, #5]
 801364e:	78fa      	ldrb	r2, [r7, #3]
 8013650:	429a      	cmp	r2, r3
 8013652:	d002      	beq.n	801365a <USBH_FindInterface+0x4e>
 8013654:	78fb      	ldrb	r3, [r7, #3]
 8013656:	2bff      	cmp	r3, #255	; 0xff
 8013658:	d111      	bne.n	801367e <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 801365a:	693b      	ldr	r3, [r7, #16]
 801365c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 801365e:	78ba      	ldrb	r2, [r7, #2]
 8013660:	429a      	cmp	r2, r3
 8013662:	d002      	beq.n	801366a <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8013664:	78bb      	ldrb	r3, [r7, #2]
 8013666:	2bff      	cmp	r3, #255	; 0xff
 8013668:	d109      	bne.n	801367e <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 801366a:	693b      	ldr	r3, [r7, #16]
 801366c:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 801366e:	787a      	ldrb	r2, [r7, #1]
 8013670:	429a      	cmp	r2, r3
 8013672:	d002      	beq.n	801367a <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8013674:	787b      	ldrb	r3, [r7, #1]
 8013676:	2bff      	cmp	r3, #255	; 0xff
 8013678:	d101      	bne.n	801367e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 801367a:	7dfb      	ldrb	r3, [r7, #23]
 801367c:	e006      	b.n	801368c <USBH_FindInterface+0x80>
    }
    if_ix++;
 801367e:	7dfb      	ldrb	r3, [r7, #23]
 8013680:	3301      	adds	r3, #1
 8013682:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8013684:	7dfb      	ldrb	r3, [r7, #23]
 8013686:	2b01      	cmp	r3, #1
 8013688:	d9d6      	bls.n	8013638 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 801368a:	23ff      	movs	r3, #255	; 0xff
}
 801368c:	4618      	mov	r0, r3
 801368e:	371c      	adds	r7, #28
 8013690:	46bd      	mov	sp, r7
 8013692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013696:	4770      	bx	lr

08013698 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8013698:	b580      	push	{r7, lr}
 801369a:	b082      	sub	sp, #8
 801369c:	af00      	add	r7, sp, #0
 801369e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80136a0:	6878      	ldr	r0, [r7, #4]
 80136a2:	f004 fb77 	bl	8017d94 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 80136a6:	2101      	movs	r1, #1
 80136a8:	6878      	ldr	r0, [r7, #4]
 80136aa:	f004 fc90 	bl	8017fce <USBH_LL_DriverVBUS>

  return USBH_OK;
 80136ae:	2300      	movs	r3, #0
}
 80136b0:	4618      	mov	r0, r3
 80136b2:	3708      	adds	r7, #8
 80136b4:	46bd      	mov	sp, r7
 80136b6:	bd80      	pop	{r7, pc}

080136b8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80136b8:	b580      	push	{r7, lr}
 80136ba:	b088      	sub	sp, #32
 80136bc:	af04      	add	r7, sp, #16
 80136be:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80136c0:	2302      	movs	r3, #2
 80136c2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80136c4:	2300      	movs	r3, #0
 80136c6:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80136c8:	687b      	ldr	r3, [r7, #4]
 80136ca:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80136ce:	b2db      	uxtb	r3, r3
 80136d0:	2b01      	cmp	r3, #1
 80136d2:	d102      	bne.n	80136da <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80136d4:	687b      	ldr	r3, [r7, #4]
 80136d6:	2203      	movs	r2, #3
 80136d8:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80136da:	687b      	ldr	r3, [r7, #4]
 80136dc:	781b      	ldrb	r3, [r3, #0]
 80136de:	b2db      	uxtb	r3, r3
 80136e0:	2b0b      	cmp	r3, #11
 80136e2:	f200 823c 	bhi.w	8013b5e <USBH_Process+0x4a6>
 80136e6:	a201      	add	r2, pc, #4	; (adr r2, 80136ec <USBH_Process+0x34>)
 80136e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80136ec:	0801371d 	.word	0x0801371d
 80136f0:	0801376b 	.word	0x0801376b
 80136f4:	080137ef 	.word	0x080137ef
 80136f8:	08013add 	.word	0x08013add
 80136fc:	08013b5f 	.word	0x08013b5f
 8013700:	080138af 	.word	0x080138af
 8013704:	08013a67 	.word	0x08013a67
 8013708:	08013901 	.word	0x08013901
 801370c:	0801393d 	.word	0x0801393d
 8013710:	08013977 	.word	0x08013977
 8013714:	080139bf 	.word	0x080139bf
 8013718:	08013ac5 	.word	0x08013ac5
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 801371c:	687b      	ldr	r3, [r7, #4]
 801371e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8013722:	b2db      	uxtb	r3, r3
 8013724:	2b00      	cmp	r3, #0
 8013726:	f000 821c 	beq.w	8013b62 <USBH_Process+0x4aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 801372a:	687b      	ldr	r3, [r7, #4]
 801372c:	2201      	movs	r2, #1
 801372e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8013730:	20c8      	movs	r0, #200	; 0xc8
 8013732:	f004 fc93 	bl	801805c <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8013736:	6878      	ldr	r0, [r7, #4]
 8013738:	f004 fb89 	bl	8017e4e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 801373c:	687b      	ldr	r3, [r7, #4]
 801373e:	2200      	movs	r2, #0
 8013740:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8013744:	687b      	ldr	r3, [r7, #4]
 8013746:	2200      	movs	r2, #0
 8013748:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 801374c:	687b      	ldr	r3, [r7, #4]
 801374e:	2201      	movs	r2, #1
 8013750:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8013754:	687b      	ldr	r3, [r7, #4]
 8013756:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801375a:	687b      	ldr	r3, [r7, #4]
 801375c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8013760:	2200      	movs	r2, #0
 8013762:	4619      	mov	r1, r3
 8013764:	f001 fd9e 	bl	80152a4 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8013768:	e1fb      	b.n	8013b62 <USBH_Process+0x4aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 801376a:	687b      	ldr	r3, [r7, #4]
 801376c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8013770:	2b01      	cmp	r3, #1
 8013772:	d107      	bne.n	8013784 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8013774:	687b      	ldr	r3, [r7, #4]
 8013776:	2200      	movs	r2, #0
 8013778:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 801377c:	687b      	ldr	r3, [r7, #4]
 801377e:	2202      	movs	r2, #2
 8013780:	701a      	strb	r2, [r3, #0]
 8013782:	e025      	b.n	80137d0 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8013784:	687b      	ldr	r3, [r7, #4]
 8013786:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 801378a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801378e:	d914      	bls.n	80137ba <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 8013790:	687b      	ldr	r3, [r7, #4]
 8013792:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8013796:	3301      	adds	r3, #1
 8013798:	b2da      	uxtb	r2, r3
 801379a:	687b      	ldr	r3, [r7, #4]
 801379c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80137a0:	687b      	ldr	r3, [r7, #4]
 80137a2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80137a6:	2b03      	cmp	r3, #3
 80137a8:	d903      	bls.n	80137b2 <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 80137aa:	687b      	ldr	r3, [r7, #4]
 80137ac:	220d      	movs	r2, #13
 80137ae:	701a      	strb	r2, [r3, #0]
 80137b0:	e00e      	b.n	80137d0 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 80137b2:	687b      	ldr	r3, [r7, #4]
 80137b4:	2200      	movs	r2, #0
 80137b6:	701a      	strb	r2, [r3, #0]
 80137b8:	e00a      	b.n	80137d0 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 80137ba:	687b      	ldr	r3, [r7, #4]
 80137bc:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80137c0:	f103 020a 	add.w	r2, r3, #10
 80137c4:	687b      	ldr	r3, [r7, #4]
 80137c6:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80137ca:	200a      	movs	r0, #10
 80137cc:	f004 fc46 	bl	801805c <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80137d0:	687b      	ldr	r3, [r7, #4]
 80137d2:	2201      	movs	r2, #1
 80137d4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80137d8:	687b      	ldr	r3, [r7, #4]
 80137da:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80137de:	687b      	ldr	r3, [r7, #4]
 80137e0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80137e4:	2200      	movs	r2, #0
 80137e6:	4619      	mov	r1, r3
 80137e8:	f001 fd5c 	bl	80152a4 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80137ec:	e1c0      	b.n	8013b70 <USBH_Process+0x4b8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80137ee:	687b      	ldr	r3, [r7, #4]
 80137f0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80137f4:	2b00      	cmp	r3, #0
 80137f6:	d005      	beq.n	8013804 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80137f8:	687b      	ldr	r3, [r7, #4]
 80137fa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80137fe:	2104      	movs	r1, #4
 8013800:	6878      	ldr	r0, [r7, #4]
 8013802:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8013804:	2064      	movs	r0, #100	; 0x64
 8013806:	f004 fc29 	bl	801805c <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 801380a:	6878      	ldr	r0, [r7, #4]
 801380c:	f004 faf8 	bl	8017e00 <USBH_LL_GetSpeed>
 8013810:	4603      	mov	r3, r0
 8013812:	461a      	mov	r2, r3
 8013814:	687b      	ldr	r3, [r7, #4]
 8013816:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 801381a:	687b      	ldr	r3, [r7, #4]
 801381c:	2205      	movs	r2, #5
 801381e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8013820:	2100      	movs	r1, #0
 8013822:	6878      	ldr	r0, [r7, #4]
 8013824:	f001 fb1f 	bl	8014e66 <USBH_AllocPipe>
 8013828:	4603      	mov	r3, r0
 801382a:	461a      	mov	r2, r3
 801382c:	687b      	ldr	r3, [r7, #4]
 801382e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8013830:	2180      	movs	r1, #128	; 0x80
 8013832:	6878      	ldr	r0, [r7, #4]
 8013834:	f001 fb17 	bl	8014e66 <USBH_AllocPipe>
 8013838:	4603      	mov	r3, r0
 801383a:	461a      	mov	r2, r3
 801383c:	687b      	ldr	r3, [r7, #4]
 801383e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8013840:	687b      	ldr	r3, [r7, #4]
 8013842:	7919      	ldrb	r1, [r3, #4]
 8013844:	687b      	ldr	r3, [r7, #4]
 8013846:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 801384a:	687b      	ldr	r3, [r7, #4]
 801384c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8013850:	687a      	ldr	r2, [r7, #4]
 8013852:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8013854:	b292      	uxth	r2, r2
 8013856:	9202      	str	r2, [sp, #8]
 8013858:	2200      	movs	r2, #0
 801385a:	9201      	str	r2, [sp, #4]
 801385c:	9300      	str	r3, [sp, #0]
 801385e:	4603      	mov	r3, r0
 8013860:	2280      	movs	r2, #128	; 0x80
 8013862:	6878      	ldr	r0, [r7, #4]
 8013864:	f001 fad0 	bl	8014e08 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8013868:	687b      	ldr	r3, [r7, #4]
 801386a:	7959      	ldrb	r1, [r3, #5]
 801386c:	687b      	ldr	r3, [r7, #4]
 801386e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8013872:	687b      	ldr	r3, [r7, #4]
 8013874:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8013878:	687a      	ldr	r2, [r7, #4]
 801387a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 801387c:	b292      	uxth	r2, r2
 801387e:	9202      	str	r2, [sp, #8]
 8013880:	2200      	movs	r2, #0
 8013882:	9201      	str	r2, [sp, #4]
 8013884:	9300      	str	r3, [sp, #0]
 8013886:	4603      	mov	r3, r0
 8013888:	2200      	movs	r2, #0
 801388a:	6878      	ldr	r0, [r7, #4]
 801388c:	f001 fabc 	bl	8014e08 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8013890:	687b      	ldr	r3, [r7, #4]
 8013892:	2201      	movs	r2, #1
 8013894:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8013898:	687b      	ldr	r3, [r7, #4]
 801389a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801389e:	687b      	ldr	r3, [r7, #4]
 80138a0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80138a4:	2200      	movs	r2, #0
 80138a6:	4619      	mov	r1, r3
 80138a8:	f001 fcfc 	bl	80152a4 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80138ac:	e160      	b.n	8013b70 <USBH_Process+0x4b8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80138ae:	6878      	ldr	r0, [r7, #4]
 80138b0:	f000 f964 	bl	8013b7c <USBH_HandleEnum>
 80138b4:	4603      	mov	r3, r0
 80138b6:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80138b8:	7bbb      	ldrb	r3, [r7, #14]
 80138ba:	b2db      	uxtb	r3, r3
 80138bc:	2b00      	cmp	r3, #0
 80138be:	f040 8152 	bne.w	8013b66 <USBH_Process+0x4ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80138c2:	687b      	ldr	r3, [r7, #4]
 80138c4:	2200      	movs	r2, #0
 80138c6:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80138ca:	687b      	ldr	r3, [r7, #4]
 80138cc:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80138d0:	2b01      	cmp	r3, #1
 80138d2:	d103      	bne.n	80138dc <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80138d4:	687b      	ldr	r3, [r7, #4]
 80138d6:	2208      	movs	r2, #8
 80138d8:	701a      	strb	r2, [r3, #0]
 80138da:	e002      	b.n	80138e2 <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 80138dc:	687b      	ldr	r3, [r7, #4]
 80138de:	2207      	movs	r2, #7
 80138e0:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80138e2:	687b      	ldr	r3, [r7, #4]
 80138e4:	2205      	movs	r2, #5
 80138e6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80138ea:	687b      	ldr	r3, [r7, #4]
 80138ec:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80138f0:	687b      	ldr	r3, [r7, #4]
 80138f2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80138f6:	2200      	movs	r2, #0
 80138f8:	4619      	mov	r1, r3
 80138fa:	f001 fcd3 	bl	80152a4 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80138fe:	e132      	b.n	8013b66 <USBH_Process+0x4ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8013900:	687b      	ldr	r3, [r7, #4]
 8013902:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8013906:	2b00      	cmp	r3, #0
 8013908:	f000 812f 	beq.w	8013b6a <USBH_Process+0x4b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 801390c:	687b      	ldr	r3, [r7, #4]
 801390e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8013912:	2101      	movs	r1, #1
 8013914:	6878      	ldr	r0, [r7, #4]
 8013916:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8013918:	687b      	ldr	r3, [r7, #4]
 801391a:	2208      	movs	r2, #8
 801391c:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 801391e:	687b      	ldr	r3, [r7, #4]
 8013920:	2205      	movs	r2, #5
 8013922:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8013926:	687b      	ldr	r3, [r7, #4]
 8013928:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801392c:	687b      	ldr	r3, [r7, #4]
 801392e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8013932:	2200      	movs	r2, #0
 8013934:	4619      	mov	r1, r3
 8013936:	f001 fcb5 	bl	80152a4 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 801393a:	e116      	b.n	8013b6a <USBH_Process+0x4b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 801393c:	687b      	ldr	r3, [r7, #4]
 801393e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8013942:	b29b      	uxth	r3, r3
 8013944:	4619      	mov	r1, r3
 8013946:	6878      	ldr	r0, [r7, #4]
 8013948:	f000 fcf6 	bl	8014338 <USBH_SetCfg>
 801394c:	4603      	mov	r3, r0
 801394e:	2b00      	cmp	r3, #0
 8013950:	d102      	bne.n	8013958 <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8013952:	687b      	ldr	r3, [r7, #4]
 8013954:	2209      	movs	r2, #9
 8013956:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8013958:	687b      	ldr	r3, [r7, #4]
 801395a:	2201      	movs	r2, #1
 801395c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8013960:	687b      	ldr	r3, [r7, #4]
 8013962:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8013966:	687b      	ldr	r3, [r7, #4]
 8013968:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 801396c:	2200      	movs	r2, #0
 801396e:	4619      	mov	r1, r3
 8013970:	f001 fc98 	bl	80152a4 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8013974:	e0fc      	b.n	8013b70 <USBH_Process+0x4b8>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8013976:	687b      	ldr	r3, [r7, #4]
 8013978:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 801397c:	f003 0320 	and.w	r3, r3, #32
 8013980:	2b00      	cmp	r3, #0
 8013982:	d00a      	beq.n	801399a <USBH_Process+0x2e2>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8013984:	2101      	movs	r1, #1
 8013986:	6878      	ldr	r0, [r7, #4]
 8013988:	f000 fcf9 	bl	801437e <USBH_SetFeature>
 801398c:	4603      	mov	r3, r0
 801398e:	2b00      	cmp	r3, #0
 8013990:	d106      	bne.n	80139a0 <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8013992:	687b      	ldr	r3, [r7, #4]
 8013994:	220a      	movs	r2, #10
 8013996:	701a      	strb	r2, [r3, #0]
 8013998:	e002      	b.n	80139a0 <USBH_Process+0x2e8>
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 801399a:	687b      	ldr	r3, [r7, #4]
 801399c:	220a      	movs	r2, #10
 801399e:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80139a0:	687b      	ldr	r3, [r7, #4]
 80139a2:	2201      	movs	r2, #1
 80139a4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80139a8:	687b      	ldr	r3, [r7, #4]
 80139aa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80139ae:	687b      	ldr	r3, [r7, #4]
 80139b0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80139b4:	2200      	movs	r2, #0
 80139b6:	4619      	mov	r1, r3
 80139b8:	f001 fc74 	bl	80152a4 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80139bc:	e0d8      	b.n	8013b70 <USBH_Process+0x4b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80139be:	687b      	ldr	r3, [r7, #4]
 80139c0:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80139c4:	2b00      	cmp	r3, #0
 80139c6:	d03f      	beq.n	8013a48 <USBH_Process+0x390>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80139c8:	687b      	ldr	r3, [r7, #4]
 80139ca:	2200      	movs	r2, #0
 80139cc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80139d0:	2300      	movs	r3, #0
 80139d2:	73fb      	strb	r3, [r7, #15]
 80139d4:	e016      	b.n	8013a04 <USBH_Process+0x34c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80139d6:	7bfa      	ldrb	r2, [r7, #15]
 80139d8:	687b      	ldr	r3, [r7, #4]
 80139da:	32de      	adds	r2, #222	; 0xde
 80139dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80139e0:	791a      	ldrb	r2, [r3, #4]
 80139e2:	687b      	ldr	r3, [r7, #4]
 80139e4:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 80139e8:	429a      	cmp	r2, r3
 80139ea:	d108      	bne.n	80139fe <USBH_Process+0x346>
          {
            phost->pActiveClass = phost->pClass[idx];
 80139ec:	7bfa      	ldrb	r2, [r7, #15]
 80139ee:	687b      	ldr	r3, [r7, #4]
 80139f0:	32de      	adds	r2, #222	; 0xde
 80139f2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80139f6:	687b      	ldr	r3, [r7, #4]
 80139f8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 80139fc:	e005      	b.n	8013a0a <USBH_Process+0x352>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80139fe:	7bfb      	ldrb	r3, [r7, #15]
 8013a00:	3301      	adds	r3, #1
 8013a02:	73fb      	strb	r3, [r7, #15]
 8013a04:	7bfb      	ldrb	r3, [r7, #15]
 8013a06:	2b00      	cmp	r3, #0
 8013a08:	d0e5      	beq.n	80139d6 <USBH_Process+0x31e>
          }
        }

        if (phost->pActiveClass != NULL)
 8013a0a:	687b      	ldr	r3, [r7, #4]
 8013a0c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8013a10:	2b00      	cmp	r3, #0
 8013a12:	d016      	beq.n	8013a42 <USBH_Process+0x38a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8013a14:	687b      	ldr	r3, [r7, #4]
 8013a16:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8013a1a:	689b      	ldr	r3, [r3, #8]
 8013a1c:	6878      	ldr	r0, [r7, #4]
 8013a1e:	4798      	blx	r3
 8013a20:	4603      	mov	r3, r0
 8013a22:	2b00      	cmp	r3, #0
 8013a24:	d109      	bne.n	8013a3a <USBH_Process+0x382>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8013a26:	687b      	ldr	r3, [r7, #4]
 8013a28:	2206      	movs	r2, #6
 8013a2a:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8013a2c:	687b      	ldr	r3, [r7, #4]
 8013a2e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8013a32:	2103      	movs	r1, #3
 8013a34:	6878      	ldr	r0, [r7, #4]
 8013a36:	4798      	blx	r3
 8013a38:	e006      	b.n	8013a48 <USBH_Process+0x390>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 8013a3a:	687b      	ldr	r3, [r7, #4]
 8013a3c:	220d      	movs	r2, #13
 8013a3e:	701a      	strb	r2, [r3, #0]
 8013a40:	e002      	b.n	8013a48 <USBH_Process+0x390>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 8013a42:	687b      	ldr	r3, [r7, #4]
 8013a44:	220d      	movs	r2, #13
 8013a46:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8013a48:	687b      	ldr	r3, [r7, #4]
 8013a4a:	2205      	movs	r2, #5
 8013a4c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8013a50:	687b      	ldr	r3, [r7, #4]
 8013a52:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8013a56:	687b      	ldr	r3, [r7, #4]
 8013a58:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8013a5c:	2200      	movs	r2, #0
 8013a5e:	4619      	mov	r1, r3
 8013a60:	f001 fc20 	bl	80152a4 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8013a64:	e084      	b.n	8013b70 <USBH_Process+0x4b8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8013a66:	687b      	ldr	r3, [r7, #4]
 8013a68:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8013a6c:	2b00      	cmp	r3, #0
 8013a6e:	d017      	beq.n	8013aa0 <USBH_Process+0x3e8>
      {
        status = phost->pActiveClass->Requests(phost);
 8013a70:	687b      	ldr	r3, [r7, #4]
 8013a72:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8013a76:	691b      	ldr	r3, [r3, #16]
 8013a78:	6878      	ldr	r0, [r7, #4]
 8013a7a:	4798      	blx	r3
 8013a7c:	4603      	mov	r3, r0
 8013a7e:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8013a80:	7bbb      	ldrb	r3, [r7, #14]
 8013a82:	b2db      	uxtb	r3, r3
 8013a84:	2b00      	cmp	r3, #0
 8013a86:	d103      	bne.n	8013a90 <USBH_Process+0x3d8>
        {
          phost->gState = HOST_CLASS;
 8013a88:	687b      	ldr	r3, [r7, #4]
 8013a8a:	220b      	movs	r2, #11
 8013a8c:	701a      	strb	r2, [r3, #0]
 8013a8e:	e00a      	b.n	8013aa6 <USBH_Process+0x3ee>
        }
        else if (status == USBH_FAIL)
 8013a90:	7bbb      	ldrb	r3, [r7, #14]
 8013a92:	b2db      	uxtb	r3, r3
 8013a94:	2b02      	cmp	r3, #2
 8013a96:	d106      	bne.n	8013aa6 <USBH_Process+0x3ee>
        {
          phost->gState = HOST_ABORT_STATE;
 8013a98:	687b      	ldr	r3, [r7, #4]
 8013a9a:	220d      	movs	r2, #13
 8013a9c:	701a      	strb	r2, [r3, #0]
 8013a9e:	e002      	b.n	8013aa6 <USBH_Process+0x3ee>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 8013aa0:	687b      	ldr	r3, [r7, #4]
 8013aa2:	220d      	movs	r2, #13
 8013aa4:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8013aa6:	687b      	ldr	r3, [r7, #4]
 8013aa8:	2205      	movs	r2, #5
 8013aaa:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8013aae:	687b      	ldr	r3, [r7, #4]
 8013ab0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8013ab4:	687b      	ldr	r3, [r7, #4]
 8013ab6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8013aba:	2200      	movs	r2, #0
 8013abc:	4619      	mov	r1, r3
 8013abe:	f001 fbf1 	bl	80152a4 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8013ac2:	e055      	b.n	8013b70 <USBH_Process+0x4b8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8013ac4:	687b      	ldr	r3, [r7, #4]
 8013ac6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8013aca:	2b00      	cmp	r3, #0
 8013acc:	d04f      	beq.n	8013b6e <USBH_Process+0x4b6>
      {
        phost->pActiveClass->BgndProcess(phost);
 8013ace:	687b      	ldr	r3, [r7, #4]
 8013ad0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8013ad4:	695b      	ldr	r3, [r3, #20]
 8013ad6:	6878      	ldr	r0, [r7, #4]
 8013ad8:	4798      	blx	r3
      }
      break;
 8013ada:	e048      	b.n	8013b6e <USBH_Process+0x4b6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8013adc:	687b      	ldr	r3, [r7, #4]
 8013ade:	2200      	movs	r2, #0
 8013ae0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8013ae4:	6878      	ldr	r0, [r7, #4]
 8013ae6:	f7ff fcf7 	bl	80134d8 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8013aea:	687b      	ldr	r3, [r7, #4]
 8013aec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8013af0:	2b00      	cmp	r3, #0
 8013af2:	d009      	beq.n	8013b08 <USBH_Process+0x450>
      {
        phost->pActiveClass->DeInit(phost);
 8013af4:	687b      	ldr	r3, [r7, #4]
 8013af6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8013afa:	68db      	ldr	r3, [r3, #12]
 8013afc:	6878      	ldr	r0, [r7, #4]
 8013afe:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8013b00:	687b      	ldr	r3, [r7, #4]
 8013b02:	2200      	movs	r2, #0
 8013b04:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8013b08:	687b      	ldr	r3, [r7, #4]
 8013b0a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8013b0e:	2b00      	cmp	r3, #0
 8013b10:	d005      	beq.n	8013b1e <USBH_Process+0x466>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8013b12:	687b      	ldr	r3, [r7, #4]
 8013b14:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8013b18:	2105      	movs	r1, #5
 8013b1a:	6878      	ldr	r0, [r7, #4]
 8013b1c:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8013b1e:	687b      	ldr	r3, [r7, #4]
 8013b20:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8013b24:	b2db      	uxtb	r3, r3
 8013b26:	2b01      	cmp	r3, #1
 8013b28:	d107      	bne.n	8013b3a <USBH_Process+0x482>
      {
        phost->device.is_ReEnumerated = 0U;
 8013b2a:	687b      	ldr	r3, [r7, #4]
 8013b2c:	2200      	movs	r2, #0
 8013b2e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8013b32:	6878      	ldr	r0, [r7, #4]
 8013b34:	f7ff fdb0 	bl	8013698 <USBH_Start>
 8013b38:	e002      	b.n	8013b40 <USBH_Process+0x488>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        USBH_LL_Start(phost);
 8013b3a:	6878      	ldr	r0, [r7, #4]
 8013b3c:	f004 f92a 	bl	8017d94 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8013b40:	687b      	ldr	r3, [r7, #4]
 8013b42:	2201      	movs	r2, #1
 8013b44:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8013b48:	687b      	ldr	r3, [r7, #4]
 8013b4a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8013b4e:	687b      	ldr	r3, [r7, #4]
 8013b50:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8013b54:	2200      	movs	r2, #0
 8013b56:	4619      	mov	r1, r3
 8013b58:	f001 fba4 	bl	80152a4 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8013b5c:	e008      	b.n	8013b70 <USBH_Process+0x4b8>

    case HOST_ABORT_STATE:
    default :
      break;
 8013b5e:	bf00      	nop
 8013b60:	e006      	b.n	8013b70 <USBH_Process+0x4b8>
      break;
 8013b62:	bf00      	nop
 8013b64:	e004      	b.n	8013b70 <USBH_Process+0x4b8>
      break;
 8013b66:	bf00      	nop
 8013b68:	e002      	b.n	8013b70 <USBH_Process+0x4b8>
    break;
 8013b6a:	bf00      	nop
 8013b6c:	e000      	b.n	8013b70 <USBH_Process+0x4b8>
      break;
 8013b6e:	bf00      	nop
  }
  return USBH_OK;
 8013b70:	2300      	movs	r3, #0
}
 8013b72:	4618      	mov	r0, r3
 8013b74:	3710      	adds	r7, #16
 8013b76:	46bd      	mov	sp, r7
 8013b78:	bd80      	pop	{r7, pc}
 8013b7a:	bf00      	nop

08013b7c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8013b7c:	b580      	push	{r7, lr}
 8013b7e:	b088      	sub	sp, #32
 8013b80:	af04      	add	r7, sp, #16
 8013b82:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8013b84:	2301      	movs	r3, #1
 8013b86:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8013b88:	2301      	movs	r3, #1
 8013b8a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8013b8c:	687b      	ldr	r3, [r7, #4]
 8013b8e:	785b      	ldrb	r3, [r3, #1]
 8013b90:	2b07      	cmp	r3, #7
 8013b92:	f200 8208 	bhi.w	8013fa6 <USBH_HandleEnum+0x42a>
 8013b96:	a201      	add	r2, pc, #4	; (adr r2, 8013b9c <USBH_HandleEnum+0x20>)
 8013b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013b9c:	08013bbd 	.word	0x08013bbd
 8013ba0:	08013c7b 	.word	0x08013c7b
 8013ba4:	08013ce5 	.word	0x08013ce5
 8013ba8:	08013d73 	.word	0x08013d73
 8013bac:	08013ddd 	.word	0x08013ddd
 8013bb0:	08013e4d 	.word	0x08013e4d
 8013bb4:	08013ee9 	.word	0x08013ee9
 8013bb8:	08013f67 	.word	0x08013f67
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8013bbc:	2108      	movs	r1, #8
 8013bbe:	6878      	ldr	r0, [r7, #4]
 8013bc0:	f000 faea 	bl	8014198 <USBH_Get_DevDesc>
 8013bc4:	4603      	mov	r3, r0
 8013bc6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8013bc8:	7bbb      	ldrb	r3, [r7, #14]
 8013bca:	2b00      	cmp	r3, #0
 8013bcc:	d130      	bne.n	8013c30 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8013bce:	687b      	ldr	r3, [r7, #4]
 8013bd0:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8013bd4:	687b      	ldr	r3, [r7, #4]
 8013bd6:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8013bd8:	687b      	ldr	r3, [r7, #4]
 8013bda:	2201      	movs	r2, #1
 8013bdc:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8013bde:	687b      	ldr	r3, [r7, #4]
 8013be0:	7919      	ldrb	r1, [r3, #4]
 8013be2:	687b      	ldr	r3, [r7, #4]
 8013be4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8013be8:	687b      	ldr	r3, [r7, #4]
 8013bea:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8013bee:	687a      	ldr	r2, [r7, #4]
 8013bf0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8013bf2:	b292      	uxth	r2, r2
 8013bf4:	9202      	str	r2, [sp, #8]
 8013bf6:	2200      	movs	r2, #0
 8013bf8:	9201      	str	r2, [sp, #4]
 8013bfa:	9300      	str	r3, [sp, #0]
 8013bfc:	4603      	mov	r3, r0
 8013bfe:	2280      	movs	r2, #128	; 0x80
 8013c00:	6878      	ldr	r0, [r7, #4]
 8013c02:	f001 f901 	bl	8014e08 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8013c06:	687b      	ldr	r3, [r7, #4]
 8013c08:	7959      	ldrb	r1, [r3, #5]
 8013c0a:	687b      	ldr	r3, [r7, #4]
 8013c0c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8013c10:	687b      	ldr	r3, [r7, #4]
 8013c12:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8013c16:	687a      	ldr	r2, [r7, #4]
 8013c18:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8013c1a:	b292      	uxth	r2, r2
 8013c1c:	9202      	str	r2, [sp, #8]
 8013c1e:	2200      	movs	r2, #0
 8013c20:	9201      	str	r2, [sp, #4]
 8013c22:	9300      	str	r3, [sp, #0]
 8013c24:	4603      	mov	r3, r0
 8013c26:	2200      	movs	r2, #0
 8013c28:	6878      	ldr	r0, [r7, #4]
 8013c2a:	f001 f8ed 	bl	8014e08 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8013c2e:	e1bc      	b.n	8013faa <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8013c30:	7bbb      	ldrb	r3, [r7, #14]
 8013c32:	2b03      	cmp	r3, #3
 8013c34:	f040 81b9 	bne.w	8013faa <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 8013c38:	687b      	ldr	r3, [r7, #4]
 8013c3a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8013c3e:	3301      	adds	r3, #1
 8013c40:	b2da      	uxtb	r2, r3
 8013c42:	687b      	ldr	r3, [r7, #4]
 8013c44:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8013c48:	687b      	ldr	r3, [r7, #4]
 8013c4a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8013c4e:	2b03      	cmp	r3, #3
 8013c50:	d903      	bls.n	8013c5a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8013c52:	687b      	ldr	r3, [r7, #4]
 8013c54:	220d      	movs	r2, #13
 8013c56:	701a      	strb	r2, [r3, #0]
      break;
 8013c58:	e1a7      	b.n	8013faa <USBH_HandleEnum+0x42e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8013c5a:	687b      	ldr	r3, [r7, #4]
 8013c5c:	795b      	ldrb	r3, [r3, #5]
 8013c5e:	4619      	mov	r1, r3
 8013c60:	6878      	ldr	r0, [r7, #4]
 8013c62:	f001 f921 	bl	8014ea8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8013c66:	687b      	ldr	r3, [r7, #4]
 8013c68:	791b      	ldrb	r3, [r3, #4]
 8013c6a:	4619      	mov	r1, r3
 8013c6c:	6878      	ldr	r0, [r7, #4]
 8013c6e:	f001 f91b 	bl	8014ea8 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8013c72:	687b      	ldr	r3, [r7, #4]
 8013c74:	2200      	movs	r2, #0
 8013c76:	701a      	strb	r2, [r3, #0]
      break;
 8013c78:	e197      	b.n	8013faa <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8013c7a:	2112      	movs	r1, #18
 8013c7c:	6878      	ldr	r0, [r7, #4]
 8013c7e:	f000 fa8b 	bl	8014198 <USBH_Get_DevDesc>
 8013c82:	4603      	mov	r3, r0
 8013c84:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8013c86:	7bbb      	ldrb	r3, [r7, #14]
 8013c88:	2b00      	cmp	r3, #0
 8013c8a:	d103      	bne.n	8013c94 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8013c8c:	687b      	ldr	r3, [r7, #4]
 8013c8e:	2202      	movs	r2, #2
 8013c90:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8013c92:	e18c      	b.n	8013fae <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8013c94:	7bbb      	ldrb	r3, [r7, #14]
 8013c96:	2b03      	cmp	r3, #3
 8013c98:	f040 8189 	bne.w	8013fae <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 8013c9c:	687b      	ldr	r3, [r7, #4]
 8013c9e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8013ca2:	3301      	adds	r3, #1
 8013ca4:	b2da      	uxtb	r2, r3
 8013ca6:	687b      	ldr	r3, [r7, #4]
 8013ca8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8013cac:	687b      	ldr	r3, [r7, #4]
 8013cae:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8013cb2:	2b03      	cmp	r3, #3
 8013cb4:	d903      	bls.n	8013cbe <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8013cb6:	687b      	ldr	r3, [r7, #4]
 8013cb8:	220d      	movs	r2, #13
 8013cba:	701a      	strb	r2, [r3, #0]
      break;
 8013cbc:	e177      	b.n	8013fae <USBH_HandleEnum+0x432>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8013cbe:	687b      	ldr	r3, [r7, #4]
 8013cc0:	795b      	ldrb	r3, [r3, #5]
 8013cc2:	4619      	mov	r1, r3
 8013cc4:	6878      	ldr	r0, [r7, #4]
 8013cc6:	f001 f8ef 	bl	8014ea8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8013cca:	687b      	ldr	r3, [r7, #4]
 8013ccc:	791b      	ldrb	r3, [r3, #4]
 8013cce:	4619      	mov	r1, r3
 8013cd0:	6878      	ldr	r0, [r7, #4]
 8013cd2:	f001 f8e9 	bl	8014ea8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8013cd6:	687b      	ldr	r3, [r7, #4]
 8013cd8:	2200      	movs	r2, #0
 8013cda:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8013cdc:	687b      	ldr	r3, [r7, #4]
 8013cde:	2200      	movs	r2, #0
 8013ce0:	701a      	strb	r2, [r3, #0]
      break;
 8013ce2:	e164      	b.n	8013fae <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8013ce4:	2101      	movs	r1, #1
 8013ce6:	6878      	ldr	r0, [r7, #4]
 8013ce8:	f000 fb02 	bl	80142f0 <USBH_SetAddress>
 8013cec:	4603      	mov	r3, r0
 8013cee:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8013cf0:	7bbb      	ldrb	r3, [r7, #14]
 8013cf2:	2b00      	cmp	r3, #0
 8013cf4:	d132      	bne.n	8013d5c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8013cf6:	2002      	movs	r0, #2
 8013cf8:	f004 f9b0 	bl	801805c <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8013cfc:	687b      	ldr	r3, [r7, #4]
 8013cfe:	2201      	movs	r2, #1
 8013d00:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8013d04:	687b      	ldr	r3, [r7, #4]
 8013d06:	2203      	movs	r2, #3
 8013d08:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8013d0a:	687b      	ldr	r3, [r7, #4]
 8013d0c:	7919      	ldrb	r1, [r3, #4]
 8013d0e:	687b      	ldr	r3, [r7, #4]
 8013d10:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8013d14:	687b      	ldr	r3, [r7, #4]
 8013d16:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8013d1a:	687a      	ldr	r2, [r7, #4]
 8013d1c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8013d1e:	b292      	uxth	r2, r2
 8013d20:	9202      	str	r2, [sp, #8]
 8013d22:	2200      	movs	r2, #0
 8013d24:	9201      	str	r2, [sp, #4]
 8013d26:	9300      	str	r3, [sp, #0]
 8013d28:	4603      	mov	r3, r0
 8013d2a:	2280      	movs	r2, #128	; 0x80
 8013d2c:	6878      	ldr	r0, [r7, #4]
 8013d2e:	f001 f86b 	bl	8014e08 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8013d32:	687b      	ldr	r3, [r7, #4]
 8013d34:	7959      	ldrb	r1, [r3, #5]
 8013d36:	687b      	ldr	r3, [r7, #4]
 8013d38:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8013d3c:	687b      	ldr	r3, [r7, #4]
 8013d3e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8013d42:	687a      	ldr	r2, [r7, #4]
 8013d44:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8013d46:	b292      	uxth	r2, r2
 8013d48:	9202      	str	r2, [sp, #8]
 8013d4a:	2200      	movs	r2, #0
 8013d4c:	9201      	str	r2, [sp, #4]
 8013d4e:	9300      	str	r3, [sp, #0]
 8013d50:	4603      	mov	r3, r0
 8013d52:	2200      	movs	r2, #0
 8013d54:	6878      	ldr	r0, [r7, #4]
 8013d56:	f001 f857 	bl	8014e08 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8013d5a:	e12a      	b.n	8013fb2 <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8013d5c:	7bbb      	ldrb	r3, [r7, #14]
 8013d5e:	2b03      	cmp	r3, #3
 8013d60:	f040 8127 	bne.w	8013fb2 <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 8013d64:	687b      	ldr	r3, [r7, #4]
 8013d66:	220d      	movs	r2, #13
 8013d68:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8013d6a:	687b      	ldr	r3, [r7, #4]
 8013d6c:	2200      	movs	r2, #0
 8013d6e:	705a      	strb	r2, [r3, #1]
      break;
 8013d70:	e11f      	b.n	8013fb2 <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8013d72:	2109      	movs	r1, #9
 8013d74:	6878      	ldr	r0, [r7, #4]
 8013d76:	f000 fa37 	bl	80141e8 <USBH_Get_CfgDesc>
 8013d7a:	4603      	mov	r3, r0
 8013d7c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8013d7e:	7bbb      	ldrb	r3, [r7, #14]
 8013d80:	2b00      	cmp	r3, #0
 8013d82:	d103      	bne.n	8013d8c <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8013d84:	687b      	ldr	r3, [r7, #4]
 8013d86:	2204      	movs	r2, #4
 8013d88:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8013d8a:	e114      	b.n	8013fb6 <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8013d8c:	7bbb      	ldrb	r3, [r7, #14]
 8013d8e:	2b03      	cmp	r3, #3
 8013d90:	f040 8111 	bne.w	8013fb6 <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 8013d94:	687b      	ldr	r3, [r7, #4]
 8013d96:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8013d9a:	3301      	adds	r3, #1
 8013d9c:	b2da      	uxtb	r2, r3
 8013d9e:	687b      	ldr	r3, [r7, #4]
 8013da0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8013da4:	687b      	ldr	r3, [r7, #4]
 8013da6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8013daa:	2b03      	cmp	r3, #3
 8013dac:	d903      	bls.n	8013db6 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8013dae:	687b      	ldr	r3, [r7, #4]
 8013db0:	220d      	movs	r2, #13
 8013db2:	701a      	strb	r2, [r3, #0]
      break;
 8013db4:	e0ff      	b.n	8013fb6 <USBH_HandleEnum+0x43a>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8013db6:	687b      	ldr	r3, [r7, #4]
 8013db8:	795b      	ldrb	r3, [r3, #5]
 8013dba:	4619      	mov	r1, r3
 8013dbc:	6878      	ldr	r0, [r7, #4]
 8013dbe:	f001 f873 	bl	8014ea8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8013dc2:	687b      	ldr	r3, [r7, #4]
 8013dc4:	791b      	ldrb	r3, [r3, #4]
 8013dc6:	4619      	mov	r1, r3
 8013dc8:	6878      	ldr	r0, [r7, #4]
 8013dca:	f001 f86d 	bl	8014ea8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8013dce:	687b      	ldr	r3, [r7, #4]
 8013dd0:	2200      	movs	r2, #0
 8013dd2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8013dd4:	687b      	ldr	r3, [r7, #4]
 8013dd6:	2200      	movs	r2, #0
 8013dd8:	701a      	strb	r2, [r3, #0]
      break;
 8013dda:	e0ec      	b.n	8013fb6 <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8013ddc:	687b      	ldr	r3, [r7, #4]
 8013dde:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8013de2:	4619      	mov	r1, r3
 8013de4:	6878      	ldr	r0, [r7, #4]
 8013de6:	f000 f9ff 	bl	80141e8 <USBH_Get_CfgDesc>
 8013dea:	4603      	mov	r3, r0
 8013dec:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8013dee:	7bbb      	ldrb	r3, [r7, #14]
 8013df0:	2b00      	cmp	r3, #0
 8013df2:	d103      	bne.n	8013dfc <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8013df4:	687b      	ldr	r3, [r7, #4]
 8013df6:	2205      	movs	r2, #5
 8013df8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8013dfa:	e0de      	b.n	8013fba <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8013dfc:	7bbb      	ldrb	r3, [r7, #14]
 8013dfe:	2b03      	cmp	r3, #3
 8013e00:	f040 80db 	bne.w	8013fba <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 8013e04:	687b      	ldr	r3, [r7, #4]
 8013e06:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8013e0a:	3301      	adds	r3, #1
 8013e0c:	b2da      	uxtb	r2, r3
 8013e0e:	687b      	ldr	r3, [r7, #4]
 8013e10:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8013e14:	687b      	ldr	r3, [r7, #4]
 8013e16:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8013e1a:	2b03      	cmp	r3, #3
 8013e1c:	d903      	bls.n	8013e26 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8013e1e:	687b      	ldr	r3, [r7, #4]
 8013e20:	220d      	movs	r2, #13
 8013e22:	701a      	strb	r2, [r3, #0]
      break;
 8013e24:	e0c9      	b.n	8013fba <USBH_HandleEnum+0x43e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8013e26:	687b      	ldr	r3, [r7, #4]
 8013e28:	795b      	ldrb	r3, [r3, #5]
 8013e2a:	4619      	mov	r1, r3
 8013e2c:	6878      	ldr	r0, [r7, #4]
 8013e2e:	f001 f83b 	bl	8014ea8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8013e32:	687b      	ldr	r3, [r7, #4]
 8013e34:	791b      	ldrb	r3, [r3, #4]
 8013e36:	4619      	mov	r1, r3
 8013e38:	6878      	ldr	r0, [r7, #4]
 8013e3a:	f001 f835 	bl	8014ea8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8013e3e:	687b      	ldr	r3, [r7, #4]
 8013e40:	2200      	movs	r2, #0
 8013e42:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8013e44:	687b      	ldr	r3, [r7, #4]
 8013e46:	2200      	movs	r2, #0
 8013e48:	701a      	strb	r2, [r3, #0]
      break;
 8013e4a:	e0b6      	b.n	8013fba <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8013e4c:	687b      	ldr	r3, [r7, #4]
 8013e4e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8013e52:	2b00      	cmp	r3, #0
 8013e54:	d036      	beq.n	8013ec4 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8013e56:	687b      	ldr	r3, [r7, #4]
 8013e58:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8013e5c:	687b      	ldr	r3, [r7, #4]
 8013e5e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8013e62:	23ff      	movs	r3, #255	; 0xff
 8013e64:	6878      	ldr	r0, [r7, #4]
 8013e66:	f000 f9e3 	bl	8014230 <USBH_Get_StringDesc>
 8013e6a:	4603      	mov	r3, r0
 8013e6c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8013e6e:	7bbb      	ldrb	r3, [r7, #14]
 8013e70:	2b00      	cmp	r3, #0
 8013e72:	d111      	bne.n	8013e98 <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8013e74:	687b      	ldr	r3, [r7, #4]
 8013e76:	2206      	movs	r2, #6
 8013e78:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8013e7a:	687b      	ldr	r3, [r7, #4]
 8013e7c:	2205      	movs	r2, #5
 8013e7e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8013e82:	687b      	ldr	r3, [r7, #4]
 8013e84:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8013e88:	687b      	ldr	r3, [r7, #4]
 8013e8a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8013e8e:	2200      	movs	r2, #0
 8013e90:	4619      	mov	r1, r3
 8013e92:	f001 fa07 	bl	80152a4 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8013e96:	e092      	b.n	8013fbe <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8013e98:	7bbb      	ldrb	r3, [r7, #14]
 8013e9a:	2b03      	cmp	r3, #3
 8013e9c:	f040 808f 	bne.w	8013fbe <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8013ea0:	687b      	ldr	r3, [r7, #4]
 8013ea2:	2206      	movs	r2, #6
 8013ea4:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8013ea6:	687b      	ldr	r3, [r7, #4]
 8013ea8:	2205      	movs	r2, #5
 8013eaa:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8013eae:	687b      	ldr	r3, [r7, #4]
 8013eb0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8013eb4:	687b      	ldr	r3, [r7, #4]
 8013eb6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8013eba:	2200      	movs	r2, #0
 8013ebc:	4619      	mov	r1, r3
 8013ebe:	f001 f9f1 	bl	80152a4 <osMessagePut>
      break;
 8013ec2:	e07c      	b.n	8013fbe <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8013ec4:	687b      	ldr	r3, [r7, #4]
 8013ec6:	2206      	movs	r2, #6
 8013ec8:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8013eca:	687b      	ldr	r3, [r7, #4]
 8013ecc:	2205      	movs	r2, #5
 8013ece:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8013ed2:	687b      	ldr	r3, [r7, #4]
 8013ed4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8013ed8:	687b      	ldr	r3, [r7, #4]
 8013eda:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8013ede:	2200      	movs	r2, #0
 8013ee0:	4619      	mov	r1, r3
 8013ee2:	f001 f9df 	bl	80152a4 <osMessagePut>
      break;
 8013ee6:	e06a      	b.n	8013fbe <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8013ee8:	687b      	ldr	r3, [r7, #4]
 8013eea:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8013eee:	2b00      	cmp	r3, #0
 8013ef0:	d027      	beq.n	8013f42 <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8013ef2:	687b      	ldr	r3, [r7, #4]
 8013ef4:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8013ef8:	687b      	ldr	r3, [r7, #4]
 8013efa:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8013efe:	23ff      	movs	r3, #255	; 0xff
 8013f00:	6878      	ldr	r0, [r7, #4]
 8013f02:	f000 f995 	bl	8014230 <USBH_Get_StringDesc>
 8013f06:	4603      	mov	r3, r0
 8013f08:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8013f0a:	7bbb      	ldrb	r3, [r7, #14]
 8013f0c:	2b00      	cmp	r3, #0
 8013f0e:	d103      	bne.n	8013f18 <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8013f10:	687b      	ldr	r3, [r7, #4]
 8013f12:	2207      	movs	r2, #7
 8013f14:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8013f16:	e054      	b.n	8013fc2 <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8013f18:	7bbb      	ldrb	r3, [r7, #14]
 8013f1a:	2b03      	cmp	r3, #3
 8013f1c:	d151      	bne.n	8013fc2 <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8013f1e:	687b      	ldr	r3, [r7, #4]
 8013f20:	2207      	movs	r2, #7
 8013f22:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8013f24:	687b      	ldr	r3, [r7, #4]
 8013f26:	2205      	movs	r2, #5
 8013f28:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8013f2c:	687b      	ldr	r3, [r7, #4]
 8013f2e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8013f32:	687b      	ldr	r3, [r7, #4]
 8013f34:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8013f38:	2200      	movs	r2, #0
 8013f3a:	4619      	mov	r1, r3
 8013f3c:	f001 f9b2 	bl	80152a4 <osMessagePut>
      break;
 8013f40:	e03f      	b.n	8013fc2 <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8013f42:	687b      	ldr	r3, [r7, #4]
 8013f44:	2207      	movs	r2, #7
 8013f46:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8013f48:	687b      	ldr	r3, [r7, #4]
 8013f4a:	2205      	movs	r2, #5
 8013f4c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8013f50:	687b      	ldr	r3, [r7, #4]
 8013f52:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8013f56:	687b      	ldr	r3, [r7, #4]
 8013f58:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8013f5c:	2200      	movs	r2, #0
 8013f5e:	4619      	mov	r1, r3
 8013f60:	f001 f9a0 	bl	80152a4 <osMessagePut>
      break;
 8013f64:	e02d      	b.n	8013fc2 <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8013f66:	687b      	ldr	r3, [r7, #4]
 8013f68:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8013f6c:	2b00      	cmp	r3, #0
 8013f6e:	d017      	beq.n	8013fa0 <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8013f70:	687b      	ldr	r3, [r7, #4]
 8013f72:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8013f76:	687b      	ldr	r3, [r7, #4]
 8013f78:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8013f7c:	23ff      	movs	r3, #255	; 0xff
 8013f7e:	6878      	ldr	r0, [r7, #4]
 8013f80:	f000 f956 	bl	8014230 <USBH_Get_StringDesc>
 8013f84:	4603      	mov	r3, r0
 8013f86:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8013f88:	7bbb      	ldrb	r3, [r7, #14]
 8013f8a:	2b00      	cmp	r3, #0
 8013f8c:	d102      	bne.n	8013f94 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8013f8e:	2300      	movs	r3, #0
 8013f90:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8013f92:	e018      	b.n	8013fc6 <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8013f94:	7bbb      	ldrb	r3, [r7, #14]
 8013f96:	2b03      	cmp	r3, #3
 8013f98:	d115      	bne.n	8013fc6 <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 8013f9a:	2300      	movs	r3, #0
 8013f9c:	73fb      	strb	r3, [r7, #15]
      break;
 8013f9e:	e012      	b.n	8013fc6 <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 8013fa0:	2300      	movs	r3, #0
 8013fa2:	73fb      	strb	r3, [r7, #15]
      break;
 8013fa4:	e00f      	b.n	8013fc6 <USBH_HandleEnum+0x44a>

    default:
      break;
 8013fa6:	bf00      	nop
 8013fa8:	e00e      	b.n	8013fc8 <USBH_HandleEnum+0x44c>
      break;
 8013faa:	bf00      	nop
 8013fac:	e00c      	b.n	8013fc8 <USBH_HandleEnum+0x44c>
      break;
 8013fae:	bf00      	nop
 8013fb0:	e00a      	b.n	8013fc8 <USBH_HandleEnum+0x44c>
      break;
 8013fb2:	bf00      	nop
 8013fb4:	e008      	b.n	8013fc8 <USBH_HandleEnum+0x44c>
      break;
 8013fb6:	bf00      	nop
 8013fb8:	e006      	b.n	8013fc8 <USBH_HandleEnum+0x44c>
      break;
 8013fba:	bf00      	nop
 8013fbc:	e004      	b.n	8013fc8 <USBH_HandleEnum+0x44c>
      break;
 8013fbe:	bf00      	nop
 8013fc0:	e002      	b.n	8013fc8 <USBH_HandleEnum+0x44c>
      break;
 8013fc2:	bf00      	nop
 8013fc4:	e000      	b.n	8013fc8 <USBH_HandleEnum+0x44c>
      break;
 8013fc6:	bf00      	nop
  }
  return Status;
 8013fc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8013fca:	4618      	mov	r0, r3
 8013fcc:	3710      	adds	r7, #16
 8013fce:	46bd      	mov	sp, r7
 8013fd0:	bd80      	pop	{r7, pc}
 8013fd2:	bf00      	nop

08013fd4 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8013fd4:	b480      	push	{r7}
 8013fd6:	b083      	sub	sp, #12
 8013fd8:	af00      	add	r7, sp, #0
 8013fda:	6078      	str	r0, [r7, #4]
 8013fdc:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8013fde:	687b      	ldr	r3, [r7, #4]
 8013fe0:	683a      	ldr	r2, [r7, #0]
 8013fe2:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8013fe6:	bf00      	nop
 8013fe8:	370c      	adds	r7, #12
 8013fea:	46bd      	mov	sp, r7
 8013fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ff0:	4770      	bx	lr

08013ff2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8013ff2:	b580      	push	{r7, lr}
 8013ff4:	b082      	sub	sp, #8
 8013ff6:	af00      	add	r7, sp, #0
 8013ff8:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8013ffa:	687b      	ldr	r3, [r7, #4]
 8013ffc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8014000:	1c5a      	adds	r2, r3, #1
 8014002:	687b      	ldr	r3, [r7, #4]
 8014004:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8014008:	6878      	ldr	r0, [r7, #4]
 801400a:	f000 f804 	bl	8014016 <USBH_HandleSof>
}
 801400e:	bf00      	nop
 8014010:	3708      	adds	r7, #8
 8014012:	46bd      	mov	sp, r7
 8014014:	bd80      	pop	{r7, pc}

08014016 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8014016:	b580      	push	{r7, lr}
 8014018:	b082      	sub	sp, #8
 801401a:	af00      	add	r7, sp, #0
 801401c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 801401e:	687b      	ldr	r3, [r7, #4]
 8014020:	781b      	ldrb	r3, [r3, #0]
 8014022:	b2db      	uxtb	r3, r3
 8014024:	2b0b      	cmp	r3, #11
 8014026:	d10a      	bne.n	801403e <USBH_HandleSof+0x28>
 8014028:	687b      	ldr	r3, [r7, #4]
 801402a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 801402e:	2b00      	cmp	r3, #0
 8014030:	d005      	beq.n	801403e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8014032:	687b      	ldr	r3, [r7, #4]
 8014034:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8014038:	699b      	ldr	r3, [r3, #24]
 801403a:	6878      	ldr	r0, [r7, #4]
 801403c:	4798      	blx	r3
  }
}
 801403e:	bf00      	nop
 8014040:	3708      	adds	r7, #8
 8014042:	46bd      	mov	sp, r7
 8014044:	bd80      	pop	{r7, pc}

08014046 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8014046:	b580      	push	{r7, lr}
 8014048:	b082      	sub	sp, #8
 801404a:	af00      	add	r7, sp, #0
 801404c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 801404e:	687b      	ldr	r3, [r7, #4]
 8014050:	2201      	movs	r2, #1
 8014052:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8014056:	687b      	ldr	r3, [r7, #4]
 8014058:	2201      	movs	r2, #1
 801405a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801405e:	687b      	ldr	r3, [r7, #4]
 8014060:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8014064:	687b      	ldr	r3, [r7, #4]
 8014066:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 801406a:	2200      	movs	r2, #0
 801406c:	4619      	mov	r1, r3
 801406e:	f001 f919 	bl	80152a4 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8014072:	bf00      	nop
}
 8014074:	3708      	adds	r7, #8
 8014076:	46bd      	mov	sp, r7
 8014078:	bd80      	pop	{r7, pc}

0801407a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 801407a:	b480      	push	{r7}
 801407c:	b083      	sub	sp, #12
 801407e:	af00      	add	r7, sp, #0
 8014080:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8014082:	687b      	ldr	r3, [r7, #4]
 8014084:	2200      	movs	r2, #0
 8014086:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 801408a:	bf00      	nop
}
 801408c:	370c      	adds	r7, #12
 801408e:	46bd      	mov	sp, r7
 8014090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014094:	4770      	bx	lr

08014096 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8014096:	b580      	push	{r7, lr}
 8014098:	b082      	sub	sp, #8
 801409a:	af00      	add	r7, sp, #0
 801409c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 801409e:	687b      	ldr	r3, [r7, #4]
 80140a0:	2201      	movs	r2, #1
 80140a2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80140a6:	687b      	ldr	r3, [r7, #4]
 80140a8:	2200      	movs	r2, #0
 80140aa:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80140ae:	687b      	ldr	r3, [r7, #4]
 80140b0:	2200      	movs	r2, #0
 80140b2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80140b6:	687b      	ldr	r3, [r7, #4]
 80140b8:	2201      	movs	r2, #1
 80140ba:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80140be:	687b      	ldr	r3, [r7, #4]
 80140c0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80140c4:	687b      	ldr	r3, [r7, #4]
 80140c6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80140ca:	2200      	movs	r2, #0
 80140cc:	4619      	mov	r1, r3
 80140ce:	f001 f8e9 	bl	80152a4 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80140d2:	2300      	movs	r3, #0
}
 80140d4:	4618      	mov	r0, r3
 80140d6:	3708      	adds	r7, #8
 80140d8:	46bd      	mov	sp, r7
 80140da:	bd80      	pop	{r7, pc}

080140dc <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80140dc:	b580      	push	{r7, lr}
 80140de:	b082      	sub	sp, #8
 80140e0:	af00      	add	r7, sp, #0
 80140e2:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80140e4:	687b      	ldr	r3, [r7, #4]
 80140e6:	2201      	movs	r2, #1
 80140e8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80140ec:	687b      	ldr	r3, [r7, #4]
 80140ee:	2200      	movs	r2, #0
 80140f0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80140f4:	687b      	ldr	r3, [r7, #4]
 80140f6:	2200      	movs	r2, #0
 80140f8:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 80140fc:	6878      	ldr	r0, [r7, #4]
 80140fe:	f003 fe64 	bl	8017dca <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8014102:	687b      	ldr	r3, [r7, #4]
 8014104:	791b      	ldrb	r3, [r3, #4]
 8014106:	4619      	mov	r1, r3
 8014108:	6878      	ldr	r0, [r7, #4]
 801410a:	f000 fecd 	bl	8014ea8 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 801410e:	687b      	ldr	r3, [r7, #4]
 8014110:	795b      	ldrb	r3, [r3, #5]
 8014112:	4619      	mov	r1, r3
 8014114:	6878      	ldr	r0, [r7, #4]
 8014116:	f000 fec7 	bl	8014ea8 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 801411a:	687b      	ldr	r3, [r7, #4]
 801411c:	2201      	movs	r2, #1
 801411e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014122:	687b      	ldr	r3, [r7, #4]
 8014124:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8014128:	687b      	ldr	r3, [r7, #4]
 801412a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 801412e:	2200      	movs	r2, #0
 8014130:	4619      	mov	r1, r3
 8014132:	f001 f8b7 	bl	80152a4 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8014136:	2300      	movs	r3, #0
}
 8014138:	4618      	mov	r0, r3
 801413a:	3708      	adds	r7, #8
 801413c:	46bd      	mov	sp, r7
 801413e:	bd80      	pop	{r7, pc}

08014140 <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 8014140:	b580      	push	{r7, lr}
 8014142:	b086      	sub	sp, #24
 8014144:	af00      	add	r7, sp, #0
 8014146:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8014148:	687b      	ldr	r3, [r7, #4]
 801414a:	f8d3 13d8 	ldr.w	r1, [r3, #984]	; 0x3d8
 801414e:	f107 030c 	add.w	r3, r7, #12
 8014152:	f04f 32ff 	mov.w	r2, #4294967295
 8014156:	4618      	mov	r0, r3
 8014158:	f001 f8e4 	bl	8015324 <osMessageGet>
    if (event.status == osEventMessage)
 801415c:	68fb      	ldr	r3, [r7, #12]
 801415e:	2b10      	cmp	r3, #16
 8014160:	d1f2      	bne.n	8014148 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 8014162:	6878      	ldr	r0, [r7, #4]
 8014164:	f7ff faa8 	bl	80136b8 <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8014168:	e7ee      	b.n	8014148 <USBH_Process_OS+0x8>

0801416a <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 801416a:	b580      	push	{r7, lr}
 801416c:	b082      	sub	sp, #8
 801416e:	af00      	add	r7, sp, #0
 8014170:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8014172:	687b      	ldr	r3, [r7, #4]
 8014174:	2201      	movs	r2, #1
 8014176:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801417a:	687b      	ldr	r3, [r7, #4]
 801417c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8014180:	687b      	ldr	r3, [r7, #4]
 8014182:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8014186:	2200      	movs	r2, #0
 8014188:	4619      	mov	r1, r3
 801418a:	f001 f88b 	bl	80152a4 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif

  return USBH_OK;
 801418e:	2300      	movs	r3, #0
}
 8014190:	4618      	mov	r0, r3
 8014192:	3708      	adds	r7, #8
 8014194:	46bd      	mov	sp, r7
 8014196:	bd80      	pop	{r7, pc}

08014198 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8014198:	b580      	push	{r7, lr}
 801419a:	b086      	sub	sp, #24
 801419c:	af02      	add	r7, sp, #8
 801419e:	6078      	str	r0, [r7, #4]
 80141a0:	460b      	mov	r3, r1
 80141a2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 80141a4:	687b      	ldr	r3, [r7, #4]
 80141a6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 80141aa:	78fb      	ldrb	r3, [r7, #3]
 80141ac:	b29b      	uxth	r3, r3
 80141ae:	9300      	str	r3, [sp, #0]
 80141b0:	4613      	mov	r3, r2
 80141b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80141b6:	2100      	movs	r1, #0
 80141b8:	6878      	ldr	r0, [r7, #4]
 80141ba:	f000 f864 	bl	8014286 <USBH_GetDescriptor>
 80141be:	4603      	mov	r3, r0
 80141c0:	73fb      	strb	r3, [r7, #15]
 80141c2:	7bfb      	ldrb	r3, [r7, #15]
 80141c4:	2b00      	cmp	r3, #0
 80141c6:	d10a      	bne.n	80141de <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80141c8:	687b      	ldr	r3, [r7, #4]
 80141ca:	f203 3026 	addw	r0, r3, #806	; 0x326
 80141ce:	687b      	ldr	r3, [r7, #4]
 80141d0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80141d4:	78fa      	ldrb	r2, [r7, #3]
 80141d6:	b292      	uxth	r2, r2
 80141d8:	4619      	mov	r1, r3
 80141da:	f000 f918 	bl	801440e <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 80141de:	7bfb      	ldrb	r3, [r7, #15]
}
 80141e0:	4618      	mov	r0, r3
 80141e2:	3710      	adds	r7, #16
 80141e4:	46bd      	mov	sp, r7
 80141e6:	bd80      	pop	{r7, pc}

080141e8 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 80141e8:	b580      	push	{r7, lr}
 80141ea:	b086      	sub	sp, #24
 80141ec:	af02      	add	r7, sp, #8
 80141ee:	6078      	str	r0, [r7, #4]
 80141f0:	460b      	mov	r3, r1
 80141f2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 80141f4:	687b      	ldr	r3, [r7, #4]
 80141f6:	331c      	adds	r3, #28
 80141f8:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80141fa:	887b      	ldrh	r3, [r7, #2]
 80141fc:	9300      	str	r3, [sp, #0]
 80141fe:	68fb      	ldr	r3, [r7, #12]
 8014200:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014204:	2100      	movs	r1, #0
 8014206:	6878      	ldr	r0, [r7, #4]
 8014208:	f000 f83d 	bl	8014286 <USBH_GetDescriptor>
 801420c:	4603      	mov	r3, r0
 801420e:	72fb      	strb	r3, [r7, #11]
 8014210:	7afb      	ldrb	r3, [r7, #11]
 8014212:	2b00      	cmp	r3, #0
 8014214:	d107      	bne.n	8014226 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8014216:	687b      	ldr	r3, [r7, #4]
 8014218:	f503 734e 	add.w	r3, r3, #824	; 0x338
 801421c:	887a      	ldrh	r2, [r7, #2]
 801421e:	68f9      	ldr	r1, [r7, #12]
 8014220:	4618      	mov	r0, r3
 8014222:	f000 f964 	bl	80144ee <USBH_ParseCfgDesc>
  }

  return status;
 8014226:	7afb      	ldrb	r3, [r7, #11]
}
 8014228:	4618      	mov	r0, r3
 801422a:	3710      	adds	r7, #16
 801422c:	46bd      	mov	sp, r7
 801422e:	bd80      	pop	{r7, pc}

08014230 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8014230:	b580      	push	{r7, lr}
 8014232:	b088      	sub	sp, #32
 8014234:	af02      	add	r7, sp, #8
 8014236:	60f8      	str	r0, [r7, #12]
 8014238:	607a      	str	r2, [r7, #4]
 801423a:	461a      	mov	r2, r3
 801423c:	460b      	mov	r3, r1
 801423e:	72fb      	strb	r3, [r7, #11]
 8014240:	4613      	mov	r3, r2
 8014242:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8014244:	7afb      	ldrb	r3, [r7, #11]
 8014246:	b29b      	uxth	r3, r3
 8014248:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 801424c:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 801424e:	68fb      	ldr	r3, [r7, #12]
 8014250:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8014254:	893b      	ldrh	r3, [r7, #8]
 8014256:	9300      	str	r3, [sp, #0]
 8014258:	460b      	mov	r3, r1
 801425a:	2100      	movs	r1, #0
 801425c:	68f8      	ldr	r0, [r7, #12]
 801425e:	f000 f812 	bl	8014286 <USBH_GetDescriptor>
 8014262:	4603      	mov	r3, r0
 8014264:	75fb      	strb	r3, [r7, #23]
 8014266:	7dfb      	ldrb	r3, [r7, #23]
 8014268:	2b00      	cmp	r3, #0
 801426a:	d107      	bne.n	801427c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 801426c:	68fb      	ldr	r3, [r7, #12]
 801426e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8014272:	893a      	ldrh	r2, [r7, #8]
 8014274:	6879      	ldr	r1, [r7, #4]
 8014276:	4618      	mov	r0, r3
 8014278:	f000 fa37 	bl	80146ea <USBH_ParseStringDesc>
  }

  return status;
 801427c:	7dfb      	ldrb	r3, [r7, #23]
}
 801427e:	4618      	mov	r0, r3
 8014280:	3718      	adds	r7, #24
 8014282:	46bd      	mov	sp, r7
 8014284:	bd80      	pop	{r7, pc}

08014286 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8014286:	b580      	push	{r7, lr}
 8014288:	b084      	sub	sp, #16
 801428a:	af00      	add	r7, sp, #0
 801428c:	60f8      	str	r0, [r7, #12]
 801428e:	607b      	str	r3, [r7, #4]
 8014290:	460b      	mov	r3, r1
 8014292:	72fb      	strb	r3, [r7, #11]
 8014294:	4613      	mov	r3, r2
 8014296:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8014298:	68fb      	ldr	r3, [r7, #12]
 801429a:	789b      	ldrb	r3, [r3, #2]
 801429c:	2b01      	cmp	r3, #1
 801429e:	d11c      	bne.n	80142da <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80142a0:	7afb      	ldrb	r3, [r7, #11]
 80142a2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80142a6:	b2da      	uxtb	r2, r3
 80142a8:	68fb      	ldr	r3, [r7, #12]
 80142aa:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80142ac:	68fb      	ldr	r3, [r7, #12]
 80142ae:	2206      	movs	r2, #6
 80142b0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80142b2:	68fb      	ldr	r3, [r7, #12]
 80142b4:	893a      	ldrh	r2, [r7, #8]
 80142b6:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80142b8:	893b      	ldrh	r3, [r7, #8]
 80142ba:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80142be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80142c2:	d104      	bne.n	80142ce <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80142c4:	68fb      	ldr	r3, [r7, #12]
 80142c6:	f240 4209 	movw	r2, #1033	; 0x409
 80142ca:	829a      	strh	r2, [r3, #20]
 80142cc:	e002      	b.n	80142d4 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80142ce:	68fb      	ldr	r3, [r7, #12]
 80142d0:	2200      	movs	r2, #0
 80142d2:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80142d4:	68fb      	ldr	r3, [r7, #12]
 80142d6:	8b3a      	ldrh	r2, [r7, #24]
 80142d8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80142da:	8b3b      	ldrh	r3, [r7, #24]
 80142dc:	461a      	mov	r2, r3
 80142de:	6879      	ldr	r1, [r7, #4]
 80142e0:	68f8      	ldr	r0, [r7, #12]
 80142e2:	f000 fa50 	bl	8014786 <USBH_CtlReq>
 80142e6:	4603      	mov	r3, r0
}
 80142e8:	4618      	mov	r0, r3
 80142ea:	3710      	adds	r7, #16
 80142ec:	46bd      	mov	sp, r7
 80142ee:	bd80      	pop	{r7, pc}

080142f0 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80142f0:	b580      	push	{r7, lr}
 80142f2:	b082      	sub	sp, #8
 80142f4:	af00      	add	r7, sp, #0
 80142f6:	6078      	str	r0, [r7, #4]
 80142f8:	460b      	mov	r3, r1
 80142fa:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80142fc:	687b      	ldr	r3, [r7, #4]
 80142fe:	789b      	ldrb	r3, [r3, #2]
 8014300:	2b01      	cmp	r3, #1
 8014302:	d10f      	bne.n	8014324 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8014304:	687b      	ldr	r3, [r7, #4]
 8014306:	2200      	movs	r2, #0
 8014308:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 801430a:	687b      	ldr	r3, [r7, #4]
 801430c:	2205      	movs	r2, #5
 801430e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8014310:	78fb      	ldrb	r3, [r7, #3]
 8014312:	b29a      	uxth	r2, r3
 8014314:	687b      	ldr	r3, [r7, #4]
 8014316:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8014318:	687b      	ldr	r3, [r7, #4]
 801431a:	2200      	movs	r2, #0
 801431c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 801431e:	687b      	ldr	r3, [r7, #4]
 8014320:	2200      	movs	r2, #0
 8014322:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8014324:	2200      	movs	r2, #0
 8014326:	2100      	movs	r1, #0
 8014328:	6878      	ldr	r0, [r7, #4]
 801432a:	f000 fa2c 	bl	8014786 <USBH_CtlReq>
 801432e:	4603      	mov	r3, r0
}
 8014330:	4618      	mov	r0, r3
 8014332:	3708      	adds	r7, #8
 8014334:	46bd      	mov	sp, r7
 8014336:	bd80      	pop	{r7, pc}

08014338 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8014338:	b580      	push	{r7, lr}
 801433a:	b082      	sub	sp, #8
 801433c:	af00      	add	r7, sp, #0
 801433e:	6078      	str	r0, [r7, #4]
 8014340:	460b      	mov	r3, r1
 8014342:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8014344:	687b      	ldr	r3, [r7, #4]
 8014346:	789b      	ldrb	r3, [r3, #2]
 8014348:	2b01      	cmp	r3, #1
 801434a:	d10e      	bne.n	801436a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 801434c:	687b      	ldr	r3, [r7, #4]
 801434e:	2200      	movs	r2, #0
 8014350:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8014352:	687b      	ldr	r3, [r7, #4]
 8014354:	2209      	movs	r2, #9
 8014356:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8014358:	687b      	ldr	r3, [r7, #4]
 801435a:	887a      	ldrh	r2, [r7, #2]
 801435c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 801435e:	687b      	ldr	r3, [r7, #4]
 8014360:	2200      	movs	r2, #0
 8014362:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8014364:	687b      	ldr	r3, [r7, #4]
 8014366:	2200      	movs	r2, #0
 8014368:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 801436a:	2200      	movs	r2, #0
 801436c:	2100      	movs	r1, #0
 801436e:	6878      	ldr	r0, [r7, #4]
 8014370:	f000 fa09 	bl	8014786 <USBH_CtlReq>
 8014374:	4603      	mov	r3, r0
}
 8014376:	4618      	mov	r0, r3
 8014378:	3708      	adds	r7, #8
 801437a:	46bd      	mov	sp, r7
 801437c:	bd80      	pop	{r7, pc}

0801437e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 801437e:	b580      	push	{r7, lr}
 8014380:	b082      	sub	sp, #8
 8014382:	af00      	add	r7, sp, #0
 8014384:	6078      	str	r0, [r7, #4]
 8014386:	460b      	mov	r3, r1
 8014388:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 801438a:	687b      	ldr	r3, [r7, #4]
 801438c:	789b      	ldrb	r3, [r3, #2]
 801438e:	2b01      	cmp	r3, #1
 8014390:	d10f      	bne.n	80143b2 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8014392:	687b      	ldr	r3, [r7, #4]
 8014394:	2200      	movs	r2, #0
 8014396:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8014398:	687b      	ldr	r3, [r7, #4]
 801439a:	2203      	movs	r2, #3
 801439c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 801439e:	78fb      	ldrb	r3, [r7, #3]
 80143a0:	b29a      	uxth	r2, r3
 80143a2:	687b      	ldr	r3, [r7, #4]
 80143a4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80143a6:	687b      	ldr	r3, [r7, #4]
 80143a8:	2200      	movs	r2, #0
 80143aa:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80143ac:	687b      	ldr	r3, [r7, #4]
 80143ae:	2200      	movs	r2, #0
 80143b0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80143b2:	2200      	movs	r2, #0
 80143b4:	2100      	movs	r1, #0
 80143b6:	6878      	ldr	r0, [r7, #4]
 80143b8:	f000 f9e5 	bl	8014786 <USBH_CtlReq>
 80143bc:	4603      	mov	r3, r0
}
 80143be:	4618      	mov	r0, r3
 80143c0:	3708      	adds	r7, #8
 80143c2:	46bd      	mov	sp, r7
 80143c4:	bd80      	pop	{r7, pc}

080143c6 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80143c6:	b580      	push	{r7, lr}
 80143c8:	b082      	sub	sp, #8
 80143ca:	af00      	add	r7, sp, #0
 80143cc:	6078      	str	r0, [r7, #4]
 80143ce:	460b      	mov	r3, r1
 80143d0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80143d2:	687b      	ldr	r3, [r7, #4]
 80143d4:	789b      	ldrb	r3, [r3, #2]
 80143d6:	2b01      	cmp	r3, #1
 80143d8:	d10f      	bne.n	80143fa <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80143da:	687b      	ldr	r3, [r7, #4]
 80143dc:	2202      	movs	r2, #2
 80143de:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80143e0:	687b      	ldr	r3, [r7, #4]
 80143e2:	2201      	movs	r2, #1
 80143e4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80143e6:	687b      	ldr	r3, [r7, #4]
 80143e8:	2200      	movs	r2, #0
 80143ea:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80143ec:	78fb      	ldrb	r3, [r7, #3]
 80143ee:	b29a      	uxth	r2, r3
 80143f0:	687b      	ldr	r3, [r7, #4]
 80143f2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80143f4:	687b      	ldr	r3, [r7, #4]
 80143f6:	2200      	movs	r2, #0
 80143f8:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 80143fa:	2200      	movs	r2, #0
 80143fc:	2100      	movs	r1, #0
 80143fe:	6878      	ldr	r0, [r7, #4]
 8014400:	f000 f9c1 	bl	8014786 <USBH_CtlReq>
 8014404:	4603      	mov	r3, r0
}
 8014406:	4618      	mov	r0, r3
 8014408:	3708      	adds	r7, #8
 801440a:	46bd      	mov	sp, r7
 801440c:	bd80      	pop	{r7, pc}

0801440e <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 801440e:	b480      	push	{r7}
 8014410:	b085      	sub	sp, #20
 8014412:	af00      	add	r7, sp, #0
 8014414:	60f8      	str	r0, [r7, #12]
 8014416:	60b9      	str	r1, [r7, #8]
 8014418:	4613      	mov	r3, r2
 801441a:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 801441c:	68bb      	ldr	r3, [r7, #8]
 801441e:	781a      	ldrb	r2, [r3, #0]
 8014420:	68fb      	ldr	r3, [r7, #12]
 8014422:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8014424:	68bb      	ldr	r3, [r7, #8]
 8014426:	785a      	ldrb	r2, [r3, #1]
 8014428:	68fb      	ldr	r3, [r7, #12]
 801442a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 801442c:	68bb      	ldr	r3, [r7, #8]
 801442e:	3302      	adds	r3, #2
 8014430:	781b      	ldrb	r3, [r3, #0]
 8014432:	b29a      	uxth	r2, r3
 8014434:	68bb      	ldr	r3, [r7, #8]
 8014436:	3303      	adds	r3, #3
 8014438:	781b      	ldrb	r3, [r3, #0]
 801443a:	b29b      	uxth	r3, r3
 801443c:	021b      	lsls	r3, r3, #8
 801443e:	b29b      	uxth	r3, r3
 8014440:	4313      	orrs	r3, r2
 8014442:	b29a      	uxth	r2, r3
 8014444:	68fb      	ldr	r3, [r7, #12]
 8014446:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8014448:	68bb      	ldr	r3, [r7, #8]
 801444a:	791a      	ldrb	r2, [r3, #4]
 801444c:	68fb      	ldr	r3, [r7, #12]
 801444e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8014450:	68bb      	ldr	r3, [r7, #8]
 8014452:	795a      	ldrb	r2, [r3, #5]
 8014454:	68fb      	ldr	r3, [r7, #12]
 8014456:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8014458:	68bb      	ldr	r3, [r7, #8]
 801445a:	799a      	ldrb	r2, [r3, #6]
 801445c:	68fb      	ldr	r3, [r7, #12]
 801445e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8014460:	68bb      	ldr	r3, [r7, #8]
 8014462:	79da      	ldrb	r2, [r3, #7]
 8014464:	68fb      	ldr	r3, [r7, #12]
 8014466:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8014468:	88fb      	ldrh	r3, [r7, #6]
 801446a:	2b08      	cmp	r3, #8
 801446c:	d939      	bls.n	80144e2 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 801446e:	68bb      	ldr	r3, [r7, #8]
 8014470:	3308      	adds	r3, #8
 8014472:	781b      	ldrb	r3, [r3, #0]
 8014474:	b29a      	uxth	r2, r3
 8014476:	68bb      	ldr	r3, [r7, #8]
 8014478:	3309      	adds	r3, #9
 801447a:	781b      	ldrb	r3, [r3, #0]
 801447c:	b29b      	uxth	r3, r3
 801447e:	021b      	lsls	r3, r3, #8
 8014480:	b29b      	uxth	r3, r3
 8014482:	4313      	orrs	r3, r2
 8014484:	b29a      	uxth	r2, r3
 8014486:	68fb      	ldr	r3, [r7, #12]
 8014488:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 801448a:	68bb      	ldr	r3, [r7, #8]
 801448c:	330a      	adds	r3, #10
 801448e:	781b      	ldrb	r3, [r3, #0]
 8014490:	b29a      	uxth	r2, r3
 8014492:	68bb      	ldr	r3, [r7, #8]
 8014494:	330b      	adds	r3, #11
 8014496:	781b      	ldrb	r3, [r3, #0]
 8014498:	b29b      	uxth	r3, r3
 801449a:	021b      	lsls	r3, r3, #8
 801449c:	b29b      	uxth	r3, r3
 801449e:	4313      	orrs	r3, r2
 80144a0:	b29a      	uxth	r2, r3
 80144a2:	68fb      	ldr	r3, [r7, #12]
 80144a4:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 80144a6:	68bb      	ldr	r3, [r7, #8]
 80144a8:	330c      	adds	r3, #12
 80144aa:	781b      	ldrb	r3, [r3, #0]
 80144ac:	b29a      	uxth	r2, r3
 80144ae:	68bb      	ldr	r3, [r7, #8]
 80144b0:	330d      	adds	r3, #13
 80144b2:	781b      	ldrb	r3, [r3, #0]
 80144b4:	b29b      	uxth	r3, r3
 80144b6:	021b      	lsls	r3, r3, #8
 80144b8:	b29b      	uxth	r3, r3
 80144ba:	4313      	orrs	r3, r2
 80144bc:	b29a      	uxth	r2, r3
 80144be:	68fb      	ldr	r3, [r7, #12]
 80144c0:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 80144c2:	68bb      	ldr	r3, [r7, #8]
 80144c4:	7b9a      	ldrb	r2, [r3, #14]
 80144c6:	68fb      	ldr	r3, [r7, #12]
 80144c8:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 80144ca:	68bb      	ldr	r3, [r7, #8]
 80144cc:	7bda      	ldrb	r2, [r3, #15]
 80144ce:	68fb      	ldr	r3, [r7, #12]
 80144d0:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 80144d2:	68bb      	ldr	r3, [r7, #8]
 80144d4:	7c1a      	ldrb	r2, [r3, #16]
 80144d6:	68fb      	ldr	r3, [r7, #12]
 80144d8:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 80144da:	68bb      	ldr	r3, [r7, #8]
 80144dc:	7c5a      	ldrb	r2, [r3, #17]
 80144de:	68fb      	ldr	r3, [r7, #12]
 80144e0:	745a      	strb	r2, [r3, #17]
  }
}
 80144e2:	bf00      	nop
 80144e4:	3714      	adds	r7, #20
 80144e6:	46bd      	mov	sp, r7
 80144e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144ec:	4770      	bx	lr

080144ee <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 80144ee:	b580      	push	{r7, lr}
 80144f0:	b08a      	sub	sp, #40	; 0x28
 80144f2:	af00      	add	r7, sp, #0
 80144f4:	60f8      	str	r0, [r7, #12]
 80144f6:	60b9      	str	r1, [r7, #8]
 80144f8:	4613      	mov	r3, r2
 80144fa:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 80144fc:	68bb      	ldr	r3, [r7, #8]
 80144fe:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8014500:	2300      	movs	r3, #0
 8014502:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8014506:	2300      	movs	r3, #0
 8014508:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 801450c:	68bb      	ldr	r3, [r7, #8]
 801450e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8014510:	68bb      	ldr	r3, [r7, #8]
 8014512:	781a      	ldrb	r2, [r3, #0]
 8014514:	68fb      	ldr	r3, [r7, #12]
 8014516:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8014518:	68bb      	ldr	r3, [r7, #8]
 801451a:	785a      	ldrb	r2, [r3, #1]
 801451c:	68fb      	ldr	r3, [r7, #12]
 801451e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8014520:	68bb      	ldr	r3, [r7, #8]
 8014522:	3302      	adds	r3, #2
 8014524:	781b      	ldrb	r3, [r3, #0]
 8014526:	b29a      	uxth	r2, r3
 8014528:	68bb      	ldr	r3, [r7, #8]
 801452a:	3303      	adds	r3, #3
 801452c:	781b      	ldrb	r3, [r3, #0]
 801452e:	b29b      	uxth	r3, r3
 8014530:	021b      	lsls	r3, r3, #8
 8014532:	b29b      	uxth	r3, r3
 8014534:	4313      	orrs	r3, r2
 8014536:	b29a      	uxth	r2, r3
 8014538:	68fb      	ldr	r3, [r7, #12]
 801453a:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 801453c:	68bb      	ldr	r3, [r7, #8]
 801453e:	791a      	ldrb	r2, [r3, #4]
 8014540:	68fb      	ldr	r3, [r7, #12]
 8014542:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8014544:	68bb      	ldr	r3, [r7, #8]
 8014546:	795a      	ldrb	r2, [r3, #5]
 8014548:	68fb      	ldr	r3, [r7, #12]
 801454a:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 801454c:	68bb      	ldr	r3, [r7, #8]
 801454e:	799a      	ldrb	r2, [r3, #6]
 8014550:	68fb      	ldr	r3, [r7, #12]
 8014552:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8014554:	68bb      	ldr	r3, [r7, #8]
 8014556:	79da      	ldrb	r2, [r3, #7]
 8014558:	68fb      	ldr	r3, [r7, #12]
 801455a:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 801455c:	68bb      	ldr	r3, [r7, #8]
 801455e:	7a1a      	ldrb	r2, [r3, #8]
 8014560:	68fb      	ldr	r3, [r7, #12]
 8014562:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8014564:	88fb      	ldrh	r3, [r7, #6]
 8014566:	2b09      	cmp	r3, #9
 8014568:	d95f      	bls.n	801462a <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 801456a:	2309      	movs	r3, #9
 801456c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 801456e:	2300      	movs	r3, #0
 8014570:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8014572:	e051      	b.n	8014618 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8014574:	f107 0316 	add.w	r3, r7, #22
 8014578:	4619      	mov	r1, r3
 801457a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801457c:	f000 f8e8 	bl	8014750 <USBH_GetNextDesc>
 8014580:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8014582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014584:	785b      	ldrb	r3, [r3, #1]
 8014586:	2b04      	cmp	r3, #4
 8014588:	d146      	bne.n	8014618 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 801458a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801458e:	221a      	movs	r2, #26
 8014590:	fb02 f303 	mul.w	r3, r2, r3
 8014594:	3308      	adds	r3, #8
 8014596:	68fa      	ldr	r2, [r7, #12]
 8014598:	4413      	add	r3, r2
 801459a:	3302      	adds	r3, #2
 801459c:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 801459e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80145a0:	69f8      	ldr	r0, [r7, #28]
 80145a2:	f000 f846 	bl	8014632 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80145a6:	2300      	movs	r3, #0
 80145a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 80145ac:	2300      	movs	r3, #0
 80145ae:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80145b0:	e022      	b.n	80145f8 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80145b2:	f107 0316 	add.w	r3, r7, #22
 80145b6:	4619      	mov	r1, r3
 80145b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80145ba:	f000 f8c9 	bl	8014750 <USBH_GetNextDesc>
 80145be:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 80145c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80145c2:	785b      	ldrb	r3, [r3, #1]
 80145c4:	2b05      	cmp	r3, #5
 80145c6:	d117      	bne.n	80145f8 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80145c8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80145cc:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80145d0:	3201      	adds	r2, #1
 80145d2:	00d2      	lsls	r2, r2, #3
 80145d4:	211a      	movs	r1, #26
 80145d6:	fb01 f303 	mul.w	r3, r1, r3
 80145da:	4413      	add	r3, r2
 80145dc:	3308      	adds	r3, #8
 80145de:	68fa      	ldr	r2, [r7, #12]
 80145e0:	4413      	add	r3, r2
 80145e2:	3304      	adds	r3, #4
 80145e4:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 80145e6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80145e8:	69b8      	ldr	r0, [r7, #24]
 80145ea:	f000 f851 	bl	8014690 <USBH_ParseEPDesc>
            ep_ix++;
 80145ee:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80145f2:	3301      	adds	r3, #1
 80145f4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80145f8:	69fb      	ldr	r3, [r7, #28]
 80145fa:	791b      	ldrb	r3, [r3, #4]
 80145fc:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8014600:	429a      	cmp	r2, r3
 8014602:	d204      	bcs.n	801460e <USBH_ParseCfgDesc+0x120>
 8014604:	68fb      	ldr	r3, [r7, #12]
 8014606:	885a      	ldrh	r2, [r3, #2]
 8014608:	8afb      	ldrh	r3, [r7, #22]
 801460a:	429a      	cmp	r2, r3
 801460c:	d8d1      	bhi.n	80145b2 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 801460e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8014612:	3301      	adds	r3, #1
 8014614:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8014618:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801461c:	2b01      	cmp	r3, #1
 801461e:	d804      	bhi.n	801462a <USBH_ParseCfgDesc+0x13c>
 8014620:	68fb      	ldr	r3, [r7, #12]
 8014622:	885a      	ldrh	r2, [r3, #2]
 8014624:	8afb      	ldrh	r3, [r7, #22]
 8014626:	429a      	cmp	r2, r3
 8014628:	d8a4      	bhi.n	8014574 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 801462a:	bf00      	nop
 801462c:	3728      	adds	r7, #40	; 0x28
 801462e:	46bd      	mov	sp, r7
 8014630:	bd80      	pop	{r7, pc}

08014632 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8014632:	b480      	push	{r7}
 8014634:	b083      	sub	sp, #12
 8014636:	af00      	add	r7, sp, #0
 8014638:	6078      	str	r0, [r7, #4]
 801463a:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 801463c:	683b      	ldr	r3, [r7, #0]
 801463e:	781a      	ldrb	r2, [r3, #0]
 8014640:	687b      	ldr	r3, [r7, #4]
 8014642:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8014644:	683b      	ldr	r3, [r7, #0]
 8014646:	785a      	ldrb	r2, [r3, #1]
 8014648:	687b      	ldr	r3, [r7, #4]
 801464a:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 801464c:	683b      	ldr	r3, [r7, #0]
 801464e:	789a      	ldrb	r2, [r3, #2]
 8014650:	687b      	ldr	r3, [r7, #4]
 8014652:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8014654:	683b      	ldr	r3, [r7, #0]
 8014656:	78da      	ldrb	r2, [r3, #3]
 8014658:	687b      	ldr	r3, [r7, #4]
 801465a:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 801465c:	683b      	ldr	r3, [r7, #0]
 801465e:	791a      	ldrb	r2, [r3, #4]
 8014660:	687b      	ldr	r3, [r7, #4]
 8014662:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8014664:	683b      	ldr	r3, [r7, #0]
 8014666:	795a      	ldrb	r2, [r3, #5]
 8014668:	687b      	ldr	r3, [r7, #4]
 801466a:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 801466c:	683b      	ldr	r3, [r7, #0]
 801466e:	799a      	ldrb	r2, [r3, #6]
 8014670:	687b      	ldr	r3, [r7, #4]
 8014672:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8014674:	683b      	ldr	r3, [r7, #0]
 8014676:	79da      	ldrb	r2, [r3, #7]
 8014678:	687b      	ldr	r3, [r7, #4]
 801467a:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 801467c:	683b      	ldr	r3, [r7, #0]
 801467e:	7a1a      	ldrb	r2, [r3, #8]
 8014680:	687b      	ldr	r3, [r7, #4]
 8014682:	721a      	strb	r2, [r3, #8]
}
 8014684:	bf00      	nop
 8014686:	370c      	adds	r7, #12
 8014688:	46bd      	mov	sp, r7
 801468a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801468e:	4770      	bx	lr

08014690 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8014690:	b480      	push	{r7}
 8014692:	b083      	sub	sp, #12
 8014694:	af00      	add	r7, sp, #0
 8014696:	6078      	str	r0, [r7, #4]
 8014698:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 801469a:	683b      	ldr	r3, [r7, #0]
 801469c:	781a      	ldrb	r2, [r3, #0]
 801469e:	687b      	ldr	r3, [r7, #4]
 80146a0:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 80146a2:	683b      	ldr	r3, [r7, #0]
 80146a4:	785a      	ldrb	r2, [r3, #1]
 80146a6:	687b      	ldr	r3, [r7, #4]
 80146a8:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 80146aa:	683b      	ldr	r3, [r7, #0]
 80146ac:	789a      	ldrb	r2, [r3, #2]
 80146ae:	687b      	ldr	r3, [r7, #4]
 80146b0:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 80146b2:	683b      	ldr	r3, [r7, #0]
 80146b4:	78da      	ldrb	r2, [r3, #3]
 80146b6:	687b      	ldr	r3, [r7, #4]
 80146b8:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 80146ba:	683b      	ldr	r3, [r7, #0]
 80146bc:	3304      	adds	r3, #4
 80146be:	781b      	ldrb	r3, [r3, #0]
 80146c0:	b29a      	uxth	r2, r3
 80146c2:	683b      	ldr	r3, [r7, #0]
 80146c4:	3305      	adds	r3, #5
 80146c6:	781b      	ldrb	r3, [r3, #0]
 80146c8:	b29b      	uxth	r3, r3
 80146ca:	021b      	lsls	r3, r3, #8
 80146cc:	b29b      	uxth	r3, r3
 80146ce:	4313      	orrs	r3, r2
 80146d0:	b29a      	uxth	r2, r3
 80146d2:	687b      	ldr	r3, [r7, #4]
 80146d4:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 80146d6:	683b      	ldr	r3, [r7, #0]
 80146d8:	799a      	ldrb	r2, [r3, #6]
 80146da:	687b      	ldr	r3, [r7, #4]
 80146dc:	719a      	strb	r2, [r3, #6]
}
 80146de:	bf00      	nop
 80146e0:	370c      	adds	r7, #12
 80146e2:	46bd      	mov	sp, r7
 80146e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146e8:	4770      	bx	lr

080146ea <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80146ea:	b480      	push	{r7}
 80146ec:	b087      	sub	sp, #28
 80146ee:	af00      	add	r7, sp, #0
 80146f0:	60f8      	str	r0, [r7, #12]
 80146f2:	60b9      	str	r1, [r7, #8]
 80146f4:	4613      	mov	r3, r2
 80146f6:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80146f8:	68fb      	ldr	r3, [r7, #12]
 80146fa:	3301      	adds	r3, #1
 80146fc:	781b      	ldrb	r3, [r3, #0]
 80146fe:	2b03      	cmp	r3, #3
 8014700:	d120      	bne.n	8014744 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8014702:	68fb      	ldr	r3, [r7, #12]
 8014704:	781b      	ldrb	r3, [r3, #0]
 8014706:	1e9a      	subs	r2, r3, #2
 8014708:	88fb      	ldrh	r3, [r7, #6]
 801470a:	4293      	cmp	r3, r2
 801470c:	bf28      	it	cs
 801470e:	4613      	movcs	r3, r2
 8014710:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8014712:	68fb      	ldr	r3, [r7, #12]
 8014714:	3302      	adds	r3, #2
 8014716:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8014718:	2300      	movs	r3, #0
 801471a:	82fb      	strh	r3, [r7, #22]
 801471c:	e00b      	b.n	8014736 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 801471e:	8afb      	ldrh	r3, [r7, #22]
 8014720:	68fa      	ldr	r2, [r7, #12]
 8014722:	4413      	add	r3, r2
 8014724:	781a      	ldrb	r2, [r3, #0]
 8014726:	68bb      	ldr	r3, [r7, #8]
 8014728:	701a      	strb	r2, [r3, #0]
      pdest++;
 801472a:	68bb      	ldr	r3, [r7, #8]
 801472c:	3301      	adds	r3, #1
 801472e:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8014730:	8afb      	ldrh	r3, [r7, #22]
 8014732:	3302      	adds	r3, #2
 8014734:	82fb      	strh	r3, [r7, #22]
 8014736:	8afa      	ldrh	r2, [r7, #22]
 8014738:	8abb      	ldrh	r3, [r7, #20]
 801473a:	429a      	cmp	r2, r3
 801473c:	d3ef      	bcc.n	801471e <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 801473e:	68bb      	ldr	r3, [r7, #8]
 8014740:	2200      	movs	r2, #0
 8014742:	701a      	strb	r2, [r3, #0]
  }
}
 8014744:	bf00      	nop
 8014746:	371c      	adds	r7, #28
 8014748:	46bd      	mov	sp, r7
 801474a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801474e:	4770      	bx	lr

08014750 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8014750:	b480      	push	{r7}
 8014752:	b085      	sub	sp, #20
 8014754:	af00      	add	r7, sp, #0
 8014756:	6078      	str	r0, [r7, #4]
 8014758:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 801475a:	683b      	ldr	r3, [r7, #0]
 801475c:	881a      	ldrh	r2, [r3, #0]
 801475e:	687b      	ldr	r3, [r7, #4]
 8014760:	781b      	ldrb	r3, [r3, #0]
 8014762:	b29b      	uxth	r3, r3
 8014764:	4413      	add	r3, r2
 8014766:	b29a      	uxth	r2, r3
 8014768:	683b      	ldr	r3, [r7, #0]
 801476a:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 801476c:	687b      	ldr	r3, [r7, #4]
 801476e:	781b      	ldrb	r3, [r3, #0]
 8014770:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8014772:	687b      	ldr	r3, [r7, #4]
 8014774:	4413      	add	r3, r2
 8014776:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8014778:	68fb      	ldr	r3, [r7, #12]
}
 801477a:	4618      	mov	r0, r3
 801477c:	3714      	adds	r7, #20
 801477e:	46bd      	mov	sp, r7
 8014780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014784:	4770      	bx	lr

08014786 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8014786:	b580      	push	{r7, lr}
 8014788:	b086      	sub	sp, #24
 801478a:	af00      	add	r7, sp, #0
 801478c:	60f8      	str	r0, [r7, #12]
 801478e:	60b9      	str	r1, [r7, #8]
 8014790:	4613      	mov	r3, r2
 8014792:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8014794:	2301      	movs	r3, #1
 8014796:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8014798:	68fb      	ldr	r3, [r7, #12]
 801479a:	789b      	ldrb	r3, [r3, #2]
 801479c:	2b01      	cmp	r3, #1
 801479e:	d002      	beq.n	80147a6 <USBH_CtlReq+0x20>
 80147a0:	2b02      	cmp	r3, #2
 80147a2:	d01d      	beq.n	80147e0 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 80147a4:	e043      	b.n	801482e <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 80147a6:	68fb      	ldr	r3, [r7, #12]
 80147a8:	68ba      	ldr	r2, [r7, #8]
 80147aa:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80147ac:	68fb      	ldr	r3, [r7, #12]
 80147ae:	88fa      	ldrh	r2, [r7, #6]
 80147b0:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80147b2:	68fb      	ldr	r3, [r7, #12]
 80147b4:	2201      	movs	r2, #1
 80147b6:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80147b8:	68fb      	ldr	r3, [r7, #12]
 80147ba:	2202      	movs	r2, #2
 80147bc:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80147be:	2301      	movs	r3, #1
 80147c0:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80147c2:	68fb      	ldr	r3, [r7, #12]
 80147c4:	2203      	movs	r2, #3
 80147c6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80147ca:	68fb      	ldr	r3, [r7, #12]
 80147cc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80147d0:	68fb      	ldr	r3, [r7, #12]
 80147d2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80147d6:	2200      	movs	r2, #0
 80147d8:	4619      	mov	r1, r3
 80147da:	f000 fd63 	bl	80152a4 <osMessagePut>
      break;
 80147de:	e026      	b.n	801482e <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 80147e0:	68f8      	ldr	r0, [r7, #12]
 80147e2:	f000 f829 	bl	8014838 <USBH_HandleControl>
 80147e6:	4603      	mov	r3, r0
 80147e8:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80147ea:	7dfb      	ldrb	r3, [r7, #23]
 80147ec:	2b00      	cmp	r3, #0
 80147ee:	d002      	beq.n	80147f6 <USBH_CtlReq+0x70>
 80147f0:	7dfb      	ldrb	r3, [r7, #23]
 80147f2:	2b03      	cmp	r3, #3
 80147f4:	d106      	bne.n	8014804 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 80147f6:	68fb      	ldr	r3, [r7, #12]
 80147f8:	2201      	movs	r2, #1
 80147fa:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80147fc:	68fb      	ldr	r3, [r7, #12]
 80147fe:	2200      	movs	r2, #0
 8014800:	761a      	strb	r2, [r3, #24]
 8014802:	e005      	b.n	8014810 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 8014804:	7dfb      	ldrb	r3, [r7, #23]
 8014806:	2b02      	cmp	r3, #2
 8014808:	d102      	bne.n	8014810 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 801480a:	68fb      	ldr	r3, [r7, #12]
 801480c:	2201      	movs	r2, #1
 801480e:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8014810:	68fb      	ldr	r3, [r7, #12]
 8014812:	2203      	movs	r2, #3
 8014814:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014818:	68fb      	ldr	r3, [r7, #12]
 801481a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801481e:	68fb      	ldr	r3, [r7, #12]
 8014820:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8014824:	2200      	movs	r2, #0
 8014826:	4619      	mov	r1, r3
 8014828:	f000 fd3c 	bl	80152a4 <osMessagePut>
      break;
 801482c:	bf00      	nop
  }
  return status;
 801482e:	7dfb      	ldrb	r3, [r7, #23]
}
 8014830:	4618      	mov	r0, r3
 8014832:	3718      	adds	r7, #24
 8014834:	46bd      	mov	sp, r7
 8014836:	bd80      	pop	{r7, pc}

08014838 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8014838:	b580      	push	{r7, lr}
 801483a:	b086      	sub	sp, #24
 801483c:	af02      	add	r7, sp, #8
 801483e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8014840:	2301      	movs	r3, #1
 8014842:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8014844:	2300      	movs	r3, #0
 8014846:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8014848:	687b      	ldr	r3, [r7, #4]
 801484a:	7e1b      	ldrb	r3, [r3, #24]
 801484c:	3b01      	subs	r3, #1
 801484e:	2b0a      	cmp	r3, #10
 8014850:	f200 8229 	bhi.w	8014ca6 <USBH_HandleControl+0x46e>
 8014854:	a201      	add	r2, pc, #4	; (adr r2, 801485c <USBH_HandleControl+0x24>)
 8014856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801485a:	bf00      	nop
 801485c:	08014889 	.word	0x08014889
 8014860:	080148a3 	.word	0x080148a3
 8014864:	08014945 	.word	0x08014945
 8014868:	0801496b 	.word	0x0801496b
 801486c:	080149f7 	.word	0x080149f7
 8014870:	08014a21 	.word	0x08014a21
 8014874:	08014ae3 	.word	0x08014ae3
 8014878:	08014b05 	.word	0x08014b05
 801487c:	08014b97 	.word	0x08014b97
 8014880:	08014bbd 	.word	0x08014bbd
 8014884:	08014c4f 	.word	0x08014c4f
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8014888:	687b      	ldr	r3, [r7, #4]
 801488a:	f103 0110 	add.w	r1, r3, #16
 801488e:	687b      	ldr	r3, [r7, #4]
 8014890:	795b      	ldrb	r3, [r3, #5]
 8014892:	461a      	mov	r2, r3
 8014894:	6878      	ldr	r0, [r7, #4]
 8014896:	f000 fa17 	bl	8014cc8 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 801489a:	687b      	ldr	r3, [r7, #4]
 801489c:	2202      	movs	r2, #2
 801489e:	761a      	strb	r2, [r3, #24]
      break;
 80148a0:	e20c      	b.n	8014cbc <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80148a2:	687b      	ldr	r3, [r7, #4]
 80148a4:	795b      	ldrb	r3, [r3, #5]
 80148a6:	4619      	mov	r1, r3
 80148a8:	6878      	ldr	r0, [r7, #4]
 80148aa:	f003 fb7d 	bl	8017fa8 <USBH_LL_GetURBState>
 80148ae:	4603      	mov	r3, r0
 80148b0:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80148b2:	7bbb      	ldrb	r3, [r7, #14]
 80148b4:	2b01      	cmp	r3, #1
 80148b6:	d12c      	bne.n	8014912 <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80148b8:	687b      	ldr	r3, [r7, #4]
 80148ba:	7c1b      	ldrb	r3, [r3, #16]
 80148bc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80148c0:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80148c2:	687b      	ldr	r3, [r7, #4]
 80148c4:	8adb      	ldrh	r3, [r3, #22]
 80148c6:	2b00      	cmp	r3, #0
 80148c8:	d00a      	beq.n	80148e0 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80148ca:	7b7b      	ldrb	r3, [r7, #13]
 80148cc:	2b80      	cmp	r3, #128	; 0x80
 80148ce:	d103      	bne.n	80148d8 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80148d0:	687b      	ldr	r3, [r7, #4]
 80148d2:	2203      	movs	r2, #3
 80148d4:	761a      	strb	r2, [r3, #24]
 80148d6:	e00d      	b.n	80148f4 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 80148d8:	687b      	ldr	r3, [r7, #4]
 80148da:	2205      	movs	r2, #5
 80148dc:	761a      	strb	r2, [r3, #24]
 80148de:	e009      	b.n	80148f4 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 80148e0:	7b7b      	ldrb	r3, [r7, #13]
 80148e2:	2b80      	cmp	r3, #128	; 0x80
 80148e4:	d103      	bne.n	80148ee <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 80148e6:	687b      	ldr	r3, [r7, #4]
 80148e8:	2209      	movs	r2, #9
 80148ea:	761a      	strb	r2, [r3, #24]
 80148ec:	e002      	b.n	80148f4 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 80148ee:	687b      	ldr	r3, [r7, #4]
 80148f0:	2207      	movs	r2, #7
 80148f2:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80148f4:	687b      	ldr	r3, [r7, #4]
 80148f6:	2203      	movs	r2, #3
 80148f8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80148fc:	687b      	ldr	r3, [r7, #4]
 80148fe:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8014902:	687b      	ldr	r3, [r7, #4]
 8014904:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8014908:	2200      	movs	r2, #0
 801490a:	4619      	mov	r1, r3
 801490c:	f000 fcca 	bl	80152a4 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8014910:	e1cb      	b.n	8014caa <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8014912:	7bbb      	ldrb	r3, [r7, #14]
 8014914:	2b04      	cmp	r3, #4
 8014916:	d003      	beq.n	8014920 <USBH_HandleControl+0xe8>
 8014918:	7bbb      	ldrb	r3, [r7, #14]
 801491a:	2b02      	cmp	r3, #2
 801491c:	f040 81c5 	bne.w	8014caa <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 8014920:	687b      	ldr	r3, [r7, #4]
 8014922:	220b      	movs	r2, #11
 8014924:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8014926:	687b      	ldr	r3, [r7, #4]
 8014928:	2203      	movs	r2, #3
 801492a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801492e:	687b      	ldr	r3, [r7, #4]
 8014930:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8014934:	687b      	ldr	r3, [r7, #4]
 8014936:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 801493a:	2200      	movs	r2, #0
 801493c:	4619      	mov	r1, r3
 801493e:	f000 fcb1 	bl	80152a4 <osMessagePut>
      break;
 8014942:	e1b2      	b.n	8014caa <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8014944:	687b      	ldr	r3, [r7, #4]
 8014946:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 801494a:	b29a      	uxth	r2, r3
 801494c:	687b      	ldr	r3, [r7, #4]
 801494e:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8014950:	687b      	ldr	r3, [r7, #4]
 8014952:	6899      	ldr	r1, [r3, #8]
 8014954:	687b      	ldr	r3, [r7, #4]
 8014956:	899a      	ldrh	r2, [r3, #12]
 8014958:	687b      	ldr	r3, [r7, #4]
 801495a:	791b      	ldrb	r3, [r3, #4]
 801495c:	6878      	ldr	r0, [r7, #4]
 801495e:	f000 f9f2 	bl	8014d46 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8014962:	687b      	ldr	r3, [r7, #4]
 8014964:	2204      	movs	r2, #4
 8014966:	761a      	strb	r2, [r3, #24]
      break;
 8014968:	e1a8      	b.n	8014cbc <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 801496a:	687b      	ldr	r3, [r7, #4]
 801496c:	791b      	ldrb	r3, [r3, #4]
 801496e:	4619      	mov	r1, r3
 8014970:	6878      	ldr	r0, [r7, #4]
 8014972:	f003 fb19 	bl	8017fa8 <USBH_LL_GetURBState>
 8014976:	4603      	mov	r3, r0
 8014978:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 801497a:	7bbb      	ldrb	r3, [r7, #14]
 801497c:	2b01      	cmp	r3, #1
 801497e:	d110      	bne.n	80149a2 <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8014980:	687b      	ldr	r3, [r7, #4]
 8014982:	2209      	movs	r2, #9
 8014984:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8014986:	687b      	ldr	r3, [r7, #4]
 8014988:	2203      	movs	r2, #3
 801498a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801498e:	687b      	ldr	r3, [r7, #4]
 8014990:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8014994:	687b      	ldr	r3, [r7, #4]
 8014996:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 801499a:	2200      	movs	r2, #0
 801499c:	4619      	mov	r1, r3
 801499e:	f000 fc81 	bl	80152a4 <osMessagePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80149a2:	7bbb      	ldrb	r3, [r7, #14]
 80149a4:	2b05      	cmp	r3, #5
 80149a6:	d110      	bne.n	80149ca <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80149a8:	2303      	movs	r3, #3
 80149aa:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80149ac:	687b      	ldr	r3, [r7, #4]
 80149ae:	2203      	movs	r2, #3
 80149b0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80149b4:	687b      	ldr	r3, [r7, #4]
 80149b6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80149ba:	687b      	ldr	r3, [r7, #4]
 80149bc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80149c0:	2200      	movs	r2, #0
 80149c2:	4619      	mov	r1, r3
 80149c4:	f000 fc6e 	bl	80152a4 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80149c8:	e171      	b.n	8014cae <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 80149ca:	7bbb      	ldrb	r3, [r7, #14]
 80149cc:	2b04      	cmp	r3, #4
 80149ce:	f040 816e 	bne.w	8014cae <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 80149d2:	687b      	ldr	r3, [r7, #4]
 80149d4:	220b      	movs	r2, #11
 80149d6:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80149d8:	687b      	ldr	r3, [r7, #4]
 80149da:	2203      	movs	r2, #3
 80149dc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80149e0:	687b      	ldr	r3, [r7, #4]
 80149e2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80149e6:	687b      	ldr	r3, [r7, #4]
 80149e8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80149ec:	2200      	movs	r2, #0
 80149ee:	4619      	mov	r1, r3
 80149f0:	f000 fc58 	bl	80152a4 <osMessagePut>
      break;
 80149f4:	e15b      	b.n	8014cae <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80149f6:	687b      	ldr	r3, [r7, #4]
 80149f8:	6899      	ldr	r1, [r3, #8]
 80149fa:	687b      	ldr	r3, [r7, #4]
 80149fc:	899a      	ldrh	r2, [r3, #12]
 80149fe:	687b      	ldr	r3, [r7, #4]
 8014a00:	795b      	ldrb	r3, [r3, #5]
 8014a02:	2001      	movs	r0, #1
 8014a04:	9000      	str	r0, [sp, #0]
 8014a06:	6878      	ldr	r0, [r7, #4]
 8014a08:	f000 f978 	bl	8014cfc <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8014a0c:	687b      	ldr	r3, [r7, #4]
 8014a0e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8014a12:	b29a      	uxth	r2, r3
 8014a14:	687b      	ldr	r3, [r7, #4]
 8014a16:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8014a18:	687b      	ldr	r3, [r7, #4]
 8014a1a:	2206      	movs	r2, #6
 8014a1c:	761a      	strb	r2, [r3, #24]
      break;
 8014a1e:	e14d      	b.n	8014cbc <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8014a20:	687b      	ldr	r3, [r7, #4]
 8014a22:	795b      	ldrb	r3, [r3, #5]
 8014a24:	4619      	mov	r1, r3
 8014a26:	6878      	ldr	r0, [r7, #4]
 8014a28:	f003 fabe 	bl	8017fa8 <USBH_LL_GetURBState>
 8014a2c:	4603      	mov	r3, r0
 8014a2e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8014a30:	7bbb      	ldrb	r3, [r7, #14]
 8014a32:	2b01      	cmp	r3, #1
 8014a34:	d111      	bne.n	8014a5a <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8014a36:	687b      	ldr	r3, [r7, #4]
 8014a38:	2207      	movs	r2, #7
 8014a3a:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8014a3c:	687b      	ldr	r3, [r7, #4]
 8014a3e:	2203      	movs	r2, #3
 8014a40:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014a44:	687b      	ldr	r3, [r7, #4]
 8014a46:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8014a4a:	687b      	ldr	r3, [r7, #4]
 8014a4c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8014a50:	2200      	movs	r2, #0
 8014a52:	4619      	mov	r1, r3
 8014a54:	f000 fc26 	bl	80152a4 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8014a58:	e12b      	b.n	8014cb2 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 8014a5a:	7bbb      	ldrb	r3, [r7, #14]
 8014a5c:	2b05      	cmp	r3, #5
 8014a5e:	d113      	bne.n	8014a88 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 8014a60:	687b      	ldr	r3, [r7, #4]
 8014a62:	220c      	movs	r2, #12
 8014a64:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8014a66:	2303      	movs	r3, #3
 8014a68:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8014a6a:	687b      	ldr	r3, [r7, #4]
 8014a6c:	2203      	movs	r2, #3
 8014a6e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014a72:	687b      	ldr	r3, [r7, #4]
 8014a74:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8014a78:	687b      	ldr	r3, [r7, #4]
 8014a7a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8014a7e:	2200      	movs	r2, #0
 8014a80:	4619      	mov	r1, r3
 8014a82:	f000 fc0f 	bl	80152a4 <osMessagePut>
      break;
 8014a86:	e114      	b.n	8014cb2 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 8014a88:	7bbb      	ldrb	r3, [r7, #14]
 8014a8a:	2b02      	cmp	r3, #2
 8014a8c:	d111      	bne.n	8014ab2 <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 8014a8e:	687b      	ldr	r3, [r7, #4]
 8014a90:	2205      	movs	r2, #5
 8014a92:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8014a94:	687b      	ldr	r3, [r7, #4]
 8014a96:	2203      	movs	r2, #3
 8014a98:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014a9c:	687b      	ldr	r3, [r7, #4]
 8014a9e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8014aa2:	687b      	ldr	r3, [r7, #4]
 8014aa4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8014aa8:	2200      	movs	r2, #0
 8014aaa:	4619      	mov	r1, r3
 8014aac:	f000 fbfa 	bl	80152a4 <osMessagePut>
      break;
 8014ab0:	e0ff      	b.n	8014cb2 <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 8014ab2:	7bbb      	ldrb	r3, [r7, #14]
 8014ab4:	2b04      	cmp	r3, #4
 8014ab6:	f040 80fc 	bne.w	8014cb2 <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 8014aba:	687b      	ldr	r3, [r7, #4]
 8014abc:	220b      	movs	r2, #11
 8014abe:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8014ac0:	2302      	movs	r3, #2
 8014ac2:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8014ac4:	687b      	ldr	r3, [r7, #4]
 8014ac6:	2203      	movs	r2, #3
 8014ac8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014acc:	687b      	ldr	r3, [r7, #4]
 8014ace:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8014ad2:	687b      	ldr	r3, [r7, #4]
 8014ad4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8014ad8:	2200      	movs	r2, #0
 8014ada:	4619      	mov	r1, r3
 8014adc:	f000 fbe2 	bl	80152a4 <osMessagePut>
      break;
 8014ae0:	e0e7      	b.n	8014cb2 <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8014ae2:	687b      	ldr	r3, [r7, #4]
 8014ae4:	791b      	ldrb	r3, [r3, #4]
 8014ae6:	2200      	movs	r2, #0
 8014ae8:	2100      	movs	r1, #0
 8014aea:	6878      	ldr	r0, [r7, #4]
 8014aec:	f000 f92b 	bl	8014d46 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8014af0:	687b      	ldr	r3, [r7, #4]
 8014af2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8014af6:	b29a      	uxth	r2, r3
 8014af8:	687b      	ldr	r3, [r7, #4]
 8014afa:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8014afc:	687b      	ldr	r3, [r7, #4]
 8014afe:	2208      	movs	r2, #8
 8014b00:	761a      	strb	r2, [r3, #24]

      break;
 8014b02:	e0db      	b.n	8014cbc <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8014b04:	687b      	ldr	r3, [r7, #4]
 8014b06:	791b      	ldrb	r3, [r3, #4]
 8014b08:	4619      	mov	r1, r3
 8014b0a:	6878      	ldr	r0, [r7, #4]
 8014b0c:	f003 fa4c 	bl	8017fa8 <USBH_LL_GetURBState>
 8014b10:	4603      	mov	r3, r0
 8014b12:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8014b14:	7bbb      	ldrb	r3, [r7, #14]
 8014b16:	2b01      	cmp	r3, #1
 8014b18:	d113      	bne.n	8014b42 <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8014b1a:	687b      	ldr	r3, [r7, #4]
 8014b1c:	220d      	movs	r2, #13
 8014b1e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8014b20:	2300      	movs	r3, #0
 8014b22:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8014b24:	687b      	ldr	r3, [r7, #4]
 8014b26:	2203      	movs	r2, #3
 8014b28:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014b2c:	687b      	ldr	r3, [r7, #4]
 8014b2e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8014b32:	687b      	ldr	r3, [r7, #4]
 8014b34:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8014b38:	2200      	movs	r2, #0
 8014b3a:	4619      	mov	r1, r3
 8014b3c:	f000 fbb2 	bl	80152a4 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8014b40:	e0b9      	b.n	8014cb6 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 8014b42:	7bbb      	ldrb	r3, [r7, #14]
 8014b44:	2b04      	cmp	r3, #4
 8014b46:	d111      	bne.n	8014b6c <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 8014b48:	687b      	ldr	r3, [r7, #4]
 8014b4a:	220b      	movs	r2, #11
 8014b4c:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8014b4e:	687b      	ldr	r3, [r7, #4]
 8014b50:	2203      	movs	r2, #3
 8014b52:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014b56:	687b      	ldr	r3, [r7, #4]
 8014b58:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8014b5c:	687b      	ldr	r3, [r7, #4]
 8014b5e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8014b62:	2200      	movs	r2, #0
 8014b64:	4619      	mov	r1, r3
 8014b66:	f000 fb9d 	bl	80152a4 <osMessagePut>
      break;
 8014b6a:	e0a4      	b.n	8014cb6 <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 8014b6c:	7bbb      	ldrb	r3, [r7, #14]
 8014b6e:	2b05      	cmp	r3, #5
 8014b70:	f040 80a1 	bne.w	8014cb6 <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 8014b74:	2303      	movs	r3, #3
 8014b76:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8014b78:	687b      	ldr	r3, [r7, #4]
 8014b7a:	2203      	movs	r2, #3
 8014b7c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014b80:	687b      	ldr	r3, [r7, #4]
 8014b82:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8014b86:	687b      	ldr	r3, [r7, #4]
 8014b88:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8014b8c:	2200      	movs	r2, #0
 8014b8e:	4619      	mov	r1, r3
 8014b90:	f000 fb88 	bl	80152a4 <osMessagePut>
      break;
 8014b94:	e08f      	b.n	8014cb6 <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8014b96:	687b      	ldr	r3, [r7, #4]
 8014b98:	795b      	ldrb	r3, [r3, #5]
 8014b9a:	2201      	movs	r2, #1
 8014b9c:	9200      	str	r2, [sp, #0]
 8014b9e:	2200      	movs	r2, #0
 8014ba0:	2100      	movs	r1, #0
 8014ba2:	6878      	ldr	r0, [r7, #4]
 8014ba4:	f000 f8aa 	bl	8014cfc <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8014ba8:	687b      	ldr	r3, [r7, #4]
 8014baa:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8014bae:	b29a      	uxth	r2, r3
 8014bb0:	687b      	ldr	r3, [r7, #4]
 8014bb2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8014bb4:	687b      	ldr	r3, [r7, #4]
 8014bb6:	220a      	movs	r2, #10
 8014bb8:	761a      	strb	r2, [r3, #24]
      break;
 8014bba:	e07f      	b.n	8014cbc <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8014bbc:	687b      	ldr	r3, [r7, #4]
 8014bbe:	795b      	ldrb	r3, [r3, #5]
 8014bc0:	4619      	mov	r1, r3
 8014bc2:	6878      	ldr	r0, [r7, #4]
 8014bc4:	f003 f9f0 	bl	8017fa8 <USBH_LL_GetURBState>
 8014bc8:	4603      	mov	r3, r0
 8014bca:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8014bcc:	7bbb      	ldrb	r3, [r7, #14]
 8014bce:	2b01      	cmp	r3, #1
 8014bd0:	d113      	bne.n	8014bfa <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 8014bd2:	2300      	movs	r3, #0
 8014bd4:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8014bd6:	687b      	ldr	r3, [r7, #4]
 8014bd8:	220d      	movs	r2, #13
 8014bda:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8014bdc:	687b      	ldr	r3, [r7, #4]
 8014bde:	2203      	movs	r2, #3
 8014be0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014be4:	687b      	ldr	r3, [r7, #4]
 8014be6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8014bea:	687b      	ldr	r3, [r7, #4]
 8014bec:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8014bf0:	2200      	movs	r2, #0
 8014bf2:	4619      	mov	r1, r3
 8014bf4:	f000 fb56 	bl	80152a4 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8014bf8:	e05f      	b.n	8014cba <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 8014bfa:	7bbb      	ldrb	r3, [r7, #14]
 8014bfc:	2b02      	cmp	r3, #2
 8014bfe:	d111      	bne.n	8014c24 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 8014c00:	687b      	ldr	r3, [r7, #4]
 8014c02:	2209      	movs	r2, #9
 8014c04:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8014c06:	687b      	ldr	r3, [r7, #4]
 8014c08:	2203      	movs	r2, #3
 8014c0a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014c0e:	687b      	ldr	r3, [r7, #4]
 8014c10:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8014c14:	687b      	ldr	r3, [r7, #4]
 8014c16:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8014c1a:	2200      	movs	r2, #0
 8014c1c:	4619      	mov	r1, r3
 8014c1e:	f000 fb41 	bl	80152a4 <osMessagePut>
      break;
 8014c22:	e04a      	b.n	8014cba <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 8014c24:	7bbb      	ldrb	r3, [r7, #14]
 8014c26:	2b04      	cmp	r3, #4
 8014c28:	d147      	bne.n	8014cba <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 8014c2a:	687b      	ldr	r3, [r7, #4]
 8014c2c:	220b      	movs	r2, #11
 8014c2e:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8014c30:	687b      	ldr	r3, [r7, #4]
 8014c32:	2203      	movs	r2, #3
 8014c34:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014c38:	687b      	ldr	r3, [r7, #4]
 8014c3a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8014c3e:	687b      	ldr	r3, [r7, #4]
 8014c40:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8014c44:	2200      	movs	r2, #0
 8014c46:	4619      	mov	r1, r3
 8014c48:	f000 fb2c 	bl	80152a4 <osMessagePut>
      break;
 8014c4c:	e035      	b.n	8014cba <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8014c4e:	687b      	ldr	r3, [r7, #4]
 8014c50:	7e5b      	ldrb	r3, [r3, #25]
 8014c52:	3301      	adds	r3, #1
 8014c54:	b2da      	uxtb	r2, r3
 8014c56:	687b      	ldr	r3, [r7, #4]
 8014c58:	765a      	strb	r2, [r3, #25]
 8014c5a:	687b      	ldr	r3, [r7, #4]
 8014c5c:	7e5b      	ldrb	r3, [r3, #25]
 8014c5e:	2b02      	cmp	r3, #2
 8014c60:	d806      	bhi.n	8014c70 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8014c62:	687b      	ldr	r3, [r7, #4]
 8014c64:	2201      	movs	r2, #1
 8014c66:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8014c68:	687b      	ldr	r3, [r7, #4]
 8014c6a:	2201      	movs	r2, #1
 8014c6c:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8014c6e:	e025      	b.n	8014cbc <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8014c70:	687b      	ldr	r3, [r7, #4]
 8014c72:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8014c76:	2106      	movs	r1, #6
 8014c78:	6878      	ldr	r0, [r7, #4]
 8014c7a:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8014c7c:	687b      	ldr	r3, [r7, #4]
 8014c7e:	2200      	movs	r2, #0
 8014c80:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8014c82:	687b      	ldr	r3, [r7, #4]
 8014c84:	795b      	ldrb	r3, [r3, #5]
 8014c86:	4619      	mov	r1, r3
 8014c88:	6878      	ldr	r0, [r7, #4]
 8014c8a:	f000 f90d 	bl	8014ea8 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8014c8e:	687b      	ldr	r3, [r7, #4]
 8014c90:	791b      	ldrb	r3, [r3, #4]
 8014c92:	4619      	mov	r1, r3
 8014c94:	6878      	ldr	r0, [r7, #4]
 8014c96:	f000 f907 	bl	8014ea8 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8014c9a:	687b      	ldr	r3, [r7, #4]
 8014c9c:	2200      	movs	r2, #0
 8014c9e:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8014ca0:	2302      	movs	r3, #2
 8014ca2:	73fb      	strb	r3, [r7, #15]
      break;
 8014ca4:	e00a      	b.n	8014cbc <USBH_HandleControl+0x484>

    default:
      break;
 8014ca6:	bf00      	nop
 8014ca8:	e008      	b.n	8014cbc <USBH_HandleControl+0x484>
      break;
 8014caa:	bf00      	nop
 8014cac:	e006      	b.n	8014cbc <USBH_HandleControl+0x484>
      break;
 8014cae:	bf00      	nop
 8014cb0:	e004      	b.n	8014cbc <USBH_HandleControl+0x484>
      break;
 8014cb2:	bf00      	nop
 8014cb4:	e002      	b.n	8014cbc <USBH_HandleControl+0x484>
      break;
 8014cb6:	bf00      	nop
 8014cb8:	e000      	b.n	8014cbc <USBH_HandleControl+0x484>
      break;
 8014cba:	bf00      	nop
  }

  return status;
 8014cbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8014cbe:	4618      	mov	r0, r3
 8014cc0:	3710      	adds	r7, #16
 8014cc2:	46bd      	mov	sp, r7
 8014cc4:	bd80      	pop	{r7, pc}
 8014cc6:	bf00      	nop

08014cc8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8014cc8:	b580      	push	{r7, lr}
 8014cca:	b088      	sub	sp, #32
 8014ccc:	af04      	add	r7, sp, #16
 8014cce:	60f8      	str	r0, [r7, #12]
 8014cd0:	60b9      	str	r1, [r7, #8]
 8014cd2:	4613      	mov	r3, r2
 8014cd4:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8014cd6:	79f9      	ldrb	r1, [r7, #7]
 8014cd8:	2300      	movs	r3, #0
 8014cda:	9303      	str	r3, [sp, #12]
 8014cdc:	2308      	movs	r3, #8
 8014cde:	9302      	str	r3, [sp, #8]
 8014ce0:	68bb      	ldr	r3, [r7, #8]
 8014ce2:	9301      	str	r3, [sp, #4]
 8014ce4:	2300      	movs	r3, #0
 8014ce6:	9300      	str	r3, [sp, #0]
 8014ce8:	2300      	movs	r3, #0
 8014cea:	2200      	movs	r2, #0
 8014cec:	68f8      	ldr	r0, [r7, #12]
 8014cee:	f003 f92a 	bl	8017f46 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8014cf2:	2300      	movs	r3, #0
}
 8014cf4:	4618      	mov	r0, r3
 8014cf6:	3710      	adds	r7, #16
 8014cf8:	46bd      	mov	sp, r7
 8014cfa:	bd80      	pop	{r7, pc}

08014cfc <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8014cfc:	b580      	push	{r7, lr}
 8014cfe:	b088      	sub	sp, #32
 8014d00:	af04      	add	r7, sp, #16
 8014d02:	60f8      	str	r0, [r7, #12]
 8014d04:	60b9      	str	r1, [r7, #8]
 8014d06:	4611      	mov	r1, r2
 8014d08:	461a      	mov	r2, r3
 8014d0a:	460b      	mov	r3, r1
 8014d0c:	80fb      	strh	r3, [r7, #6]
 8014d0e:	4613      	mov	r3, r2
 8014d10:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8014d12:	68fb      	ldr	r3, [r7, #12]
 8014d14:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8014d18:	2b00      	cmp	r3, #0
 8014d1a:	d001      	beq.n	8014d20 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8014d1c:	2300      	movs	r3, #0
 8014d1e:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8014d20:	7979      	ldrb	r1, [r7, #5]
 8014d22:	7e3b      	ldrb	r3, [r7, #24]
 8014d24:	9303      	str	r3, [sp, #12]
 8014d26:	88fb      	ldrh	r3, [r7, #6]
 8014d28:	9302      	str	r3, [sp, #8]
 8014d2a:	68bb      	ldr	r3, [r7, #8]
 8014d2c:	9301      	str	r3, [sp, #4]
 8014d2e:	2301      	movs	r3, #1
 8014d30:	9300      	str	r3, [sp, #0]
 8014d32:	2300      	movs	r3, #0
 8014d34:	2200      	movs	r2, #0
 8014d36:	68f8      	ldr	r0, [r7, #12]
 8014d38:	f003 f905 	bl	8017f46 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8014d3c:	2300      	movs	r3, #0
}
 8014d3e:	4618      	mov	r0, r3
 8014d40:	3710      	adds	r7, #16
 8014d42:	46bd      	mov	sp, r7
 8014d44:	bd80      	pop	{r7, pc}

08014d46 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8014d46:	b580      	push	{r7, lr}
 8014d48:	b088      	sub	sp, #32
 8014d4a:	af04      	add	r7, sp, #16
 8014d4c:	60f8      	str	r0, [r7, #12]
 8014d4e:	60b9      	str	r1, [r7, #8]
 8014d50:	4611      	mov	r1, r2
 8014d52:	461a      	mov	r2, r3
 8014d54:	460b      	mov	r3, r1
 8014d56:	80fb      	strh	r3, [r7, #6]
 8014d58:	4613      	mov	r3, r2
 8014d5a:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8014d5c:	7979      	ldrb	r1, [r7, #5]
 8014d5e:	2300      	movs	r3, #0
 8014d60:	9303      	str	r3, [sp, #12]
 8014d62:	88fb      	ldrh	r3, [r7, #6]
 8014d64:	9302      	str	r3, [sp, #8]
 8014d66:	68bb      	ldr	r3, [r7, #8]
 8014d68:	9301      	str	r3, [sp, #4]
 8014d6a:	2301      	movs	r3, #1
 8014d6c:	9300      	str	r3, [sp, #0]
 8014d6e:	2300      	movs	r3, #0
 8014d70:	2201      	movs	r2, #1
 8014d72:	68f8      	ldr	r0, [r7, #12]
 8014d74:	f003 f8e7 	bl	8017f46 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8014d78:	2300      	movs	r3, #0

}
 8014d7a:	4618      	mov	r0, r3
 8014d7c:	3710      	adds	r7, #16
 8014d7e:	46bd      	mov	sp, r7
 8014d80:	bd80      	pop	{r7, pc}

08014d82 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8014d82:	b580      	push	{r7, lr}
 8014d84:	b088      	sub	sp, #32
 8014d86:	af04      	add	r7, sp, #16
 8014d88:	60f8      	str	r0, [r7, #12]
 8014d8a:	60b9      	str	r1, [r7, #8]
 8014d8c:	4611      	mov	r1, r2
 8014d8e:	461a      	mov	r2, r3
 8014d90:	460b      	mov	r3, r1
 8014d92:	80fb      	strh	r3, [r7, #6]
 8014d94:	4613      	mov	r3, r2
 8014d96:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8014d98:	68fb      	ldr	r3, [r7, #12]
 8014d9a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8014d9e:	2b00      	cmp	r3, #0
 8014da0:	d001      	beq.n	8014da6 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8014da2:	2300      	movs	r3, #0
 8014da4:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8014da6:	7979      	ldrb	r1, [r7, #5]
 8014da8:	7e3b      	ldrb	r3, [r7, #24]
 8014daa:	9303      	str	r3, [sp, #12]
 8014dac:	88fb      	ldrh	r3, [r7, #6]
 8014dae:	9302      	str	r3, [sp, #8]
 8014db0:	68bb      	ldr	r3, [r7, #8]
 8014db2:	9301      	str	r3, [sp, #4]
 8014db4:	2301      	movs	r3, #1
 8014db6:	9300      	str	r3, [sp, #0]
 8014db8:	2302      	movs	r3, #2
 8014dba:	2200      	movs	r2, #0
 8014dbc:	68f8      	ldr	r0, [r7, #12]
 8014dbe:	f003 f8c2 	bl	8017f46 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8014dc2:	2300      	movs	r3, #0
}
 8014dc4:	4618      	mov	r0, r3
 8014dc6:	3710      	adds	r7, #16
 8014dc8:	46bd      	mov	sp, r7
 8014dca:	bd80      	pop	{r7, pc}

08014dcc <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8014dcc:	b580      	push	{r7, lr}
 8014dce:	b088      	sub	sp, #32
 8014dd0:	af04      	add	r7, sp, #16
 8014dd2:	60f8      	str	r0, [r7, #12]
 8014dd4:	60b9      	str	r1, [r7, #8]
 8014dd6:	4611      	mov	r1, r2
 8014dd8:	461a      	mov	r2, r3
 8014dda:	460b      	mov	r3, r1
 8014ddc:	80fb      	strh	r3, [r7, #6]
 8014dde:	4613      	mov	r3, r2
 8014de0:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8014de2:	7979      	ldrb	r1, [r7, #5]
 8014de4:	2300      	movs	r3, #0
 8014de6:	9303      	str	r3, [sp, #12]
 8014de8:	88fb      	ldrh	r3, [r7, #6]
 8014dea:	9302      	str	r3, [sp, #8]
 8014dec:	68bb      	ldr	r3, [r7, #8]
 8014dee:	9301      	str	r3, [sp, #4]
 8014df0:	2301      	movs	r3, #1
 8014df2:	9300      	str	r3, [sp, #0]
 8014df4:	2302      	movs	r3, #2
 8014df6:	2201      	movs	r2, #1
 8014df8:	68f8      	ldr	r0, [r7, #12]
 8014dfa:	f003 f8a4 	bl	8017f46 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8014dfe:	2300      	movs	r3, #0
}
 8014e00:	4618      	mov	r0, r3
 8014e02:	3710      	adds	r7, #16
 8014e04:	46bd      	mov	sp, r7
 8014e06:	bd80      	pop	{r7, pc}

08014e08 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8014e08:	b580      	push	{r7, lr}
 8014e0a:	b086      	sub	sp, #24
 8014e0c:	af04      	add	r7, sp, #16
 8014e0e:	6078      	str	r0, [r7, #4]
 8014e10:	4608      	mov	r0, r1
 8014e12:	4611      	mov	r1, r2
 8014e14:	461a      	mov	r2, r3
 8014e16:	4603      	mov	r3, r0
 8014e18:	70fb      	strb	r3, [r7, #3]
 8014e1a:	460b      	mov	r3, r1
 8014e1c:	70bb      	strb	r3, [r7, #2]
 8014e1e:	4613      	mov	r3, r2
 8014e20:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8014e22:	7878      	ldrb	r0, [r7, #1]
 8014e24:	78ba      	ldrb	r2, [r7, #2]
 8014e26:	78f9      	ldrb	r1, [r7, #3]
 8014e28:	8b3b      	ldrh	r3, [r7, #24]
 8014e2a:	9302      	str	r3, [sp, #8]
 8014e2c:	7d3b      	ldrb	r3, [r7, #20]
 8014e2e:	9301      	str	r3, [sp, #4]
 8014e30:	7c3b      	ldrb	r3, [r7, #16]
 8014e32:	9300      	str	r3, [sp, #0]
 8014e34:	4603      	mov	r3, r0
 8014e36:	6878      	ldr	r0, [r7, #4]
 8014e38:	f003 f837 	bl	8017eaa <USBH_LL_OpenPipe>

  return USBH_OK;
 8014e3c:	2300      	movs	r3, #0
}
 8014e3e:	4618      	mov	r0, r3
 8014e40:	3708      	adds	r7, #8
 8014e42:	46bd      	mov	sp, r7
 8014e44:	bd80      	pop	{r7, pc}

08014e46 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8014e46:	b580      	push	{r7, lr}
 8014e48:	b082      	sub	sp, #8
 8014e4a:	af00      	add	r7, sp, #0
 8014e4c:	6078      	str	r0, [r7, #4]
 8014e4e:	460b      	mov	r3, r1
 8014e50:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8014e52:	78fb      	ldrb	r3, [r7, #3]
 8014e54:	4619      	mov	r1, r3
 8014e56:	6878      	ldr	r0, [r7, #4]
 8014e58:	f003 f856 	bl	8017f08 <USBH_LL_ClosePipe>

  return USBH_OK;
 8014e5c:	2300      	movs	r3, #0
}
 8014e5e:	4618      	mov	r0, r3
 8014e60:	3708      	adds	r7, #8
 8014e62:	46bd      	mov	sp, r7
 8014e64:	bd80      	pop	{r7, pc}

08014e66 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8014e66:	b580      	push	{r7, lr}
 8014e68:	b084      	sub	sp, #16
 8014e6a:	af00      	add	r7, sp, #0
 8014e6c:	6078      	str	r0, [r7, #4]
 8014e6e:	460b      	mov	r3, r1
 8014e70:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8014e72:	6878      	ldr	r0, [r7, #4]
 8014e74:	f000 f836 	bl	8014ee4 <USBH_GetFreePipe>
 8014e78:	4603      	mov	r3, r0
 8014e7a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8014e7c:	89fb      	ldrh	r3, [r7, #14]
 8014e7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014e82:	4293      	cmp	r3, r2
 8014e84:	d00a      	beq.n	8014e9c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8014e86:	78fa      	ldrb	r2, [r7, #3]
 8014e88:	89fb      	ldrh	r3, [r7, #14]
 8014e8a:	f003 030f 	and.w	r3, r3, #15
 8014e8e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8014e92:	6879      	ldr	r1, [r7, #4]
 8014e94:	33e0      	adds	r3, #224	; 0xe0
 8014e96:	009b      	lsls	r3, r3, #2
 8014e98:	440b      	add	r3, r1
 8014e9a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8014e9c:	89fb      	ldrh	r3, [r7, #14]
 8014e9e:	b2db      	uxtb	r3, r3
}
 8014ea0:	4618      	mov	r0, r3
 8014ea2:	3710      	adds	r7, #16
 8014ea4:	46bd      	mov	sp, r7
 8014ea6:	bd80      	pop	{r7, pc}

08014ea8 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8014ea8:	b480      	push	{r7}
 8014eaa:	b083      	sub	sp, #12
 8014eac:	af00      	add	r7, sp, #0
 8014eae:	6078      	str	r0, [r7, #4]
 8014eb0:	460b      	mov	r3, r1
 8014eb2:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8014eb4:	78fb      	ldrb	r3, [r7, #3]
 8014eb6:	2b0a      	cmp	r3, #10
 8014eb8:	d80d      	bhi.n	8014ed6 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8014eba:	78fb      	ldrb	r3, [r7, #3]
 8014ebc:	687a      	ldr	r2, [r7, #4]
 8014ebe:	33e0      	adds	r3, #224	; 0xe0
 8014ec0:	009b      	lsls	r3, r3, #2
 8014ec2:	4413      	add	r3, r2
 8014ec4:	685a      	ldr	r2, [r3, #4]
 8014ec6:	78fb      	ldrb	r3, [r7, #3]
 8014ec8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8014ecc:	6879      	ldr	r1, [r7, #4]
 8014ece:	33e0      	adds	r3, #224	; 0xe0
 8014ed0:	009b      	lsls	r3, r3, #2
 8014ed2:	440b      	add	r3, r1
 8014ed4:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8014ed6:	2300      	movs	r3, #0
}
 8014ed8:	4618      	mov	r0, r3
 8014eda:	370c      	adds	r7, #12
 8014edc:	46bd      	mov	sp, r7
 8014ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ee2:	4770      	bx	lr

08014ee4 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8014ee4:	b480      	push	{r7}
 8014ee6:	b085      	sub	sp, #20
 8014ee8:	af00      	add	r7, sp, #0
 8014eea:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8014eec:	2300      	movs	r3, #0
 8014eee:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8014ef0:	2300      	movs	r3, #0
 8014ef2:	73fb      	strb	r3, [r7, #15]
 8014ef4:	e00f      	b.n	8014f16 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8014ef6:	7bfb      	ldrb	r3, [r7, #15]
 8014ef8:	687a      	ldr	r2, [r7, #4]
 8014efa:	33e0      	adds	r3, #224	; 0xe0
 8014efc:	009b      	lsls	r3, r3, #2
 8014efe:	4413      	add	r3, r2
 8014f00:	685b      	ldr	r3, [r3, #4]
 8014f02:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8014f06:	2b00      	cmp	r3, #0
 8014f08:	d102      	bne.n	8014f10 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8014f0a:	7bfb      	ldrb	r3, [r7, #15]
 8014f0c:	b29b      	uxth	r3, r3
 8014f0e:	e007      	b.n	8014f20 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8014f10:	7bfb      	ldrb	r3, [r7, #15]
 8014f12:	3301      	adds	r3, #1
 8014f14:	73fb      	strb	r3, [r7, #15]
 8014f16:	7bfb      	ldrb	r3, [r7, #15]
 8014f18:	2b0a      	cmp	r3, #10
 8014f1a:	d9ec      	bls.n	8014ef6 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8014f1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8014f20:	4618      	mov	r0, r3
 8014f22:	3714      	adds	r7, #20
 8014f24:	46bd      	mov	sp, r7
 8014f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f2a:	4770      	bx	lr

08014f2c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8014f2c:	b480      	push	{r7}
 8014f2e:	b087      	sub	sp, #28
 8014f30:	af00      	add	r7, sp, #0
 8014f32:	60f8      	str	r0, [r7, #12]
 8014f34:	60b9      	str	r1, [r7, #8]
 8014f36:	4613      	mov	r3, r2
 8014f38:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8014f3a:	2301      	movs	r3, #1
 8014f3c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8014f3e:	2300      	movs	r3, #0
 8014f40:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8014f42:	4b1f      	ldr	r3, [pc, #124]	; (8014fc0 <FATFS_LinkDriverEx+0x94>)
 8014f44:	7a5b      	ldrb	r3, [r3, #9]
 8014f46:	b2db      	uxtb	r3, r3
 8014f48:	2b00      	cmp	r3, #0
 8014f4a:	d131      	bne.n	8014fb0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8014f4c:	4b1c      	ldr	r3, [pc, #112]	; (8014fc0 <FATFS_LinkDriverEx+0x94>)
 8014f4e:	7a5b      	ldrb	r3, [r3, #9]
 8014f50:	b2db      	uxtb	r3, r3
 8014f52:	461a      	mov	r2, r3
 8014f54:	4b1a      	ldr	r3, [pc, #104]	; (8014fc0 <FATFS_LinkDriverEx+0x94>)
 8014f56:	2100      	movs	r1, #0
 8014f58:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8014f5a:	4b19      	ldr	r3, [pc, #100]	; (8014fc0 <FATFS_LinkDriverEx+0x94>)
 8014f5c:	7a5b      	ldrb	r3, [r3, #9]
 8014f5e:	b2db      	uxtb	r3, r3
 8014f60:	4a17      	ldr	r2, [pc, #92]	; (8014fc0 <FATFS_LinkDriverEx+0x94>)
 8014f62:	009b      	lsls	r3, r3, #2
 8014f64:	4413      	add	r3, r2
 8014f66:	68fa      	ldr	r2, [r7, #12]
 8014f68:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8014f6a:	4b15      	ldr	r3, [pc, #84]	; (8014fc0 <FATFS_LinkDriverEx+0x94>)
 8014f6c:	7a5b      	ldrb	r3, [r3, #9]
 8014f6e:	b2db      	uxtb	r3, r3
 8014f70:	461a      	mov	r2, r3
 8014f72:	4b13      	ldr	r3, [pc, #76]	; (8014fc0 <FATFS_LinkDriverEx+0x94>)
 8014f74:	4413      	add	r3, r2
 8014f76:	79fa      	ldrb	r2, [r7, #7]
 8014f78:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8014f7a:	4b11      	ldr	r3, [pc, #68]	; (8014fc0 <FATFS_LinkDriverEx+0x94>)
 8014f7c:	7a5b      	ldrb	r3, [r3, #9]
 8014f7e:	b2db      	uxtb	r3, r3
 8014f80:	1c5a      	adds	r2, r3, #1
 8014f82:	b2d1      	uxtb	r1, r2
 8014f84:	4a0e      	ldr	r2, [pc, #56]	; (8014fc0 <FATFS_LinkDriverEx+0x94>)
 8014f86:	7251      	strb	r1, [r2, #9]
 8014f88:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8014f8a:	7dbb      	ldrb	r3, [r7, #22]
 8014f8c:	3330      	adds	r3, #48	; 0x30
 8014f8e:	b2da      	uxtb	r2, r3
 8014f90:	68bb      	ldr	r3, [r7, #8]
 8014f92:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8014f94:	68bb      	ldr	r3, [r7, #8]
 8014f96:	3301      	adds	r3, #1
 8014f98:	223a      	movs	r2, #58	; 0x3a
 8014f9a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8014f9c:	68bb      	ldr	r3, [r7, #8]
 8014f9e:	3302      	adds	r3, #2
 8014fa0:	222f      	movs	r2, #47	; 0x2f
 8014fa2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8014fa4:	68bb      	ldr	r3, [r7, #8]
 8014fa6:	3303      	adds	r3, #3
 8014fa8:	2200      	movs	r2, #0
 8014faa:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8014fac:	2300      	movs	r3, #0
 8014fae:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8014fb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8014fb2:	4618      	mov	r0, r3
 8014fb4:	371c      	adds	r7, #28
 8014fb6:	46bd      	mov	sp, r7
 8014fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fbc:	4770      	bx	lr
 8014fbe:	bf00      	nop
 8014fc0:	20000508 	.word	0x20000508

08014fc4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8014fc4:	b580      	push	{r7, lr}
 8014fc6:	b082      	sub	sp, #8
 8014fc8:	af00      	add	r7, sp, #0
 8014fca:	6078      	str	r0, [r7, #4]
 8014fcc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8014fce:	2200      	movs	r2, #0
 8014fd0:	6839      	ldr	r1, [r7, #0]
 8014fd2:	6878      	ldr	r0, [r7, #4]
 8014fd4:	f7ff ffaa 	bl	8014f2c <FATFS_LinkDriverEx>
 8014fd8:	4603      	mov	r3, r0
}
 8014fda:	4618      	mov	r0, r3
 8014fdc:	3708      	adds	r7, #8
 8014fde:	46bd      	mov	sp, r7
 8014fe0:	bd80      	pop	{r7, pc}

08014fe2 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8014fe2:	b480      	push	{r7}
 8014fe4:	b085      	sub	sp, #20
 8014fe6:	af00      	add	r7, sp, #0
 8014fe8:	4603      	mov	r3, r0
 8014fea:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8014fec:	2300      	movs	r3, #0
 8014fee:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8014ff0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014ff4:	2b84      	cmp	r3, #132	; 0x84
 8014ff6:	d005      	beq.n	8015004 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8014ff8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8014ffc:	68fb      	ldr	r3, [r7, #12]
 8014ffe:	4413      	add	r3, r2
 8015000:	3303      	adds	r3, #3
 8015002:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8015004:	68fb      	ldr	r3, [r7, #12]
}
 8015006:	4618      	mov	r0, r3
 8015008:	3714      	adds	r7, #20
 801500a:	46bd      	mov	sp, r7
 801500c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015010:	4770      	bx	lr

08015012 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8015012:	b480      	push	{r7}
 8015014:	b083      	sub	sp, #12
 8015016:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015018:	f3ef 8305 	mrs	r3, IPSR
 801501c:	607b      	str	r3, [r7, #4]
  return(result);
 801501e:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8015020:	2b00      	cmp	r3, #0
 8015022:	bf14      	ite	ne
 8015024:	2301      	movne	r3, #1
 8015026:	2300      	moveq	r3, #0
 8015028:	b2db      	uxtb	r3, r3
}
 801502a:	4618      	mov	r0, r3
 801502c:	370c      	adds	r7, #12
 801502e:	46bd      	mov	sp, r7
 8015030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015034:	4770      	bx	lr

08015036 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8015036:	b580      	push	{r7, lr}
 8015038:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 801503a:	f001 f9e7 	bl	801640c <vTaskStartScheduler>
  
  return osOK;
 801503e:	2300      	movs	r3, #0
}
 8015040:	4618      	mov	r0, r3
 8015042:	bd80      	pop	{r7, pc}

08015044 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 8015044:	b580      	push	{r7, lr}
 8015046:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 8015048:	f001 fe3a 	bl	8016cc0 <xTaskGetSchedulerState>
 801504c:	4603      	mov	r3, r0
 801504e:	2b01      	cmp	r3, #1
 8015050:	d101      	bne.n	8015056 <osKernelRunning+0x12>
    return 0;
 8015052:	2300      	movs	r3, #0
 8015054:	e000      	b.n	8015058 <osKernelRunning+0x14>
  else
    return 1;
 8015056:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 8015058:	4618      	mov	r0, r3
 801505a:	bd80      	pop	{r7, pc}

0801505c <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 801505c:	b580      	push	{r7, lr}
 801505e:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8015060:	f7ff ffd7 	bl	8015012 <inHandlerMode>
 8015064:	4603      	mov	r3, r0
 8015066:	2b00      	cmp	r3, #0
 8015068:	d003      	beq.n	8015072 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 801506a:	f001 faef 	bl	801664c <xTaskGetTickCountFromISR>
 801506e:	4603      	mov	r3, r0
 8015070:	e002      	b.n	8015078 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8015072:	f001 fadb 	bl	801662c <xTaskGetTickCount>
 8015076:	4603      	mov	r3, r0
  }
}
 8015078:	4618      	mov	r0, r3
 801507a:	bd80      	pop	{r7, pc}

0801507c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 801507c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801507e:	b089      	sub	sp, #36	; 0x24
 8015080:	af04      	add	r7, sp, #16
 8015082:	6078      	str	r0, [r7, #4]
 8015084:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8015086:	687b      	ldr	r3, [r7, #4]
 8015088:	695b      	ldr	r3, [r3, #20]
 801508a:	2b00      	cmp	r3, #0
 801508c:	d020      	beq.n	80150d0 <osThreadCreate+0x54>
 801508e:	687b      	ldr	r3, [r7, #4]
 8015090:	699b      	ldr	r3, [r3, #24]
 8015092:	2b00      	cmp	r3, #0
 8015094:	d01c      	beq.n	80150d0 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8015096:	687b      	ldr	r3, [r7, #4]
 8015098:	685c      	ldr	r4, [r3, #4]
 801509a:	687b      	ldr	r3, [r7, #4]
 801509c:	681d      	ldr	r5, [r3, #0]
 801509e:	687b      	ldr	r3, [r7, #4]
 80150a0:	691e      	ldr	r6, [r3, #16]
 80150a2:	687b      	ldr	r3, [r7, #4]
 80150a4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80150a8:	4618      	mov	r0, r3
 80150aa:	f7ff ff9a 	bl	8014fe2 <makeFreeRtosPriority>
 80150ae:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80150b0:	687b      	ldr	r3, [r7, #4]
 80150b2:	695b      	ldr	r3, [r3, #20]
 80150b4:	687a      	ldr	r2, [r7, #4]
 80150b6:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80150b8:	9202      	str	r2, [sp, #8]
 80150ba:	9301      	str	r3, [sp, #4]
 80150bc:	9100      	str	r1, [sp, #0]
 80150be:	683b      	ldr	r3, [r7, #0]
 80150c0:	4632      	mov	r2, r6
 80150c2:	4629      	mov	r1, r5
 80150c4:	4620      	mov	r0, r4
 80150c6:	f000 ffc5 	bl	8016054 <xTaskCreateStatic>
 80150ca:	4603      	mov	r3, r0
 80150cc:	60fb      	str	r3, [r7, #12]
 80150ce:	e01c      	b.n	801510a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80150d0:	687b      	ldr	r3, [r7, #4]
 80150d2:	685c      	ldr	r4, [r3, #4]
 80150d4:	687b      	ldr	r3, [r7, #4]
 80150d6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80150d8:	687b      	ldr	r3, [r7, #4]
 80150da:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80150dc:	b29e      	uxth	r6, r3
 80150de:	687b      	ldr	r3, [r7, #4]
 80150e0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80150e4:	4618      	mov	r0, r3
 80150e6:	f7ff ff7c 	bl	8014fe2 <makeFreeRtosPriority>
 80150ea:	4602      	mov	r2, r0
 80150ec:	f107 030c 	add.w	r3, r7, #12
 80150f0:	9301      	str	r3, [sp, #4]
 80150f2:	9200      	str	r2, [sp, #0]
 80150f4:	683b      	ldr	r3, [r7, #0]
 80150f6:	4632      	mov	r2, r6
 80150f8:	4629      	mov	r1, r5
 80150fa:	4620      	mov	r0, r4
 80150fc:	f001 f80d 	bl	801611a <xTaskCreate>
 8015100:	4603      	mov	r3, r0
 8015102:	2b01      	cmp	r3, #1
 8015104:	d001      	beq.n	801510a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8015106:	2300      	movs	r3, #0
 8015108:	e000      	b.n	801510c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 801510a:	68fb      	ldr	r3, [r7, #12]
}
 801510c:	4618      	mov	r0, r3
 801510e:	3714      	adds	r7, #20
 8015110:	46bd      	mov	sp, r7
 8015112:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015114 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8015114:	b580      	push	{r7, lr}
 8015116:	b084      	sub	sp, #16
 8015118:	af00      	add	r7, sp, #0
 801511a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 801511c:	687b      	ldr	r3, [r7, #4]
 801511e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8015120:	68fb      	ldr	r3, [r7, #12]
 8015122:	2b00      	cmp	r3, #0
 8015124:	d001      	beq.n	801512a <osDelay+0x16>
 8015126:	68fb      	ldr	r3, [r7, #12]
 8015128:	e000      	b.n	801512c <osDelay+0x18>
 801512a:	2301      	movs	r3, #1
 801512c:	4618      	mov	r0, r3
 801512e:	f001 f937 	bl	80163a0 <vTaskDelay>
  
  return osOK;
 8015132:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8015134:	4618      	mov	r0, r3
 8015136:	3710      	adds	r7, #16
 8015138:	46bd      	mov	sp, r7
 801513a:	bd80      	pop	{r7, pc}

0801513c <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 801513c:	b580      	push	{r7, lr}
 801513e:	b086      	sub	sp, #24
 8015140:	af02      	add	r7, sp, #8
 8015142:	6078      	str	r0, [r7, #4]
 8015144:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8015146:	2300      	movs	r3, #0
 8015148:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 801514a:	2300      	movs	r3, #0
 801514c:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 801514e:	f7ff ff60 	bl	8015012 <inHandlerMode>
 8015152:	4603      	mov	r3, r0
 8015154:	2b00      	cmp	r3, #0
 8015156:	d01c      	beq.n	8015192 <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 8015158:	6839      	ldr	r1, [r7, #0]
 801515a:	f107 0208 	add.w	r2, r7, #8
 801515e:	f107 030c 	add.w	r3, r7, #12
 8015162:	9300      	str	r3, [sp, #0]
 8015164:	4613      	mov	r3, r2
 8015166:	2201      	movs	r2, #1
 8015168:	6878      	ldr	r0, [r7, #4]
 801516a:	f001 ff67 	bl	801703c <xTaskGenericNotifyFromISR>
 801516e:	4603      	mov	r3, r0
 8015170:	2b01      	cmp	r3, #1
 8015172:	d002      	beq.n	801517a <osSignalSet+0x3e>
      return 0x80000000;
 8015174:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8015178:	e019      	b.n	80151ae <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 801517a:	68fb      	ldr	r3, [r7, #12]
 801517c:	2b00      	cmp	r3, #0
 801517e:	d015      	beq.n	80151ac <osSignalSet+0x70>
 8015180:	4b0d      	ldr	r3, [pc, #52]	; (80151b8 <osSignalSet+0x7c>)
 8015182:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015186:	601a      	str	r2, [r3, #0]
 8015188:	f3bf 8f4f 	dsb	sy
 801518c:	f3bf 8f6f 	isb	sy
 8015190:	e00c      	b.n	80151ac <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 8015192:	6839      	ldr	r1, [r7, #0]
 8015194:	f107 0308 	add.w	r3, r7, #8
 8015198:	2201      	movs	r2, #1
 801519a:	6878      	ldr	r0, [r7, #4]
 801519c:	f001 fe92 	bl	8016ec4 <xTaskGenericNotify>
 80151a0:	4603      	mov	r3, r0
 80151a2:	2b01      	cmp	r3, #1
 80151a4:	d002      	beq.n	80151ac <osSignalSet+0x70>
    return 0x80000000;
 80151a6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80151aa:	e000      	b.n	80151ae <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 80151ac:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 80151ae:	4618      	mov	r0, r3
 80151b0:	3710      	adds	r7, #16
 80151b2:	46bd      	mov	sp, r7
 80151b4:	bd80      	pop	{r7, pc}
 80151b6:	bf00      	nop
 80151b8:	e000ed04 	.word	0xe000ed04

080151bc <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 80151bc:	b590      	push	{r4, r7, lr}
 80151be:	b089      	sub	sp, #36	; 0x24
 80151c0:	af00      	add	r7, sp, #0
 80151c2:	60f8      	str	r0, [r7, #12]
 80151c4:	60b9      	str	r1, [r7, #8]
 80151c6:	607a      	str	r2, [r7, #4]

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 80151c8:	2300      	movs	r3, #0
 80151ca:	617b      	str	r3, [r7, #20]
  ticks = 0;
 80151cc:	2300      	movs	r3, #0
 80151ce:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 80151d0:	687b      	ldr	r3, [r7, #4]
 80151d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80151d6:	d103      	bne.n	80151e0 <osSignalWait+0x24>
    ticks = portMAX_DELAY;
 80151d8:	f04f 33ff 	mov.w	r3, #4294967295
 80151dc:	61fb      	str	r3, [r7, #28]
 80151de:	e009      	b.n	80151f4 <osSignalWait+0x38>
  }
  else if (millisec != 0) {
 80151e0:	687b      	ldr	r3, [r7, #4]
 80151e2:	2b00      	cmp	r3, #0
 80151e4:	d006      	beq.n	80151f4 <osSignalWait+0x38>
    ticks = millisec / portTICK_PERIOD_MS;
 80151e6:	687b      	ldr	r3, [r7, #4]
 80151e8:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 80151ea:	69fb      	ldr	r3, [r7, #28]
 80151ec:	2b00      	cmp	r3, #0
 80151ee:	d101      	bne.n	80151f4 <osSignalWait+0x38>
      ticks = 1;
 80151f0:	2301      	movs	r3, #1
 80151f2:	61fb      	str	r3, [r7, #28]
    }
  }  
  
  if (inHandlerMode())
 80151f4:	f7ff ff0d 	bl	8015012 <inHandlerMode>
 80151f8:	4603      	mov	r3, r0
 80151fa:	2b00      	cmp	r3, #0
 80151fc:	d002      	beq.n	8015204 <osSignalWait+0x48>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 80151fe:	2382      	movs	r3, #130	; 0x82
 8015200:	613b      	str	r3, [r7, #16]
 8015202:	e01b      	b.n	801523c <osSignalWait+0x80>
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 8015204:	68b9      	ldr	r1, [r7, #8]
 8015206:	f107 0310 	add.w	r3, r7, #16
 801520a:	1d1a      	adds	r2, r3, #4
 801520c:	69fb      	ldr	r3, [r7, #28]
 801520e:	2000      	movs	r0, #0
 8015210:	f001 fdfe 	bl	8016e10 <xTaskNotifyWait>
 8015214:	4603      	mov	r3, r0
 8015216:	2b01      	cmp	r3, #1
 8015218:	d008      	beq.n	801522c <osSignalWait+0x70>
    {
      if(ticks == 0)  ret.status = osOK;
 801521a:	69fb      	ldr	r3, [r7, #28]
 801521c:	2b00      	cmp	r3, #0
 801521e:	d102      	bne.n	8015226 <osSignalWait+0x6a>
 8015220:	2300      	movs	r3, #0
 8015222:	613b      	str	r3, [r7, #16]
 8015224:	e00a      	b.n	801523c <osSignalWait+0x80>
      else  ret.status = osEventTimeout;
 8015226:	2340      	movs	r3, #64	; 0x40
 8015228:	613b      	str	r3, [r7, #16]
 801522a:	e007      	b.n	801523c <osSignalWait+0x80>
    }
    else if(ret.value.signals < 0)
 801522c:	697b      	ldr	r3, [r7, #20]
 801522e:	2b00      	cmp	r3, #0
 8015230:	da02      	bge.n	8015238 <osSignalWait+0x7c>
    {
      ret.status =  osErrorValue;     
 8015232:	2386      	movs	r3, #134	; 0x86
 8015234:	613b      	str	r3, [r7, #16]
 8015236:	e001      	b.n	801523c <osSignalWait+0x80>
    }
    else  ret.status =  osEventSignal;
 8015238:	2308      	movs	r3, #8
 801523a:	613b      	str	r3, [r7, #16]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 801523c:	68fb      	ldr	r3, [r7, #12]
 801523e:	461c      	mov	r4, r3
 8015240:	f107 0310 	add.w	r3, r7, #16
 8015244:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8015248:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 801524c:	68f8      	ldr	r0, [r7, #12]
 801524e:	3724      	adds	r7, #36	; 0x24
 8015250:	46bd      	mov	sp, r7
 8015252:	bd90      	pop	{r4, r7, pc}

08015254 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8015254:	b590      	push	{r4, r7, lr}
 8015256:	b085      	sub	sp, #20
 8015258:	af02      	add	r7, sp, #8
 801525a:	6078      	str	r0, [r7, #4]
 801525c:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 801525e:	687b      	ldr	r3, [r7, #4]
 8015260:	689b      	ldr	r3, [r3, #8]
 8015262:	2b00      	cmp	r3, #0
 8015264:	d011      	beq.n	801528a <osMessageCreate+0x36>
 8015266:	687b      	ldr	r3, [r7, #4]
 8015268:	68db      	ldr	r3, [r3, #12]
 801526a:	2b00      	cmp	r3, #0
 801526c:	d00d      	beq.n	801528a <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 801526e:	687b      	ldr	r3, [r7, #4]
 8015270:	6818      	ldr	r0, [r3, #0]
 8015272:	687b      	ldr	r3, [r7, #4]
 8015274:	6859      	ldr	r1, [r3, #4]
 8015276:	687b      	ldr	r3, [r7, #4]
 8015278:	689a      	ldr	r2, [r3, #8]
 801527a:	687b      	ldr	r3, [r7, #4]
 801527c:	68db      	ldr	r3, [r3, #12]
 801527e:	2400      	movs	r4, #0
 8015280:	9400      	str	r4, [sp, #0]
 8015282:	f000 f9e1 	bl	8015648 <xQueueGenericCreateStatic>
 8015286:	4603      	mov	r3, r0
 8015288:	e008      	b.n	801529c <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 801528a:	687b      	ldr	r3, [r7, #4]
 801528c:	6818      	ldr	r0, [r3, #0]
 801528e:	687b      	ldr	r3, [r7, #4]
 8015290:	685b      	ldr	r3, [r3, #4]
 8015292:	2200      	movs	r2, #0
 8015294:	4619      	mov	r1, r3
 8015296:	f000 fa59 	bl	801574c <xQueueGenericCreate>
 801529a:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 801529c:	4618      	mov	r0, r3
 801529e:	370c      	adds	r7, #12
 80152a0:	46bd      	mov	sp, r7
 80152a2:	bd90      	pop	{r4, r7, pc}

080152a4 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80152a4:	b580      	push	{r7, lr}
 80152a6:	b086      	sub	sp, #24
 80152a8:	af00      	add	r7, sp, #0
 80152aa:	60f8      	str	r0, [r7, #12]
 80152ac:	60b9      	str	r1, [r7, #8]
 80152ae:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80152b0:	2300      	movs	r3, #0
 80152b2:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80152b4:	687b      	ldr	r3, [r7, #4]
 80152b6:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80152b8:	697b      	ldr	r3, [r7, #20]
 80152ba:	2b00      	cmp	r3, #0
 80152bc:	d101      	bne.n	80152c2 <osMessagePut+0x1e>
    ticks = 1;
 80152be:	2301      	movs	r3, #1
 80152c0:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80152c2:	f7ff fea6 	bl	8015012 <inHandlerMode>
 80152c6:	4603      	mov	r3, r0
 80152c8:	2b00      	cmp	r3, #0
 80152ca:	d018      	beq.n	80152fe <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80152cc:	f107 0210 	add.w	r2, r7, #16
 80152d0:	f107 0108 	add.w	r1, r7, #8
 80152d4:	2300      	movs	r3, #0
 80152d6:	68f8      	ldr	r0, [r7, #12]
 80152d8:	f000 fba0 	bl	8015a1c <xQueueGenericSendFromISR>
 80152dc:	4603      	mov	r3, r0
 80152de:	2b01      	cmp	r3, #1
 80152e0:	d001      	beq.n	80152e6 <osMessagePut+0x42>
      return osErrorOS;
 80152e2:	23ff      	movs	r3, #255	; 0xff
 80152e4:	e018      	b.n	8015318 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80152e6:	693b      	ldr	r3, [r7, #16]
 80152e8:	2b00      	cmp	r3, #0
 80152ea:	d014      	beq.n	8015316 <osMessagePut+0x72>
 80152ec:	4b0c      	ldr	r3, [pc, #48]	; (8015320 <osMessagePut+0x7c>)
 80152ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80152f2:	601a      	str	r2, [r3, #0]
 80152f4:	f3bf 8f4f 	dsb	sy
 80152f8:	f3bf 8f6f 	isb	sy
 80152fc:	e00b      	b.n	8015316 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80152fe:	f107 0108 	add.w	r1, r7, #8
 8015302:	2300      	movs	r3, #0
 8015304:	697a      	ldr	r2, [r7, #20]
 8015306:	68f8      	ldr	r0, [r7, #12]
 8015308:	f000 fa82 	bl	8015810 <xQueueGenericSend>
 801530c:	4603      	mov	r3, r0
 801530e:	2b01      	cmp	r3, #1
 8015310:	d001      	beq.n	8015316 <osMessagePut+0x72>
      return osErrorOS;
 8015312:	23ff      	movs	r3, #255	; 0xff
 8015314:	e000      	b.n	8015318 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8015316:	2300      	movs	r3, #0
}
 8015318:	4618      	mov	r0, r3
 801531a:	3718      	adds	r7, #24
 801531c:	46bd      	mov	sp, r7
 801531e:	bd80      	pop	{r7, pc}
 8015320:	e000ed04 	.word	0xe000ed04

08015324 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8015324:	b590      	push	{r4, r7, lr}
 8015326:	b08b      	sub	sp, #44	; 0x2c
 8015328:	af00      	add	r7, sp, #0
 801532a:	60f8      	str	r0, [r7, #12]
 801532c:	60b9      	str	r1, [r7, #8]
 801532e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8015330:	68bb      	ldr	r3, [r7, #8]
 8015332:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8015334:	2300      	movs	r3, #0
 8015336:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8015338:	68bb      	ldr	r3, [r7, #8]
 801533a:	2b00      	cmp	r3, #0
 801533c:	d10a      	bne.n	8015354 <osMessageGet+0x30>
    event.status = osErrorParameter;
 801533e:	2380      	movs	r3, #128	; 0x80
 8015340:	617b      	str	r3, [r7, #20]
    return event;
 8015342:	68fb      	ldr	r3, [r7, #12]
 8015344:	461c      	mov	r4, r3
 8015346:	f107 0314 	add.w	r3, r7, #20
 801534a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801534e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8015352:	e054      	b.n	80153fe <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8015354:	2300      	movs	r3, #0
 8015356:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8015358:	2300      	movs	r3, #0
 801535a:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 801535c:	687b      	ldr	r3, [r7, #4]
 801535e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015362:	d103      	bne.n	801536c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8015364:	f04f 33ff 	mov.w	r3, #4294967295
 8015368:	627b      	str	r3, [r7, #36]	; 0x24
 801536a:	e009      	b.n	8015380 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 801536c:	687b      	ldr	r3, [r7, #4]
 801536e:	2b00      	cmp	r3, #0
 8015370:	d006      	beq.n	8015380 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8015372:	687b      	ldr	r3, [r7, #4]
 8015374:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8015376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015378:	2b00      	cmp	r3, #0
 801537a:	d101      	bne.n	8015380 <osMessageGet+0x5c>
      ticks = 1;
 801537c:	2301      	movs	r3, #1
 801537e:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8015380:	f7ff fe47 	bl	8015012 <inHandlerMode>
 8015384:	4603      	mov	r3, r0
 8015386:	2b00      	cmp	r3, #0
 8015388:	d01c      	beq.n	80153c4 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 801538a:	f107 0220 	add.w	r2, r7, #32
 801538e:	f107 0314 	add.w	r3, r7, #20
 8015392:	3304      	adds	r3, #4
 8015394:	4619      	mov	r1, r3
 8015396:	68b8      	ldr	r0, [r7, #8]
 8015398:	f000 fcc6 	bl	8015d28 <xQueueReceiveFromISR>
 801539c:	4603      	mov	r3, r0
 801539e:	2b01      	cmp	r3, #1
 80153a0:	d102      	bne.n	80153a8 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80153a2:	2310      	movs	r3, #16
 80153a4:	617b      	str	r3, [r7, #20]
 80153a6:	e001      	b.n	80153ac <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80153a8:	2300      	movs	r3, #0
 80153aa:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80153ac:	6a3b      	ldr	r3, [r7, #32]
 80153ae:	2b00      	cmp	r3, #0
 80153b0:	d01d      	beq.n	80153ee <osMessageGet+0xca>
 80153b2:	4b15      	ldr	r3, [pc, #84]	; (8015408 <osMessageGet+0xe4>)
 80153b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80153b8:	601a      	str	r2, [r3, #0]
 80153ba:	f3bf 8f4f 	dsb	sy
 80153be:	f3bf 8f6f 	isb	sy
 80153c2:	e014      	b.n	80153ee <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80153c4:	f107 0314 	add.w	r3, r7, #20
 80153c8:	3304      	adds	r3, #4
 80153ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80153cc:	4619      	mov	r1, r3
 80153ce:	68b8      	ldr	r0, [r7, #8]
 80153d0:	f000 fbc4 	bl	8015b5c <xQueueReceive>
 80153d4:	4603      	mov	r3, r0
 80153d6:	2b01      	cmp	r3, #1
 80153d8:	d102      	bne.n	80153e0 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80153da:	2310      	movs	r3, #16
 80153dc:	617b      	str	r3, [r7, #20]
 80153de:	e006      	b.n	80153ee <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80153e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153e2:	2b00      	cmp	r3, #0
 80153e4:	d101      	bne.n	80153ea <osMessageGet+0xc6>
 80153e6:	2300      	movs	r3, #0
 80153e8:	e000      	b.n	80153ec <osMessageGet+0xc8>
 80153ea:	2340      	movs	r3, #64	; 0x40
 80153ec:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80153ee:	68fb      	ldr	r3, [r7, #12]
 80153f0:	461c      	mov	r4, r3
 80153f2:	f107 0314 	add.w	r3, r7, #20
 80153f6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80153fa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80153fe:	68f8      	ldr	r0, [r7, #12]
 8015400:	372c      	adds	r7, #44	; 0x2c
 8015402:	46bd      	mov	sp, r7
 8015404:	bd90      	pop	{r4, r7, pc}
 8015406:	bf00      	nop
 8015408:	e000ed04 	.word	0xe000ed04

0801540c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 801540c:	b480      	push	{r7}
 801540e:	b083      	sub	sp, #12
 8015410:	af00      	add	r7, sp, #0
 8015412:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8015414:	687b      	ldr	r3, [r7, #4]
 8015416:	f103 0208 	add.w	r2, r3, #8
 801541a:	687b      	ldr	r3, [r7, #4]
 801541c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801541e:	687b      	ldr	r3, [r7, #4]
 8015420:	f04f 32ff 	mov.w	r2, #4294967295
 8015424:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8015426:	687b      	ldr	r3, [r7, #4]
 8015428:	f103 0208 	add.w	r2, r3, #8
 801542c:	687b      	ldr	r3, [r7, #4]
 801542e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8015430:	687b      	ldr	r3, [r7, #4]
 8015432:	f103 0208 	add.w	r2, r3, #8
 8015436:	687b      	ldr	r3, [r7, #4]
 8015438:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801543a:	687b      	ldr	r3, [r7, #4]
 801543c:	2200      	movs	r2, #0
 801543e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8015440:	bf00      	nop
 8015442:	370c      	adds	r7, #12
 8015444:	46bd      	mov	sp, r7
 8015446:	f85d 7b04 	ldr.w	r7, [sp], #4
 801544a:	4770      	bx	lr

0801544c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 801544c:	b480      	push	{r7}
 801544e:	b083      	sub	sp, #12
 8015450:	af00      	add	r7, sp, #0
 8015452:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8015454:	687b      	ldr	r3, [r7, #4]
 8015456:	2200      	movs	r2, #0
 8015458:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801545a:	bf00      	nop
 801545c:	370c      	adds	r7, #12
 801545e:	46bd      	mov	sp, r7
 8015460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015464:	4770      	bx	lr

08015466 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8015466:	b480      	push	{r7}
 8015468:	b085      	sub	sp, #20
 801546a:	af00      	add	r7, sp, #0
 801546c:	6078      	str	r0, [r7, #4]
 801546e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8015470:	687b      	ldr	r3, [r7, #4]
 8015472:	685b      	ldr	r3, [r3, #4]
 8015474:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8015476:	683b      	ldr	r3, [r7, #0]
 8015478:	68fa      	ldr	r2, [r7, #12]
 801547a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801547c:	68fb      	ldr	r3, [r7, #12]
 801547e:	689a      	ldr	r2, [r3, #8]
 8015480:	683b      	ldr	r3, [r7, #0]
 8015482:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8015484:	68fb      	ldr	r3, [r7, #12]
 8015486:	689b      	ldr	r3, [r3, #8]
 8015488:	683a      	ldr	r2, [r7, #0]
 801548a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 801548c:	68fb      	ldr	r3, [r7, #12]
 801548e:	683a      	ldr	r2, [r7, #0]
 8015490:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8015492:	683b      	ldr	r3, [r7, #0]
 8015494:	687a      	ldr	r2, [r7, #4]
 8015496:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8015498:	687b      	ldr	r3, [r7, #4]
 801549a:	681b      	ldr	r3, [r3, #0]
 801549c:	1c5a      	adds	r2, r3, #1
 801549e:	687b      	ldr	r3, [r7, #4]
 80154a0:	601a      	str	r2, [r3, #0]
}
 80154a2:	bf00      	nop
 80154a4:	3714      	adds	r7, #20
 80154a6:	46bd      	mov	sp, r7
 80154a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154ac:	4770      	bx	lr

080154ae <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80154ae:	b480      	push	{r7}
 80154b0:	b085      	sub	sp, #20
 80154b2:	af00      	add	r7, sp, #0
 80154b4:	6078      	str	r0, [r7, #4]
 80154b6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80154b8:	683b      	ldr	r3, [r7, #0]
 80154ba:	681b      	ldr	r3, [r3, #0]
 80154bc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80154be:	68bb      	ldr	r3, [r7, #8]
 80154c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80154c4:	d103      	bne.n	80154ce <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80154c6:	687b      	ldr	r3, [r7, #4]
 80154c8:	691b      	ldr	r3, [r3, #16]
 80154ca:	60fb      	str	r3, [r7, #12]
 80154cc:	e00c      	b.n	80154e8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80154ce:	687b      	ldr	r3, [r7, #4]
 80154d0:	3308      	adds	r3, #8
 80154d2:	60fb      	str	r3, [r7, #12]
 80154d4:	e002      	b.n	80154dc <vListInsert+0x2e>
 80154d6:	68fb      	ldr	r3, [r7, #12]
 80154d8:	685b      	ldr	r3, [r3, #4]
 80154da:	60fb      	str	r3, [r7, #12]
 80154dc:	68fb      	ldr	r3, [r7, #12]
 80154de:	685b      	ldr	r3, [r3, #4]
 80154e0:	681b      	ldr	r3, [r3, #0]
 80154e2:	68ba      	ldr	r2, [r7, #8]
 80154e4:	429a      	cmp	r2, r3
 80154e6:	d2f6      	bcs.n	80154d6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80154e8:	68fb      	ldr	r3, [r7, #12]
 80154ea:	685a      	ldr	r2, [r3, #4]
 80154ec:	683b      	ldr	r3, [r7, #0]
 80154ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80154f0:	683b      	ldr	r3, [r7, #0]
 80154f2:	685b      	ldr	r3, [r3, #4]
 80154f4:	683a      	ldr	r2, [r7, #0]
 80154f6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80154f8:	683b      	ldr	r3, [r7, #0]
 80154fa:	68fa      	ldr	r2, [r7, #12]
 80154fc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80154fe:	68fb      	ldr	r3, [r7, #12]
 8015500:	683a      	ldr	r2, [r7, #0]
 8015502:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8015504:	683b      	ldr	r3, [r7, #0]
 8015506:	687a      	ldr	r2, [r7, #4]
 8015508:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801550a:	687b      	ldr	r3, [r7, #4]
 801550c:	681b      	ldr	r3, [r3, #0]
 801550e:	1c5a      	adds	r2, r3, #1
 8015510:	687b      	ldr	r3, [r7, #4]
 8015512:	601a      	str	r2, [r3, #0]
}
 8015514:	bf00      	nop
 8015516:	3714      	adds	r7, #20
 8015518:	46bd      	mov	sp, r7
 801551a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801551e:	4770      	bx	lr

08015520 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8015520:	b480      	push	{r7}
 8015522:	b085      	sub	sp, #20
 8015524:	af00      	add	r7, sp, #0
 8015526:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8015528:	687b      	ldr	r3, [r7, #4]
 801552a:	691b      	ldr	r3, [r3, #16]
 801552c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801552e:	687b      	ldr	r3, [r7, #4]
 8015530:	685b      	ldr	r3, [r3, #4]
 8015532:	687a      	ldr	r2, [r7, #4]
 8015534:	6892      	ldr	r2, [r2, #8]
 8015536:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8015538:	687b      	ldr	r3, [r7, #4]
 801553a:	689b      	ldr	r3, [r3, #8]
 801553c:	687a      	ldr	r2, [r7, #4]
 801553e:	6852      	ldr	r2, [r2, #4]
 8015540:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8015542:	68fb      	ldr	r3, [r7, #12]
 8015544:	685b      	ldr	r3, [r3, #4]
 8015546:	687a      	ldr	r2, [r7, #4]
 8015548:	429a      	cmp	r2, r3
 801554a:	d103      	bne.n	8015554 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 801554c:	687b      	ldr	r3, [r7, #4]
 801554e:	689a      	ldr	r2, [r3, #8]
 8015550:	68fb      	ldr	r3, [r7, #12]
 8015552:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8015554:	687b      	ldr	r3, [r7, #4]
 8015556:	2200      	movs	r2, #0
 8015558:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801555a:	68fb      	ldr	r3, [r7, #12]
 801555c:	681b      	ldr	r3, [r3, #0]
 801555e:	1e5a      	subs	r2, r3, #1
 8015560:	68fb      	ldr	r3, [r7, #12]
 8015562:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8015564:	68fb      	ldr	r3, [r7, #12]
 8015566:	681b      	ldr	r3, [r3, #0]
}
 8015568:	4618      	mov	r0, r3
 801556a:	3714      	adds	r7, #20
 801556c:	46bd      	mov	sp, r7
 801556e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015572:	4770      	bx	lr

08015574 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8015574:	b580      	push	{r7, lr}
 8015576:	b084      	sub	sp, #16
 8015578:	af00      	add	r7, sp, #0
 801557a:	6078      	str	r0, [r7, #4]
 801557c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801557e:	687b      	ldr	r3, [r7, #4]
 8015580:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8015582:	68fb      	ldr	r3, [r7, #12]
 8015584:	2b00      	cmp	r3, #0
 8015586:	d10c      	bne.n	80155a2 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8015588:	f04f 0350 	mov.w	r3, #80	; 0x50
 801558c:	b672      	cpsid	i
 801558e:	f383 8811 	msr	BASEPRI, r3
 8015592:	f3bf 8f6f 	isb	sy
 8015596:	f3bf 8f4f 	dsb	sy
 801559a:	b662      	cpsie	i
 801559c:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 801559e:	bf00      	nop
 80155a0:	e7fe      	b.n	80155a0 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80155a2:	f001 ffa3 	bl	80174ec <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80155a6:	68fb      	ldr	r3, [r7, #12]
 80155a8:	681a      	ldr	r2, [r3, #0]
 80155aa:	68fb      	ldr	r3, [r7, #12]
 80155ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80155ae:	68f9      	ldr	r1, [r7, #12]
 80155b0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80155b2:	fb01 f303 	mul.w	r3, r1, r3
 80155b6:	441a      	add	r2, r3
 80155b8:	68fb      	ldr	r3, [r7, #12]
 80155ba:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80155bc:	68fb      	ldr	r3, [r7, #12]
 80155be:	2200      	movs	r2, #0
 80155c0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80155c2:	68fb      	ldr	r3, [r7, #12]
 80155c4:	681a      	ldr	r2, [r3, #0]
 80155c6:	68fb      	ldr	r3, [r7, #12]
 80155c8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80155ca:	68fb      	ldr	r3, [r7, #12]
 80155cc:	681a      	ldr	r2, [r3, #0]
 80155ce:	68fb      	ldr	r3, [r7, #12]
 80155d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80155d2:	3b01      	subs	r3, #1
 80155d4:	68f9      	ldr	r1, [r7, #12]
 80155d6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80155d8:	fb01 f303 	mul.w	r3, r1, r3
 80155dc:	441a      	add	r2, r3
 80155de:	68fb      	ldr	r3, [r7, #12]
 80155e0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80155e2:	68fb      	ldr	r3, [r7, #12]
 80155e4:	22ff      	movs	r2, #255	; 0xff
 80155e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80155ea:	68fb      	ldr	r3, [r7, #12]
 80155ec:	22ff      	movs	r2, #255	; 0xff
 80155ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80155f2:	683b      	ldr	r3, [r7, #0]
 80155f4:	2b00      	cmp	r3, #0
 80155f6:	d114      	bne.n	8015622 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80155f8:	68fb      	ldr	r3, [r7, #12]
 80155fa:	691b      	ldr	r3, [r3, #16]
 80155fc:	2b00      	cmp	r3, #0
 80155fe:	d01a      	beq.n	8015636 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015600:	68fb      	ldr	r3, [r7, #12]
 8015602:	3310      	adds	r3, #16
 8015604:	4618      	mov	r0, r3
 8015606:	f001 f995 	bl	8016934 <xTaskRemoveFromEventList>
 801560a:	4603      	mov	r3, r0
 801560c:	2b00      	cmp	r3, #0
 801560e:	d012      	beq.n	8015636 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8015610:	4b0c      	ldr	r3, [pc, #48]	; (8015644 <xQueueGenericReset+0xd0>)
 8015612:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015616:	601a      	str	r2, [r3, #0]
 8015618:	f3bf 8f4f 	dsb	sy
 801561c:	f3bf 8f6f 	isb	sy
 8015620:	e009      	b.n	8015636 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8015622:	68fb      	ldr	r3, [r7, #12]
 8015624:	3310      	adds	r3, #16
 8015626:	4618      	mov	r0, r3
 8015628:	f7ff fef0 	bl	801540c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 801562c:	68fb      	ldr	r3, [r7, #12]
 801562e:	3324      	adds	r3, #36	; 0x24
 8015630:	4618      	mov	r0, r3
 8015632:	f7ff feeb 	bl	801540c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8015636:	f001 ff8d 	bl	8017554 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801563a:	2301      	movs	r3, #1
}
 801563c:	4618      	mov	r0, r3
 801563e:	3710      	adds	r7, #16
 8015640:	46bd      	mov	sp, r7
 8015642:	bd80      	pop	{r7, pc}
 8015644:	e000ed04 	.word	0xe000ed04

08015648 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8015648:	b580      	push	{r7, lr}
 801564a:	b08e      	sub	sp, #56	; 0x38
 801564c:	af02      	add	r7, sp, #8
 801564e:	60f8      	str	r0, [r7, #12]
 8015650:	60b9      	str	r1, [r7, #8]
 8015652:	607a      	str	r2, [r7, #4]
 8015654:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8015656:	68fb      	ldr	r3, [r7, #12]
 8015658:	2b00      	cmp	r3, #0
 801565a:	d10c      	bne.n	8015676 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 801565c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015660:	b672      	cpsid	i
 8015662:	f383 8811 	msr	BASEPRI, r3
 8015666:	f3bf 8f6f 	isb	sy
 801566a:	f3bf 8f4f 	dsb	sy
 801566e:	b662      	cpsie	i
 8015670:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8015672:	bf00      	nop
 8015674:	e7fe      	b.n	8015674 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8015676:	683b      	ldr	r3, [r7, #0]
 8015678:	2b00      	cmp	r3, #0
 801567a:	d10c      	bne.n	8015696 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 801567c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015680:	b672      	cpsid	i
 8015682:	f383 8811 	msr	BASEPRI, r3
 8015686:	f3bf 8f6f 	isb	sy
 801568a:	f3bf 8f4f 	dsb	sy
 801568e:	b662      	cpsie	i
 8015690:	627b      	str	r3, [r7, #36]	; 0x24
}
 8015692:	bf00      	nop
 8015694:	e7fe      	b.n	8015694 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8015696:	687b      	ldr	r3, [r7, #4]
 8015698:	2b00      	cmp	r3, #0
 801569a:	d002      	beq.n	80156a2 <xQueueGenericCreateStatic+0x5a>
 801569c:	68bb      	ldr	r3, [r7, #8]
 801569e:	2b00      	cmp	r3, #0
 80156a0:	d001      	beq.n	80156a6 <xQueueGenericCreateStatic+0x5e>
 80156a2:	2301      	movs	r3, #1
 80156a4:	e000      	b.n	80156a8 <xQueueGenericCreateStatic+0x60>
 80156a6:	2300      	movs	r3, #0
 80156a8:	2b00      	cmp	r3, #0
 80156aa:	d10c      	bne.n	80156c6 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 80156ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80156b0:	b672      	cpsid	i
 80156b2:	f383 8811 	msr	BASEPRI, r3
 80156b6:	f3bf 8f6f 	isb	sy
 80156ba:	f3bf 8f4f 	dsb	sy
 80156be:	b662      	cpsie	i
 80156c0:	623b      	str	r3, [r7, #32]
}
 80156c2:	bf00      	nop
 80156c4:	e7fe      	b.n	80156c4 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80156c6:	687b      	ldr	r3, [r7, #4]
 80156c8:	2b00      	cmp	r3, #0
 80156ca:	d102      	bne.n	80156d2 <xQueueGenericCreateStatic+0x8a>
 80156cc:	68bb      	ldr	r3, [r7, #8]
 80156ce:	2b00      	cmp	r3, #0
 80156d0:	d101      	bne.n	80156d6 <xQueueGenericCreateStatic+0x8e>
 80156d2:	2301      	movs	r3, #1
 80156d4:	e000      	b.n	80156d8 <xQueueGenericCreateStatic+0x90>
 80156d6:	2300      	movs	r3, #0
 80156d8:	2b00      	cmp	r3, #0
 80156da:	d10c      	bne.n	80156f6 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 80156dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80156e0:	b672      	cpsid	i
 80156e2:	f383 8811 	msr	BASEPRI, r3
 80156e6:	f3bf 8f6f 	isb	sy
 80156ea:	f3bf 8f4f 	dsb	sy
 80156ee:	b662      	cpsie	i
 80156f0:	61fb      	str	r3, [r7, #28]
}
 80156f2:	bf00      	nop
 80156f4:	e7fe      	b.n	80156f4 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80156f6:	2348      	movs	r3, #72	; 0x48
 80156f8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80156fa:	697b      	ldr	r3, [r7, #20]
 80156fc:	2b48      	cmp	r3, #72	; 0x48
 80156fe:	d00c      	beq.n	801571a <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8015700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015704:	b672      	cpsid	i
 8015706:	f383 8811 	msr	BASEPRI, r3
 801570a:	f3bf 8f6f 	isb	sy
 801570e:	f3bf 8f4f 	dsb	sy
 8015712:	b662      	cpsie	i
 8015714:	61bb      	str	r3, [r7, #24]
}
 8015716:	bf00      	nop
 8015718:	e7fe      	b.n	8015718 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801571a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801571c:	683b      	ldr	r3, [r7, #0]
 801571e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8015720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015722:	2b00      	cmp	r3, #0
 8015724:	d00d      	beq.n	8015742 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8015726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015728:	2201      	movs	r2, #1
 801572a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801572e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8015732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015734:	9300      	str	r3, [sp, #0]
 8015736:	4613      	mov	r3, r2
 8015738:	687a      	ldr	r2, [r7, #4]
 801573a:	68b9      	ldr	r1, [r7, #8]
 801573c:	68f8      	ldr	r0, [r7, #12]
 801573e:	f000 f847 	bl	80157d0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8015742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8015744:	4618      	mov	r0, r3
 8015746:	3730      	adds	r7, #48	; 0x30
 8015748:	46bd      	mov	sp, r7
 801574a:	bd80      	pop	{r7, pc}

0801574c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 801574c:	b580      	push	{r7, lr}
 801574e:	b08a      	sub	sp, #40	; 0x28
 8015750:	af02      	add	r7, sp, #8
 8015752:	60f8      	str	r0, [r7, #12]
 8015754:	60b9      	str	r1, [r7, #8]
 8015756:	4613      	mov	r3, r2
 8015758:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801575a:	68fb      	ldr	r3, [r7, #12]
 801575c:	2b00      	cmp	r3, #0
 801575e:	d10c      	bne.n	801577a <xQueueGenericCreate+0x2e>
	__asm volatile
 8015760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015764:	b672      	cpsid	i
 8015766:	f383 8811 	msr	BASEPRI, r3
 801576a:	f3bf 8f6f 	isb	sy
 801576e:	f3bf 8f4f 	dsb	sy
 8015772:	b662      	cpsie	i
 8015774:	613b      	str	r3, [r7, #16]
}
 8015776:	bf00      	nop
 8015778:	e7fe      	b.n	8015778 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 801577a:	68bb      	ldr	r3, [r7, #8]
 801577c:	2b00      	cmp	r3, #0
 801577e:	d102      	bne.n	8015786 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8015780:	2300      	movs	r3, #0
 8015782:	61fb      	str	r3, [r7, #28]
 8015784:	e004      	b.n	8015790 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015786:	68fb      	ldr	r3, [r7, #12]
 8015788:	68ba      	ldr	r2, [r7, #8]
 801578a:	fb02 f303 	mul.w	r3, r2, r3
 801578e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8015790:	69fb      	ldr	r3, [r7, #28]
 8015792:	3348      	adds	r3, #72	; 0x48
 8015794:	4618      	mov	r0, r3
 8015796:	f001 ffd5 	bl	8017744 <pvPortMalloc>
 801579a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 801579c:	69bb      	ldr	r3, [r7, #24]
 801579e:	2b00      	cmp	r3, #0
 80157a0:	d011      	beq.n	80157c6 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80157a2:	69bb      	ldr	r3, [r7, #24]
 80157a4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80157a6:	697b      	ldr	r3, [r7, #20]
 80157a8:	3348      	adds	r3, #72	; 0x48
 80157aa:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80157ac:	69bb      	ldr	r3, [r7, #24]
 80157ae:	2200      	movs	r2, #0
 80157b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80157b4:	79fa      	ldrb	r2, [r7, #7]
 80157b6:	69bb      	ldr	r3, [r7, #24]
 80157b8:	9300      	str	r3, [sp, #0]
 80157ba:	4613      	mov	r3, r2
 80157bc:	697a      	ldr	r2, [r7, #20]
 80157be:	68b9      	ldr	r1, [r7, #8]
 80157c0:	68f8      	ldr	r0, [r7, #12]
 80157c2:	f000 f805 	bl	80157d0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80157c6:	69bb      	ldr	r3, [r7, #24]
	}
 80157c8:	4618      	mov	r0, r3
 80157ca:	3720      	adds	r7, #32
 80157cc:	46bd      	mov	sp, r7
 80157ce:	bd80      	pop	{r7, pc}

080157d0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80157d0:	b580      	push	{r7, lr}
 80157d2:	b084      	sub	sp, #16
 80157d4:	af00      	add	r7, sp, #0
 80157d6:	60f8      	str	r0, [r7, #12]
 80157d8:	60b9      	str	r1, [r7, #8]
 80157da:	607a      	str	r2, [r7, #4]
 80157dc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80157de:	68bb      	ldr	r3, [r7, #8]
 80157e0:	2b00      	cmp	r3, #0
 80157e2:	d103      	bne.n	80157ec <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80157e4:	69bb      	ldr	r3, [r7, #24]
 80157e6:	69ba      	ldr	r2, [r7, #24]
 80157e8:	601a      	str	r2, [r3, #0]
 80157ea:	e002      	b.n	80157f2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80157ec:	69bb      	ldr	r3, [r7, #24]
 80157ee:	687a      	ldr	r2, [r7, #4]
 80157f0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80157f2:	69bb      	ldr	r3, [r7, #24]
 80157f4:	68fa      	ldr	r2, [r7, #12]
 80157f6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80157f8:	69bb      	ldr	r3, [r7, #24]
 80157fa:	68ba      	ldr	r2, [r7, #8]
 80157fc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80157fe:	2101      	movs	r1, #1
 8015800:	69b8      	ldr	r0, [r7, #24]
 8015802:	f7ff feb7 	bl	8015574 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8015806:	bf00      	nop
 8015808:	3710      	adds	r7, #16
 801580a:	46bd      	mov	sp, r7
 801580c:	bd80      	pop	{r7, pc}
	...

08015810 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8015810:	b580      	push	{r7, lr}
 8015812:	b08e      	sub	sp, #56	; 0x38
 8015814:	af00      	add	r7, sp, #0
 8015816:	60f8      	str	r0, [r7, #12]
 8015818:	60b9      	str	r1, [r7, #8]
 801581a:	607a      	str	r2, [r7, #4]
 801581c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801581e:	2300      	movs	r3, #0
 8015820:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8015822:	68fb      	ldr	r3, [r7, #12]
 8015824:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8015826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015828:	2b00      	cmp	r3, #0
 801582a:	d10c      	bne.n	8015846 <xQueueGenericSend+0x36>
	__asm volatile
 801582c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015830:	b672      	cpsid	i
 8015832:	f383 8811 	msr	BASEPRI, r3
 8015836:	f3bf 8f6f 	isb	sy
 801583a:	f3bf 8f4f 	dsb	sy
 801583e:	b662      	cpsie	i
 8015840:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8015842:	bf00      	nop
 8015844:	e7fe      	b.n	8015844 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015846:	68bb      	ldr	r3, [r7, #8]
 8015848:	2b00      	cmp	r3, #0
 801584a:	d103      	bne.n	8015854 <xQueueGenericSend+0x44>
 801584c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801584e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015850:	2b00      	cmp	r3, #0
 8015852:	d101      	bne.n	8015858 <xQueueGenericSend+0x48>
 8015854:	2301      	movs	r3, #1
 8015856:	e000      	b.n	801585a <xQueueGenericSend+0x4a>
 8015858:	2300      	movs	r3, #0
 801585a:	2b00      	cmp	r3, #0
 801585c:	d10c      	bne.n	8015878 <xQueueGenericSend+0x68>
	__asm volatile
 801585e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015862:	b672      	cpsid	i
 8015864:	f383 8811 	msr	BASEPRI, r3
 8015868:	f3bf 8f6f 	isb	sy
 801586c:	f3bf 8f4f 	dsb	sy
 8015870:	b662      	cpsie	i
 8015872:	627b      	str	r3, [r7, #36]	; 0x24
}
 8015874:	bf00      	nop
 8015876:	e7fe      	b.n	8015876 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8015878:	683b      	ldr	r3, [r7, #0]
 801587a:	2b02      	cmp	r3, #2
 801587c:	d103      	bne.n	8015886 <xQueueGenericSend+0x76>
 801587e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015880:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015882:	2b01      	cmp	r3, #1
 8015884:	d101      	bne.n	801588a <xQueueGenericSend+0x7a>
 8015886:	2301      	movs	r3, #1
 8015888:	e000      	b.n	801588c <xQueueGenericSend+0x7c>
 801588a:	2300      	movs	r3, #0
 801588c:	2b00      	cmp	r3, #0
 801588e:	d10c      	bne.n	80158aa <xQueueGenericSend+0x9a>
	__asm volatile
 8015890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015894:	b672      	cpsid	i
 8015896:	f383 8811 	msr	BASEPRI, r3
 801589a:	f3bf 8f6f 	isb	sy
 801589e:	f3bf 8f4f 	dsb	sy
 80158a2:	b662      	cpsie	i
 80158a4:	623b      	str	r3, [r7, #32]
}
 80158a6:	bf00      	nop
 80158a8:	e7fe      	b.n	80158a8 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80158aa:	f001 fa09 	bl	8016cc0 <xTaskGetSchedulerState>
 80158ae:	4603      	mov	r3, r0
 80158b0:	2b00      	cmp	r3, #0
 80158b2:	d102      	bne.n	80158ba <xQueueGenericSend+0xaa>
 80158b4:	687b      	ldr	r3, [r7, #4]
 80158b6:	2b00      	cmp	r3, #0
 80158b8:	d101      	bne.n	80158be <xQueueGenericSend+0xae>
 80158ba:	2301      	movs	r3, #1
 80158bc:	e000      	b.n	80158c0 <xQueueGenericSend+0xb0>
 80158be:	2300      	movs	r3, #0
 80158c0:	2b00      	cmp	r3, #0
 80158c2:	d10c      	bne.n	80158de <xQueueGenericSend+0xce>
	__asm volatile
 80158c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80158c8:	b672      	cpsid	i
 80158ca:	f383 8811 	msr	BASEPRI, r3
 80158ce:	f3bf 8f6f 	isb	sy
 80158d2:	f3bf 8f4f 	dsb	sy
 80158d6:	b662      	cpsie	i
 80158d8:	61fb      	str	r3, [r7, #28]
}
 80158da:	bf00      	nop
 80158dc:	e7fe      	b.n	80158dc <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80158de:	f001 fe05 	bl	80174ec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80158e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80158e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80158e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80158e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80158ea:	429a      	cmp	r2, r3
 80158ec:	d302      	bcc.n	80158f4 <xQueueGenericSend+0xe4>
 80158ee:	683b      	ldr	r3, [r7, #0]
 80158f0:	2b02      	cmp	r3, #2
 80158f2:	d129      	bne.n	8015948 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80158f4:	683a      	ldr	r2, [r7, #0]
 80158f6:	68b9      	ldr	r1, [r7, #8]
 80158f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80158fa:	f000 fa9b 	bl	8015e34 <prvCopyDataToQueue>
 80158fe:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015904:	2b00      	cmp	r3, #0
 8015906:	d010      	beq.n	801592a <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801590a:	3324      	adds	r3, #36	; 0x24
 801590c:	4618      	mov	r0, r3
 801590e:	f001 f811 	bl	8016934 <xTaskRemoveFromEventList>
 8015912:	4603      	mov	r3, r0
 8015914:	2b00      	cmp	r3, #0
 8015916:	d013      	beq.n	8015940 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8015918:	4b3f      	ldr	r3, [pc, #252]	; (8015a18 <xQueueGenericSend+0x208>)
 801591a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801591e:	601a      	str	r2, [r3, #0]
 8015920:	f3bf 8f4f 	dsb	sy
 8015924:	f3bf 8f6f 	isb	sy
 8015928:	e00a      	b.n	8015940 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801592a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801592c:	2b00      	cmp	r3, #0
 801592e:	d007      	beq.n	8015940 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8015930:	4b39      	ldr	r3, [pc, #228]	; (8015a18 <xQueueGenericSend+0x208>)
 8015932:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015936:	601a      	str	r2, [r3, #0]
 8015938:	f3bf 8f4f 	dsb	sy
 801593c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8015940:	f001 fe08 	bl	8017554 <vPortExitCritical>
				return pdPASS;
 8015944:	2301      	movs	r3, #1
 8015946:	e063      	b.n	8015a10 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8015948:	687b      	ldr	r3, [r7, #4]
 801594a:	2b00      	cmp	r3, #0
 801594c:	d103      	bne.n	8015956 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801594e:	f001 fe01 	bl	8017554 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8015952:	2300      	movs	r3, #0
 8015954:	e05c      	b.n	8015a10 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8015956:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015958:	2b00      	cmp	r3, #0
 801595a:	d106      	bne.n	801596a <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801595c:	f107 0314 	add.w	r3, r7, #20
 8015960:	4618      	mov	r0, r3
 8015962:	f001 f84b 	bl	80169fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8015966:	2301      	movs	r3, #1
 8015968:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801596a:	f001 fdf3 	bl	8017554 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801596e:	f000 fdb1 	bl	80164d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8015972:	f001 fdbb 	bl	80174ec <vPortEnterCritical>
 8015976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015978:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801597c:	b25b      	sxtb	r3, r3
 801597e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015982:	d103      	bne.n	801598c <xQueueGenericSend+0x17c>
 8015984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015986:	2200      	movs	r2, #0
 8015988:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801598c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801598e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015992:	b25b      	sxtb	r3, r3
 8015994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015998:	d103      	bne.n	80159a2 <xQueueGenericSend+0x192>
 801599a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801599c:	2200      	movs	r2, #0
 801599e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80159a2:	f001 fdd7 	bl	8017554 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80159a6:	1d3a      	adds	r2, r7, #4
 80159a8:	f107 0314 	add.w	r3, r7, #20
 80159ac:	4611      	mov	r1, r2
 80159ae:	4618      	mov	r0, r3
 80159b0:	f001 f83a 	bl	8016a28 <xTaskCheckForTimeOut>
 80159b4:	4603      	mov	r3, r0
 80159b6:	2b00      	cmp	r3, #0
 80159b8:	d124      	bne.n	8015a04 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80159ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80159bc:	f000 fb32 	bl	8016024 <prvIsQueueFull>
 80159c0:	4603      	mov	r3, r0
 80159c2:	2b00      	cmp	r3, #0
 80159c4:	d018      	beq.n	80159f8 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80159c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80159c8:	3310      	adds	r3, #16
 80159ca:	687a      	ldr	r2, [r7, #4]
 80159cc:	4611      	mov	r1, r2
 80159ce:	4618      	mov	r0, r3
 80159d0:	f000 ff8a 	bl	80168e8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80159d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80159d6:	f000 fabd 	bl	8015f54 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80159da:	f000 fd89 	bl	80164f0 <xTaskResumeAll>
 80159de:	4603      	mov	r3, r0
 80159e0:	2b00      	cmp	r3, #0
 80159e2:	f47f af7c 	bne.w	80158de <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 80159e6:	4b0c      	ldr	r3, [pc, #48]	; (8015a18 <xQueueGenericSend+0x208>)
 80159e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80159ec:	601a      	str	r2, [r3, #0]
 80159ee:	f3bf 8f4f 	dsb	sy
 80159f2:	f3bf 8f6f 	isb	sy
 80159f6:	e772      	b.n	80158de <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80159f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80159fa:	f000 faab 	bl	8015f54 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80159fe:	f000 fd77 	bl	80164f0 <xTaskResumeAll>
 8015a02:	e76c      	b.n	80158de <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8015a04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015a06:	f000 faa5 	bl	8015f54 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8015a0a:	f000 fd71 	bl	80164f0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8015a0e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8015a10:	4618      	mov	r0, r3
 8015a12:	3738      	adds	r7, #56	; 0x38
 8015a14:	46bd      	mov	sp, r7
 8015a16:	bd80      	pop	{r7, pc}
 8015a18:	e000ed04 	.word	0xe000ed04

08015a1c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8015a1c:	b580      	push	{r7, lr}
 8015a1e:	b08e      	sub	sp, #56	; 0x38
 8015a20:	af00      	add	r7, sp, #0
 8015a22:	60f8      	str	r0, [r7, #12]
 8015a24:	60b9      	str	r1, [r7, #8]
 8015a26:	607a      	str	r2, [r7, #4]
 8015a28:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8015a2a:	68fb      	ldr	r3, [r7, #12]
 8015a2c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8015a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a30:	2b00      	cmp	r3, #0
 8015a32:	d10c      	bne.n	8015a4e <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8015a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015a38:	b672      	cpsid	i
 8015a3a:	f383 8811 	msr	BASEPRI, r3
 8015a3e:	f3bf 8f6f 	isb	sy
 8015a42:	f3bf 8f4f 	dsb	sy
 8015a46:	b662      	cpsie	i
 8015a48:	627b      	str	r3, [r7, #36]	; 0x24
}
 8015a4a:	bf00      	nop
 8015a4c:	e7fe      	b.n	8015a4c <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015a4e:	68bb      	ldr	r3, [r7, #8]
 8015a50:	2b00      	cmp	r3, #0
 8015a52:	d103      	bne.n	8015a5c <xQueueGenericSendFromISR+0x40>
 8015a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015a58:	2b00      	cmp	r3, #0
 8015a5a:	d101      	bne.n	8015a60 <xQueueGenericSendFromISR+0x44>
 8015a5c:	2301      	movs	r3, #1
 8015a5e:	e000      	b.n	8015a62 <xQueueGenericSendFromISR+0x46>
 8015a60:	2300      	movs	r3, #0
 8015a62:	2b00      	cmp	r3, #0
 8015a64:	d10c      	bne.n	8015a80 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8015a66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015a6a:	b672      	cpsid	i
 8015a6c:	f383 8811 	msr	BASEPRI, r3
 8015a70:	f3bf 8f6f 	isb	sy
 8015a74:	f3bf 8f4f 	dsb	sy
 8015a78:	b662      	cpsie	i
 8015a7a:	623b      	str	r3, [r7, #32]
}
 8015a7c:	bf00      	nop
 8015a7e:	e7fe      	b.n	8015a7e <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8015a80:	683b      	ldr	r3, [r7, #0]
 8015a82:	2b02      	cmp	r3, #2
 8015a84:	d103      	bne.n	8015a8e <xQueueGenericSendFromISR+0x72>
 8015a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015a8a:	2b01      	cmp	r3, #1
 8015a8c:	d101      	bne.n	8015a92 <xQueueGenericSendFromISR+0x76>
 8015a8e:	2301      	movs	r3, #1
 8015a90:	e000      	b.n	8015a94 <xQueueGenericSendFromISR+0x78>
 8015a92:	2300      	movs	r3, #0
 8015a94:	2b00      	cmp	r3, #0
 8015a96:	d10c      	bne.n	8015ab2 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8015a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015a9c:	b672      	cpsid	i
 8015a9e:	f383 8811 	msr	BASEPRI, r3
 8015aa2:	f3bf 8f6f 	isb	sy
 8015aa6:	f3bf 8f4f 	dsb	sy
 8015aaa:	b662      	cpsie	i
 8015aac:	61fb      	str	r3, [r7, #28]
}
 8015aae:	bf00      	nop
 8015ab0:	e7fe      	b.n	8015ab0 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8015ab2:	f001 fe03 	bl	80176bc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8015ab6:	f3ef 8211 	mrs	r2, BASEPRI
 8015aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015abe:	b672      	cpsid	i
 8015ac0:	f383 8811 	msr	BASEPRI, r3
 8015ac4:	f3bf 8f6f 	isb	sy
 8015ac8:	f3bf 8f4f 	dsb	sy
 8015acc:	b662      	cpsie	i
 8015ace:	61ba      	str	r2, [r7, #24]
 8015ad0:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8015ad2:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8015ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8015ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ad8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015adc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015ade:	429a      	cmp	r2, r3
 8015ae0:	d302      	bcc.n	8015ae8 <xQueueGenericSendFromISR+0xcc>
 8015ae2:	683b      	ldr	r3, [r7, #0]
 8015ae4:	2b02      	cmp	r3, #2
 8015ae6:	d12c      	bne.n	8015b42 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8015ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015aea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015aee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8015af2:	683a      	ldr	r2, [r7, #0]
 8015af4:	68b9      	ldr	r1, [r7, #8]
 8015af6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015af8:	f000 f99c 	bl	8015e34 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8015afc:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8015b00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015b04:	d112      	bne.n	8015b2c <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015b0a:	2b00      	cmp	r3, #0
 8015b0c:	d016      	beq.n	8015b3c <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b10:	3324      	adds	r3, #36	; 0x24
 8015b12:	4618      	mov	r0, r3
 8015b14:	f000 ff0e 	bl	8016934 <xTaskRemoveFromEventList>
 8015b18:	4603      	mov	r3, r0
 8015b1a:	2b00      	cmp	r3, #0
 8015b1c:	d00e      	beq.n	8015b3c <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8015b1e:	687b      	ldr	r3, [r7, #4]
 8015b20:	2b00      	cmp	r3, #0
 8015b22:	d00b      	beq.n	8015b3c <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8015b24:	687b      	ldr	r3, [r7, #4]
 8015b26:	2201      	movs	r2, #1
 8015b28:	601a      	str	r2, [r3, #0]
 8015b2a:	e007      	b.n	8015b3c <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8015b2c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8015b30:	3301      	adds	r3, #1
 8015b32:	b2db      	uxtb	r3, r3
 8015b34:	b25a      	sxtb	r2, r3
 8015b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8015b3c:	2301      	movs	r3, #1
 8015b3e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8015b40:	e001      	b.n	8015b46 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8015b42:	2300      	movs	r3, #0
 8015b44:	637b      	str	r3, [r7, #52]	; 0x34
 8015b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b48:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8015b4a:	693b      	ldr	r3, [r7, #16]
 8015b4c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8015b50:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8015b52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8015b54:	4618      	mov	r0, r3
 8015b56:	3738      	adds	r7, #56	; 0x38
 8015b58:	46bd      	mov	sp, r7
 8015b5a:	bd80      	pop	{r7, pc}

08015b5c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8015b5c:	b580      	push	{r7, lr}
 8015b5e:	b08c      	sub	sp, #48	; 0x30
 8015b60:	af00      	add	r7, sp, #0
 8015b62:	60f8      	str	r0, [r7, #12]
 8015b64:	60b9      	str	r1, [r7, #8]
 8015b66:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8015b68:	2300      	movs	r3, #0
 8015b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8015b6c:	68fb      	ldr	r3, [r7, #12]
 8015b6e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8015b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b72:	2b00      	cmp	r3, #0
 8015b74:	d10c      	bne.n	8015b90 <xQueueReceive+0x34>
	__asm volatile
 8015b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b7a:	b672      	cpsid	i
 8015b7c:	f383 8811 	msr	BASEPRI, r3
 8015b80:	f3bf 8f6f 	isb	sy
 8015b84:	f3bf 8f4f 	dsb	sy
 8015b88:	b662      	cpsie	i
 8015b8a:	623b      	str	r3, [r7, #32]
}
 8015b8c:	bf00      	nop
 8015b8e:	e7fe      	b.n	8015b8e <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015b90:	68bb      	ldr	r3, [r7, #8]
 8015b92:	2b00      	cmp	r3, #0
 8015b94:	d103      	bne.n	8015b9e <xQueueReceive+0x42>
 8015b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015b9a:	2b00      	cmp	r3, #0
 8015b9c:	d101      	bne.n	8015ba2 <xQueueReceive+0x46>
 8015b9e:	2301      	movs	r3, #1
 8015ba0:	e000      	b.n	8015ba4 <xQueueReceive+0x48>
 8015ba2:	2300      	movs	r3, #0
 8015ba4:	2b00      	cmp	r3, #0
 8015ba6:	d10c      	bne.n	8015bc2 <xQueueReceive+0x66>
	__asm volatile
 8015ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015bac:	b672      	cpsid	i
 8015bae:	f383 8811 	msr	BASEPRI, r3
 8015bb2:	f3bf 8f6f 	isb	sy
 8015bb6:	f3bf 8f4f 	dsb	sy
 8015bba:	b662      	cpsie	i
 8015bbc:	61fb      	str	r3, [r7, #28]
}
 8015bbe:	bf00      	nop
 8015bc0:	e7fe      	b.n	8015bc0 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8015bc2:	f001 f87d 	bl	8016cc0 <xTaskGetSchedulerState>
 8015bc6:	4603      	mov	r3, r0
 8015bc8:	2b00      	cmp	r3, #0
 8015bca:	d102      	bne.n	8015bd2 <xQueueReceive+0x76>
 8015bcc:	687b      	ldr	r3, [r7, #4]
 8015bce:	2b00      	cmp	r3, #0
 8015bd0:	d101      	bne.n	8015bd6 <xQueueReceive+0x7a>
 8015bd2:	2301      	movs	r3, #1
 8015bd4:	e000      	b.n	8015bd8 <xQueueReceive+0x7c>
 8015bd6:	2300      	movs	r3, #0
 8015bd8:	2b00      	cmp	r3, #0
 8015bda:	d10c      	bne.n	8015bf6 <xQueueReceive+0x9a>
	__asm volatile
 8015bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015be0:	b672      	cpsid	i
 8015be2:	f383 8811 	msr	BASEPRI, r3
 8015be6:	f3bf 8f6f 	isb	sy
 8015bea:	f3bf 8f4f 	dsb	sy
 8015bee:	b662      	cpsie	i
 8015bf0:	61bb      	str	r3, [r7, #24]
}
 8015bf2:	bf00      	nop
 8015bf4:	e7fe      	b.n	8015bf4 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8015bf6:	f001 fc79 	bl	80174ec <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015bfe:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8015c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c02:	2b00      	cmp	r3, #0
 8015c04:	d01f      	beq.n	8015c46 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8015c06:	68b9      	ldr	r1, [r7, #8]
 8015c08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015c0a:	f000 f97d 	bl	8015f08 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8015c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c10:	1e5a      	subs	r2, r3, #1
 8015c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c14:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c18:	691b      	ldr	r3, [r3, #16]
 8015c1a:	2b00      	cmp	r3, #0
 8015c1c:	d00f      	beq.n	8015c3e <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c20:	3310      	adds	r3, #16
 8015c22:	4618      	mov	r0, r3
 8015c24:	f000 fe86 	bl	8016934 <xTaskRemoveFromEventList>
 8015c28:	4603      	mov	r3, r0
 8015c2a:	2b00      	cmp	r3, #0
 8015c2c:	d007      	beq.n	8015c3e <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8015c2e:	4b3d      	ldr	r3, [pc, #244]	; (8015d24 <xQueueReceive+0x1c8>)
 8015c30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015c34:	601a      	str	r2, [r3, #0]
 8015c36:	f3bf 8f4f 	dsb	sy
 8015c3a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8015c3e:	f001 fc89 	bl	8017554 <vPortExitCritical>
				return pdPASS;
 8015c42:	2301      	movs	r3, #1
 8015c44:	e069      	b.n	8015d1a <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8015c46:	687b      	ldr	r3, [r7, #4]
 8015c48:	2b00      	cmp	r3, #0
 8015c4a:	d103      	bne.n	8015c54 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8015c4c:	f001 fc82 	bl	8017554 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8015c50:	2300      	movs	r3, #0
 8015c52:	e062      	b.n	8015d1a <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8015c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c56:	2b00      	cmp	r3, #0
 8015c58:	d106      	bne.n	8015c68 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8015c5a:	f107 0310 	add.w	r3, r7, #16
 8015c5e:	4618      	mov	r0, r3
 8015c60:	f000 fecc 	bl	80169fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8015c64:	2301      	movs	r3, #1
 8015c66:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8015c68:	f001 fc74 	bl	8017554 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8015c6c:	f000 fc32 	bl	80164d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8015c70:	f001 fc3c 	bl	80174ec <vPortEnterCritical>
 8015c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c76:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015c7a:	b25b      	sxtb	r3, r3
 8015c7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015c80:	d103      	bne.n	8015c8a <xQueueReceive+0x12e>
 8015c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c84:	2200      	movs	r2, #0
 8015c86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8015c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c8c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015c90:	b25b      	sxtb	r3, r3
 8015c92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015c96:	d103      	bne.n	8015ca0 <xQueueReceive+0x144>
 8015c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c9a:	2200      	movs	r2, #0
 8015c9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8015ca0:	f001 fc58 	bl	8017554 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8015ca4:	1d3a      	adds	r2, r7, #4
 8015ca6:	f107 0310 	add.w	r3, r7, #16
 8015caa:	4611      	mov	r1, r2
 8015cac:	4618      	mov	r0, r3
 8015cae:	f000 febb 	bl	8016a28 <xTaskCheckForTimeOut>
 8015cb2:	4603      	mov	r3, r0
 8015cb4:	2b00      	cmp	r3, #0
 8015cb6:	d123      	bne.n	8015d00 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8015cb8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015cba:	f000 f99d 	bl	8015ff8 <prvIsQueueEmpty>
 8015cbe:	4603      	mov	r3, r0
 8015cc0:	2b00      	cmp	r3, #0
 8015cc2:	d017      	beq.n	8015cf4 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8015cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015cc6:	3324      	adds	r3, #36	; 0x24
 8015cc8:	687a      	ldr	r2, [r7, #4]
 8015cca:	4611      	mov	r1, r2
 8015ccc:	4618      	mov	r0, r3
 8015cce:	f000 fe0b 	bl	80168e8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8015cd2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015cd4:	f000 f93e 	bl	8015f54 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8015cd8:	f000 fc0a 	bl	80164f0 <xTaskResumeAll>
 8015cdc:	4603      	mov	r3, r0
 8015cde:	2b00      	cmp	r3, #0
 8015ce0:	d189      	bne.n	8015bf6 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8015ce2:	4b10      	ldr	r3, [pc, #64]	; (8015d24 <xQueueReceive+0x1c8>)
 8015ce4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015ce8:	601a      	str	r2, [r3, #0]
 8015cea:	f3bf 8f4f 	dsb	sy
 8015cee:	f3bf 8f6f 	isb	sy
 8015cf2:	e780      	b.n	8015bf6 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8015cf4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015cf6:	f000 f92d 	bl	8015f54 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8015cfa:	f000 fbf9 	bl	80164f0 <xTaskResumeAll>
 8015cfe:	e77a      	b.n	8015bf6 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8015d00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015d02:	f000 f927 	bl	8015f54 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8015d06:	f000 fbf3 	bl	80164f0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8015d0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015d0c:	f000 f974 	bl	8015ff8 <prvIsQueueEmpty>
 8015d10:	4603      	mov	r3, r0
 8015d12:	2b00      	cmp	r3, #0
 8015d14:	f43f af6f 	beq.w	8015bf6 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8015d18:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8015d1a:	4618      	mov	r0, r3
 8015d1c:	3730      	adds	r7, #48	; 0x30
 8015d1e:	46bd      	mov	sp, r7
 8015d20:	bd80      	pop	{r7, pc}
 8015d22:	bf00      	nop
 8015d24:	e000ed04 	.word	0xe000ed04

08015d28 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8015d28:	b580      	push	{r7, lr}
 8015d2a:	b08e      	sub	sp, #56	; 0x38
 8015d2c:	af00      	add	r7, sp, #0
 8015d2e:	60f8      	str	r0, [r7, #12]
 8015d30:	60b9      	str	r1, [r7, #8]
 8015d32:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8015d34:	68fb      	ldr	r3, [r7, #12]
 8015d36:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8015d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d3a:	2b00      	cmp	r3, #0
 8015d3c:	d10c      	bne.n	8015d58 <xQueueReceiveFromISR+0x30>
	__asm volatile
 8015d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d42:	b672      	cpsid	i
 8015d44:	f383 8811 	msr	BASEPRI, r3
 8015d48:	f3bf 8f6f 	isb	sy
 8015d4c:	f3bf 8f4f 	dsb	sy
 8015d50:	b662      	cpsie	i
 8015d52:	623b      	str	r3, [r7, #32]
}
 8015d54:	bf00      	nop
 8015d56:	e7fe      	b.n	8015d56 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015d58:	68bb      	ldr	r3, [r7, #8]
 8015d5a:	2b00      	cmp	r3, #0
 8015d5c:	d103      	bne.n	8015d66 <xQueueReceiveFromISR+0x3e>
 8015d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015d62:	2b00      	cmp	r3, #0
 8015d64:	d101      	bne.n	8015d6a <xQueueReceiveFromISR+0x42>
 8015d66:	2301      	movs	r3, #1
 8015d68:	e000      	b.n	8015d6c <xQueueReceiveFromISR+0x44>
 8015d6a:	2300      	movs	r3, #0
 8015d6c:	2b00      	cmp	r3, #0
 8015d6e:	d10c      	bne.n	8015d8a <xQueueReceiveFromISR+0x62>
	__asm volatile
 8015d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d74:	b672      	cpsid	i
 8015d76:	f383 8811 	msr	BASEPRI, r3
 8015d7a:	f3bf 8f6f 	isb	sy
 8015d7e:	f3bf 8f4f 	dsb	sy
 8015d82:	b662      	cpsie	i
 8015d84:	61fb      	str	r3, [r7, #28]
}
 8015d86:	bf00      	nop
 8015d88:	e7fe      	b.n	8015d88 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8015d8a:	f001 fc97 	bl	80176bc <vPortValidateInterruptPriority>
	__asm volatile
 8015d8e:	f3ef 8211 	mrs	r2, BASEPRI
 8015d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d96:	b672      	cpsid	i
 8015d98:	f383 8811 	msr	BASEPRI, r3
 8015d9c:	f3bf 8f6f 	isb	sy
 8015da0:	f3bf 8f4f 	dsb	sy
 8015da4:	b662      	cpsie	i
 8015da6:	61ba      	str	r2, [r7, #24]
 8015da8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8015daa:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8015dac:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015db2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8015db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015db6:	2b00      	cmp	r3, #0
 8015db8:	d02f      	beq.n	8015e1a <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8015dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015dbc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015dc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8015dc4:	68b9      	ldr	r1, [r7, #8]
 8015dc6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015dc8:	f000 f89e 	bl	8015f08 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8015dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015dce:	1e5a      	subs	r2, r3, #1
 8015dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015dd2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8015dd4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8015dd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015ddc:	d112      	bne.n	8015e04 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015de0:	691b      	ldr	r3, [r3, #16]
 8015de2:	2b00      	cmp	r3, #0
 8015de4:	d016      	beq.n	8015e14 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015de8:	3310      	adds	r3, #16
 8015dea:	4618      	mov	r0, r3
 8015dec:	f000 fda2 	bl	8016934 <xTaskRemoveFromEventList>
 8015df0:	4603      	mov	r3, r0
 8015df2:	2b00      	cmp	r3, #0
 8015df4:	d00e      	beq.n	8015e14 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8015df6:	687b      	ldr	r3, [r7, #4]
 8015df8:	2b00      	cmp	r3, #0
 8015dfa:	d00b      	beq.n	8015e14 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8015dfc:	687b      	ldr	r3, [r7, #4]
 8015dfe:	2201      	movs	r2, #1
 8015e00:	601a      	str	r2, [r3, #0]
 8015e02:	e007      	b.n	8015e14 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8015e04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015e08:	3301      	adds	r3, #1
 8015e0a:	b2db      	uxtb	r3, r3
 8015e0c:	b25a      	sxtb	r2, r3
 8015e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8015e14:	2301      	movs	r3, #1
 8015e16:	637b      	str	r3, [r7, #52]	; 0x34
 8015e18:	e001      	b.n	8015e1e <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 8015e1a:	2300      	movs	r3, #0
 8015e1c:	637b      	str	r3, [r7, #52]	; 0x34
 8015e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e20:	613b      	str	r3, [r7, #16]
	__asm volatile
 8015e22:	693b      	ldr	r3, [r7, #16]
 8015e24:	f383 8811 	msr	BASEPRI, r3
}
 8015e28:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8015e2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8015e2c:	4618      	mov	r0, r3
 8015e2e:	3738      	adds	r7, #56	; 0x38
 8015e30:	46bd      	mov	sp, r7
 8015e32:	bd80      	pop	{r7, pc}

08015e34 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8015e34:	b580      	push	{r7, lr}
 8015e36:	b086      	sub	sp, #24
 8015e38:	af00      	add	r7, sp, #0
 8015e3a:	60f8      	str	r0, [r7, #12]
 8015e3c:	60b9      	str	r1, [r7, #8]
 8015e3e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8015e40:	2300      	movs	r3, #0
 8015e42:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015e44:	68fb      	ldr	r3, [r7, #12]
 8015e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015e48:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8015e4a:	68fb      	ldr	r3, [r7, #12]
 8015e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015e4e:	2b00      	cmp	r3, #0
 8015e50:	d10d      	bne.n	8015e6e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8015e52:	68fb      	ldr	r3, [r7, #12]
 8015e54:	681b      	ldr	r3, [r3, #0]
 8015e56:	2b00      	cmp	r3, #0
 8015e58:	d14d      	bne.n	8015ef6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8015e5a:	68fb      	ldr	r3, [r7, #12]
 8015e5c:	689b      	ldr	r3, [r3, #8]
 8015e5e:	4618      	mov	r0, r3
 8015e60:	f000 ff4c 	bl	8016cfc <xTaskPriorityDisinherit>
 8015e64:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8015e66:	68fb      	ldr	r3, [r7, #12]
 8015e68:	2200      	movs	r2, #0
 8015e6a:	609a      	str	r2, [r3, #8]
 8015e6c:	e043      	b.n	8015ef6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8015e6e:	687b      	ldr	r3, [r7, #4]
 8015e70:	2b00      	cmp	r3, #0
 8015e72:	d119      	bne.n	8015ea8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8015e74:	68fb      	ldr	r3, [r7, #12]
 8015e76:	6858      	ldr	r0, [r3, #4]
 8015e78:	68fb      	ldr	r3, [r7, #12]
 8015e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015e7c:	461a      	mov	r2, r3
 8015e7e:	68b9      	ldr	r1, [r7, #8]
 8015e80:	f002 f97a 	bl	8018178 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8015e84:	68fb      	ldr	r3, [r7, #12]
 8015e86:	685a      	ldr	r2, [r3, #4]
 8015e88:	68fb      	ldr	r3, [r7, #12]
 8015e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015e8c:	441a      	add	r2, r3
 8015e8e:	68fb      	ldr	r3, [r7, #12]
 8015e90:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8015e92:	68fb      	ldr	r3, [r7, #12]
 8015e94:	685a      	ldr	r2, [r3, #4]
 8015e96:	68fb      	ldr	r3, [r7, #12]
 8015e98:	689b      	ldr	r3, [r3, #8]
 8015e9a:	429a      	cmp	r2, r3
 8015e9c:	d32b      	bcc.n	8015ef6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8015e9e:	68fb      	ldr	r3, [r7, #12]
 8015ea0:	681a      	ldr	r2, [r3, #0]
 8015ea2:	68fb      	ldr	r3, [r7, #12]
 8015ea4:	605a      	str	r2, [r3, #4]
 8015ea6:	e026      	b.n	8015ef6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8015ea8:	68fb      	ldr	r3, [r7, #12]
 8015eaa:	68d8      	ldr	r0, [r3, #12]
 8015eac:	68fb      	ldr	r3, [r7, #12]
 8015eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015eb0:	461a      	mov	r2, r3
 8015eb2:	68b9      	ldr	r1, [r7, #8]
 8015eb4:	f002 f960 	bl	8018178 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8015eb8:	68fb      	ldr	r3, [r7, #12]
 8015eba:	68da      	ldr	r2, [r3, #12]
 8015ebc:	68fb      	ldr	r3, [r7, #12]
 8015ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015ec0:	425b      	negs	r3, r3
 8015ec2:	441a      	add	r2, r3
 8015ec4:	68fb      	ldr	r3, [r7, #12]
 8015ec6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8015ec8:	68fb      	ldr	r3, [r7, #12]
 8015eca:	68da      	ldr	r2, [r3, #12]
 8015ecc:	68fb      	ldr	r3, [r7, #12]
 8015ece:	681b      	ldr	r3, [r3, #0]
 8015ed0:	429a      	cmp	r2, r3
 8015ed2:	d207      	bcs.n	8015ee4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8015ed4:	68fb      	ldr	r3, [r7, #12]
 8015ed6:	689a      	ldr	r2, [r3, #8]
 8015ed8:	68fb      	ldr	r3, [r7, #12]
 8015eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015edc:	425b      	negs	r3, r3
 8015ede:	441a      	add	r2, r3
 8015ee0:	68fb      	ldr	r3, [r7, #12]
 8015ee2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8015ee4:	687b      	ldr	r3, [r7, #4]
 8015ee6:	2b02      	cmp	r3, #2
 8015ee8:	d105      	bne.n	8015ef6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8015eea:	693b      	ldr	r3, [r7, #16]
 8015eec:	2b00      	cmp	r3, #0
 8015eee:	d002      	beq.n	8015ef6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8015ef0:	693b      	ldr	r3, [r7, #16]
 8015ef2:	3b01      	subs	r3, #1
 8015ef4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8015ef6:	693b      	ldr	r3, [r7, #16]
 8015ef8:	1c5a      	adds	r2, r3, #1
 8015efa:	68fb      	ldr	r3, [r7, #12]
 8015efc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8015efe:	697b      	ldr	r3, [r7, #20]
}
 8015f00:	4618      	mov	r0, r3
 8015f02:	3718      	adds	r7, #24
 8015f04:	46bd      	mov	sp, r7
 8015f06:	bd80      	pop	{r7, pc}

08015f08 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8015f08:	b580      	push	{r7, lr}
 8015f0a:	b082      	sub	sp, #8
 8015f0c:	af00      	add	r7, sp, #0
 8015f0e:	6078      	str	r0, [r7, #4]
 8015f10:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8015f12:	687b      	ldr	r3, [r7, #4]
 8015f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015f16:	2b00      	cmp	r3, #0
 8015f18:	d018      	beq.n	8015f4c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8015f1a:	687b      	ldr	r3, [r7, #4]
 8015f1c:	68da      	ldr	r2, [r3, #12]
 8015f1e:	687b      	ldr	r3, [r7, #4]
 8015f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015f22:	441a      	add	r2, r3
 8015f24:	687b      	ldr	r3, [r7, #4]
 8015f26:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8015f28:	687b      	ldr	r3, [r7, #4]
 8015f2a:	68da      	ldr	r2, [r3, #12]
 8015f2c:	687b      	ldr	r3, [r7, #4]
 8015f2e:	689b      	ldr	r3, [r3, #8]
 8015f30:	429a      	cmp	r2, r3
 8015f32:	d303      	bcc.n	8015f3c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8015f34:	687b      	ldr	r3, [r7, #4]
 8015f36:	681a      	ldr	r2, [r3, #0]
 8015f38:	687b      	ldr	r3, [r7, #4]
 8015f3a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8015f3c:	687b      	ldr	r3, [r7, #4]
 8015f3e:	68d9      	ldr	r1, [r3, #12]
 8015f40:	687b      	ldr	r3, [r7, #4]
 8015f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015f44:	461a      	mov	r2, r3
 8015f46:	6838      	ldr	r0, [r7, #0]
 8015f48:	f002 f916 	bl	8018178 <memcpy>
	}
}
 8015f4c:	bf00      	nop
 8015f4e:	3708      	adds	r7, #8
 8015f50:	46bd      	mov	sp, r7
 8015f52:	bd80      	pop	{r7, pc}

08015f54 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8015f54:	b580      	push	{r7, lr}
 8015f56:	b084      	sub	sp, #16
 8015f58:	af00      	add	r7, sp, #0
 8015f5a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8015f5c:	f001 fac6 	bl	80174ec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8015f60:	687b      	ldr	r3, [r7, #4]
 8015f62:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015f66:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8015f68:	e011      	b.n	8015f8e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015f6a:	687b      	ldr	r3, [r7, #4]
 8015f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015f6e:	2b00      	cmp	r3, #0
 8015f70:	d012      	beq.n	8015f98 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015f72:	687b      	ldr	r3, [r7, #4]
 8015f74:	3324      	adds	r3, #36	; 0x24
 8015f76:	4618      	mov	r0, r3
 8015f78:	f000 fcdc 	bl	8016934 <xTaskRemoveFromEventList>
 8015f7c:	4603      	mov	r3, r0
 8015f7e:	2b00      	cmp	r3, #0
 8015f80:	d001      	beq.n	8015f86 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8015f82:	f000 fdb7 	bl	8016af4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8015f86:	7bfb      	ldrb	r3, [r7, #15]
 8015f88:	3b01      	subs	r3, #1
 8015f8a:	b2db      	uxtb	r3, r3
 8015f8c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8015f8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015f92:	2b00      	cmp	r3, #0
 8015f94:	dce9      	bgt.n	8015f6a <prvUnlockQueue+0x16>
 8015f96:	e000      	b.n	8015f9a <prvUnlockQueue+0x46>
					break;
 8015f98:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8015f9a:	687b      	ldr	r3, [r7, #4]
 8015f9c:	22ff      	movs	r2, #255	; 0xff
 8015f9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8015fa2:	f001 fad7 	bl	8017554 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8015fa6:	f001 faa1 	bl	80174ec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8015faa:	687b      	ldr	r3, [r7, #4]
 8015fac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015fb0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8015fb2:	e011      	b.n	8015fd8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015fb4:	687b      	ldr	r3, [r7, #4]
 8015fb6:	691b      	ldr	r3, [r3, #16]
 8015fb8:	2b00      	cmp	r3, #0
 8015fba:	d012      	beq.n	8015fe2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015fbc:	687b      	ldr	r3, [r7, #4]
 8015fbe:	3310      	adds	r3, #16
 8015fc0:	4618      	mov	r0, r3
 8015fc2:	f000 fcb7 	bl	8016934 <xTaskRemoveFromEventList>
 8015fc6:	4603      	mov	r3, r0
 8015fc8:	2b00      	cmp	r3, #0
 8015fca:	d001      	beq.n	8015fd0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8015fcc:	f000 fd92 	bl	8016af4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8015fd0:	7bbb      	ldrb	r3, [r7, #14]
 8015fd2:	3b01      	subs	r3, #1
 8015fd4:	b2db      	uxtb	r3, r3
 8015fd6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8015fd8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015fdc:	2b00      	cmp	r3, #0
 8015fde:	dce9      	bgt.n	8015fb4 <prvUnlockQueue+0x60>
 8015fe0:	e000      	b.n	8015fe4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8015fe2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8015fe4:	687b      	ldr	r3, [r7, #4]
 8015fe6:	22ff      	movs	r2, #255	; 0xff
 8015fe8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8015fec:	f001 fab2 	bl	8017554 <vPortExitCritical>
}
 8015ff0:	bf00      	nop
 8015ff2:	3710      	adds	r7, #16
 8015ff4:	46bd      	mov	sp, r7
 8015ff6:	bd80      	pop	{r7, pc}

08015ff8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8015ff8:	b580      	push	{r7, lr}
 8015ffa:	b084      	sub	sp, #16
 8015ffc:	af00      	add	r7, sp, #0
 8015ffe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8016000:	f001 fa74 	bl	80174ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8016004:	687b      	ldr	r3, [r7, #4]
 8016006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016008:	2b00      	cmp	r3, #0
 801600a:	d102      	bne.n	8016012 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801600c:	2301      	movs	r3, #1
 801600e:	60fb      	str	r3, [r7, #12]
 8016010:	e001      	b.n	8016016 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8016012:	2300      	movs	r3, #0
 8016014:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8016016:	f001 fa9d 	bl	8017554 <vPortExitCritical>

	return xReturn;
 801601a:	68fb      	ldr	r3, [r7, #12]
}
 801601c:	4618      	mov	r0, r3
 801601e:	3710      	adds	r7, #16
 8016020:	46bd      	mov	sp, r7
 8016022:	bd80      	pop	{r7, pc}

08016024 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8016024:	b580      	push	{r7, lr}
 8016026:	b084      	sub	sp, #16
 8016028:	af00      	add	r7, sp, #0
 801602a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801602c:	f001 fa5e 	bl	80174ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8016030:	687b      	ldr	r3, [r7, #4]
 8016032:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8016034:	687b      	ldr	r3, [r7, #4]
 8016036:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016038:	429a      	cmp	r2, r3
 801603a:	d102      	bne.n	8016042 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 801603c:	2301      	movs	r3, #1
 801603e:	60fb      	str	r3, [r7, #12]
 8016040:	e001      	b.n	8016046 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8016042:	2300      	movs	r3, #0
 8016044:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8016046:	f001 fa85 	bl	8017554 <vPortExitCritical>

	return xReturn;
 801604a:	68fb      	ldr	r3, [r7, #12]
}
 801604c:	4618      	mov	r0, r3
 801604e:	3710      	adds	r7, #16
 8016050:	46bd      	mov	sp, r7
 8016052:	bd80      	pop	{r7, pc}

08016054 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8016054:	b580      	push	{r7, lr}
 8016056:	b08e      	sub	sp, #56	; 0x38
 8016058:	af04      	add	r7, sp, #16
 801605a:	60f8      	str	r0, [r7, #12]
 801605c:	60b9      	str	r1, [r7, #8]
 801605e:	607a      	str	r2, [r7, #4]
 8016060:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8016062:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016064:	2b00      	cmp	r3, #0
 8016066:	d10c      	bne.n	8016082 <xTaskCreateStatic+0x2e>
	__asm volatile
 8016068:	f04f 0350 	mov.w	r3, #80	; 0x50
 801606c:	b672      	cpsid	i
 801606e:	f383 8811 	msr	BASEPRI, r3
 8016072:	f3bf 8f6f 	isb	sy
 8016076:	f3bf 8f4f 	dsb	sy
 801607a:	b662      	cpsie	i
 801607c:	623b      	str	r3, [r7, #32]
}
 801607e:	bf00      	nop
 8016080:	e7fe      	b.n	8016080 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8016082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016084:	2b00      	cmp	r3, #0
 8016086:	d10c      	bne.n	80160a2 <xTaskCreateStatic+0x4e>
	__asm volatile
 8016088:	f04f 0350 	mov.w	r3, #80	; 0x50
 801608c:	b672      	cpsid	i
 801608e:	f383 8811 	msr	BASEPRI, r3
 8016092:	f3bf 8f6f 	isb	sy
 8016096:	f3bf 8f4f 	dsb	sy
 801609a:	b662      	cpsie	i
 801609c:	61fb      	str	r3, [r7, #28]
}
 801609e:	bf00      	nop
 80160a0:	e7fe      	b.n	80160a0 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80160a2:	2358      	movs	r3, #88	; 0x58
 80160a4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80160a6:	693b      	ldr	r3, [r7, #16]
 80160a8:	2b58      	cmp	r3, #88	; 0x58
 80160aa:	d00c      	beq.n	80160c6 <xTaskCreateStatic+0x72>
	__asm volatile
 80160ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80160b0:	b672      	cpsid	i
 80160b2:	f383 8811 	msr	BASEPRI, r3
 80160b6:	f3bf 8f6f 	isb	sy
 80160ba:	f3bf 8f4f 	dsb	sy
 80160be:	b662      	cpsie	i
 80160c0:	61bb      	str	r3, [r7, #24]
}
 80160c2:	bf00      	nop
 80160c4:	e7fe      	b.n	80160c4 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80160c6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80160c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80160ca:	2b00      	cmp	r3, #0
 80160cc:	d01e      	beq.n	801610c <xTaskCreateStatic+0xb8>
 80160ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80160d0:	2b00      	cmp	r3, #0
 80160d2:	d01b      	beq.n	801610c <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80160d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80160d6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80160d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80160da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80160dc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80160de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80160e0:	2202      	movs	r2, #2
 80160e2:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80160e6:	2300      	movs	r3, #0
 80160e8:	9303      	str	r3, [sp, #12]
 80160ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80160ec:	9302      	str	r3, [sp, #8]
 80160ee:	f107 0314 	add.w	r3, r7, #20
 80160f2:	9301      	str	r3, [sp, #4]
 80160f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80160f6:	9300      	str	r3, [sp, #0]
 80160f8:	683b      	ldr	r3, [r7, #0]
 80160fa:	687a      	ldr	r2, [r7, #4]
 80160fc:	68b9      	ldr	r1, [r7, #8]
 80160fe:	68f8      	ldr	r0, [r7, #12]
 8016100:	f000 f850 	bl	80161a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8016104:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016106:	f000 f8e1 	bl	80162cc <prvAddNewTaskToReadyList>
 801610a:	e001      	b.n	8016110 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 801610c:	2300      	movs	r3, #0
 801610e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8016110:	697b      	ldr	r3, [r7, #20]
	}
 8016112:	4618      	mov	r0, r3
 8016114:	3728      	adds	r7, #40	; 0x28
 8016116:	46bd      	mov	sp, r7
 8016118:	bd80      	pop	{r7, pc}

0801611a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801611a:	b580      	push	{r7, lr}
 801611c:	b08c      	sub	sp, #48	; 0x30
 801611e:	af04      	add	r7, sp, #16
 8016120:	60f8      	str	r0, [r7, #12]
 8016122:	60b9      	str	r1, [r7, #8]
 8016124:	603b      	str	r3, [r7, #0]
 8016126:	4613      	mov	r3, r2
 8016128:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801612a:	88fb      	ldrh	r3, [r7, #6]
 801612c:	009b      	lsls	r3, r3, #2
 801612e:	4618      	mov	r0, r3
 8016130:	f001 fb08 	bl	8017744 <pvPortMalloc>
 8016134:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8016136:	697b      	ldr	r3, [r7, #20]
 8016138:	2b00      	cmp	r3, #0
 801613a:	d00e      	beq.n	801615a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801613c:	2058      	movs	r0, #88	; 0x58
 801613e:	f001 fb01 	bl	8017744 <pvPortMalloc>
 8016142:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8016144:	69fb      	ldr	r3, [r7, #28]
 8016146:	2b00      	cmp	r3, #0
 8016148:	d003      	beq.n	8016152 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801614a:	69fb      	ldr	r3, [r7, #28]
 801614c:	697a      	ldr	r2, [r7, #20]
 801614e:	631a      	str	r2, [r3, #48]	; 0x30
 8016150:	e005      	b.n	801615e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8016152:	6978      	ldr	r0, [r7, #20]
 8016154:	f001 fbc6 	bl	80178e4 <vPortFree>
 8016158:	e001      	b.n	801615e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801615a:	2300      	movs	r3, #0
 801615c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801615e:	69fb      	ldr	r3, [r7, #28]
 8016160:	2b00      	cmp	r3, #0
 8016162:	d017      	beq.n	8016194 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8016164:	69fb      	ldr	r3, [r7, #28]
 8016166:	2200      	movs	r2, #0
 8016168:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801616c:	88fa      	ldrh	r2, [r7, #6]
 801616e:	2300      	movs	r3, #0
 8016170:	9303      	str	r3, [sp, #12]
 8016172:	69fb      	ldr	r3, [r7, #28]
 8016174:	9302      	str	r3, [sp, #8]
 8016176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016178:	9301      	str	r3, [sp, #4]
 801617a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801617c:	9300      	str	r3, [sp, #0]
 801617e:	683b      	ldr	r3, [r7, #0]
 8016180:	68b9      	ldr	r1, [r7, #8]
 8016182:	68f8      	ldr	r0, [r7, #12]
 8016184:	f000 f80e 	bl	80161a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8016188:	69f8      	ldr	r0, [r7, #28]
 801618a:	f000 f89f 	bl	80162cc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801618e:	2301      	movs	r3, #1
 8016190:	61bb      	str	r3, [r7, #24]
 8016192:	e002      	b.n	801619a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8016194:	f04f 33ff 	mov.w	r3, #4294967295
 8016198:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801619a:	69bb      	ldr	r3, [r7, #24]
	}
 801619c:	4618      	mov	r0, r3
 801619e:	3720      	adds	r7, #32
 80161a0:	46bd      	mov	sp, r7
 80161a2:	bd80      	pop	{r7, pc}

080161a4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80161a4:	b580      	push	{r7, lr}
 80161a6:	b088      	sub	sp, #32
 80161a8:	af00      	add	r7, sp, #0
 80161aa:	60f8      	str	r0, [r7, #12]
 80161ac:	60b9      	str	r1, [r7, #8]
 80161ae:	607a      	str	r2, [r7, #4]
 80161b0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80161b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80161b4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80161b6:	687b      	ldr	r3, [r7, #4]
 80161b8:	009b      	lsls	r3, r3, #2
 80161ba:	461a      	mov	r2, r3
 80161bc:	21a5      	movs	r1, #165	; 0xa5
 80161be:	f001 ffe9 	bl	8018194 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80161c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80161c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80161c6:	6879      	ldr	r1, [r7, #4]
 80161c8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80161cc:	440b      	add	r3, r1
 80161ce:	009b      	lsls	r3, r3, #2
 80161d0:	4413      	add	r3, r2
 80161d2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80161d4:	69bb      	ldr	r3, [r7, #24]
 80161d6:	f023 0307 	bic.w	r3, r3, #7
 80161da:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80161dc:	69bb      	ldr	r3, [r7, #24]
 80161de:	f003 0307 	and.w	r3, r3, #7
 80161e2:	2b00      	cmp	r3, #0
 80161e4:	d00c      	beq.n	8016200 <prvInitialiseNewTask+0x5c>
	__asm volatile
 80161e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80161ea:	b672      	cpsid	i
 80161ec:	f383 8811 	msr	BASEPRI, r3
 80161f0:	f3bf 8f6f 	isb	sy
 80161f4:	f3bf 8f4f 	dsb	sy
 80161f8:	b662      	cpsie	i
 80161fa:	617b      	str	r3, [r7, #20]
}
 80161fc:	bf00      	nop
 80161fe:	e7fe      	b.n	80161fe <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8016200:	68bb      	ldr	r3, [r7, #8]
 8016202:	2b00      	cmp	r3, #0
 8016204:	d01f      	beq.n	8016246 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8016206:	2300      	movs	r3, #0
 8016208:	61fb      	str	r3, [r7, #28]
 801620a:	e012      	b.n	8016232 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801620c:	68ba      	ldr	r2, [r7, #8]
 801620e:	69fb      	ldr	r3, [r7, #28]
 8016210:	4413      	add	r3, r2
 8016212:	7819      	ldrb	r1, [r3, #0]
 8016214:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016216:	69fb      	ldr	r3, [r7, #28]
 8016218:	4413      	add	r3, r2
 801621a:	3334      	adds	r3, #52	; 0x34
 801621c:	460a      	mov	r2, r1
 801621e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8016220:	68ba      	ldr	r2, [r7, #8]
 8016222:	69fb      	ldr	r3, [r7, #28]
 8016224:	4413      	add	r3, r2
 8016226:	781b      	ldrb	r3, [r3, #0]
 8016228:	2b00      	cmp	r3, #0
 801622a:	d006      	beq.n	801623a <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801622c:	69fb      	ldr	r3, [r7, #28]
 801622e:	3301      	adds	r3, #1
 8016230:	61fb      	str	r3, [r7, #28]
 8016232:	69fb      	ldr	r3, [r7, #28]
 8016234:	2b0f      	cmp	r3, #15
 8016236:	d9e9      	bls.n	801620c <prvInitialiseNewTask+0x68>
 8016238:	e000      	b.n	801623c <prvInitialiseNewTask+0x98>
			{
				break;
 801623a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801623c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801623e:	2200      	movs	r2, #0
 8016240:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8016244:	e003      	b.n	801624e <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8016246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016248:	2200      	movs	r2, #0
 801624a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801624e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016250:	2b06      	cmp	r3, #6
 8016252:	d901      	bls.n	8016258 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8016254:	2306      	movs	r3, #6
 8016256:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8016258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801625a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801625c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801625e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016260:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016262:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8016264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016266:	2200      	movs	r2, #0
 8016268:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801626a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801626c:	3304      	adds	r3, #4
 801626e:	4618      	mov	r0, r3
 8016270:	f7ff f8ec 	bl	801544c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8016274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016276:	3318      	adds	r3, #24
 8016278:	4618      	mov	r0, r3
 801627a:	f7ff f8e7 	bl	801544c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801627e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016280:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016282:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016286:	f1c3 0207 	rsb	r2, r3, #7
 801628a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801628c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801628e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016290:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016292:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 8016294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016296:	2200      	movs	r2, #0
 8016298:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801629a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801629c:	2200      	movs	r2, #0
 801629e:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80162a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80162a2:	2200      	movs	r2, #0
 80162a4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80162a8:	683a      	ldr	r2, [r7, #0]
 80162aa:	68f9      	ldr	r1, [r7, #12]
 80162ac:	69b8      	ldr	r0, [r7, #24]
 80162ae:	f001 f80d 	bl	80172cc <pxPortInitialiseStack>
 80162b2:	4602      	mov	r2, r0
 80162b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80162b6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80162b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162ba:	2b00      	cmp	r3, #0
 80162bc:	d002      	beq.n	80162c4 <prvInitialiseNewTask+0x120>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80162be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80162c2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80162c4:	bf00      	nop
 80162c6:	3720      	adds	r7, #32
 80162c8:	46bd      	mov	sp, r7
 80162ca:	bd80      	pop	{r7, pc}

080162cc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80162cc:	b580      	push	{r7, lr}
 80162ce:	b082      	sub	sp, #8
 80162d0:	af00      	add	r7, sp, #0
 80162d2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80162d4:	f001 f90a 	bl	80174ec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80162d8:	4b2a      	ldr	r3, [pc, #168]	; (8016384 <prvAddNewTaskToReadyList+0xb8>)
 80162da:	681b      	ldr	r3, [r3, #0]
 80162dc:	3301      	adds	r3, #1
 80162de:	4a29      	ldr	r2, [pc, #164]	; (8016384 <prvAddNewTaskToReadyList+0xb8>)
 80162e0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80162e2:	4b29      	ldr	r3, [pc, #164]	; (8016388 <prvAddNewTaskToReadyList+0xbc>)
 80162e4:	681b      	ldr	r3, [r3, #0]
 80162e6:	2b00      	cmp	r3, #0
 80162e8:	d109      	bne.n	80162fe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80162ea:	4a27      	ldr	r2, [pc, #156]	; (8016388 <prvAddNewTaskToReadyList+0xbc>)
 80162ec:	687b      	ldr	r3, [r7, #4]
 80162ee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80162f0:	4b24      	ldr	r3, [pc, #144]	; (8016384 <prvAddNewTaskToReadyList+0xb8>)
 80162f2:	681b      	ldr	r3, [r3, #0]
 80162f4:	2b01      	cmp	r3, #1
 80162f6:	d110      	bne.n	801631a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80162f8:	f000 fc22 	bl	8016b40 <prvInitialiseTaskLists>
 80162fc:	e00d      	b.n	801631a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80162fe:	4b23      	ldr	r3, [pc, #140]	; (801638c <prvAddNewTaskToReadyList+0xc0>)
 8016300:	681b      	ldr	r3, [r3, #0]
 8016302:	2b00      	cmp	r3, #0
 8016304:	d109      	bne.n	801631a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8016306:	4b20      	ldr	r3, [pc, #128]	; (8016388 <prvAddNewTaskToReadyList+0xbc>)
 8016308:	681b      	ldr	r3, [r3, #0]
 801630a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801630c:	687b      	ldr	r3, [r7, #4]
 801630e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016310:	429a      	cmp	r2, r3
 8016312:	d802      	bhi.n	801631a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8016314:	4a1c      	ldr	r2, [pc, #112]	; (8016388 <prvAddNewTaskToReadyList+0xbc>)
 8016316:	687b      	ldr	r3, [r7, #4]
 8016318:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801631a:	4b1d      	ldr	r3, [pc, #116]	; (8016390 <prvAddNewTaskToReadyList+0xc4>)
 801631c:	681b      	ldr	r3, [r3, #0]
 801631e:	3301      	adds	r3, #1
 8016320:	4a1b      	ldr	r2, [pc, #108]	; (8016390 <prvAddNewTaskToReadyList+0xc4>)
 8016322:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8016324:	687b      	ldr	r3, [r7, #4]
 8016326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016328:	2201      	movs	r2, #1
 801632a:	409a      	lsls	r2, r3
 801632c:	4b19      	ldr	r3, [pc, #100]	; (8016394 <prvAddNewTaskToReadyList+0xc8>)
 801632e:	681b      	ldr	r3, [r3, #0]
 8016330:	4313      	orrs	r3, r2
 8016332:	4a18      	ldr	r2, [pc, #96]	; (8016394 <prvAddNewTaskToReadyList+0xc8>)
 8016334:	6013      	str	r3, [r2, #0]
 8016336:	687b      	ldr	r3, [r7, #4]
 8016338:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801633a:	4613      	mov	r3, r2
 801633c:	009b      	lsls	r3, r3, #2
 801633e:	4413      	add	r3, r2
 8016340:	009b      	lsls	r3, r3, #2
 8016342:	4a15      	ldr	r2, [pc, #84]	; (8016398 <prvAddNewTaskToReadyList+0xcc>)
 8016344:	441a      	add	r2, r3
 8016346:	687b      	ldr	r3, [r7, #4]
 8016348:	3304      	adds	r3, #4
 801634a:	4619      	mov	r1, r3
 801634c:	4610      	mov	r0, r2
 801634e:	f7ff f88a 	bl	8015466 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8016352:	f001 f8ff 	bl	8017554 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8016356:	4b0d      	ldr	r3, [pc, #52]	; (801638c <prvAddNewTaskToReadyList+0xc0>)
 8016358:	681b      	ldr	r3, [r3, #0]
 801635a:	2b00      	cmp	r3, #0
 801635c:	d00e      	beq.n	801637c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801635e:	4b0a      	ldr	r3, [pc, #40]	; (8016388 <prvAddNewTaskToReadyList+0xbc>)
 8016360:	681b      	ldr	r3, [r3, #0]
 8016362:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016364:	687b      	ldr	r3, [r7, #4]
 8016366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016368:	429a      	cmp	r2, r3
 801636a:	d207      	bcs.n	801637c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801636c:	4b0b      	ldr	r3, [pc, #44]	; (801639c <prvAddNewTaskToReadyList+0xd0>)
 801636e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016372:	601a      	str	r2, [r3, #0]
 8016374:	f3bf 8f4f 	dsb	sy
 8016378:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801637c:	bf00      	nop
 801637e:	3708      	adds	r7, #8
 8016380:	46bd      	mov	sp, r7
 8016382:	bd80      	pop	{r7, pc}
 8016384:	20000614 	.word	0x20000614
 8016388:	20000514 	.word	0x20000514
 801638c:	20000620 	.word	0x20000620
 8016390:	20000630 	.word	0x20000630
 8016394:	2000061c 	.word	0x2000061c
 8016398:	20000518 	.word	0x20000518
 801639c:	e000ed04 	.word	0xe000ed04

080163a0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80163a0:	b580      	push	{r7, lr}
 80163a2:	b084      	sub	sp, #16
 80163a4:	af00      	add	r7, sp, #0
 80163a6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80163a8:	2300      	movs	r3, #0
 80163aa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80163ac:	687b      	ldr	r3, [r7, #4]
 80163ae:	2b00      	cmp	r3, #0
 80163b0:	d019      	beq.n	80163e6 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80163b2:	4b14      	ldr	r3, [pc, #80]	; (8016404 <vTaskDelay+0x64>)
 80163b4:	681b      	ldr	r3, [r3, #0]
 80163b6:	2b00      	cmp	r3, #0
 80163b8:	d00c      	beq.n	80163d4 <vTaskDelay+0x34>
	__asm volatile
 80163ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80163be:	b672      	cpsid	i
 80163c0:	f383 8811 	msr	BASEPRI, r3
 80163c4:	f3bf 8f6f 	isb	sy
 80163c8:	f3bf 8f4f 	dsb	sy
 80163cc:	b662      	cpsie	i
 80163ce:	60bb      	str	r3, [r7, #8]
}
 80163d0:	bf00      	nop
 80163d2:	e7fe      	b.n	80163d2 <vTaskDelay+0x32>
			vTaskSuspendAll();
 80163d4:	f000 f87e 	bl	80164d4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80163d8:	2100      	movs	r1, #0
 80163da:	6878      	ldr	r0, [r7, #4]
 80163dc:	f000 ff10 	bl	8017200 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80163e0:	f000 f886 	bl	80164f0 <xTaskResumeAll>
 80163e4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80163e6:	68fb      	ldr	r3, [r7, #12]
 80163e8:	2b00      	cmp	r3, #0
 80163ea:	d107      	bne.n	80163fc <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 80163ec:	4b06      	ldr	r3, [pc, #24]	; (8016408 <vTaskDelay+0x68>)
 80163ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80163f2:	601a      	str	r2, [r3, #0]
 80163f4:	f3bf 8f4f 	dsb	sy
 80163f8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80163fc:	bf00      	nop
 80163fe:	3710      	adds	r7, #16
 8016400:	46bd      	mov	sp, r7
 8016402:	bd80      	pop	{r7, pc}
 8016404:	2000063c 	.word	0x2000063c
 8016408:	e000ed04 	.word	0xe000ed04

0801640c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801640c:	b580      	push	{r7, lr}
 801640e:	b08a      	sub	sp, #40	; 0x28
 8016410:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8016412:	2300      	movs	r3, #0
 8016414:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8016416:	2300      	movs	r3, #0
 8016418:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801641a:	463a      	mov	r2, r7
 801641c:	1d39      	adds	r1, r7, #4
 801641e:	f107 0308 	add.w	r3, r7, #8
 8016422:	4618      	mov	r0, r3
 8016424:	f7eb f816 	bl	8001454 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8016428:	6839      	ldr	r1, [r7, #0]
 801642a:	687b      	ldr	r3, [r7, #4]
 801642c:	68ba      	ldr	r2, [r7, #8]
 801642e:	9202      	str	r2, [sp, #8]
 8016430:	9301      	str	r3, [sp, #4]
 8016432:	2300      	movs	r3, #0
 8016434:	9300      	str	r3, [sp, #0]
 8016436:	2300      	movs	r3, #0
 8016438:	460a      	mov	r2, r1
 801643a:	4920      	ldr	r1, [pc, #128]	; (80164bc <vTaskStartScheduler+0xb0>)
 801643c:	4820      	ldr	r0, [pc, #128]	; (80164c0 <vTaskStartScheduler+0xb4>)
 801643e:	f7ff fe09 	bl	8016054 <xTaskCreateStatic>
 8016442:	4603      	mov	r3, r0
 8016444:	4a1f      	ldr	r2, [pc, #124]	; (80164c4 <vTaskStartScheduler+0xb8>)
 8016446:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8016448:	4b1e      	ldr	r3, [pc, #120]	; (80164c4 <vTaskStartScheduler+0xb8>)
 801644a:	681b      	ldr	r3, [r3, #0]
 801644c:	2b00      	cmp	r3, #0
 801644e:	d002      	beq.n	8016456 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8016450:	2301      	movs	r3, #1
 8016452:	617b      	str	r3, [r7, #20]
 8016454:	e001      	b.n	801645a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8016456:	2300      	movs	r3, #0
 8016458:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801645a:	697b      	ldr	r3, [r7, #20]
 801645c:	2b01      	cmp	r3, #1
 801645e:	d118      	bne.n	8016492 <vTaskStartScheduler+0x86>
	__asm volatile
 8016460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016464:	b672      	cpsid	i
 8016466:	f383 8811 	msr	BASEPRI, r3
 801646a:	f3bf 8f6f 	isb	sy
 801646e:	f3bf 8f4f 	dsb	sy
 8016472:	b662      	cpsie	i
 8016474:	613b      	str	r3, [r7, #16]
}
 8016476:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8016478:	4b13      	ldr	r3, [pc, #76]	; (80164c8 <vTaskStartScheduler+0xbc>)
 801647a:	f04f 32ff 	mov.w	r2, #4294967295
 801647e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8016480:	4b12      	ldr	r3, [pc, #72]	; (80164cc <vTaskStartScheduler+0xc0>)
 8016482:	2201      	movs	r2, #1
 8016484:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8016486:	4b12      	ldr	r3, [pc, #72]	; (80164d0 <vTaskStartScheduler+0xc4>)
 8016488:	2200      	movs	r2, #0
 801648a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801648c:	f000 ffb0 	bl	80173f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8016490:	e010      	b.n	80164b4 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8016492:	697b      	ldr	r3, [r7, #20]
 8016494:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016498:	d10c      	bne.n	80164b4 <vTaskStartScheduler+0xa8>
	__asm volatile
 801649a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801649e:	b672      	cpsid	i
 80164a0:	f383 8811 	msr	BASEPRI, r3
 80164a4:	f3bf 8f6f 	isb	sy
 80164a8:	f3bf 8f4f 	dsb	sy
 80164ac:	b662      	cpsie	i
 80164ae:	60fb      	str	r3, [r7, #12]
}
 80164b0:	bf00      	nop
 80164b2:	e7fe      	b.n	80164b2 <vTaskStartScheduler+0xa6>
}
 80164b4:	bf00      	nop
 80164b6:	3718      	adds	r7, #24
 80164b8:	46bd      	mov	sp, r7
 80164ba:	bd80      	pop	{r7, pc}
 80164bc:	0801b7dc 	.word	0x0801b7dc
 80164c0:	08016b0d 	.word	0x08016b0d
 80164c4:	20000638 	.word	0x20000638
 80164c8:	20000634 	.word	0x20000634
 80164cc:	20000620 	.word	0x20000620
 80164d0:	20000618 	.word	0x20000618

080164d4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80164d4:	b480      	push	{r7}
 80164d6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80164d8:	4b04      	ldr	r3, [pc, #16]	; (80164ec <vTaskSuspendAll+0x18>)
 80164da:	681b      	ldr	r3, [r3, #0]
 80164dc:	3301      	adds	r3, #1
 80164de:	4a03      	ldr	r2, [pc, #12]	; (80164ec <vTaskSuspendAll+0x18>)
 80164e0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80164e2:	bf00      	nop
 80164e4:	46bd      	mov	sp, r7
 80164e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164ea:	4770      	bx	lr
 80164ec:	2000063c 	.word	0x2000063c

080164f0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80164f0:	b580      	push	{r7, lr}
 80164f2:	b084      	sub	sp, #16
 80164f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80164f6:	2300      	movs	r3, #0
 80164f8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80164fa:	2300      	movs	r3, #0
 80164fc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80164fe:	4b42      	ldr	r3, [pc, #264]	; (8016608 <xTaskResumeAll+0x118>)
 8016500:	681b      	ldr	r3, [r3, #0]
 8016502:	2b00      	cmp	r3, #0
 8016504:	d10c      	bne.n	8016520 <xTaskResumeAll+0x30>
	__asm volatile
 8016506:	f04f 0350 	mov.w	r3, #80	; 0x50
 801650a:	b672      	cpsid	i
 801650c:	f383 8811 	msr	BASEPRI, r3
 8016510:	f3bf 8f6f 	isb	sy
 8016514:	f3bf 8f4f 	dsb	sy
 8016518:	b662      	cpsie	i
 801651a:	603b      	str	r3, [r7, #0]
}
 801651c:	bf00      	nop
 801651e:	e7fe      	b.n	801651e <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8016520:	f000 ffe4 	bl	80174ec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8016524:	4b38      	ldr	r3, [pc, #224]	; (8016608 <xTaskResumeAll+0x118>)
 8016526:	681b      	ldr	r3, [r3, #0]
 8016528:	3b01      	subs	r3, #1
 801652a:	4a37      	ldr	r2, [pc, #220]	; (8016608 <xTaskResumeAll+0x118>)
 801652c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801652e:	4b36      	ldr	r3, [pc, #216]	; (8016608 <xTaskResumeAll+0x118>)
 8016530:	681b      	ldr	r3, [r3, #0]
 8016532:	2b00      	cmp	r3, #0
 8016534:	d161      	bne.n	80165fa <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8016536:	4b35      	ldr	r3, [pc, #212]	; (801660c <xTaskResumeAll+0x11c>)
 8016538:	681b      	ldr	r3, [r3, #0]
 801653a:	2b00      	cmp	r3, #0
 801653c:	d05d      	beq.n	80165fa <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801653e:	e02e      	b.n	801659e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016540:	4b33      	ldr	r3, [pc, #204]	; (8016610 <xTaskResumeAll+0x120>)
 8016542:	68db      	ldr	r3, [r3, #12]
 8016544:	68db      	ldr	r3, [r3, #12]
 8016546:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8016548:	68fb      	ldr	r3, [r7, #12]
 801654a:	3318      	adds	r3, #24
 801654c:	4618      	mov	r0, r3
 801654e:	f7fe ffe7 	bl	8015520 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8016552:	68fb      	ldr	r3, [r7, #12]
 8016554:	3304      	adds	r3, #4
 8016556:	4618      	mov	r0, r3
 8016558:	f7fe ffe2 	bl	8015520 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801655c:	68fb      	ldr	r3, [r7, #12]
 801655e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016560:	2201      	movs	r2, #1
 8016562:	409a      	lsls	r2, r3
 8016564:	4b2b      	ldr	r3, [pc, #172]	; (8016614 <xTaskResumeAll+0x124>)
 8016566:	681b      	ldr	r3, [r3, #0]
 8016568:	4313      	orrs	r3, r2
 801656a:	4a2a      	ldr	r2, [pc, #168]	; (8016614 <xTaskResumeAll+0x124>)
 801656c:	6013      	str	r3, [r2, #0]
 801656e:	68fb      	ldr	r3, [r7, #12]
 8016570:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016572:	4613      	mov	r3, r2
 8016574:	009b      	lsls	r3, r3, #2
 8016576:	4413      	add	r3, r2
 8016578:	009b      	lsls	r3, r3, #2
 801657a:	4a27      	ldr	r2, [pc, #156]	; (8016618 <xTaskResumeAll+0x128>)
 801657c:	441a      	add	r2, r3
 801657e:	68fb      	ldr	r3, [r7, #12]
 8016580:	3304      	adds	r3, #4
 8016582:	4619      	mov	r1, r3
 8016584:	4610      	mov	r0, r2
 8016586:	f7fe ff6e 	bl	8015466 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801658a:	68fb      	ldr	r3, [r7, #12]
 801658c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801658e:	4b23      	ldr	r3, [pc, #140]	; (801661c <xTaskResumeAll+0x12c>)
 8016590:	681b      	ldr	r3, [r3, #0]
 8016592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016594:	429a      	cmp	r2, r3
 8016596:	d302      	bcc.n	801659e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8016598:	4b21      	ldr	r3, [pc, #132]	; (8016620 <xTaskResumeAll+0x130>)
 801659a:	2201      	movs	r2, #1
 801659c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801659e:	4b1c      	ldr	r3, [pc, #112]	; (8016610 <xTaskResumeAll+0x120>)
 80165a0:	681b      	ldr	r3, [r3, #0]
 80165a2:	2b00      	cmp	r3, #0
 80165a4:	d1cc      	bne.n	8016540 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80165a6:	68fb      	ldr	r3, [r7, #12]
 80165a8:	2b00      	cmp	r3, #0
 80165aa:	d001      	beq.n	80165b0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80165ac:	f000 fb68 	bl	8016c80 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80165b0:	4b1c      	ldr	r3, [pc, #112]	; (8016624 <xTaskResumeAll+0x134>)
 80165b2:	681b      	ldr	r3, [r3, #0]
 80165b4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80165b6:	687b      	ldr	r3, [r7, #4]
 80165b8:	2b00      	cmp	r3, #0
 80165ba:	d010      	beq.n	80165de <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80165bc:	f000 f858 	bl	8016670 <xTaskIncrementTick>
 80165c0:	4603      	mov	r3, r0
 80165c2:	2b00      	cmp	r3, #0
 80165c4:	d002      	beq.n	80165cc <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80165c6:	4b16      	ldr	r3, [pc, #88]	; (8016620 <xTaskResumeAll+0x130>)
 80165c8:	2201      	movs	r2, #1
 80165ca:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80165cc:	687b      	ldr	r3, [r7, #4]
 80165ce:	3b01      	subs	r3, #1
 80165d0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80165d2:	687b      	ldr	r3, [r7, #4]
 80165d4:	2b00      	cmp	r3, #0
 80165d6:	d1f1      	bne.n	80165bc <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 80165d8:	4b12      	ldr	r3, [pc, #72]	; (8016624 <xTaskResumeAll+0x134>)
 80165da:	2200      	movs	r2, #0
 80165dc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80165de:	4b10      	ldr	r3, [pc, #64]	; (8016620 <xTaskResumeAll+0x130>)
 80165e0:	681b      	ldr	r3, [r3, #0]
 80165e2:	2b00      	cmp	r3, #0
 80165e4:	d009      	beq.n	80165fa <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80165e6:	2301      	movs	r3, #1
 80165e8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80165ea:	4b0f      	ldr	r3, [pc, #60]	; (8016628 <xTaskResumeAll+0x138>)
 80165ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80165f0:	601a      	str	r2, [r3, #0]
 80165f2:	f3bf 8f4f 	dsb	sy
 80165f6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80165fa:	f000 ffab 	bl	8017554 <vPortExitCritical>

	return xAlreadyYielded;
 80165fe:	68bb      	ldr	r3, [r7, #8]
}
 8016600:	4618      	mov	r0, r3
 8016602:	3710      	adds	r7, #16
 8016604:	46bd      	mov	sp, r7
 8016606:	bd80      	pop	{r7, pc}
 8016608:	2000063c 	.word	0x2000063c
 801660c:	20000614 	.word	0x20000614
 8016610:	200005d4 	.word	0x200005d4
 8016614:	2000061c 	.word	0x2000061c
 8016618:	20000518 	.word	0x20000518
 801661c:	20000514 	.word	0x20000514
 8016620:	20000628 	.word	0x20000628
 8016624:	20000624 	.word	0x20000624
 8016628:	e000ed04 	.word	0xe000ed04

0801662c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 801662c:	b480      	push	{r7}
 801662e:	b083      	sub	sp, #12
 8016630:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8016632:	4b05      	ldr	r3, [pc, #20]	; (8016648 <xTaskGetTickCount+0x1c>)
 8016634:	681b      	ldr	r3, [r3, #0]
 8016636:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8016638:	687b      	ldr	r3, [r7, #4]
}
 801663a:	4618      	mov	r0, r3
 801663c:	370c      	adds	r7, #12
 801663e:	46bd      	mov	sp, r7
 8016640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016644:	4770      	bx	lr
 8016646:	bf00      	nop
 8016648:	20000618 	.word	0x20000618

0801664c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 801664c:	b580      	push	{r7, lr}
 801664e:	b082      	sub	sp, #8
 8016650:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8016652:	f001 f833 	bl	80176bc <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8016656:	2300      	movs	r3, #0
 8016658:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 801665a:	4b04      	ldr	r3, [pc, #16]	; (801666c <xTaskGetTickCountFromISR+0x20>)
 801665c:	681b      	ldr	r3, [r3, #0]
 801665e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8016660:	683b      	ldr	r3, [r7, #0]
}
 8016662:	4618      	mov	r0, r3
 8016664:	3708      	adds	r7, #8
 8016666:	46bd      	mov	sp, r7
 8016668:	bd80      	pop	{r7, pc}
 801666a:	bf00      	nop
 801666c:	20000618 	.word	0x20000618

08016670 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8016670:	b580      	push	{r7, lr}
 8016672:	b086      	sub	sp, #24
 8016674:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8016676:	2300      	movs	r3, #0
 8016678:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801667a:	4b4f      	ldr	r3, [pc, #316]	; (80167b8 <xTaskIncrementTick+0x148>)
 801667c:	681b      	ldr	r3, [r3, #0]
 801667e:	2b00      	cmp	r3, #0
 8016680:	f040 808a 	bne.w	8016798 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8016684:	4b4d      	ldr	r3, [pc, #308]	; (80167bc <xTaskIncrementTick+0x14c>)
 8016686:	681b      	ldr	r3, [r3, #0]
 8016688:	3301      	adds	r3, #1
 801668a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801668c:	4a4b      	ldr	r2, [pc, #300]	; (80167bc <xTaskIncrementTick+0x14c>)
 801668e:	693b      	ldr	r3, [r7, #16]
 8016690:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8016692:	693b      	ldr	r3, [r7, #16]
 8016694:	2b00      	cmp	r3, #0
 8016696:	d122      	bne.n	80166de <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8016698:	4b49      	ldr	r3, [pc, #292]	; (80167c0 <xTaskIncrementTick+0x150>)
 801669a:	681b      	ldr	r3, [r3, #0]
 801669c:	681b      	ldr	r3, [r3, #0]
 801669e:	2b00      	cmp	r3, #0
 80166a0:	d00c      	beq.n	80166bc <xTaskIncrementTick+0x4c>
	__asm volatile
 80166a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80166a6:	b672      	cpsid	i
 80166a8:	f383 8811 	msr	BASEPRI, r3
 80166ac:	f3bf 8f6f 	isb	sy
 80166b0:	f3bf 8f4f 	dsb	sy
 80166b4:	b662      	cpsie	i
 80166b6:	603b      	str	r3, [r7, #0]
}
 80166b8:	bf00      	nop
 80166ba:	e7fe      	b.n	80166ba <xTaskIncrementTick+0x4a>
 80166bc:	4b40      	ldr	r3, [pc, #256]	; (80167c0 <xTaskIncrementTick+0x150>)
 80166be:	681b      	ldr	r3, [r3, #0]
 80166c0:	60fb      	str	r3, [r7, #12]
 80166c2:	4b40      	ldr	r3, [pc, #256]	; (80167c4 <xTaskIncrementTick+0x154>)
 80166c4:	681b      	ldr	r3, [r3, #0]
 80166c6:	4a3e      	ldr	r2, [pc, #248]	; (80167c0 <xTaskIncrementTick+0x150>)
 80166c8:	6013      	str	r3, [r2, #0]
 80166ca:	4a3e      	ldr	r2, [pc, #248]	; (80167c4 <xTaskIncrementTick+0x154>)
 80166cc:	68fb      	ldr	r3, [r7, #12]
 80166ce:	6013      	str	r3, [r2, #0]
 80166d0:	4b3d      	ldr	r3, [pc, #244]	; (80167c8 <xTaskIncrementTick+0x158>)
 80166d2:	681b      	ldr	r3, [r3, #0]
 80166d4:	3301      	adds	r3, #1
 80166d6:	4a3c      	ldr	r2, [pc, #240]	; (80167c8 <xTaskIncrementTick+0x158>)
 80166d8:	6013      	str	r3, [r2, #0]
 80166da:	f000 fad1 	bl	8016c80 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80166de:	4b3b      	ldr	r3, [pc, #236]	; (80167cc <xTaskIncrementTick+0x15c>)
 80166e0:	681b      	ldr	r3, [r3, #0]
 80166e2:	693a      	ldr	r2, [r7, #16]
 80166e4:	429a      	cmp	r2, r3
 80166e6:	d348      	bcc.n	801677a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80166e8:	4b35      	ldr	r3, [pc, #212]	; (80167c0 <xTaskIncrementTick+0x150>)
 80166ea:	681b      	ldr	r3, [r3, #0]
 80166ec:	681b      	ldr	r3, [r3, #0]
 80166ee:	2b00      	cmp	r3, #0
 80166f0:	d104      	bne.n	80166fc <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80166f2:	4b36      	ldr	r3, [pc, #216]	; (80167cc <xTaskIncrementTick+0x15c>)
 80166f4:	f04f 32ff 	mov.w	r2, #4294967295
 80166f8:	601a      	str	r2, [r3, #0]
					break;
 80166fa:	e03e      	b.n	801677a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80166fc:	4b30      	ldr	r3, [pc, #192]	; (80167c0 <xTaskIncrementTick+0x150>)
 80166fe:	681b      	ldr	r3, [r3, #0]
 8016700:	68db      	ldr	r3, [r3, #12]
 8016702:	68db      	ldr	r3, [r3, #12]
 8016704:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8016706:	68bb      	ldr	r3, [r7, #8]
 8016708:	685b      	ldr	r3, [r3, #4]
 801670a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801670c:	693a      	ldr	r2, [r7, #16]
 801670e:	687b      	ldr	r3, [r7, #4]
 8016710:	429a      	cmp	r2, r3
 8016712:	d203      	bcs.n	801671c <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8016714:	4a2d      	ldr	r2, [pc, #180]	; (80167cc <xTaskIncrementTick+0x15c>)
 8016716:	687b      	ldr	r3, [r7, #4]
 8016718:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801671a:	e02e      	b.n	801677a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801671c:	68bb      	ldr	r3, [r7, #8]
 801671e:	3304      	adds	r3, #4
 8016720:	4618      	mov	r0, r3
 8016722:	f7fe fefd 	bl	8015520 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8016726:	68bb      	ldr	r3, [r7, #8]
 8016728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801672a:	2b00      	cmp	r3, #0
 801672c:	d004      	beq.n	8016738 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801672e:	68bb      	ldr	r3, [r7, #8]
 8016730:	3318      	adds	r3, #24
 8016732:	4618      	mov	r0, r3
 8016734:	f7fe fef4 	bl	8015520 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8016738:	68bb      	ldr	r3, [r7, #8]
 801673a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801673c:	2201      	movs	r2, #1
 801673e:	409a      	lsls	r2, r3
 8016740:	4b23      	ldr	r3, [pc, #140]	; (80167d0 <xTaskIncrementTick+0x160>)
 8016742:	681b      	ldr	r3, [r3, #0]
 8016744:	4313      	orrs	r3, r2
 8016746:	4a22      	ldr	r2, [pc, #136]	; (80167d0 <xTaskIncrementTick+0x160>)
 8016748:	6013      	str	r3, [r2, #0]
 801674a:	68bb      	ldr	r3, [r7, #8]
 801674c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801674e:	4613      	mov	r3, r2
 8016750:	009b      	lsls	r3, r3, #2
 8016752:	4413      	add	r3, r2
 8016754:	009b      	lsls	r3, r3, #2
 8016756:	4a1f      	ldr	r2, [pc, #124]	; (80167d4 <xTaskIncrementTick+0x164>)
 8016758:	441a      	add	r2, r3
 801675a:	68bb      	ldr	r3, [r7, #8]
 801675c:	3304      	adds	r3, #4
 801675e:	4619      	mov	r1, r3
 8016760:	4610      	mov	r0, r2
 8016762:	f7fe fe80 	bl	8015466 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8016766:	68bb      	ldr	r3, [r7, #8]
 8016768:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801676a:	4b1b      	ldr	r3, [pc, #108]	; (80167d8 <xTaskIncrementTick+0x168>)
 801676c:	681b      	ldr	r3, [r3, #0]
 801676e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016770:	429a      	cmp	r2, r3
 8016772:	d3b9      	bcc.n	80166e8 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8016774:	2301      	movs	r3, #1
 8016776:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8016778:	e7b6      	b.n	80166e8 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801677a:	4b17      	ldr	r3, [pc, #92]	; (80167d8 <xTaskIncrementTick+0x168>)
 801677c:	681b      	ldr	r3, [r3, #0]
 801677e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016780:	4914      	ldr	r1, [pc, #80]	; (80167d4 <xTaskIncrementTick+0x164>)
 8016782:	4613      	mov	r3, r2
 8016784:	009b      	lsls	r3, r3, #2
 8016786:	4413      	add	r3, r2
 8016788:	009b      	lsls	r3, r3, #2
 801678a:	440b      	add	r3, r1
 801678c:	681b      	ldr	r3, [r3, #0]
 801678e:	2b01      	cmp	r3, #1
 8016790:	d907      	bls.n	80167a2 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8016792:	2301      	movs	r3, #1
 8016794:	617b      	str	r3, [r7, #20]
 8016796:	e004      	b.n	80167a2 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8016798:	4b10      	ldr	r3, [pc, #64]	; (80167dc <xTaskIncrementTick+0x16c>)
 801679a:	681b      	ldr	r3, [r3, #0]
 801679c:	3301      	adds	r3, #1
 801679e:	4a0f      	ldr	r2, [pc, #60]	; (80167dc <xTaskIncrementTick+0x16c>)
 80167a0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80167a2:	4b0f      	ldr	r3, [pc, #60]	; (80167e0 <xTaskIncrementTick+0x170>)
 80167a4:	681b      	ldr	r3, [r3, #0]
 80167a6:	2b00      	cmp	r3, #0
 80167a8:	d001      	beq.n	80167ae <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 80167aa:	2301      	movs	r3, #1
 80167ac:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80167ae:	697b      	ldr	r3, [r7, #20]
}
 80167b0:	4618      	mov	r0, r3
 80167b2:	3718      	adds	r7, #24
 80167b4:	46bd      	mov	sp, r7
 80167b6:	bd80      	pop	{r7, pc}
 80167b8:	2000063c 	.word	0x2000063c
 80167bc:	20000618 	.word	0x20000618
 80167c0:	200005cc 	.word	0x200005cc
 80167c4:	200005d0 	.word	0x200005d0
 80167c8:	2000062c 	.word	0x2000062c
 80167cc:	20000634 	.word	0x20000634
 80167d0:	2000061c 	.word	0x2000061c
 80167d4:	20000518 	.word	0x20000518
 80167d8:	20000514 	.word	0x20000514
 80167dc:	20000624 	.word	0x20000624
 80167e0:	20000628 	.word	0x20000628

080167e4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80167e4:	b580      	push	{r7, lr}
 80167e6:	b088      	sub	sp, #32
 80167e8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80167ea:	4b3a      	ldr	r3, [pc, #232]	; (80168d4 <vTaskSwitchContext+0xf0>)
 80167ec:	681b      	ldr	r3, [r3, #0]
 80167ee:	2b00      	cmp	r3, #0
 80167f0:	d003      	beq.n	80167fa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80167f2:	4b39      	ldr	r3, [pc, #228]	; (80168d8 <vTaskSwitchContext+0xf4>)
 80167f4:	2201      	movs	r2, #1
 80167f6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80167f8:	e068      	b.n	80168cc <vTaskSwitchContext+0xe8>
		xYieldPending = pdFALSE;
 80167fa:	4b37      	ldr	r3, [pc, #220]	; (80168d8 <vTaskSwitchContext+0xf4>)
 80167fc:	2200      	movs	r2, #0
 80167fe:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8016800:	4b36      	ldr	r3, [pc, #216]	; (80168dc <vTaskSwitchContext+0xf8>)
 8016802:	681b      	ldr	r3, [r3, #0]
 8016804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016806:	61fb      	str	r3, [r7, #28]
 8016808:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 801680c:	61bb      	str	r3, [r7, #24]
 801680e:	69fb      	ldr	r3, [r7, #28]
 8016810:	681b      	ldr	r3, [r3, #0]
 8016812:	69ba      	ldr	r2, [r7, #24]
 8016814:	429a      	cmp	r2, r3
 8016816:	d111      	bne.n	801683c <vTaskSwitchContext+0x58>
 8016818:	69fb      	ldr	r3, [r7, #28]
 801681a:	3304      	adds	r3, #4
 801681c:	681b      	ldr	r3, [r3, #0]
 801681e:	69ba      	ldr	r2, [r7, #24]
 8016820:	429a      	cmp	r2, r3
 8016822:	d10b      	bne.n	801683c <vTaskSwitchContext+0x58>
 8016824:	69fb      	ldr	r3, [r7, #28]
 8016826:	3308      	adds	r3, #8
 8016828:	681b      	ldr	r3, [r3, #0]
 801682a:	69ba      	ldr	r2, [r7, #24]
 801682c:	429a      	cmp	r2, r3
 801682e:	d105      	bne.n	801683c <vTaskSwitchContext+0x58>
 8016830:	69fb      	ldr	r3, [r7, #28]
 8016832:	330c      	adds	r3, #12
 8016834:	681b      	ldr	r3, [r3, #0]
 8016836:	69ba      	ldr	r2, [r7, #24]
 8016838:	429a      	cmp	r2, r3
 801683a:	d008      	beq.n	801684e <vTaskSwitchContext+0x6a>
 801683c:	4b27      	ldr	r3, [pc, #156]	; (80168dc <vTaskSwitchContext+0xf8>)
 801683e:	681a      	ldr	r2, [r3, #0]
 8016840:	4b26      	ldr	r3, [pc, #152]	; (80168dc <vTaskSwitchContext+0xf8>)
 8016842:	681b      	ldr	r3, [r3, #0]
 8016844:	3334      	adds	r3, #52	; 0x34
 8016846:	4619      	mov	r1, r3
 8016848:	4610      	mov	r0, r2
 801684a:	f7ea fdf0 	bl	800142e <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801684e:	4b24      	ldr	r3, [pc, #144]	; (80168e0 <vTaskSwitchContext+0xfc>)
 8016850:	681b      	ldr	r3, [r3, #0]
 8016852:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8016854:	68fb      	ldr	r3, [r7, #12]
 8016856:	fab3 f383 	clz	r3, r3
 801685a:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 801685c:	7afb      	ldrb	r3, [r7, #11]
 801685e:	f1c3 031f 	rsb	r3, r3, #31
 8016862:	617b      	str	r3, [r7, #20]
 8016864:	491f      	ldr	r1, [pc, #124]	; (80168e4 <vTaskSwitchContext+0x100>)
 8016866:	697a      	ldr	r2, [r7, #20]
 8016868:	4613      	mov	r3, r2
 801686a:	009b      	lsls	r3, r3, #2
 801686c:	4413      	add	r3, r2
 801686e:	009b      	lsls	r3, r3, #2
 8016870:	440b      	add	r3, r1
 8016872:	681b      	ldr	r3, [r3, #0]
 8016874:	2b00      	cmp	r3, #0
 8016876:	d10c      	bne.n	8016892 <vTaskSwitchContext+0xae>
	__asm volatile
 8016878:	f04f 0350 	mov.w	r3, #80	; 0x50
 801687c:	b672      	cpsid	i
 801687e:	f383 8811 	msr	BASEPRI, r3
 8016882:	f3bf 8f6f 	isb	sy
 8016886:	f3bf 8f4f 	dsb	sy
 801688a:	b662      	cpsie	i
 801688c:	607b      	str	r3, [r7, #4]
}
 801688e:	bf00      	nop
 8016890:	e7fe      	b.n	8016890 <vTaskSwitchContext+0xac>
 8016892:	697a      	ldr	r2, [r7, #20]
 8016894:	4613      	mov	r3, r2
 8016896:	009b      	lsls	r3, r3, #2
 8016898:	4413      	add	r3, r2
 801689a:	009b      	lsls	r3, r3, #2
 801689c:	4a11      	ldr	r2, [pc, #68]	; (80168e4 <vTaskSwitchContext+0x100>)
 801689e:	4413      	add	r3, r2
 80168a0:	613b      	str	r3, [r7, #16]
 80168a2:	693b      	ldr	r3, [r7, #16]
 80168a4:	685b      	ldr	r3, [r3, #4]
 80168a6:	685a      	ldr	r2, [r3, #4]
 80168a8:	693b      	ldr	r3, [r7, #16]
 80168aa:	605a      	str	r2, [r3, #4]
 80168ac:	693b      	ldr	r3, [r7, #16]
 80168ae:	685a      	ldr	r2, [r3, #4]
 80168b0:	693b      	ldr	r3, [r7, #16]
 80168b2:	3308      	adds	r3, #8
 80168b4:	429a      	cmp	r2, r3
 80168b6:	d104      	bne.n	80168c2 <vTaskSwitchContext+0xde>
 80168b8:	693b      	ldr	r3, [r7, #16]
 80168ba:	685b      	ldr	r3, [r3, #4]
 80168bc:	685a      	ldr	r2, [r3, #4]
 80168be:	693b      	ldr	r3, [r7, #16]
 80168c0:	605a      	str	r2, [r3, #4]
 80168c2:	693b      	ldr	r3, [r7, #16]
 80168c4:	685b      	ldr	r3, [r3, #4]
 80168c6:	68db      	ldr	r3, [r3, #12]
 80168c8:	4a04      	ldr	r2, [pc, #16]	; (80168dc <vTaskSwitchContext+0xf8>)
 80168ca:	6013      	str	r3, [r2, #0]
}
 80168cc:	bf00      	nop
 80168ce:	3720      	adds	r7, #32
 80168d0:	46bd      	mov	sp, r7
 80168d2:	bd80      	pop	{r7, pc}
 80168d4:	2000063c 	.word	0x2000063c
 80168d8:	20000628 	.word	0x20000628
 80168dc:	20000514 	.word	0x20000514
 80168e0:	2000061c 	.word	0x2000061c
 80168e4:	20000518 	.word	0x20000518

080168e8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80168e8:	b580      	push	{r7, lr}
 80168ea:	b084      	sub	sp, #16
 80168ec:	af00      	add	r7, sp, #0
 80168ee:	6078      	str	r0, [r7, #4]
 80168f0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80168f2:	687b      	ldr	r3, [r7, #4]
 80168f4:	2b00      	cmp	r3, #0
 80168f6:	d10c      	bne.n	8016912 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 80168f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80168fc:	b672      	cpsid	i
 80168fe:	f383 8811 	msr	BASEPRI, r3
 8016902:	f3bf 8f6f 	isb	sy
 8016906:	f3bf 8f4f 	dsb	sy
 801690a:	b662      	cpsie	i
 801690c:	60fb      	str	r3, [r7, #12]
}
 801690e:	bf00      	nop
 8016910:	e7fe      	b.n	8016910 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8016912:	4b07      	ldr	r3, [pc, #28]	; (8016930 <vTaskPlaceOnEventList+0x48>)
 8016914:	681b      	ldr	r3, [r3, #0]
 8016916:	3318      	adds	r3, #24
 8016918:	4619      	mov	r1, r3
 801691a:	6878      	ldr	r0, [r7, #4]
 801691c:	f7fe fdc7 	bl	80154ae <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8016920:	2101      	movs	r1, #1
 8016922:	6838      	ldr	r0, [r7, #0]
 8016924:	f000 fc6c 	bl	8017200 <prvAddCurrentTaskToDelayedList>
}
 8016928:	bf00      	nop
 801692a:	3710      	adds	r7, #16
 801692c:	46bd      	mov	sp, r7
 801692e:	bd80      	pop	{r7, pc}
 8016930:	20000514 	.word	0x20000514

08016934 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8016934:	b580      	push	{r7, lr}
 8016936:	b086      	sub	sp, #24
 8016938:	af00      	add	r7, sp, #0
 801693a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801693c:	687b      	ldr	r3, [r7, #4]
 801693e:	68db      	ldr	r3, [r3, #12]
 8016940:	68db      	ldr	r3, [r3, #12]
 8016942:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8016944:	693b      	ldr	r3, [r7, #16]
 8016946:	2b00      	cmp	r3, #0
 8016948:	d10c      	bne.n	8016964 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 801694a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801694e:	b672      	cpsid	i
 8016950:	f383 8811 	msr	BASEPRI, r3
 8016954:	f3bf 8f6f 	isb	sy
 8016958:	f3bf 8f4f 	dsb	sy
 801695c:	b662      	cpsie	i
 801695e:	60fb      	str	r3, [r7, #12]
}
 8016960:	bf00      	nop
 8016962:	e7fe      	b.n	8016962 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8016964:	693b      	ldr	r3, [r7, #16]
 8016966:	3318      	adds	r3, #24
 8016968:	4618      	mov	r0, r3
 801696a:	f7fe fdd9 	bl	8015520 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801696e:	4b1d      	ldr	r3, [pc, #116]	; (80169e4 <xTaskRemoveFromEventList+0xb0>)
 8016970:	681b      	ldr	r3, [r3, #0]
 8016972:	2b00      	cmp	r3, #0
 8016974:	d11c      	bne.n	80169b0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8016976:	693b      	ldr	r3, [r7, #16]
 8016978:	3304      	adds	r3, #4
 801697a:	4618      	mov	r0, r3
 801697c:	f7fe fdd0 	bl	8015520 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8016980:	693b      	ldr	r3, [r7, #16]
 8016982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016984:	2201      	movs	r2, #1
 8016986:	409a      	lsls	r2, r3
 8016988:	4b17      	ldr	r3, [pc, #92]	; (80169e8 <xTaskRemoveFromEventList+0xb4>)
 801698a:	681b      	ldr	r3, [r3, #0]
 801698c:	4313      	orrs	r3, r2
 801698e:	4a16      	ldr	r2, [pc, #88]	; (80169e8 <xTaskRemoveFromEventList+0xb4>)
 8016990:	6013      	str	r3, [r2, #0]
 8016992:	693b      	ldr	r3, [r7, #16]
 8016994:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016996:	4613      	mov	r3, r2
 8016998:	009b      	lsls	r3, r3, #2
 801699a:	4413      	add	r3, r2
 801699c:	009b      	lsls	r3, r3, #2
 801699e:	4a13      	ldr	r2, [pc, #76]	; (80169ec <xTaskRemoveFromEventList+0xb8>)
 80169a0:	441a      	add	r2, r3
 80169a2:	693b      	ldr	r3, [r7, #16]
 80169a4:	3304      	adds	r3, #4
 80169a6:	4619      	mov	r1, r3
 80169a8:	4610      	mov	r0, r2
 80169aa:	f7fe fd5c 	bl	8015466 <vListInsertEnd>
 80169ae:	e005      	b.n	80169bc <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80169b0:	693b      	ldr	r3, [r7, #16]
 80169b2:	3318      	adds	r3, #24
 80169b4:	4619      	mov	r1, r3
 80169b6:	480e      	ldr	r0, [pc, #56]	; (80169f0 <xTaskRemoveFromEventList+0xbc>)
 80169b8:	f7fe fd55 	bl	8015466 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80169bc:	693b      	ldr	r3, [r7, #16]
 80169be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80169c0:	4b0c      	ldr	r3, [pc, #48]	; (80169f4 <xTaskRemoveFromEventList+0xc0>)
 80169c2:	681b      	ldr	r3, [r3, #0]
 80169c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80169c6:	429a      	cmp	r2, r3
 80169c8:	d905      	bls.n	80169d6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80169ca:	2301      	movs	r3, #1
 80169cc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80169ce:	4b0a      	ldr	r3, [pc, #40]	; (80169f8 <xTaskRemoveFromEventList+0xc4>)
 80169d0:	2201      	movs	r2, #1
 80169d2:	601a      	str	r2, [r3, #0]
 80169d4:	e001      	b.n	80169da <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80169d6:	2300      	movs	r3, #0
 80169d8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80169da:	697b      	ldr	r3, [r7, #20]
}
 80169dc:	4618      	mov	r0, r3
 80169de:	3718      	adds	r7, #24
 80169e0:	46bd      	mov	sp, r7
 80169e2:	bd80      	pop	{r7, pc}
 80169e4:	2000063c 	.word	0x2000063c
 80169e8:	2000061c 	.word	0x2000061c
 80169ec:	20000518 	.word	0x20000518
 80169f0:	200005d4 	.word	0x200005d4
 80169f4:	20000514 	.word	0x20000514
 80169f8:	20000628 	.word	0x20000628

080169fc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80169fc:	b480      	push	{r7}
 80169fe:	b083      	sub	sp, #12
 8016a00:	af00      	add	r7, sp, #0
 8016a02:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8016a04:	4b06      	ldr	r3, [pc, #24]	; (8016a20 <vTaskInternalSetTimeOutState+0x24>)
 8016a06:	681a      	ldr	r2, [r3, #0]
 8016a08:	687b      	ldr	r3, [r7, #4]
 8016a0a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8016a0c:	4b05      	ldr	r3, [pc, #20]	; (8016a24 <vTaskInternalSetTimeOutState+0x28>)
 8016a0e:	681a      	ldr	r2, [r3, #0]
 8016a10:	687b      	ldr	r3, [r7, #4]
 8016a12:	605a      	str	r2, [r3, #4]
}
 8016a14:	bf00      	nop
 8016a16:	370c      	adds	r7, #12
 8016a18:	46bd      	mov	sp, r7
 8016a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a1e:	4770      	bx	lr
 8016a20:	2000062c 	.word	0x2000062c
 8016a24:	20000618 	.word	0x20000618

08016a28 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8016a28:	b580      	push	{r7, lr}
 8016a2a:	b088      	sub	sp, #32
 8016a2c:	af00      	add	r7, sp, #0
 8016a2e:	6078      	str	r0, [r7, #4]
 8016a30:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8016a32:	687b      	ldr	r3, [r7, #4]
 8016a34:	2b00      	cmp	r3, #0
 8016a36:	d10c      	bne.n	8016a52 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8016a38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016a3c:	b672      	cpsid	i
 8016a3e:	f383 8811 	msr	BASEPRI, r3
 8016a42:	f3bf 8f6f 	isb	sy
 8016a46:	f3bf 8f4f 	dsb	sy
 8016a4a:	b662      	cpsie	i
 8016a4c:	613b      	str	r3, [r7, #16]
}
 8016a4e:	bf00      	nop
 8016a50:	e7fe      	b.n	8016a50 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8016a52:	683b      	ldr	r3, [r7, #0]
 8016a54:	2b00      	cmp	r3, #0
 8016a56:	d10c      	bne.n	8016a72 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8016a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016a5c:	b672      	cpsid	i
 8016a5e:	f383 8811 	msr	BASEPRI, r3
 8016a62:	f3bf 8f6f 	isb	sy
 8016a66:	f3bf 8f4f 	dsb	sy
 8016a6a:	b662      	cpsie	i
 8016a6c:	60fb      	str	r3, [r7, #12]
}
 8016a6e:	bf00      	nop
 8016a70:	e7fe      	b.n	8016a70 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8016a72:	f000 fd3b 	bl	80174ec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8016a76:	4b1d      	ldr	r3, [pc, #116]	; (8016aec <xTaskCheckForTimeOut+0xc4>)
 8016a78:	681b      	ldr	r3, [r3, #0]
 8016a7a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8016a7c:	687b      	ldr	r3, [r7, #4]
 8016a7e:	685b      	ldr	r3, [r3, #4]
 8016a80:	69ba      	ldr	r2, [r7, #24]
 8016a82:	1ad3      	subs	r3, r2, r3
 8016a84:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8016a86:	683b      	ldr	r3, [r7, #0]
 8016a88:	681b      	ldr	r3, [r3, #0]
 8016a8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016a8e:	d102      	bne.n	8016a96 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8016a90:	2300      	movs	r3, #0
 8016a92:	61fb      	str	r3, [r7, #28]
 8016a94:	e023      	b.n	8016ade <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8016a96:	687b      	ldr	r3, [r7, #4]
 8016a98:	681a      	ldr	r2, [r3, #0]
 8016a9a:	4b15      	ldr	r3, [pc, #84]	; (8016af0 <xTaskCheckForTimeOut+0xc8>)
 8016a9c:	681b      	ldr	r3, [r3, #0]
 8016a9e:	429a      	cmp	r2, r3
 8016aa0:	d007      	beq.n	8016ab2 <xTaskCheckForTimeOut+0x8a>
 8016aa2:	687b      	ldr	r3, [r7, #4]
 8016aa4:	685b      	ldr	r3, [r3, #4]
 8016aa6:	69ba      	ldr	r2, [r7, #24]
 8016aa8:	429a      	cmp	r2, r3
 8016aaa:	d302      	bcc.n	8016ab2 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8016aac:	2301      	movs	r3, #1
 8016aae:	61fb      	str	r3, [r7, #28]
 8016ab0:	e015      	b.n	8016ade <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8016ab2:	683b      	ldr	r3, [r7, #0]
 8016ab4:	681b      	ldr	r3, [r3, #0]
 8016ab6:	697a      	ldr	r2, [r7, #20]
 8016ab8:	429a      	cmp	r2, r3
 8016aba:	d20b      	bcs.n	8016ad4 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8016abc:	683b      	ldr	r3, [r7, #0]
 8016abe:	681a      	ldr	r2, [r3, #0]
 8016ac0:	697b      	ldr	r3, [r7, #20]
 8016ac2:	1ad2      	subs	r2, r2, r3
 8016ac4:	683b      	ldr	r3, [r7, #0]
 8016ac6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8016ac8:	6878      	ldr	r0, [r7, #4]
 8016aca:	f7ff ff97 	bl	80169fc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8016ace:	2300      	movs	r3, #0
 8016ad0:	61fb      	str	r3, [r7, #28]
 8016ad2:	e004      	b.n	8016ade <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8016ad4:	683b      	ldr	r3, [r7, #0]
 8016ad6:	2200      	movs	r2, #0
 8016ad8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8016ada:	2301      	movs	r3, #1
 8016adc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8016ade:	f000 fd39 	bl	8017554 <vPortExitCritical>

	return xReturn;
 8016ae2:	69fb      	ldr	r3, [r7, #28]
}
 8016ae4:	4618      	mov	r0, r3
 8016ae6:	3720      	adds	r7, #32
 8016ae8:	46bd      	mov	sp, r7
 8016aea:	bd80      	pop	{r7, pc}
 8016aec:	20000618 	.word	0x20000618
 8016af0:	2000062c 	.word	0x2000062c

08016af4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8016af4:	b480      	push	{r7}
 8016af6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8016af8:	4b03      	ldr	r3, [pc, #12]	; (8016b08 <vTaskMissedYield+0x14>)
 8016afa:	2201      	movs	r2, #1
 8016afc:	601a      	str	r2, [r3, #0]
}
 8016afe:	bf00      	nop
 8016b00:	46bd      	mov	sp, r7
 8016b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b06:	4770      	bx	lr
 8016b08:	20000628 	.word	0x20000628

08016b0c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8016b0c:	b580      	push	{r7, lr}
 8016b0e:	b082      	sub	sp, #8
 8016b10:	af00      	add	r7, sp, #0
 8016b12:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8016b14:	f000 f854 	bl	8016bc0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8016b18:	4b07      	ldr	r3, [pc, #28]	; (8016b38 <prvIdleTask+0x2c>)
 8016b1a:	681b      	ldr	r3, [r3, #0]
 8016b1c:	2b01      	cmp	r3, #1
 8016b1e:	d907      	bls.n	8016b30 <prvIdleTask+0x24>
			{
				taskYIELD();
 8016b20:	4b06      	ldr	r3, [pc, #24]	; (8016b3c <prvIdleTask+0x30>)
 8016b22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016b26:	601a      	str	r2, [r3, #0]
 8016b28:	f3bf 8f4f 	dsb	sy
 8016b2c:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8016b30:	f7ea fc76 	bl	8001420 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8016b34:	e7ee      	b.n	8016b14 <prvIdleTask+0x8>
 8016b36:	bf00      	nop
 8016b38:	20000518 	.word	0x20000518
 8016b3c:	e000ed04 	.word	0xe000ed04

08016b40 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8016b40:	b580      	push	{r7, lr}
 8016b42:	b082      	sub	sp, #8
 8016b44:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8016b46:	2300      	movs	r3, #0
 8016b48:	607b      	str	r3, [r7, #4]
 8016b4a:	e00c      	b.n	8016b66 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8016b4c:	687a      	ldr	r2, [r7, #4]
 8016b4e:	4613      	mov	r3, r2
 8016b50:	009b      	lsls	r3, r3, #2
 8016b52:	4413      	add	r3, r2
 8016b54:	009b      	lsls	r3, r3, #2
 8016b56:	4a12      	ldr	r2, [pc, #72]	; (8016ba0 <prvInitialiseTaskLists+0x60>)
 8016b58:	4413      	add	r3, r2
 8016b5a:	4618      	mov	r0, r3
 8016b5c:	f7fe fc56 	bl	801540c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8016b60:	687b      	ldr	r3, [r7, #4]
 8016b62:	3301      	adds	r3, #1
 8016b64:	607b      	str	r3, [r7, #4]
 8016b66:	687b      	ldr	r3, [r7, #4]
 8016b68:	2b06      	cmp	r3, #6
 8016b6a:	d9ef      	bls.n	8016b4c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8016b6c:	480d      	ldr	r0, [pc, #52]	; (8016ba4 <prvInitialiseTaskLists+0x64>)
 8016b6e:	f7fe fc4d 	bl	801540c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8016b72:	480d      	ldr	r0, [pc, #52]	; (8016ba8 <prvInitialiseTaskLists+0x68>)
 8016b74:	f7fe fc4a 	bl	801540c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8016b78:	480c      	ldr	r0, [pc, #48]	; (8016bac <prvInitialiseTaskLists+0x6c>)
 8016b7a:	f7fe fc47 	bl	801540c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8016b7e:	480c      	ldr	r0, [pc, #48]	; (8016bb0 <prvInitialiseTaskLists+0x70>)
 8016b80:	f7fe fc44 	bl	801540c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8016b84:	480b      	ldr	r0, [pc, #44]	; (8016bb4 <prvInitialiseTaskLists+0x74>)
 8016b86:	f7fe fc41 	bl	801540c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8016b8a:	4b0b      	ldr	r3, [pc, #44]	; (8016bb8 <prvInitialiseTaskLists+0x78>)
 8016b8c:	4a05      	ldr	r2, [pc, #20]	; (8016ba4 <prvInitialiseTaskLists+0x64>)
 8016b8e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8016b90:	4b0a      	ldr	r3, [pc, #40]	; (8016bbc <prvInitialiseTaskLists+0x7c>)
 8016b92:	4a05      	ldr	r2, [pc, #20]	; (8016ba8 <prvInitialiseTaskLists+0x68>)
 8016b94:	601a      	str	r2, [r3, #0]
}
 8016b96:	bf00      	nop
 8016b98:	3708      	adds	r7, #8
 8016b9a:	46bd      	mov	sp, r7
 8016b9c:	bd80      	pop	{r7, pc}
 8016b9e:	bf00      	nop
 8016ba0:	20000518 	.word	0x20000518
 8016ba4:	200005a4 	.word	0x200005a4
 8016ba8:	200005b8 	.word	0x200005b8
 8016bac:	200005d4 	.word	0x200005d4
 8016bb0:	200005e8 	.word	0x200005e8
 8016bb4:	20000600 	.word	0x20000600
 8016bb8:	200005cc 	.word	0x200005cc
 8016bbc:	200005d0 	.word	0x200005d0

08016bc0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8016bc0:	b580      	push	{r7, lr}
 8016bc2:	b082      	sub	sp, #8
 8016bc4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8016bc6:	e019      	b.n	8016bfc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8016bc8:	f000 fc90 	bl	80174ec <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016bcc:	4b10      	ldr	r3, [pc, #64]	; (8016c10 <prvCheckTasksWaitingTermination+0x50>)
 8016bce:	68db      	ldr	r3, [r3, #12]
 8016bd0:	68db      	ldr	r3, [r3, #12]
 8016bd2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8016bd4:	687b      	ldr	r3, [r7, #4]
 8016bd6:	3304      	adds	r3, #4
 8016bd8:	4618      	mov	r0, r3
 8016bda:	f7fe fca1 	bl	8015520 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8016bde:	4b0d      	ldr	r3, [pc, #52]	; (8016c14 <prvCheckTasksWaitingTermination+0x54>)
 8016be0:	681b      	ldr	r3, [r3, #0]
 8016be2:	3b01      	subs	r3, #1
 8016be4:	4a0b      	ldr	r2, [pc, #44]	; (8016c14 <prvCheckTasksWaitingTermination+0x54>)
 8016be6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8016be8:	4b0b      	ldr	r3, [pc, #44]	; (8016c18 <prvCheckTasksWaitingTermination+0x58>)
 8016bea:	681b      	ldr	r3, [r3, #0]
 8016bec:	3b01      	subs	r3, #1
 8016bee:	4a0a      	ldr	r2, [pc, #40]	; (8016c18 <prvCheckTasksWaitingTermination+0x58>)
 8016bf0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8016bf2:	f000 fcaf 	bl	8017554 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8016bf6:	6878      	ldr	r0, [r7, #4]
 8016bf8:	f000 f810 	bl	8016c1c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8016bfc:	4b06      	ldr	r3, [pc, #24]	; (8016c18 <prvCheckTasksWaitingTermination+0x58>)
 8016bfe:	681b      	ldr	r3, [r3, #0]
 8016c00:	2b00      	cmp	r3, #0
 8016c02:	d1e1      	bne.n	8016bc8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8016c04:	bf00      	nop
 8016c06:	bf00      	nop
 8016c08:	3708      	adds	r7, #8
 8016c0a:	46bd      	mov	sp, r7
 8016c0c:	bd80      	pop	{r7, pc}
 8016c0e:	bf00      	nop
 8016c10:	200005e8 	.word	0x200005e8
 8016c14:	20000614 	.word	0x20000614
 8016c18:	200005fc 	.word	0x200005fc

08016c1c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8016c1c:	b580      	push	{r7, lr}
 8016c1e:	b084      	sub	sp, #16
 8016c20:	af00      	add	r7, sp, #0
 8016c22:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8016c24:	687b      	ldr	r3, [r7, #4]
 8016c26:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8016c2a:	2b00      	cmp	r3, #0
 8016c2c:	d108      	bne.n	8016c40 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8016c2e:	687b      	ldr	r3, [r7, #4]
 8016c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016c32:	4618      	mov	r0, r3
 8016c34:	f000 fe56 	bl	80178e4 <vPortFree>
				vPortFree( pxTCB );
 8016c38:	6878      	ldr	r0, [r7, #4]
 8016c3a:	f000 fe53 	bl	80178e4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8016c3e:	e01a      	b.n	8016c76 <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8016c40:	687b      	ldr	r3, [r7, #4]
 8016c42:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8016c46:	2b01      	cmp	r3, #1
 8016c48:	d103      	bne.n	8016c52 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8016c4a:	6878      	ldr	r0, [r7, #4]
 8016c4c:	f000 fe4a 	bl	80178e4 <vPortFree>
	}
 8016c50:	e011      	b.n	8016c76 <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8016c52:	687b      	ldr	r3, [r7, #4]
 8016c54:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8016c58:	2b02      	cmp	r3, #2
 8016c5a:	d00c      	beq.n	8016c76 <prvDeleteTCB+0x5a>
	__asm volatile
 8016c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016c60:	b672      	cpsid	i
 8016c62:	f383 8811 	msr	BASEPRI, r3
 8016c66:	f3bf 8f6f 	isb	sy
 8016c6a:	f3bf 8f4f 	dsb	sy
 8016c6e:	b662      	cpsie	i
 8016c70:	60fb      	str	r3, [r7, #12]
}
 8016c72:	bf00      	nop
 8016c74:	e7fe      	b.n	8016c74 <prvDeleteTCB+0x58>
	}
 8016c76:	bf00      	nop
 8016c78:	3710      	adds	r7, #16
 8016c7a:	46bd      	mov	sp, r7
 8016c7c:	bd80      	pop	{r7, pc}
	...

08016c80 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8016c80:	b480      	push	{r7}
 8016c82:	b083      	sub	sp, #12
 8016c84:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8016c86:	4b0c      	ldr	r3, [pc, #48]	; (8016cb8 <prvResetNextTaskUnblockTime+0x38>)
 8016c88:	681b      	ldr	r3, [r3, #0]
 8016c8a:	681b      	ldr	r3, [r3, #0]
 8016c8c:	2b00      	cmp	r3, #0
 8016c8e:	d104      	bne.n	8016c9a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8016c90:	4b0a      	ldr	r3, [pc, #40]	; (8016cbc <prvResetNextTaskUnblockTime+0x3c>)
 8016c92:	f04f 32ff 	mov.w	r2, #4294967295
 8016c96:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8016c98:	e008      	b.n	8016cac <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016c9a:	4b07      	ldr	r3, [pc, #28]	; (8016cb8 <prvResetNextTaskUnblockTime+0x38>)
 8016c9c:	681b      	ldr	r3, [r3, #0]
 8016c9e:	68db      	ldr	r3, [r3, #12]
 8016ca0:	68db      	ldr	r3, [r3, #12]
 8016ca2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8016ca4:	687b      	ldr	r3, [r7, #4]
 8016ca6:	685b      	ldr	r3, [r3, #4]
 8016ca8:	4a04      	ldr	r2, [pc, #16]	; (8016cbc <prvResetNextTaskUnblockTime+0x3c>)
 8016caa:	6013      	str	r3, [r2, #0]
}
 8016cac:	bf00      	nop
 8016cae:	370c      	adds	r7, #12
 8016cb0:	46bd      	mov	sp, r7
 8016cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cb6:	4770      	bx	lr
 8016cb8:	200005cc 	.word	0x200005cc
 8016cbc:	20000634 	.word	0x20000634

08016cc0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8016cc0:	b480      	push	{r7}
 8016cc2:	b083      	sub	sp, #12
 8016cc4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8016cc6:	4b0b      	ldr	r3, [pc, #44]	; (8016cf4 <xTaskGetSchedulerState+0x34>)
 8016cc8:	681b      	ldr	r3, [r3, #0]
 8016cca:	2b00      	cmp	r3, #0
 8016ccc:	d102      	bne.n	8016cd4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8016cce:	2301      	movs	r3, #1
 8016cd0:	607b      	str	r3, [r7, #4]
 8016cd2:	e008      	b.n	8016ce6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016cd4:	4b08      	ldr	r3, [pc, #32]	; (8016cf8 <xTaskGetSchedulerState+0x38>)
 8016cd6:	681b      	ldr	r3, [r3, #0]
 8016cd8:	2b00      	cmp	r3, #0
 8016cda:	d102      	bne.n	8016ce2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8016cdc:	2302      	movs	r3, #2
 8016cde:	607b      	str	r3, [r7, #4]
 8016ce0:	e001      	b.n	8016ce6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8016ce2:	2300      	movs	r3, #0
 8016ce4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8016ce6:	687b      	ldr	r3, [r7, #4]
	}
 8016ce8:	4618      	mov	r0, r3
 8016cea:	370c      	adds	r7, #12
 8016cec:	46bd      	mov	sp, r7
 8016cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cf2:	4770      	bx	lr
 8016cf4:	20000620 	.word	0x20000620
 8016cf8:	2000063c 	.word	0x2000063c

08016cfc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8016cfc:	b580      	push	{r7, lr}
 8016cfe:	b086      	sub	sp, #24
 8016d00:	af00      	add	r7, sp, #0
 8016d02:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8016d04:	687b      	ldr	r3, [r7, #4]
 8016d06:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8016d08:	2300      	movs	r3, #0
 8016d0a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8016d0c:	687b      	ldr	r3, [r7, #4]
 8016d0e:	2b00      	cmp	r3, #0
 8016d10:	d072      	beq.n	8016df8 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8016d12:	4b3c      	ldr	r3, [pc, #240]	; (8016e04 <xTaskPriorityDisinherit+0x108>)
 8016d14:	681b      	ldr	r3, [r3, #0]
 8016d16:	693a      	ldr	r2, [r7, #16]
 8016d18:	429a      	cmp	r2, r3
 8016d1a:	d00c      	beq.n	8016d36 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8016d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016d20:	b672      	cpsid	i
 8016d22:	f383 8811 	msr	BASEPRI, r3
 8016d26:	f3bf 8f6f 	isb	sy
 8016d2a:	f3bf 8f4f 	dsb	sy
 8016d2e:	b662      	cpsie	i
 8016d30:	60fb      	str	r3, [r7, #12]
}
 8016d32:	bf00      	nop
 8016d34:	e7fe      	b.n	8016d34 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8016d36:	693b      	ldr	r3, [r7, #16]
 8016d38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016d3a:	2b00      	cmp	r3, #0
 8016d3c:	d10c      	bne.n	8016d58 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8016d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016d42:	b672      	cpsid	i
 8016d44:	f383 8811 	msr	BASEPRI, r3
 8016d48:	f3bf 8f6f 	isb	sy
 8016d4c:	f3bf 8f4f 	dsb	sy
 8016d50:	b662      	cpsie	i
 8016d52:	60bb      	str	r3, [r7, #8]
}
 8016d54:	bf00      	nop
 8016d56:	e7fe      	b.n	8016d56 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8016d58:	693b      	ldr	r3, [r7, #16]
 8016d5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016d5c:	1e5a      	subs	r2, r3, #1
 8016d5e:	693b      	ldr	r3, [r7, #16]
 8016d60:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8016d62:	693b      	ldr	r3, [r7, #16]
 8016d64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016d66:	693b      	ldr	r3, [r7, #16]
 8016d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016d6a:	429a      	cmp	r2, r3
 8016d6c:	d044      	beq.n	8016df8 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8016d6e:	693b      	ldr	r3, [r7, #16]
 8016d70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016d72:	2b00      	cmp	r3, #0
 8016d74:	d140      	bne.n	8016df8 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016d76:	693b      	ldr	r3, [r7, #16]
 8016d78:	3304      	adds	r3, #4
 8016d7a:	4618      	mov	r0, r3
 8016d7c:	f7fe fbd0 	bl	8015520 <uxListRemove>
 8016d80:	4603      	mov	r3, r0
 8016d82:	2b00      	cmp	r3, #0
 8016d84:	d115      	bne.n	8016db2 <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8016d86:	693b      	ldr	r3, [r7, #16]
 8016d88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016d8a:	491f      	ldr	r1, [pc, #124]	; (8016e08 <xTaskPriorityDisinherit+0x10c>)
 8016d8c:	4613      	mov	r3, r2
 8016d8e:	009b      	lsls	r3, r3, #2
 8016d90:	4413      	add	r3, r2
 8016d92:	009b      	lsls	r3, r3, #2
 8016d94:	440b      	add	r3, r1
 8016d96:	681b      	ldr	r3, [r3, #0]
 8016d98:	2b00      	cmp	r3, #0
 8016d9a:	d10a      	bne.n	8016db2 <xTaskPriorityDisinherit+0xb6>
 8016d9c:	693b      	ldr	r3, [r7, #16]
 8016d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016da0:	2201      	movs	r2, #1
 8016da2:	fa02 f303 	lsl.w	r3, r2, r3
 8016da6:	43da      	mvns	r2, r3
 8016da8:	4b18      	ldr	r3, [pc, #96]	; (8016e0c <xTaskPriorityDisinherit+0x110>)
 8016daa:	681b      	ldr	r3, [r3, #0]
 8016dac:	4013      	ands	r3, r2
 8016dae:	4a17      	ldr	r2, [pc, #92]	; (8016e0c <xTaskPriorityDisinherit+0x110>)
 8016db0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8016db2:	693b      	ldr	r3, [r7, #16]
 8016db4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8016db6:	693b      	ldr	r3, [r7, #16]
 8016db8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016dba:	693b      	ldr	r3, [r7, #16]
 8016dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016dbe:	f1c3 0207 	rsb	r2, r3, #7
 8016dc2:	693b      	ldr	r3, [r7, #16]
 8016dc4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8016dc6:	693b      	ldr	r3, [r7, #16]
 8016dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016dca:	2201      	movs	r2, #1
 8016dcc:	409a      	lsls	r2, r3
 8016dce:	4b0f      	ldr	r3, [pc, #60]	; (8016e0c <xTaskPriorityDisinherit+0x110>)
 8016dd0:	681b      	ldr	r3, [r3, #0]
 8016dd2:	4313      	orrs	r3, r2
 8016dd4:	4a0d      	ldr	r2, [pc, #52]	; (8016e0c <xTaskPriorityDisinherit+0x110>)
 8016dd6:	6013      	str	r3, [r2, #0]
 8016dd8:	693b      	ldr	r3, [r7, #16]
 8016dda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016ddc:	4613      	mov	r3, r2
 8016dde:	009b      	lsls	r3, r3, #2
 8016de0:	4413      	add	r3, r2
 8016de2:	009b      	lsls	r3, r3, #2
 8016de4:	4a08      	ldr	r2, [pc, #32]	; (8016e08 <xTaskPriorityDisinherit+0x10c>)
 8016de6:	441a      	add	r2, r3
 8016de8:	693b      	ldr	r3, [r7, #16]
 8016dea:	3304      	adds	r3, #4
 8016dec:	4619      	mov	r1, r3
 8016dee:	4610      	mov	r0, r2
 8016df0:	f7fe fb39 	bl	8015466 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8016df4:	2301      	movs	r3, #1
 8016df6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8016df8:	697b      	ldr	r3, [r7, #20]
	}
 8016dfa:	4618      	mov	r0, r3
 8016dfc:	3718      	adds	r7, #24
 8016dfe:	46bd      	mov	sp, r7
 8016e00:	bd80      	pop	{r7, pc}
 8016e02:	bf00      	nop
 8016e04:	20000514 	.word	0x20000514
 8016e08:	20000518 	.word	0x20000518
 8016e0c:	2000061c 	.word	0x2000061c

08016e10 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8016e10:	b580      	push	{r7, lr}
 8016e12:	b086      	sub	sp, #24
 8016e14:	af00      	add	r7, sp, #0
 8016e16:	60f8      	str	r0, [r7, #12]
 8016e18:	60b9      	str	r1, [r7, #8]
 8016e1a:	607a      	str	r2, [r7, #4]
 8016e1c:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8016e1e:	f000 fb65 	bl	80174ec <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8016e22:	4b26      	ldr	r3, [pc, #152]	; (8016ebc <xTaskNotifyWait+0xac>)
 8016e24:	681b      	ldr	r3, [r3, #0]
 8016e26:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8016e2a:	b2db      	uxtb	r3, r3
 8016e2c:	2b02      	cmp	r3, #2
 8016e2e:	d01a      	beq.n	8016e66 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8016e30:	4b22      	ldr	r3, [pc, #136]	; (8016ebc <xTaskNotifyWait+0xac>)
 8016e32:	681b      	ldr	r3, [r3, #0]
 8016e34:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8016e36:	68fa      	ldr	r2, [r7, #12]
 8016e38:	43d2      	mvns	r2, r2
 8016e3a:	400a      	ands	r2, r1
 8016e3c:	651a      	str	r2, [r3, #80]	; 0x50

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8016e3e:	4b1f      	ldr	r3, [pc, #124]	; (8016ebc <xTaskNotifyWait+0xac>)
 8016e40:	681b      	ldr	r3, [r3, #0]
 8016e42:	2201      	movs	r2, #1
 8016e44:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

				if( xTicksToWait > ( TickType_t ) 0 )
 8016e48:	683b      	ldr	r3, [r7, #0]
 8016e4a:	2b00      	cmp	r3, #0
 8016e4c:	d00b      	beq.n	8016e66 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8016e4e:	2101      	movs	r1, #1
 8016e50:	6838      	ldr	r0, [r7, #0]
 8016e52:	f000 f9d5 	bl	8017200 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8016e56:	4b1a      	ldr	r3, [pc, #104]	; (8016ec0 <xTaskNotifyWait+0xb0>)
 8016e58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016e5c:	601a      	str	r2, [r3, #0]
 8016e5e:	f3bf 8f4f 	dsb	sy
 8016e62:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8016e66:	f000 fb75 	bl	8017554 <vPortExitCritical>

		taskENTER_CRITICAL();
 8016e6a:	f000 fb3f 	bl	80174ec <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8016e6e:	687b      	ldr	r3, [r7, #4]
 8016e70:	2b00      	cmp	r3, #0
 8016e72:	d004      	beq.n	8016e7e <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8016e74:	4b11      	ldr	r3, [pc, #68]	; (8016ebc <xTaskNotifyWait+0xac>)
 8016e76:	681b      	ldr	r3, [r3, #0]
 8016e78:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8016e7a:	687b      	ldr	r3, [r7, #4]
 8016e7c:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8016e7e:	4b0f      	ldr	r3, [pc, #60]	; (8016ebc <xTaskNotifyWait+0xac>)
 8016e80:	681b      	ldr	r3, [r3, #0]
 8016e82:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8016e86:	b2db      	uxtb	r3, r3
 8016e88:	2b02      	cmp	r3, #2
 8016e8a:	d002      	beq.n	8016e92 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8016e8c:	2300      	movs	r3, #0
 8016e8e:	617b      	str	r3, [r7, #20]
 8016e90:	e008      	b.n	8016ea4 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8016e92:	4b0a      	ldr	r3, [pc, #40]	; (8016ebc <xTaskNotifyWait+0xac>)
 8016e94:	681b      	ldr	r3, [r3, #0]
 8016e96:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8016e98:	68ba      	ldr	r2, [r7, #8]
 8016e9a:	43d2      	mvns	r2, r2
 8016e9c:	400a      	ands	r2, r1
 8016e9e:	651a      	str	r2, [r3, #80]	; 0x50
				xReturn = pdTRUE;
 8016ea0:	2301      	movs	r3, #1
 8016ea2:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8016ea4:	4b05      	ldr	r3, [pc, #20]	; (8016ebc <xTaskNotifyWait+0xac>)
 8016ea6:	681b      	ldr	r3, [r3, #0]
 8016ea8:	2200      	movs	r2, #0
 8016eaa:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		}
		taskEXIT_CRITICAL();
 8016eae:	f000 fb51 	bl	8017554 <vPortExitCritical>

		return xReturn;
 8016eb2:	697b      	ldr	r3, [r7, #20]
	}
 8016eb4:	4618      	mov	r0, r3
 8016eb6:	3718      	adds	r7, #24
 8016eb8:	46bd      	mov	sp, r7
 8016eba:	bd80      	pop	{r7, pc}
 8016ebc:	20000514 	.word	0x20000514
 8016ec0:	e000ed04 	.word	0xe000ed04

08016ec4 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8016ec4:	b580      	push	{r7, lr}
 8016ec6:	b08a      	sub	sp, #40	; 0x28
 8016ec8:	af00      	add	r7, sp, #0
 8016eca:	60f8      	str	r0, [r7, #12]
 8016ecc:	60b9      	str	r1, [r7, #8]
 8016ece:	603b      	str	r3, [r7, #0]
 8016ed0:	4613      	mov	r3, r2
 8016ed2:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8016ed4:	2301      	movs	r3, #1
 8016ed6:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8016ed8:	68fb      	ldr	r3, [r7, #12]
 8016eda:	2b00      	cmp	r3, #0
 8016edc:	d10c      	bne.n	8016ef8 <xTaskGenericNotify+0x34>
	__asm volatile
 8016ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016ee2:	b672      	cpsid	i
 8016ee4:	f383 8811 	msr	BASEPRI, r3
 8016ee8:	f3bf 8f6f 	isb	sy
 8016eec:	f3bf 8f4f 	dsb	sy
 8016ef0:	b662      	cpsie	i
 8016ef2:	61bb      	str	r3, [r7, #24]
}
 8016ef4:	bf00      	nop
 8016ef6:	e7fe      	b.n	8016ef6 <xTaskGenericNotify+0x32>
		pxTCB = xTaskToNotify;
 8016ef8:	68fb      	ldr	r3, [r7, #12]
 8016efa:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8016efc:	f000 faf6 	bl	80174ec <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8016f00:	683b      	ldr	r3, [r7, #0]
 8016f02:	2b00      	cmp	r3, #0
 8016f04:	d003      	beq.n	8016f0e <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8016f06:	6a3b      	ldr	r3, [r7, #32]
 8016f08:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8016f0a:	683b      	ldr	r3, [r7, #0]
 8016f0c:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8016f0e:	6a3b      	ldr	r3, [r7, #32]
 8016f10:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8016f14:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8016f16:	6a3b      	ldr	r3, [r7, #32]
 8016f18:	2202      	movs	r2, #2
 8016f1a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

			switch( eAction )
 8016f1e:	79fb      	ldrb	r3, [r7, #7]
 8016f20:	2b04      	cmp	r3, #4
 8016f22:	d828      	bhi.n	8016f76 <xTaskGenericNotify+0xb2>
 8016f24:	a201      	add	r2, pc, #4	; (adr r2, 8016f2c <xTaskGenericNotify+0x68>)
 8016f26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016f2a:	bf00      	nop
 8016f2c:	08016f9b 	.word	0x08016f9b
 8016f30:	08016f41 	.word	0x08016f41
 8016f34:	08016f4f 	.word	0x08016f4f
 8016f38:	08016f5b 	.word	0x08016f5b
 8016f3c:	08016f63 	.word	0x08016f63
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8016f40:	6a3b      	ldr	r3, [r7, #32]
 8016f42:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8016f44:	68bb      	ldr	r3, [r7, #8]
 8016f46:	431a      	orrs	r2, r3
 8016f48:	6a3b      	ldr	r3, [r7, #32]
 8016f4a:	651a      	str	r2, [r3, #80]	; 0x50
					break;
 8016f4c:	e028      	b.n	8016fa0 <xTaskGenericNotify+0xdc>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8016f4e:	6a3b      	ldr	r3, [r7, #32]
 8016f50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016f52:	1c5a      	adds	r2, r3, #1
 8016f54:	6a3b      	ldr	r3, [r7, #32]
 8016f56:	651a      	str	r2, [r3, #80]	; 0x50
					break;
 8016f58:	e022      	b.n	8016fa0 <xTaskGenericNotify+0xdc>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8016f5a:	6a3b      	ldr	r3, [r7, #32]
 8016f5c:	68ba      	ldr	r2, [r7, #8]
 8016f5e:	651a      	str	r2, [r3, #80]	; 0x50
					break;
 8016f60:	e01e      	b.n	8016fa0 <xTaskGenericNotify+0xdc>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8016f62:	7ffb      	ldrb	r3, [r7, #31]
 8016f64:	2b02      	cmp	r3, #2
 8016f66:	d003      	beq.n	8016f70 <xTaskGenericNotify+0xac>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8016f68:	6a3b      	ldr	r3, [r7, #32]
 8016f6a:	68ba      	ldr	r2, [r7, #8]
 8016f6c:	651a      	str	r2, [r3, #80]	; 0x50
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8016f6e:	e017      	b.n	8016fa0 <xTaskGenericNotify+0xdc>
						xReturn = pdFAIL;
 8016f70:	2300      	movs	r3, #0
 8016f72:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8016f74:	e014      	b.n	8016fa0 <xTaskGenericNotify+0xdc>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8016f76:	6a3b      	ldr	r3, [r7, #32]
 8016f78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016f7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016f7e:	d00e      	beq.n	8016f9e <xTaskGenericNotify+0xda>
	__asm volatile
 8016f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016f84:	b672      	cpsid	i
 8016f86:	f383 8811 	msr	BASEPRI, r3
 8016f8a:	f3bf 8f6f 	isb	sy
 8016f8e:	f3bf 8f4f 	dsb	sy
 8016f92:	b662      	cpsie	i
 8016f94:	617b      	str	r3, [r7, #20]
}
 8016f96:	bf00      	nop
 8016f98:	e7fe      	b.n	8016f98 <xTaskGenericNotify+0xd4>
					break;
 8016f9a:	bf00      	nop
 8016f9c:	e000      	b.n	8016fa0 <xTaskGenericNotify+0xdc>

					break;
 8016f9e:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8016fa0:	7ffb      	ldrb	r3, [r7, #31]
 8016fa2:	2b01      	cmp	r3, #1
 8016fa4:	d13b      	bne.n	801701e <xTaskGenericNotify+0x15a>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8016fa6:	6a3b      	ldr	r3, [r7, #32]
 8016fa8:	3304      	adds	r3, #4
 8016faa:	4618      	mov	r0, r3
 8016fac:	f7fe fab8 	bl	8015520 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8016fb0:	6a3b      	ldr	r3, [r7, #32]
 8016fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016fb4:	2201      	movs	r2, #1
 8016fb6:	409a      	lsls	r2, r3
 8016fb8:	4b1c      	ldr	r3, [pc, #112]	; (801702c <xTaskGenericNotify+0x168>)
 8016fba:	681b      	ldr	r3, [r3, #0]
 8016fbc:	4313      	orrs	r3, r2
 8016fbe:	4a1b      	ldr	r2, [pc, #108]	; (801702c <xTaskGenericNotify+0x168>)
 8016fc0:	6013      	str	r3, [r2, #0]
 8016fc2:	6a3b      	ldr	r3, [r7, #32]
 8016fc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016fc6:	4613      	mov	r3, r2
 8016fc8:	009b      	lsls	r3, r3, #2
 8016fca:	4413      	add	r3, r2
 8016fcc:	009b      	lsls	r3, r3, #2
 8016fce:	4a18      	ldr	r2, [pc, #96]	; (8017030 <xTaskGenericNotify+0x16c>)
 8016fd0:	441a      	add	r2, r3
 8016fd2:	6a3b      	ldr	r3, [r7, #32]
 8016fd4:	3304      	adds	r3, #4
 8016fd6:	4619      	mov	r1, r3
 8016fd8:	4610      	mov	r0, r2
 8016fda:	f7fe fa44 	bl	8015466 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8016fde:	6a3b      	ldr	r3, [r7, #32]
 8016fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016fe2:	2b00      	cmp	r3, #0
 8016fe4:	d00c      	beq.n	8017000 <xTaskGenericNotify+0x13c>
	__asm volatile
 8016fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016fea:	b672      	cpsid	i
 8016fec:	f383 8811 	msr	BASEPRI, r3
 8016ff0:	f3bf 8f6f 	isb	sy
 8016ff4:	f3bf 8f4f 	dsb	sy
 8016ff8:	b662      	cpsie	i
 8016ffa:	613b      	str	r3, [r7, #16]
}
 8016ffc:	bf00      	nop
 8016ffe:	e7fe      	b.n	8016ffe <xTaskGenericNotify+0x13a>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8017000:	6a3b      	ldr	r3, [r7, #32]
 8017002:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017004:	4b0b      	ldr	r3, [pc, #44]	; (8017034 <xTaskGenericNotify+0x170>)
 8017006:	681b      	ldr	r3, [r3, #0]
 8017008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801700a:	429a      	cmp	r2, r3
 801700c:	d907      	bls.n	801701e <xTaskGenericNotify+0x15a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 801700e:	4b0a      	ldr	r3, [pc, #40]	; (8017038 <xTaskGenericNotify+0x174>)
 8017010:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017014:	601a      	str	r2, [r3, #0]
 8017016:	f3bf 8f4f 	dsb	sy
 801701a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 801701e:	f000 fa99 	bl	8017554 <vPortExitCritical>

		return xReturn;
 8017022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8017024:	4618      	mov	r0, r3
 8017026:	3728      	adds	r7, #40	; 0x28
 8017028:	46bd      	mov	sp, r7
 801702a:	bd80      	pop	{r7, pc}
 801702c:	2000061c 	.word	0x2000061c
 8017030:	20000518 	.word	0x20000518
 8017034:	20000514 	.word	0x20000514
 8017038:	e000ed04 	.word	0xe000ed04

0801703c <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 801703c:	b580      	push	{r7, lr}
 801703e:	b08e      	sub	sp, #56	; 0x38
 8017040:	af00      	add	r7, sp, #0
 8017042:	60f8      	str	r0, [r7, #12]
 8017044:	60b9      	str	r1, [r7, #8]
 8017046:	603b      	str	r3, [r7, #0]
 8017048:	4613      	mov	r3, r2
 801704a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 801704c:	2301      	movs	r3, #1
 801704e:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8017050:	68fb      	ldr	r3, [r7, #12]
 8017052:	2b00      	cmp	r3, #0
 8017054:	d10c      	bne.n	8017070 <xTaskGenericNotifyFromISR+0x34>
	__asm volatile
 8017056:	f04f 0350 	mov.w	r3, #80	; 0x50
 801705a:	b672      	cpsid	i
 801705c:	f383 8811 	msr	BASEPRI, r3
 8017060:	f3bf 8f6f 	isb	sy
 8017064:	f3bf 8f4f 	dsb	sy
 8017068:	b662      	cpsie	i
 801706a:	627b      	str	r3, [r7, #36]	; 0x24
}
 801706c:	bf00      	nop
 801706e:	e7fe      	b.n	801706e <xTaskGenericNotifyFromISR+0x32>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8017070:	f000 fb24 	bl	80176bc <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8017074:	68fb      	ldr	r3, [r7, #12]
 8017076:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8017078:	f3ef 8211 	mrs	r2, BASEPRI
 801707c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017080:	b672      	cpsid	i
 8017082:	f383 8811 	msr	BASEPRI, r3
 8017086:	f3bf 8f6f 	isb	sy
 801708a:	f3bf 8f4f 	dsb	sy
 801708e:	b662      	cpsie	i
 8017090:	623a      	str	r2, [r7, #32]
 8017092:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8017094:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8017096:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8017098:	683b      	ldr	r3, [r7, #0]
 801709a:	2b00      	cmp	r3, #0
 801709c:	d003      	beq.n	80170a6 <xTaskGenericNotifyFromISR+0x6a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 801709e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80170a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80170a2:	683b      	ldr	r3, [r7, #0]
 80170a4:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80170a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80170a8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80170ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80170b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80170b2:	2202      	movs	r2, #2
 80170b4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

			switch( eAction )
 80170b8:	79fb      	ldrb	r3, [r7, #7]
 80170ba:	2b04      	cmp	r3, #4
 80170bc:	d828      	bhi.n	8017110 <xTaskGenericNotifyFromISR+0xd4>
 80170be:	a201      	add	r2, pc, #4	; (adr r2, 80170c4 <xTaskGenericNotifyFromISR+0x88>)
 80170c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80170c4:	08017135 	.word	0x08017135
 80170c8:	080170d9 	.word	0x080170d9
 80170cc:	080170e7 	.word	0x080170e7
 80170d0:	080170f3 	.word	0x080170f3
 80170d4:	080170fb 	.word	0x080170fb
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80170d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80170da:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80170dc:	68bb      	ldr	r3, [r7, #8]
 80170de:	431a      	orrs	r2, r3
 80170e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80170e2:	651a      	str	r2, [r3, #80]	; 0x50
					break;
 80170e4:	e029      	b.n	801713a <xTaskGenericNotifyFromISR+0xfe>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80170e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80170e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80170ea:	1c5a      	adds	r2, r3, #1
 80170ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80170ee:	651a      	str	r2, [r3, #80]	; 0x50
					break;
 80170f0:	e023      	b.n	801713a <xTaskGenericNotifyFromISR+0xfe>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80170f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80170f4:	68ba      	ldr	r2, [r7, #8]
 80170f6:	651a      	str	r2, [r3, #80]	; 0x50
					break;
 80170f8:	e01f      	b.n	801713a <xTaskGenericNotifyFromISR+0xfe>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80170fa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80170fe:	2b02      	cmp	r3, #2
 8017100:	d003      	beq.n	801710a <xTaskGenericNotifyFromISR+0xce>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8017102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017104:	68ba      	ldr	r2, [r7, #8]
 8017106:	651a      	str	r2, [r3, #80]	; 0x50
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8017108:	e017      	b.n	801713a <xTaskGenericNotifyFromISR+0xfe>
						xReturn = pdFAIL;
 801710a:	2300      	movs	r3, #0
 801710c:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 801710e:	e014      	b.n	801713a <xTaskGenericNotifyFromISR+0xfe>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8017110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017112:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017114:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017118:	d00e      	beq.n	8017138 <xTaskGenericNotifyFromISR+0xfc>
	__asm volatile
 801711a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801711e:	b672      	cpsid	i
 8017120:	f383 8811 	msr	BASEPRI, r3
 8017124:	f3bf 8f6f 	isb	sy
 8017128:	f3bf 8f4f 	dsb	sy
 801712c:	b662      	cpsie	i
 801712e:	61bb      	str	r3, [r7, #24]
}
 8017130:	bf00      	nop
 8017132:	e7fe      	b.n	8017132 <xTaskGenericNotifyFromISR+0xf6>
					break;
 8017134:	bf00      	nop
 8017136:	e000      	b.n	801713a <xTaskGenericNotifyFromISR+0xfe>
					break;
 8017138:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 801713a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801713e:	2b01      	cmp	r3, #1
 8017140:	d147      	bne.n	80171d2 <xTaskGenericNotifyFromISR+0x196>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8017142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017146:	2b00      	cmp	r3, #0
 8017148:	d00c      	beq.n	8017164 <xTaskGenericNotifyFromISR+0x128>
	__asm volatile
 801714a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801714e:	b672      	cpsid	i
 8017150:	f383 8811 	msr	BASEPRI, r3
 8017154:	f3bf 8f6f 	isb	sy
 8017158:	f3bf 8f4f 	dsb	sy
 801715c:	b662      	cpsie	i
 801715e:	617b      	str	r3, [r7, #20]
}
 8017160:	bf00      	nop
 8017162:	e7fe      	b.n	8017162 <xTaskGenericNotifyFromISR+0x126>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017164:	4b20      	ldr	r3, [pc, #128]	; (80171e8 <xTaskGenericNotifyFromISR+0x1ac>)
 8017166:	681b      	ldr	r3, [r3, #0]
 8017168:	2b00      	cmp	r3, #0
 801716a:	d11c      	bne.n	80171a6 <xTaskGenericNotifyFromISR+0x16a>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801716c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801716e:	3304      	adds	r3, #4
 8017170:	4618      	mov	r0, r3
 8017172:	f7fe f9d5 	bl	8015520 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8017176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801717a:	2201      	movs	r2, #1
 801717c:	409a      	lsls	r2, r3
 801717e:	4b1b      	ldr	r3, [pc, #108]	; (80171ec <xTaskGenericNotifyFromISR+0x1b0>)
 8017180:	681b      	ldr	r3, [r3, #0]
 8017182:	4313      	orrs	r3, r2
 8017184:	4a19      	ldr	r2, [pc, #100]	; (80171ec <xTaskGenericNotifyFromISR+0x1b0>)
 8017186:	6013      	str	r3, [r2, #0]
 8017188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801718a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801718c:	4613      	mov	r3, r2
 801718e:	009b      	lsls	r3, r3, #2
 8017190:	4413      	add	r3, r2
 8017192:	009b      	lsls	r3, r3, #2
 8017194:	4a16      	ldr	r2, [pc, #88]	; (80171f0 <xTaskGenericNotifyFromISR+0x1b4>)
 8017196:	441a      	add	r2, r3
 8017198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801719a:	3304      	adds	r3, #4
 801719c:	4619      	mov	r1, r3
 801719e:	4610      	mov	r0, r2
 80171a0:	f7fe f961 	bl	8015466 <vListInsertEnd>
 80171a4:	e005      	b.n	80171b2 <xTaskGenericNotifyFromISR+0x176>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80171a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80171a8:	3318      	adds	r3, #24
 80171aa:	4619      	mov	r1, r3
 80171ac:	4811      	ldr	r0, [pc, #68]	; (80171f4 <xTaskGenericNotifyFromISR+0x1b8>)
 80171ae:	f7fe f95a 	bl	8015466 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80171b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80171b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80171b6:	4b10      	ldr	r3, [pc, #64]	; (80171f8 <xTaskGenericNotifyFromISR+0x1bc>)
 80171b8:	681b      	ldr	r3, [r3, #0]
 80171ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80171bc:	429a      	cmp	r2, r3
 80171be:	d908      	bls.n	80171d2 <xTaskGenericNotifyFromISR+0x196>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 80171c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80171c2:	2b00      	cmp	r3, #0
 80171c4:	d002      	beq.n	80171cc <xTaskGenericNotifyFromISR+0x190>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 80171c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80171c8:	2201      	movs	r2, #1
 80171ca:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 80171cc:	4b0b      	ldr	r3, [pc, #44]	; (80171fc <xTaskGenericNotifyFromISR+0x1c0>)
 80171ce:	2201      	movs	r2, #1
 80171d0:	601a      	str	r2, [r3, #0]
 80171d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80171d4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80171d6:	693b      	ldr	r3, [r7, #16]
 80171d8:	f383 8811 	msr	BASEPRI, r3
}
 80171dc:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 80171de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 80171e0:	4618      	mov	r0, r3
 80171e2:	3738      	adds	r7, #56	; 0x38
 80171e4:	46bd      	mov	sp, r7
 80171e6:	bd80      	pop	{r7, pc}
 80171e8:	2000063c 	.word	0x2000063c
 80171ec:	2000061c 	.word	0x2000061c
 80171f0:	20000518 	.word	0x20000518
 80171f4:	200005d4 	.word	0x200005d4
 80171f8:	20000514 	.word	0x20000514
 80171fc:	20000628 	.word	0x20000628

08017200 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8017200:	b580      	push	{r7, lr}
 8017202:	b084      	sub	sp, #16
 8017204:	af00      	add	r7, sp, #0
 8017206:	6078      	str	r0, [r7, #4]
 8017208:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801720a:	4b29      	ldr	r3, [pc, #164]	; (80172b0 <prvAddCurrentTaskToDelayedList+0xb0>)
 801720c:	681b      	ldr	r3, [r3, #0]
 801720e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8017210:	4b28      	ldr	r3, [pc, #160]	; (80172b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8017212:	681b      	ldr	r3, [r3, #0]
 8017214:	3304      	adds	r3, #4
 8017216:	4618      	mov	r0, r3
 8017218:	f7fe f982 	bl	8015520 <uxListRemove>
 801721c:	4603      	mov	r3, r0
 801721e:	2b00      	cmp	r3, #0
 8017220:	d10b      	bne.n	801723a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8017222:	4b24      	ldr	r3, [pc, #144]	; (80172b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8017224:	681b      	ldr	r3, [r3, #0]
 8017226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017228:	2201      	movs	r2, #1
 801722a:	fa02 f303 	lsl.w	r3, r2, r3
 801722e:	43da      	mvns	r2, r3
 8017230:	4b21      	ldr	r3, [pc, #132]	; (80172b8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8017232:	681b      	ldr	r3, [r3, #0]
 8017234:	4013      	ands	r3, r2
 8017236:	4a20      	ldr	r2, [pc, #128]	; (80172b8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8017238:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801723a:	687b      	ldr	r3, [r7, #4]
 801723c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017240:	d10a      	bne.n	8017258 <prvAddCurrentTaskToDelayedList+0x58>
 8017242:	683b      	ldr	r3, [r7, #0]
 8017244:	2b00      	cmp	r3, #0
 8017246:	d007      	beq.n	8017258 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8017248:	4b1a      	ldr	r3, [pc, #104]	; (80172b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 801724a:	681b      	ldr	r3, [r3, #0]
 801724c:	3304      	adds	r3, #4
 801724e:	4619      	mov	r1, r3
 8017250:	481a      	ldr	r0, [pc, #104]	; (80172bc <prvAddCurrentTaskToDelayedList+0xbc>)
 8017252:	f7fe f908 	bl	8015466 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8017256:	e026      	b.n	80172a6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8017258:	68fa      	ldr	r2, [r7, #12]
 801725a:	687b      	ldr	r3, [r7, #4]
 801725c:	4413      	add	r3, r2
 801725e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8017260:	4b14      	ldr	r3, [pc, #80]	; (80172b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8017262:	681b      	ldr	r3, [r3, #0]
 8017264:	68ba      	ldr	r2, [r7, #8]
 8017266:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8017268:	68ba      	ldr	r2, [r7, #8]
 801726a:	68fb      	ldr	r3, [r7, #12]
 801726c:	429a      	cmp	r2, r3
 801726e:	d209      	bcs.n	8017284 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8017270:	4b13      	ldr	r3, [pc, #76]	; (80172c0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8017272:	681a      	ldr	r2, [r3, #0]
 8017274:	4b0f      	ldr	r3, [pc, #60]	; (80172b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8017276:	681b      	ldr	r3, [r3, #0]
 8017278:	3304      	adds	r3, #4
 801727a:	4619      	mov	r1, r3
 801727c:	4610      	mov	r0, r2
 801727e:	f7fe f916 	bl	80154ae <vListInsert>
}
 8017282:	e010      	b.n	80172a6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8017284:	4b0f      	ldr	r3, [pc, #60]	; (80172c4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8017286:	681a      	ldr	r2, [r3, #0]
 8017288:	4b0a      	ldr	r3, [pc, #40]	; (80172b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 801728a:	681b      	ldr	r3, [r3, #0]
 801728c:	3304      	adds	r3, #4
 801728e:	4619      	mov	r1, r3
 8017290:	4610      	mov	r0, r2
 8017292:	f7fe f90c 	bl	80154ae <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8017296:	4b0c      	ldr	r3, [pc, #48]	; (80172c8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8017298:	681b      	ldr	r3, [r3, #0]
 801729a:	68ba      	ldr	r2, [r7, #8]
 801729c:	429a      	cmp	r2, r3
 801729e:	d202      	bcs.n	80172a6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80172a0:	4a09      	ldr	r2, [pc, #36]	; (80172c8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80172a2:	68bb      	ldr	r3, [r7, #8]
 80172a4:	6013      	str	r3, [r2, #0]
}
 80172a6:	bf00      	nop
 80172a8:	3710      	adds	r7, #16
 80172aa:	46bd      	mov	sp, r7
 80172ac:	bd80      	pop	{r7, pc}
 80172ae:	bf00      	nop
 80172b0:	20000618 	.word	0x20000618
 80172b4:	20000514 	.word	0x20000514
 80172b8:	2000061c 	.word	0x2000061c
 80172bc:	20000600 	.word	0x20000600
 80172c0:	200005d0 	.word	0x200005d0
 80172c4:	200005cc 	.word	0x200005cc
 80172c8:	20000634 	.word	0x20000634

080172cc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80172cc:	b480      	push	{r7}
 80172ce:	b085      	sub	sp, #20
 80172d0:	af00      	add	r7, sp, #0
 80172d2:	60f8      	str	r0, [r7, #12]
 80172d4:	60b9      	str	r1, [r7, #8]
 80172d6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80172d8:	68fb      	ldr	r3, [r7, #12]
 80172da:	3b04      	subs	r3, #4
 80172dc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80172de:	68fb      	ldr	r3, [r7, #12]
 80172e0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80172e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80172e6:	68fb      	ldr	r3, [r7, #12]
 80172e8:	3b04      	subs	r3, #4
 80172ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80172ec:	68bb      	ldr	r3, [r7, #8]
 80172ee:	f023 0201 	bic.w	r2, r3, #1
 80172f2:	68fb      	ldr	r3, [r7, #12]
 80172f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80172f6:	68fb      	ldr	r3, [r7, #12]
 80172f8:	3b04      	subs	r3, #4
 80172fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80172fc:	4a0c      	ldr	r2, [pc, #48]	; (8017330 <pxPortInitialiseStack+0x64>)
 80172fe:	68fb      	ldr	r3, [r7, #12]
 8017300:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8017302:	68fb      	ldr	r3, [r7, #12]
 8017304:	3b14      	subs	r3, #20
 8017306:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8017308:	687a      	ldr	r2, [r7, #4]
 801730a:	68fb      	ldr	r3, [r7, #12]
 801730c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801730e:	68fb      	ldr	r3, [r7, #12]
 8017310:	3b04      	subs	r3, #4
 8017312:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8017314:	68fb      	ldr	r3, [r7, #12]
 8017316:	f06f 0202 	mvn.w	r2, #2
 801731a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801731c:	68fb      	ldr	r3, [r7, #12]
 801731e:	3b20      	subs	r3, #32
 8017320:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8017322:	68fb      	ldr	r3, [r7, #12]
}
 8017324:	4618      	mov	r0, r3
 8017326:	3714      	adds	r7, #20
 8017328:	46bd      	mov	sp, r7
 801732a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801732e:	4770      	bx	lr
 8017330:	08017335 	.word	0x08017335

08017334 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8017334:	b480      	push	{r7}
 8017336:	b085      	sub	sp, #20
 8017338:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801733a:	2300      	movs	r3, #0
 801733c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801733e:	4b14      	ldr	r3, [pc, #80]	; (8017390 <prvTaskExitError+0x5c>)
 8017340:	681b      	ldr	r3, [r3, #0]
 8017342:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017346:	d00c      	beq.n	8017362 <prvTaskExitError+0x2e>
	__asm volatile
 8017348:	f04f 0350 	mov.w	r3, #80	; 0x50
 801734c:	b672      	cpsid	i
 801734e:	f383 8811 	msr	BASEPRI, r3
 8017352:	f3bf 8f6f 	isb	sy
 8017356:	f3bf 8f4f 	dsb	sy
 801735a:	b662      	cpsie	i
 801735c:	60fb      	str	r3, [r7, #12]
}
 801735e:	bf00      	nop
 8017360:	e7fe      	b.n	8017360 <prvTaskExitError+0x2c>
	__asm volatile
 8017362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017366:	b672      	cpsid	i
 8017368:	f383 8811 	msr	BASEPRI, r3
 801736c:	f3bf 8f6f 	isb	sy
 8017370:	f3bf 8f4f 	dsb	sy
 8017374:	b662      	cpsie	i
 8017376:	60bb      	str	r3, [r7, #8]
}
 8017378:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801737a:	bf00      	nop
 801737c:	687b      	ldr	r3, [r7, #4]
 801737e:	2b00      	cmp	r3, #0
 8017380:	d0fc      	beq.n	801737c <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8017382:	bf00      	nop
 8017384:	bf00      	nop
 8017386:	3714      	adds	r7, #20
 8017388:	46bd      	mov	sp, r7
 801738a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801738e:	4770      	bx	lr
 8017390:	20000054 	.word	0x20000054
	...

080173a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80173a0:	4b07      	ldr	r3, [pc, #28]	; (80173c0 <pxCurrentTCBConst2>)
 80173a2:	6819      	ldr	r1, [r3, #0]
 80173a4:	6808      	ldr	r0, [r1, #0]
 80173a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80173aa:	f380 8809 	msr	PSP, r0
 80173ae:	f3bf 8f6f 	isb	sy
 80173b2:	f04f 0000 	mov.w	r0, #0
 80173b6:	f380 8811 	msr	BASEPRI, r0
 80173ba:	4770      	bx	lr
 80173bc:	f3af 8000 	nop.w

080173c0 <pxCurrentTCBConst2>:
 80173c0:	20000514 	.word	0x20000514
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80173c4:	bf00      	nop
 80173c6:	bf00      	nop

080173c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80173c8:	4808      	ldr	r0, [pc, #32]	; (80173ec <prvPortStartFirstTask+0x24>)
 80173ca:	6800      	ldr	r0, [r0, #0]
 80173cc:	6800      	ldr	r0, [r0, #0]
 80173ce:	f380 8808 	msr	MSP, r0
 80173d2:	f04f 0000 	mov.w	r0, #0
 80173d6:	f380 8814 	msr	CONTROL, r0
 80173da:	b662      	cpsie	i
 80173dc:	b661      	cpsie	f
 80173de:	f3bf 8f4f 	dsb	sy
 80173e2:	f3bf 8f6f 	isb	sy
 80173e6:	df00      	svc	0
 80173e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80173ea:	bf00      	nop
 80173ec:	e000ed08 	.word	0xe000ed08

080173f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80173f0:	b580      	push	{r7, lr}
 80173f2:	b084      	sub	sp, #16
 80173f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80173f6:	4b37      	ldr	r3, [pc, #220]	; (80174d4 <xPortStartScheduler+0xe4>)
 80173f8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80173fa:	68fb      	ldr	r3, [r7, #12]
 80173fc:	781b      	ldrb	r3, [r3, #0]
 80173fe:	b2db      	uxtb	r3, r3
 8017400:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8017402:	68fb      	ldr	r3, [r7, #12]
 8017404:	22ff      	movs	r2, #255	; 0xff
 8017406:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8017408:	68fb      	ldr	r3, [r7, #12]
 801740a:	781b      	ldrb	r3, [r3, #0]
 801740c:	b2db      	uxtb	r3, r3
 801740e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8017410:	78fb      	ldrb	r3, [r7, #3]
 8017412:	b2db      	uxtb	r3, r3
 8017414:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8017418:	b2da      	uxtb	r2, r3
 801741a:	4b2f      	ldr	r3, [pc, #188]	; (80174d8 <xPortStartScheduler+0xe8>)
 801741c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801741e:	4b2f      	ldr	r3, [pc, #188]	; (80174dc <xPortStartScheduler+0xec>)
 8017420:	2207      	movs	r2, #7
 8017422:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8017424:	e009      	b.n	801743a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8017426:	4b2d      	ldr	r3, [pc, #180]	; (80174dc <xPortStartScheduler+0xec>)
 8017428:	681b      	ldr	r3, [r3, #0]
 801742a:	3b01      	subs	r3, #1
 801742c:	4a2b      	ldr	r2, [pc, #172]	; (80174dc <xPortStartScheduler+0xec>)
 801742e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8017430:	78fb      	ldrb	r3, [r7, #3]
 8017432:	b2db      	uxtb	r3, r3
 8017434:	005b      	lsls	r3, r3, #1
 8017436:	b2db      	uxtb	r3, r3
 8017438:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801743a:	78fb      	ldrb	r3, [r7, #3]
 801743c:	b2db      	uxtb	r3, r3
 801743e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8017442:	2b80      	cmp	r3, #128	; 0x80
 8017444:	d0ef      	beq.n	8017426 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8017446:	4b25      	ldr	r3, [pc, #148]	; (80174dc <xPortStartScheduler+0xec>)
 8017448:	681b      	ldr	r3, [r3, #0]
 801744a:	f1c3 0307 	rsb	r3, r3, #7
 801744e:	2b04      	cmp	r3, #4
 8017450:	d00c      	beq.n	801746c <xPortStartScheduler+0x7c>
	__asm volatile
 8017452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017456:	b672      	cpsid	i
 8017458:	f383 8811 	msr	BASEPRI, r3
 801745c:	f3bf 8f6f 	isb	sy
 8017460:	f3bf 8f4f 	dsb	sy
 8017464:	b662      	cpsie	i
 8017466:	60bb      	str	r3, [r7, #8]
}
 8017468:	bf00      	nop
 801746a:	e7fe      	b.n	801746a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801746c:	4b1b      	ldr	r3, [pc, #108]	; (80174dc <xPortStartScheduler+0xec>)
 801746e:	681b      	ldr	r3, [r3, #0]
 8017470:	021b      	lsls	r3, r3, #8
 8017472:	4a1a      	ldr	r2, [pc, #104]	; (80174dc <xPortStartScheduler+0xec>)
 8017474:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8017476:	4b19      	ldr	r3, [pc, #100]	; (80174dc <xPortStartScheduler+0xec>)
 8017478:	681b      	ldr	r3, [r3, #0]
 801747a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801747e:	4a17      	ldr	r2, [pc, #92]	; (80174dc <xPortStartScheduler+0xec>)
 8017480:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8017482:	687b      	ldr	r3, [r7, #4]
 8017484:	b2da      	uxtb	r2, r3
 8017486:	68fb      	ldr	r3, [r7, #12]
 8017488:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801748a:	4b15      	ldr	r3, [pc, #84]	; (80174e0 <xPortStartScheduler+0xf0>)
 801748c:	681b      	ldr	r3, [r3, #0]
 801748e:	4a14      	ldr	r2, [pc, #80]	; (80174e0 <xPortStartScheduler+0xf0>)
 8017490:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8017494:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8017496:	4b12      	ldr	r3, [pc, #72]	; (80174e0 <xPortStartScheduler+0xf0>)
 8017498:	681b      	ldr	r3, [r3, #0]
 801749a:	4a11      	ldr	r2, [pc, #68]	; (80174e0 <xPortStartScheduler+0xf0>)
 801749c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80174a0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80174a2:	f000 f8dd 	bl	8017660 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80174a6:	4b0f      	ldr	r3, [pc, #60]	; (80174e4 <xPortStartScheduler+0xf4>)
 80174a8:	2200      	movs	r2, #0
 80174aa:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80174ac:	f000 f8fc 	bl	80176a8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80174b0:	4b0d      	ldr	r3, [pc, #52]	; (80174e8 <xPortStartScheduler+0xf8>)
 80174b2:	681b      	ldr	r3, [r3, #0]
 80174b4:	4a0c      	ldr	r2, [pc, #48]	; (80174e8 <xPortStartScheduler+0xf8>)
 80174b6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80174ba:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80174bc:	f7ff ff84 	bl	80173c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80174c0:	f7ff f990 	bl	80167e4 <vTaskSwitchContext>
	prvTaskExitError();
 80174c4:	f7ff ff36 	bl	8017334 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80174c8:	2300      	movs	r3, #0
}
 80174ca:	4618      	mov	r0, r3
 80174cc:	3710      	adds	r7, #16
 80174ce:	46bd      	mov	sp, r7
 80174d0:	bd80      	pop	{r7, pc}
 80174d2:	bf00      	nop
 80174d4:	e000e400 	.word	0xe000e400
 80174d8:	20000640 	.word	0x20000640
 80174dc:	20000644 	.word	0x20000644
 80174e0:	e000ed20 	.word	0xe000ed20
 80174e4:	20000054 	.word	0x20000054
 80174e8:	e000ef34 	.word	0xe000ef34

080174ec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80174ec:	b480      	push	{r7}
 80174ee:	b083      	sub	sp, #12
 80174f0:	af00      	add	r7, sp, #0
	__asm volatile
 80174f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80174f6:	b672      	cpsid	i
 80174f8:	f383 8811 	msr	BASEPRI, r3
 80174fc:	f3bf 8f6f 	isb	sy
 8017500:	f3bf 8f4f 	dsb	sy
 8017504:	b662      	cpsie	i
 8017506:	607b      	str	r3, [r7, #4]
}
 8017508:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801750a:	4b10      	ldr	r3, [pc, #64]	; (801754c <vPortEnterCritical+0x60>)
 801750c:	681b      	ldr	r3, [r3, #0]
 801750e:	3301      	adds	r3, #1
 8017510:	4a0e      	ldr	r2, [pc, #56]	; (801754c <vPortEnterCritical+0x60>)
 8017512:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8017514:	4b0d      	ldr	r3, [pc, #52]	; (801754c <vPortEnterCritical+0x60>)
 8017516:	681b      	ldr	r3, [r3, #0]
 8017518:	2b01      	cmp	r3, #1
 801751a:	d111      	bne.n	8017540 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801751c:	4b0c      	ldr	r3, [pc, #48]	; (8017550 <vPortEnterCritical+0x64>)
 801751e:	681b      	ldr	r3, [r3, #0]
 8017520:	b2db      	uxtb	r3, r3
 8017522:	2b00      	cmp	r3, #0
 8017524:	d00c      	beq.n	8017540 <vPortEnterCritical+0x54>
	__asm volatile
 8017526:	f04f 0350 	mov.w	r3, #80	; 0x50
 801752a:	b672      	cpsid	i
 801752c:	f383 8811 	msr	BASEPRI, r3
 8017530:	f3bf 8f6f 	isb	sy
 8017534:	f3bf 8f4f 	dsb	sy
 8017538:	b662      	cpsie	i
 801753a:	603b      	str	r3, [r7, #0]
}
 801753c:	bf00      	nop
 801753e:	e7fe      	b.n	801753e <vPortEnterCritical+0x52>
	}
}
 8017540:	bf00      	nop
 8017542:	370c      	adds	r7, #12
 8017544:	46bd      	mov	sp, r7
 8017546:	f85d 7b04 	ldr.w	r7, [sp], #4
 801754a:	4770      	bx	lr
 801754c:	20000054 	.word	0x20000054
 8017550:	e000ed04 	.word	0xe000ed04

08017554 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8017554:	b480      	push	{r7}
 8017556:	b083      	sub	sp, #12
 8017558:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801755a:	4b13      	ldr	r3, [pc, #76]	; (80175a8 <vPortExitCritical+0x54>)
 801755c:	681b      	ldr	r3, [r3, #0]
 801755e:	2b00      	cmp	r3, #0
 8017560:	d10c      	bne.n	801757c <vPortExitCritical+0x28>
	__asm volatile
 8017562:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017566:	b672      	cpsid	i
 8017568:	f383 8811 	msr	BASEPRI, r3
 801756c:	f3bf 8f6f 	isb	sy
 8017570:	f3bf 8f4f 	dsb	sy
 8017574:	b662      	cpsie	i
 8017576:	607b      	str	r3, [r7, #4]
}
 8017578:	bf00      	nop
 801757a:	e7fe      	b.n	801757a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 801757c:	4b0a      	ldr	r3, [pc, #40]	; (80175a8 <vPortExitCritical+0x54>)
 801757e:	681b      	ldr	r3, [r3, #0]
 8017580:	3b01      	subs	r3, #1
 8017582:	4a09      	ldr	r2, [pc, #36]	; (80175a8 <vPortExitCritical+0x54>)
 8017584:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8017586:	4b08      	ldr	r3, [pc, #32]	; (80175a8 <vPortExitCritical+0x54>)
 8017588:	681b      	ldr	r3, [r3, #0]
 801758a:	2b00      	cmp	r3, #0
 801758c:	d105      	bne.n	801759a <vPortExitCritical+0x46>
 801758e:	2300      	movs	r3, #0
 8017590:	603b      	str	r3, [r7, #0]
	__asm volatile
 8017592:	683b      	ldr	r3, [r7, #0]
 8017594:	f383 8811 	msr	BASEPRI, r3
}
 8017598:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 801759a:	bf00      	nop
 801759c:	370c      	adds	r7, #12
 801759e:	46bd      	mov	sp, r7
 80175a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175a4:	4770      	bx	lr
 80175a6:	bf00      	nop
 80175a8:	20000054 	.word	0x20000054
 80175ac:	00000000 	.word	0x00000000

080175b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80175b0:	f3ef 8009 	mrs	r0, PSP
 80175b4:	f3bf 8f6f 	isb	sy
 80175b8:	4b15      	ldr	r3, [pc, #84]	; (8017610 <pxCurrentTCBConst>)
 80175ba:	681a      	ldr	r2, [r3, #0]
 80175bc:	f01e 0f10 	tst.w	lr, #16
 80175c0:	bf08      	it	eq
 80175c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80175c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80175ca:	6010      	str	r0, [r2, #0]
 80175cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80175d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80175d4:	b672      	cpsid	i
 80175d6:	f380 8811 	msr	BASEPRI, r0
 80175da:	f3bf 8f4f 	dsb	sy
 80175de:	f3bf 8f6f 	isb	sy
 80175e2:	b662      	cpsie	i
 80175e4:	f7ff f8fe 	bl	80167e4 <vTaskSwitchContext>
 80175e8:	f04f 0000 	mov.w	r0, #0
 80175ec:	f380 8811 	msr	BASEPRI, r0
 80175f0:	bc09      	pop	{r0, r3}
 80175f2:	6819      	ldr	r1, [r3, #0]
 80175f4:	6808      	ldr	r0, [r1, #0]
 80175f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80175fa:	f01e 0f10 	tst.w	lr, #16
 80175fe:	bf08      	it	eq
 8017600:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8017604:	f380 8809 	msr	PSP, r0
 8017608:	f3bf 8f6f 	isb	sy
 801760c:	4770      	bx	lr
 801760e:	bf00      	nop

08017610 <pxCurrentTCBConst>:
 8017610:	20000514 	.word	0x20000514
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8017614:	bf00      	nop
 8017616:	bf00      	nop

08017618 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8017618:	b580      	push	{r7, lr}
 801761a:	b082      	sub	sp, #8
 801761c:	af00      	add	r7, sp, #0
	__asm volatile
 801761e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017622:	b672      	cpsid	i
 8017624:	f383 8811 	msr	BASEPRI, r3
 8017628:	f3bf 8f6f 	isb	sy
 801762c:	f3bf 8f4f 	dsb	sy
 8017630:	b662      	cpsie	i
 8017632:	607b      	str	r3, [r7, #4]
}
 8017634:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8017636:	f7ff f81b 	bl	8016670 <xTaskIncrementTick>
 801763a:	4603      	mov	r3, r0
 801763c:	2b00      	cmp	r3, #0
 801763e:	d003      	beq.n	8017648 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8017640:	4b06      	ldr	r3, [pc, #24]	; (801765c <SysTick_Handler+0x44>)
 8017642:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017646:	601a      	str	r2, [r3, #0]
 8017648:	2300      	movs	r3, #0
 801764a:	603b      	str	r3, [r7, #0]
	__asm volatile
 801764c:	683b      	ldr	r3, [r7, #0]
 801764e:	f383 8811 	msr	BASEPRI, r3
}
 8017652:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8017654:	bf00      	nop
 8017656:	3708      	adds	r7, #8
 8017658:	46bd      	mov	sp, r7
 801765a:	bd80      	pop	{r7, pc}
 801765c:	e000ed04 	.word	0xe000ed04

08017660 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8017660:	b480      	push	{r7}
 8017662:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8017664:	4b0b      	ldr	r3, [pc, #44]	; (8017694 <vPortSetupTimerInterrupt+0x34>)
 8017666:	2200      	movs	r2, #0
 8017668:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801766a:	4b0b      	ldr	r3, [pc, #44]	; (8017698 <vPortSetupTimerInterrupt+0x38>)
 801766c:	2200      	movs	r2, #0
 801766e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8017670:	4b0a      	ldr	r3, [pc, #40]	; (801769c <vPortSetupTimerInterrupt+0x3c>)
 8017672:	681b      	ldr	r3, [r3, #0]
 8017674:	4a0a      	ldr	r2, [pc, #40]	; (80176a0 <vPortSetupTimerInterrupt+0x40>)
 8017676:	fba2 2303 	umull	r2, r3, r2, r3
 801767a:	099b      	lsrs	r3, r3, #6
 801767c:	4a09      	ldr	r2, [pc, #36]	; (80176a4 <vPortSetupTimerInterrupt+0x44>)
 801767e:	3b01      	subs	r3, #1
 8017680:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8017682:	4b04      	ldr	r3, [pc, #16]	; (8017694 <vPortSetupTimerInterrupt+0x34>)
 8017684:	2207      	movs	r2, #7
 8017686:	601a      	str	r2, [r3, #0]
}
 8017688:	bf00      	nop
 801768a:	46bd      	mov	sp, r7
 801768c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017690:	4770      	bx	lr
 8017692:	bf00      	nop
 8017694:	e000e010 	.word	0xe000e010
 8017698:	e000e018 	.word	0xe000e018
 801769c:	20000010 	.word	0x20000010
 80176a0:	10624dd3 	.word	0x10624dd3
 80176a4:	e000e014 	.word	0xe000e014

080176a8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80176a8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80176b8 <vPortEnableVFP+0x10>
 80176ac:	6801      	ldr	r1, [r0, #0]
 80176ae:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80176b2:	6001      	str	r1, [r0, #0]
 80176b4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80176b6:	bf00      	nop
 80176b8:	e000ed88 	.word	0xe000ed88

080176bc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80176bc:	b480      	push	{r7}
 80176be:	b085      	sub	sp, #20
 80176c0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80176c2:	f3ef 8305 	mrs	r3, IPSR
 80176c6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80176c8:	68fb      	ldr	r3, [r7, #12]
 80176ca:	2b0f      	cmp	r3, #15
 80176cc:	d916      	bls.n	80176fc <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80176ce:	4a19      	ldr	r2, [pc, #100]	; (8017734 <vPortValidateInterruptPriority+0x78>)
 80176d0:	68fb      	ldr	r3, [r7, #12]
 80176d2:	4413      	add	r3, r2
 80176d4:	781b      	ldrb	r3, [r3, #0]
 80176d6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80176d8:	4b17      	ldr	r3, [pc, #92]	; (8017738 <vPortValidateInterruptPriority+0x7c>)
 80176da:	781b      	ldrb	r3, [r3, #0]
 80176dc:	7afa      	ldrb	r2, [r7, #11]
 80176de:	429a      	cmp	r2, r3
 80176e0:	d20c      	bcs.n	80176fc <vPortValidateInterruptPriority+0x40>
	__asm volatile
 80176e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80176e6:	b672      	cpsid	i
 80176e8:	f383 8811 	msr	BASEPRI, r3
 80176ec:	f3bf 8f6f 	isb	sy
 80176f0:	f3bf 8f4f 	dsb	sy
 80176f4:	b662      	cpsie	i
 80176f6:	607b      	str	r3, [r7, #4]
}
 80176f8:	bf00      	nop
 80176fa:	e7fe      	b.n	80176fa <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80176fc:	4b0f      	ldr	r3, [pc, #60]	; (801773c <vPortValidateInterruptPriority+0x80>)
 80176fe:	681b      	ldr	r3, [r3, #0]
 8017700:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8017704:	4b0e      	ldr	r3, [pc, #56]	; (8017740 <vPortValidateInterruptPriority+0x84>)
 8017706:	681b      	ldr	r3, [r3, #0]
 8017708:	429a      	cmp	r2, r3
 801770a:	d90c      	bls.n	8017726 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 801770c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017710:	b672      	cpsid	i
 8017712:	f383 8811 	msr	BASEPRI, r3
 8017716:	f3bf 8f6f 	isb	sy
 801771a:	f3bf 8f4f 	dsb	sy
 801771e:	b662      	cpsie	i
 8017720:	603b      	str	r3, [r7, #0]
}
 8017722:	bf00      	nop
 8017724:	e7fe      	b.n	8017724 <vPortValidateInterruptPriority+0x68>
	}
 8017726:	bf00      	nop
 8017728:	3714      	adds	r7, #20
 801772a:	46bd      	mov	sp, r7
 801772c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017730:	4770      	bx	lr
 8017732:	bf00      	nop
 8017734:	e000e3f0 	.word	0xe000e3f0
 8017738:	20000640 	.word	0x20000640
 801773c:	e000ed0c 	.word	0xe000ed0c
 8017740:	20000644 	.word	0x20000644

08017744 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8017744:	b580      	push	{r7, lr}
 8017746:	b08a      	sub	sp, #40	; 0x28
 8017748:	af00      	add	r7, sp, #0
 801774a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 801774c:	2300      	movs	r3, #0
 801774e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8017750:	f7fe fec0 	bl	80164d4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8017754:	4b5e      	ldr	r3, [pc, #376]	; (80178d0 <pvPortMalloc+0x18c>)
 8017756:	681b      	ldr	r3, [r3, #0]
 8017758:	2b00      	cmp	r3, #0
 801775a:	d101      	bne.n	8017760 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 801775c:	f000 f920 	bl	80179a0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8017760:	4b5c      	ldr	r3, [pc, #368]	; (80178d4 <pvPortMalloc+0x190>)
 8017762:	681a      	ldr	r2, [r3, #0]
 8017764:	687b      	ldr	r3, [r7, #4]
 8017766:	4013      	ands	r3, r2
 8017768:	2b00      	cmp	r3, #0
 801776a:	f040 8092 	bne.w	8017892 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801776e:	687b      	ldr	r3, [r7, #4]
 8017770:	2b00      	cmp	r3, #0
 8017772:	d01f      	beq.n	80177b4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8017774:	2208      	movs	r2, #8
 8017776:	687b      	ldr	r3, [r7, #4]
 8017778:	4413      	add	r3, r2
 801777a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 801777c:	687b      	ldr	r3, [r7, #4]
 801777e:	f003 0307 	and.w	r3, r3, #7
 8017782:	2b00      	cmp	r3, #0
 8017784:	d016      	beq.n	80177b4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8017786:	687b      	ldr	r3, [r7, #4]
 8017788:	f023 0307 	bic.w	r3, r3, #7
 801778c:	3308      	adds	r3, #8
 801778e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8017790:	687b      	ldr	r3, [r7, #4]
 8017792:	f003 0307 	and.w	r3, r3, #7
 8017796:	2b00      	cmp	r3, #0
 8017798:	d00c      	beq.n	80177b4 <pvPortMalloc+0x70>
	__asm volatile
 801779a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801779e:	b672      	cpsid	i
 80177a0:	f383 8811 	msr	BASEPRI, r3
 80177a4:	f3bf 8f6f 	isb	sy
 80177a8:	f3bf 8f4f 	dsb	sy
 80177ac:	b662      	cpsie	i
 80177ae:	617b      	str	r3, [r7, #20]
}
 80177b0:	bf00      	nop
 80177b2:	e7fe      	b.n	80177b2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80177b4:	687b      	ldr	r3, [r7, #4]
 80177b6:	2b00      	cmp	r3, #0
 80177b8:	d06b      	beq.n	8017892 <pvPortMalloc+0x14e>
 80177ba:	4b47      	ldr	r3, [pc, #284]	; (80178d8 <pvPortMalloc+0x194>)
 80177bc:	681b      	ldr	r3, [r3, #0]
 80177be:	687a      	ldr	r2, [r7, #4]
 80177c0:	429a      	cmp	r2, r3
 80177c2:	d866      	bhi.n	8017892 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80177c4:	4b45      	ldr	r3, [pc, #276]	; (80178dc <pvPortMalloc+0x198>)
 80177c6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80177c8:	4b44      	ldr	r3, [pc, #272]	; (80178dc <pvPortMalloc+0x198>)
 80177ca:	681b      	ldr	r3, [r3, #0]
 80177cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80177ce:	e004      	b.n	80177da <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 80177d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80177d2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80177d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80177d6:	681b      	ldr	r3, [r3, #0]
 80177d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80177da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80177dc:	685b      	ldr	r3, [r3, #4]
 80177de:	687a      	ldr	r2, [r7, #4]
 80177e0:	429a      	cmp	r2, r3
 80177e2:	d903      	bls.n	80177ec <pvPortMalloc+0xa8>
 80177e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80177e6:	681b      	ldr	r3, [r3, #0]
 80177e8:	2b00      	cmp	r3, #0
 80177ea:	d1f1      	bne.n	80177d0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80177ec:	4b38      	ldr	r3, [pc, #224]	; (80178d0 <pvPortMalloc+0x18c>)
 80177ee:	681b      	ldr	r3, [r3, #0]
 80177f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80177f2:	429a      	cmp	r2, r3
 80177f4:	d04d      	beq.n	8017892 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80177f6:	6a3b      	ldr	r3, [r7, #32]
 80177f8:	681b      	ldr	r3, [r3, #0]
 80177fa:	2208      	movs	r2, #8
 80177fc:	4413      	add	r3, r2
 80177fe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8017800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017802:	681a      	ldr	r2, [r3, #0]
 8017804:	6a3b      	ldr	r3, [r7, #32]
 8017806:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8017808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801780a:	685a      	ldr	r2, [r3, #4]
 801780c:	687b      	ldr	r3, [r7, #4]
 801780e:	1ad2      	subs	r2, r2, r3
 8017810:	2308      	movs	r3, #8
 8017812:	005b      	lsls	r3, r3, #1
 8017814:	429a      	cmp	r2, r3
 8017816:	d921      	bls.n	801785c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8017818:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801781a:	687b      	ldr	r3, [r7, #4]
 801781c:	4413      	add	r3, r2
 801781e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8017820:	69bb      	ldr	r3, [r7, #24]
 8017822:	f003 0307 	and.w	r3, r3, #7
 8017826:	2b00      	cmp	r3, #0
 8017828:	d00c      	beq.n	8017844 <pvPortMalloc+0x100>
	__asm volatile
 801782a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801782e:	b672      	cpsid	i
 8017830:	f383 8811 	msr	BASEPRI, r3
 8017834:	f3bf 8f6f 	isb	sy
 8017838:	f3bf 8f4f 	dsb	sy
 801783c:	b662      	cpsie	i
 801783e:	613b      	str	r3, [r7, #16]
}
 8017840:	bf00      	nop
 8017842:	e7fe      	b.n	8017842 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8017844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017846:	685a      	ldr	r2, [r3, #4]
 8017848:	687b      	ldr	r3, [r7, #4]
 801784a:	1ad2      	subs	r2, r2, r3
 801784c:	69bb      	ldr	r3, [r7, #24]
 801784e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8017850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017852:	687a      	ldr	r2, [r7, #4]
 8017854:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8017856:	69b8      	ldr	r0, [r7, #24]
 8017858:	f000 f904 	bl	8017a64 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801785c:	4b1e      	ldr	r3, [pc, #120]	; (80178d8 <pvPortMalloc+0x194>)
 801785e:	681a      	ldr	r2, [r3, #0]
 8017860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017862:	685b      	ldr	r3, [r3, #4]
 8017864:	1ad3      	subs	r3, r2, r3
 8017866:	4a1c      	ldr	r2, [pc, #112]	; (80178d8 <pvPortMalloc+0x194>)
 8017868:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801786a:	4b1b      	ldr	r3, [pc, #108]	; (80178d8 <pvPortMalloc+0x194>)
 801786c:	681a      	ldr	r2, [r3, #0]
 801786e:	4b1c      	ldr	r3, [pc, #112]	; (80178e0 <pvPortMalloc+0x19c>)
 8017870:	681b      	ldr	r3, [r3, #0]
 8017872:	429a      	cmp	r2, r3
 8017874:	d203      	bcs.n	801787e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8017876:	4b18      	ldr	r3, [pc, #96]	; (80178d8 <pvPortMalloc+0x194>)
 8017878:	681b      	ldr	r3, [r3, #0]
 801787a:	4a19      	ldr	r2, [pc, #100]	; (80178e0 <pvPortMalloc+0x19c>)
 801787c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801787e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017880:	685a      	ldr	r2, [r3, #4]
 8017882:	4b14      	ldr	r3, [pc, #80]	; (80178d4 <pvPortMalloc+0x190>)
 8017884:	681b      	ldr	r3, [r3, #0]
 8017886:	431a      	orrs	r2, r3
 8017888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801788a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801788c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801788e:	2200      	movs	r2, #0
 8017890:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8017892:	f7fe fe2d 	bl	80164f0 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8017896:	69fb      	ldr	r3, [r7, #28]
 8017898:	2b00      	cmp	r3, #0
 801789a:	d101      	bne.n	80178a0 <pvPortMalloc+0x15c>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 801789c:	f7e9 fdd2 	bl	8001444 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80178a0:	69fb      	ldr	r3, [r7, #28]
 80178a2:	f003 0307 	and.w	r3, r3, #7
 80178a6:	2b00      	cmp	r3, #0
 80178a8:	d00c      	beq.n	80178c4 <pvPortMalloc+0x180>
	__asm volatile
 80178aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80178ae:	b672      	cpsid	i
 80178b0:	f383 8811 	msr	BASEPRI, r3
 80178b4:	f3bf 8f6f 	isb	sy
 80178b8:	f3bf 8f4f 	dsb	sy
 80178bc:	b662      	cpsie	i
 80178be:	60fb      	str	r3, [r7, #12]
}
 80178c0:	bf00      	nop
 80178c2:	e7fe      	b.n	80178c2 <pvPortMalloc+0x17e>
	return pvReturn;
 80178c4:	69fb      	ldr	r3, [r7, #28]
}
 80178c6:	4618      	mov	r0, r3
 80178c8:	3728      	adds	r7, #40	; 0x28
 80178ca:	46bd      	mov	sp, r7
 80178cc:	bd80      	pop	{r7, pc}
 80178ce:	bf00      	nop
 80178d0:	20008650 	.word	0x20008650
 80178d4:	2000865c 	.word	0x2000865c
 80178d8:	20008654 	.word	0x20008654
 80178dc:	20008648 	.word	0x20008648
 80178e0:	20008658 	.word	0x20008658

080178e4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80178e4:	b580      	push	{r7, lr}
 80178e6:	b086      	sub	sp, #24
 80178e8:	af00      	add	r7, sp, #0
 80178ea:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80178ec:	687b      	ldr	r3, [r7, #4]
 80178ee:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80178f0:	687b      	ldr	r3, [r7, #4]
 80178f2:	2b00      	cmp	r3, #0
 80178f4:	d04c      	beq.n	8017990 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80178f6:	2308      	movs	r3, #8
 80178f8:	425b      	negs	r3, r3
 80178fa:	697a      	ldr	r2, [r7, #20]
 80178fc:	4413      	add	r3, r2
 80178fe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8017900:	697b      	ldr	r3, [r7, #20]
 8017902:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8017904:	693b      	ldr	r3, [r7, #16]
 8017906:	685a      	ldr	r2, [r3, #4]
 8017908:	4b23      	ldr	r3, [pc, #140]	; (8017998 <vPortFree+0xb4>)
 801790a:	681b      	ldr	r3, [r3, #0]
 801790c:	4013      	ands	r3, r2
 801790e:	2b00      	cmp	r3, #0
 8017910:	d10c      	bne.n	801792c <vPortFree+0x48>
	__asm volatile
 8017912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017916:	b672      	cpsid	i
 8017918:	f383 8811 	msr	BASEPRI, r3
 801791c:	f3bf 8f6f 	isb	sy
 8017920:	f3bf 8f4f 	dsb	sy
 8017924:	b662      	cpsie	i
 8017926:	60fb      	str	r3, [r7, #12]
}
 8017928:	bf00      	nop
 801792a:	e7fe      	b.n	801792a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801792c:	693b      	ldr	r3, [r7, #16]
 801792e:	681b      	ldr	r3, [r3, #0]
 8017930:	2b00      	cmp	r3, #0
 8017932:	d00c      	beq.n	801794e <vPortFree+0x6a>
	__asm volatile
 8017934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017938:	b672      	cpsid	i
 801793a:	f383 8811 	msr	BASEPRI, r3
 801793e:	f3bf 8f6f 	isb	sy
 8017942:	f3bf 8f4f 	dsb	sy
 8017946:	b662      	cpsie	i
 8017948:	60bb      	str	r3, [r7, #8]
}
 801794a:	bf00      	nop
 801794c:	e7fe      	b.n	801794c <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801794e:	693b      	ldr	r3, [r7, #16]
 8017950:	685a      	ldr	r2, [r3, #4]
 8017952:	4b11      	ldr	r3, [pc, #68]	; (8017998 <vPortFree+0xb4>)
 8017954:	681b      	ldr	r3, [r3, #0]
 8017956:	4013      	ands	r3, r2
 8017958:	2b00      	cmp	r3, #0
 801795a:	d019      	beq.n	8017990 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801795c:	693b      	ldr	r3, [r7, #16]
 801795e:	681b      	ldr	r3, [r3, #0]
 8017960:	2b00      	cmp	r3, #0
 8017962:	d115      	bne.n	8017990 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8017964:	693b      	ldr	r3, [r7, #16]
 8017966:	685a      	ldr	r2, [r3, #4]
 8017968:	4b0b      	ldr	r3, [pc, #44]	; (8017998 <vPortFree+0xb4>)
 801796a:	681b      	ldr	r3, [r3, #0]
 801796c:	43db      	mvns	r3, r3
 801796e:	401a      	ands	r2, r3
 8017970:	693b      	ldr	r3, [r7, #16]
 8017972:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8017974:	f7fe fdae 	bl	80164d4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8017978:	693b      	ldr	r3, [r7, #16]
 801797a:	685a      	ldr	r2, [r3, #4]
 801797c:	4b07      	ldr	r3, [pc, #28]	; (801799c <vPortFree+0xb8>)
 801797e:	681b      	ldr	r3, [r3, #0]
 8017980:	4413      	add	r3, r2
 8017982:	4a06      	ldr	r2, [pc, #24]	; (801799c <vPortFree+0xb8>)
 8017984:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8017986:	6938      	ldr	r0, [r7, #16]
 8017988:	f000 f86c 	bl	8017a64 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 801798c:	f7fe fdb0 	bl	80164f0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8017990:	bf00      	nop
 8017992:	3718      	adds	r7, #24
 8017994:	46bd      	mov	sp, r7
 8017996:	bd80      	pop	{r7, pc}
 8017998:	2000865c 	.word	0x2000865c
 801799c:	20008654 	.word	0x20008654

080179a0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80179a0:	b480      	push	{r7}
 80179a2:	b085      	sub	sp, #20
 80179a4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80179a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80179aa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80179ac:	4b27      	ldr	r3, [pc, #156]	; (8017a4c <prvHeapInit+0xac>)
 80179ae:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80179b0:	68fb      	ldr	r3, [r7, #12]
 80179b2:	f003 0307 	and.w	r3, r3, #7
 80179b6:	2b00      	cmp	r3, #0
 80179b8:	d00c      	beq.n	80179d4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80179ba:	68fb      	ldr	r3, [r7, #12]
 80179bc:	3307      	adds	r3, #7
 80179be:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80179c0:	68fb      	ldr	r3, [r7, #12]
 80179c2:	f023 0307 	bic.w	r3, r3, #7
 80179c6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80179c8:	68ba      	ldr	r2, [r7, #8]
 80179ca:	68fb      	ldr	r3, [r7, #12]
 80179cc:	1ad3      	subs	r3, r2, r3
 80179ce:	4a1f      	ldr	r2, [pc, #124]	; (8017a4c <prvHeapInit+0xac>)
 80179d0:	4413      	add	r3, r2
 80179d2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80179d4:	68fb      	ldr	r3, [r7, #12]
 80179d6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80179d8:	4a1d      	ldr	r2, [pc, #116]	; (8017a50 <prvHeapInit+0xb0>)
 80179da:	687b      	ldr	r3, [r7, #4]
 80179dc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80179de:	4b1c      	ldr	r3, [pc, #112]	; (8017a50 <prvHeapInit+0xb0>)
 80179e0:	2200      	movs	r2, #0
 80179e2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80179e4:	687b      	ldr	r3, [r7, #4]
 80179e6:	68ba      	ldr	r2, [r7, #8]
 80179e8:	4413      	add	r3, r2
 80179ea:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80179ec:	2208      	movs	r2, #8
 80179ee:	68fb      	ldr	r3, [r7, #12]
 80179f0:	1a9b      	subs	r3, r3, r2
 80179f2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80179f4:	68fb      	ldr	r3, [r7, #12]
 80179f6:	f023 0307 	bic.w	r3, r3, #7
 80179fa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80179fc:	68fb      	ldr	r3, [r7, #12]
 80179fe:	4a15      	ldr	r2, [pc, #84]	; (8017a54 <prvHeapInit+0xb4>)
 8017a00:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8017a02:	4b14      	ldr	r3, [pc, #80]	; (8017a54 <prvHeapInit+0xb4>)
 8017a04:	681b      	ldr	r3, [r3, #0]
 8017a06:	2200      	movs	r2, #0
 8017a08:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8017a0a:	4b12      	ldr	r3, [pc, #72]	; (8017a54 <prvHeapInit+0xb4>)
 8017a0c:	681b      	ldr	r3, [r3, #0]
 8017a0e:	2200      	movs	r2, #0
 8017a10:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8017a12:	687b      	ldr	r3, [r7, #4]
 8017a14:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8017a16:	683b      	ldr	r3, [r7, #0]
 8017a18:	68fa      	ldr	r2, [r7, #12]
 8017a1a:	1ad2      	subs	r2, r2, r3
 8017a1c:	683b      	ldr	r3, [r7, #0]
 8017a1e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8017a20:	4b0c      	ldr	r3, [pc, #48]	; (8017a54 <prvHeapInit+0xb4>)
 8017a22:	681a      	ldr	r2, [r3, #0]
 8017a24:	683b      	ldr	r3, [r7, #0]
 8017a26:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8017a28:	683b      	ldr	r3, [r7, #0]
 8017a2a:	685b      	ldr	r3, [r3, #4]
 8017a2c:	4a0a      	ldr	r2, [pc, #40]	; (8017a58 <prvHeapInit+0xb8>)
 8017a2e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8017a30:	683b      	ldr	r3, [r7, #0]
 8017a32:	685b      	ldr	r3, [r3, #4]
 8017a34:	4a09      	ldr	r2, [pc, #36]	; (8017a5c <prvHeapInit+0xbc>)
 8017a36:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8017a38:	4b09      	ldr	r3, [pc, #36]	; (8017a60 <prvHeapInit+0xc0>)
 8017a3a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8017a3e:	601a      	str	r2, [r3, #0]
}
 8017a40:	bf00      	nop
 8017a42:	3714      	adds	r7, #20
 8017a44:	46bd      	mov	sp, r7
 8017a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a4a:	4770      	bx	lr
 8017a4c:	20000648 	.word	0x20000648
 8017a50:	20008648 	.word	0x20008648
 8017a54:	20008650 	.word	0x20008650
 8017a58:	20008658 	.word	0x20008658
 8017a5c:	20008654 	.word	0x20008654
 8017a60:	2000865c 	.word	0x2000865c

08017a64 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8017a64:	b480      	push	{r7}
 8017a66:	b085      	sub	sp, #20
 8017a68:	af00      	add	r7, sp, #0
 8017a6a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8017a6c:	4b28      	ldr	r3, [pc, #160]	; (8017b10 <prvInsertBlockIntoFreeList+0xac>)
 8017a6e:	60fb      	str	r3, [r7, #12]
 8017a70:	e002      	b.n	8017a78 <prvInsertBlockIntoFreeList+0x14>
 8017a72:	68fb      	ldr	r3, [r7, #12]
 8017a74:	681b      	ldr	r3, [r3, #0]
 8017a76:	60fb      	str	r3, [r7, #12]
 8017a78:	68fb      	ldr	r3, [r7, #12]
 8017a7a:	681b      	ldr	r3, [r3, #0]
 8017a7c:	687a      	ldr	r2, [r7, #4]
 8017a7e:	429a      	cmp	r2, r3
 8017a80:	d8f7      	bhi.n	8017a72 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8017a82:	68fb      	ldr	r3, [r7, #12]
 8017a84:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8017a86:	68fb      	ldr	r3, [r7, #12]
 8017a88:	685b      	ldr	r3, [r3, #4]
 8017a8a:	68ba      	ldr	r2, [r7, #8]
 8017a8c:	4413      	add	r3, r2
 8017a8e:	687a      	ldr	r2, [r7, #4]
 8017a90:	429a      	cmp	r2, r3
 8017a92:	d108      	bne.n	8017aa6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8017a94:	68fb      	ldr	r3, [r7, #12]
 8017a96:	685a      	ldr	r2, [r3, #4]
 8017a98:	687b      	ldr	r3, [r7, #4]
 8017a9a:	685b      	ldr	r3, [r3, #4]
 8017a9c:	441a      	add	r2, r3
 8017a9e:	68fb      	ldr	r3, [r7, #12]
 8017aa0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8017aa2:	68fb      	ldr	r3, [r7, #12]
 8017aa4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8017aa6:	687b      	ldr	r3, [r7, #4]
 8017aa8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8017aaa:	687b      	ldr	r3, [r7, #4]
 8017aac:	685b      	ldr	r3, [r3, #4]
 8017aae:	68ba      	ldr	r2, [r7, #8]
 8017ab0:	441a      	add	r2, r3
 8017ab2:	68fb      	ldr	r3, [r7, #12]
 8017ab4:	681b      	ldr	r3, [r3, #0]
 8017ab6:	429a      	cmp	r2, r3
 8017ab8:	d118      	bne.n	8017aec <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8017aba:	68fb      	ldr	r3, [r7, #12]
 8017abc:	681a      	ldr	r2, [r3, #0]
 8017abe:	4b15      	ldr	r3, [pc, #84]	; (8017b14 <prvInsertBlockIntoFreeList+0xb0>)
 8017ac0:	681b      	ldr	r3, [r3, #0]
 8017ac2:	429a      	cmp	r2, r3
 8017ac4:	d00d      	beq.n	8017ae2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8017ac6:	687b      	ldr	r3, [r7, #4]
 8017ac8:	685a      	ldr	r2, [r3, #4]
 8017aca:	68fb      	ldr	r3, [r7, #12]
 8017acc:	681b      	ldr	r3, [r3, #0]
 8017ace:	685b      	ldr	r3, [r3, #4]
 8017ad0:	441a      	add	r2, r3
 8017ad2:	687b      	ldr	r3, [r7, #4]
 8017ad4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8017ad6:	68fb      	ldr	r3, [r7, #12]
 8017ad8:	681b      	ldr	r3, [r3, #0]
 8017ada:	681a      	ldr	r2, [r3, #0]
 8017adc:	687b      	ldr	r3, [r7, #4]
 8017ade:	601a      	str	r2, [r3, #0]
 8017ae0:	e008      	b.n	8017af4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8017ae2:	4b0c      	ldr	r3, [pc, #48]	; (8017b14 <prvInsertBlockIntoFreeList+0xb0>)
 8017ae4:	681a      	ldr	r2, [r3, #0]
 8017ae6:	687b      	ldr	r3, [r7, #4]
 8017ae8:	601a      	str	r2, [r3, #0]
 8017aea:	e003      	b.n	8017af4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8017aec:	68fb      	ldr	r3, [r7, #12]
 8017aee:	681a      	ldr	r2, [r3, #0]
 8017af0:	687b      	ldr	r3, [r7, #4]
 8017af2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8017af4:	68fa      	ldr	r2, [r7, #12]
 8017af6:	687b      	ldr	r3, [r7, #4]
 8017af8:	429a      	cmp	r2, r3
 8017afa:	d002      	beq.n	8017b02 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8017afc:	68fb      	ldr	r3, [r7, #12]
 8017afe:	687a      	ldr	r2, [r7, #4]
 8017b00:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8017b02:	bf00      	nop
 8017b04:	3714      	adds	r7, #20
 8017b06:	46bd      	mov	sp, r7
 8017b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b0c:	4770      	bx	lr
 8017b0e:	bf00      	nop
 8017b10:	20008648 	.word	0x20008648
 8017b14:	20008650 	.word	0x20008650

08017b18 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8017b18:	b580      	push	{r7, lr}
 8017b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8017b1c:	2201      	movs	r2, #1
 8017b1e:	490e      	ldr	r1, [pc, #56]	; (8017b58 <MX_USB_HOST_Init+0x40>)
 8017b20:	480e      	ldr	r0, [pc, #56]	; (8017b5c <MX_USB_HOST_Init+0x44>)
 8017b22:	f7fb fc77 	bl	8013414 <USBH_Init>
 8017b26:	4603      	mov	r3, r0
 8017b28:	2b00      	cmp	r3, #0
 8017b2a:	d001      	beq.n	8017b30 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8017b2c:	f7eb f8d2 	bl	8002cd4 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8017b30:	490b      	ldr	r1, [pc, #44]	; (8017b60 <MX_USB_HOST_Init+0x48>)
 8017b32:	480a      	ldr	r0, [pc, #40]	; (8017b5c <MX_USB_HOST_Init+0x44>)
 8017b34:	f7fb fd24 	bl	8013580 <USBH_RegisterClass>
 8017b38:	4603      	mov	r3, r0
 8017b3a:	2b00      	cmp	r3, #0
 8017b3c:	d001      	beq.n	8017b42 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8017b3e:	f7eb f8c9 	bl	8002cd4 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8017b42:	4806      	ldr	r0, [pc, #24]	; (8017b5c <MX_USB_HOST_Init+0x44>)
 8017b44:	f7fb fda8 	bl	8013698 <USBH_Start>
 8017b48:	4603      	mov	r3, r0
 8017b4a:	2b00      	cmp	r3, #0
 8017b4c:	d001      	beq.n	8017b52 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8017b4e:	f7eb f8c1 	bl	8002cd4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8017b52:	bf00      	nop
 8017b54:	bd80      	pop	{r7, pc}
 8017b56:	bf00      	nop
 8017b58:	08017b65 	.word	0x08017b65
 8017b5c:	2004a038 	.word	0x2004a038
 8017b60:	20000034 	.word	0x20000034

08017b64 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8017b64:	b480      	push	{r7}
 8017b66:	b083      	sub	sp, #12
 8017b68:	af00      	add	r7, sp, #0
 8017b6a:	6078      	str	r0, [r7, #4]
 8017b6c:	460b      	mov	r3, r1
 8017b6e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8017b70:	78fb      	ldrb	r3, [r7, #3]
 8017b72:	3b01      	subs	r3, #1
 8017b74:	2b04      	cmp	r3, #4
 8017b76:	d819      	bhi.n	8017bac <USBH_UserProcess+0x48>
 8017b78:	a201      	add	r2, pc, #4	; (adr r2, 8017b80 <USBH_UserProcess+0x1c>)
 8017b7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017b7e:	bf00      	nop
 8017b80:	08017bad 	.word	0x08017bad
 8017b84:	08017b9d 	.word	0x08017b9d
 8017b88:	08017bad 	.word	0x08017bad
 8017b8c:	08017ba5 	.word	0x08017ba5
 8017b90:	08017b95 	.word	0x08017b95
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8017b94:	4b09      	ldr	r3, [pc, #36]	; (8017bbc <USBH_UserProcess+0x58>)
 8017b96:	2203      	movs	r2, #3
 8017b98:	701a      	strb	r2, [r3, #0]
  break;
 8017b9a:	e008      	b.n	8017bae <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8017b9c:	4b07      	ldr	r3, [pc, #28]	; (8017bbc <USBH_UserProcess+0x58>)
 8017b9e:	2202      	movs	r2, #2
 8017ba0:	701a      	strb	r2, [r3, #0]
  break;
 8017ba2:	e004      	b.n	8017bae <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8017ba4:	4b05      	ldr	r3, [pc, #20]	; (8017bbc <USBH_UserProcess+0x58>)
 8017ba6:	2201      	movs	r2, #1
 8017ba8:	701a      	strb	r2, [r3, #0]
  break;
 8017baa:	e000      	b.n	8017bae <USBH_UserProcess+0x4a>

  default:
  break;
 8017bac:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8017bae:	bf00      	nop
 8017bb0:	370c      	adds	r7, #12
 8017bb2:	46bd      	mov	sp, r7
 8017bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017bb8:	4770      	bx	lr
 8017bba:	bf00      	nop
 8017bbc:	20008660 	.word	0x20008660

08017bc0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8017bc0:	b580      	push	{r7, lr}
 8017bc2:	b08a      	sub	sp, #40	; 0x28
 8017bc4:	af00      	add	r7, sp, #0
 8017bc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017bc8:	f107 0314 	add.w	r3, r7, #20
 8017bcc:	2200      	movs	r2, #0
 8017bce:	601a      	str	r2, [r3, #0]
 8017bd0:	605a      	str	r2, [r3, #4]
 8017bd2:	609a      	str	r2, [r3, #8]
 8017bd4:	60da      	str	r2, [r3, #12]
 8017bd6:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8017bd8:	687b      	ldr	r3, [r7, #4]
 8017bda:	681b      	ldr	r3, [r3, #0]
 8017bdc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8017be0:	d13c      	bne.n	8017c5c <HAL_HCD_MspInit+0x9c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8017be2:	4b20      	ldr	r3, [pc, #128]	; (8017c64 <HAL_HCD_MspInit+0xa4>)
 8017be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017be6:	4a1f      	ldr	r2, [pc, #124]	; (8017c64 <HAL_HCD_MspInit+0xa4>)
 8017be8:	f043 0301 	orr.w	r3, r3, #1
 8017bec:	6313      	str	r3, [r2, #48]	; 0x30
 8017bee:	4b1d      	ldr	r3, [pc, #116]	; (8017c64 <HAL_HCD_MspInit+0xa4>)
 8017bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017bf2:	f003 0301 	and.w	r3, r3, #1
 8017bf6:	613b      	str	r3, [r7, #16]
 8017bf8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID
    */
    GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8017bfa:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8017bfe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017c00:	2302      	movs	r3, #2
 8017c02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017c04:	2300      	movs	r3, #0
 8017c06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8017c08:	2303      	movs	r3, #3
 8017c0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8017c0c:	230a      	movs	r3, #10
 8017c0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8017c10:	f107 0314 	add.w	r3, r7, #20
 8017c14:	4619      	mov	r1, r3
 8017c16:	4814      	ldr	r0, [pc, #80]	; (8017c68 <HAL_HCD_MspInit+0xa8>)
 8017c18:	f7ef fe22 	bl	8007860 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8017c1c:	4b11      	ldr	r3, [pc, #68]	; (8017c64 <HAL_HCD_MspInit+0xa4>)
 8017c1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017c20:	4a10      	ldr	r2, [pc, #64]	; (8017c64 <HAL_HCD_MspInit+0xa4>)
 8017c22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017c26:	6353      	str	r3, [r2, #52]	; 0x34
 8017c28:	4b0e      	ldr	r3, [pc, #56]	; (8017c64 <HAL_HCD_MspInit+0xa4>)
 8017c2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017c2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8017c30:	60fb      	str	r3, [r7, #12]
 8017c32:	68fb      	ldr	r3, [r7, #12]
 8017c34:	4b0b      	ldr	r3, [pc, #44]	; (8017c64 <HAL_HCD_MspInit+0xa4>)
 8017c36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017c38:	4a0a      	ldr	r2, [pc, #40]	; (8017c64 <HAL_HCD_MspInit+0xa4>)
 8017c3a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8017c3e:	6453      	str	r3, [r2, #68]	; 0x44
 8017c40:	4b08      	ldr	r3, [pc, #32]	; (8017c64 <HAL_HCD_MspInit+0xa4>)
 8017c42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017c44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8017c48:	60bb      	str	r3, [r7, #8]
 8017c4a:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8017c4c:	2200      	movs	r2, #0
 8017c4e:	2105      	movs	r1, #5
 8017c50:	2043      	movs	r0, #67	; 0x43
 8017c52:	f7ee fbe7 	bl	8006424 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8017c56:	2043      	movs	r0, #67	; 0x43
 8017c58:	f7ee fc00 	bl	800645c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8017c5c:	bf00      	nop
 8017c5e:	3728      	adds	r7, #40	; 0x28
 8017c60:	46bd      	mov	sp, r7
 8017c62:	bd80      	pop	{r7, pc}
 8017c64:	40023800 	.word	0x40023800
 8017c68:	40020000 	.word	0x40020000

08017c6c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8017c6c:	b580      	push	{r7, lr}
 8017c6e:	b082      	sub	sp, #8
 8017c70:	af00      	add	r7, sp, #0
 8017c72:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8017c74:	687b      	ldr	r3, [r7, #4]
 8017c76:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8017c7a:	4618      	mov	r0, r3
 8017c7c:	f7fc f9b9 	bl	8013ff2 <USBH_LL_IncTimer>
}
 8017c80:	bf00      	nop
 8017c82:	3708      	adds	r7, #8
 8017c84:	46bd      	mov	sp, r7
 8017c86:	bd80      	pop	{r7, pc}

08017c88 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8017c88:	b580      	push	{r7, lr}
 8017c8a:	b082      	sub	sp, #8
 8017c8c:	af00      	add	r7, sp, #0
 8017c8e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8017c90:	687b      	ldr	r3, [r7, #4]
 8017c92:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8017c96:	4618      	mov	r0, r3
 8017c98:	f7fc f9fd 	bl	8014096 <USBH_LL_Connect>
}
 8017c9c:	bf00      	nop
 8017c9e:	3708      	adds	r7, #8
 8017ca0:	46bd      	mov	sp, r7
 8017ca2:	bd80      	pop	{r7, pc}

08017ca4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8017ca4:	b580      	push	{r7, lr}
 8017ca6:	b082      	sub	sp, #8
 8017ca8:	af00      	add	r7, sp, #0
 8017caa:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8017cac:	687b      	ldr	r3, [r7, #4]
 8017cae:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8017cb2:	4618      	mov	r0, r3
 8017cb4:	f7fc fa12 	bl	80140dc <USBH_LL_Disconnect>
}
 8017cb8:	bf00      	nop
 8017cba:	3708      	adds	r7, #8
 8017cbc:	46bd      	mov	sp, r7
 8017cbe:	bd80      	pop	{r7, pc}

08017cc0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8017cc0:	b580      	push	{r7, lr}
 8017cc2:	b082      	sub	sp, #8
 8017cc4:	af00      	add	r7, sp, #0
 8017cc6:	6078      	str	r0, [r7, #4]
 8017cc8:	460b      	mov	r3, r1
 8017cca:	70fb      	strb	r3, [r7, #3]
 8017ccc:	4613      	mov	r3, r2
 8017cce:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 8017cd0:	687b      	ldr	r3, [r7, #4]
 8017cd2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8017cd6:	4618      	mov	r0, r3
 8017cd8:	f7fc fa47 	bl	801416a <USBH_LL_NotifyURBChange>
#endif
}
 8017cdc:	bf00      	nop
 8017cde:	3708      	adds	r7, #8
 8017ce0:	46bd      	mov	sp, r7
 8017ce2:	bd80      	pop	{r7, pc}

08017ce4 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8017ce4:	b580      	push	{r7, lr}
 8017ce6:	b082      	sub	sp, #8
 8017ce8:	af00      	add	r7, sp, #0
 8017cea:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8017cec:	687b      	ldr	r3, [r7, #4]
 8017cee:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8017cf2:	4618      	mov	r0, r3
 8017cf4:	f7fc f9a7 	bl	8014046 <USBH_LL_PortEnabled>
}
 8017cf8:	bf00      	nop
 8017cfa:	3708      	adds	r7, #8
 8017cfc:	46bd      	mov	sp, r7
 8017cfe:	bd80      	pop	{r7, pc}

08017d00 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8017d00:	b580      	push	{r7, lr}
 8017d02:	b082      	sub	sp, #8
 8017d04:	af00      	add	r7, sp, #0
 8017d06:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8017d08:	687b      	ldr	r3, [r7, #4]
 8017d0a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8017d0e:	4618      	mov	r0, r3
 8017d10:	f7fc f9b3 	bl	801407a <USBH_LL_PortDisabled>
}
 8017d14:	bf00      	nop
 8017d16:	3708      	adds	r7, #8
 8017d18:	46bd      	mov	sp, r7
 8017d1a:	bd80      	pop	{r7, pc}

08017d1c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8017d1c:	b580      	push	{r7, lr}
 8017d1e:	b082      	sub	sp, #8
 8017d20:	af00      	add	r7, sp, #0
 8017d22:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8017d24:	687b      	ldr	r3, [r7, #4]
 8017d26:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8017d2a:	2b01      	cmp	r3, #1
 8017d2c:	d12a      	bne.n	8017d84 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8017d2e:	4a18      	ldr	r2, [pc, #96]	; (8017d90 <USBH_LL_Init+0x74>)
 8017d30:	687b      	ldr	r3, [r7, #4]
 8017d32:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8017d36:	687b      	ldr	r3, [r7, #4]
 8017d38:	4a15      	ldr	r2, [pc, #84]	; (8017d90 <USBH_LL_Init+0x74>)
 8017d3a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8017d3e:	4b14      	ldr	r3, [pc, #80]	; (8017d90 <USBH_LL_Init+0x74>)
 8017d40:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8017d44:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8017d46:	4b12      	ldr	r3, [pc, #72]	; (8017d90 <USBH_LL_Init+0x74>)
 8017d48:	2208      	movs	r2, #8
 8017d4a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8017d4c:	4b10      	ldr	r3, [pc, #64]	; (8017d90 <USBH_LL_Init+0x74>)
 8017d4e:	2201      	movs	r2, #1
 8017d50:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8017d52:	4b0f      	ldr	r3, [pc, #60]	; (8017d90 <USBH_LL_Init+0x74>)
 8017d54:	2200      	movs	r2, #0
 8017d56:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8017d58:	4b0d      	ldr	r3, [pc, #52]	; (8017d90 <USBH_LL_Init+0x74>)
 8017d5a:	2202      	movs	r2, #2
 8017d5c:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8017d5e:	4b0c      	ldr	r3, [pc, #48]	; (8017d90 <USBH_LL_Init+0x74>)
 8017d60:	2200      	movs	r2, #0
 8017d62:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8017d64:	480a      	ldr	r0, [pc, #40]	; (8017d90 <USBH_LL_Init+0x74>)
 8017d66:	f7f0 f8a2 	bl	8007eae <HAL_HCD_Init>
 8017d6a:	4603      	mov	r3, r0
 8017d6c:	2b00      	cmp	r3, #0
 8017d6e:	d001      	beq.n	8017d74 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8017d70:	f7ea ffb0 	bl	8002cd4 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8017d74:	4806      	ldr	r0, [pc, #24]	; (8017d90 <USBH_LL_Init+0x74>)
 8017d76:	f7f0 fc7f 	bl	8008678 <HAL_HCD_GetCurrentFrame>
 8017d7a:	4603      	mov	r3, r0
 8017d7c:	4619      	mov	r1, r3
 8017d7e:	6878      	ldr	r0, [r7, #4]
 8017d80:	f7fc f928 	bl	8013fd4 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8017d84:	2300      	movs	r3, #0
}
 8017d86:	4618      	mov	r0, r3
 8017d88:	3708      	adds	r7, #8
 8017d8a:	46bd      	mov	sp, r7
 8017d8c:	bd80      	pop	{r7, pc}
 8017d8e:	bf00      	nop
 8017d90:	2004a41c 	.word	0x2004a41c

08017d94 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8017d94:	b580      	push	{r7, lr}
 8017d96:	b084      	sub	sp, #16
 8017d98:	af00      	add	r7, sp, #0
 8017d9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017d9c:	2300      	movs	r3, #0
 8017d9e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8017da0:	2300      	movs	r3, #0
 8017da2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8017da4:	687b      	ldr	r3, [r7, #4]
 8017da6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8017daa:	4618      	mov	r0, r3
 8017dac:	f7f0 fbee 	bl	800858c <HAL_HCD_Start>
 8017db0:	4603      	mov	r3, r0
 8017db2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8017db4:	7bfb      	ldrb	r3, [r7, #15]
 8017db6:	4618      	mov	r0, r3
 8017db8:	f000 f95c 	bl	8018074 <USBH_Get_USB_Status>
 8017dbc:	4603      	mov	r3, r0
 8017dbe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017dc0:	7bbb      	ldrb	r3, [r7, #14]
}
 8017dc2:	4618      	mov	r0, r3
 8017dc4:	3710      	adds	r7, #16
 8017dc6:	46bd      	mov	sp, r7
 8017dc8:	bd80      	pop	{r7, pc}

08017dca <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8017dca:	b580      	push	{r7, lr}
 8017dcc:	b084      	sub	sp, #16
 8017dce:	af00      	add	r7, sp, #0
 8017dd0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017dd2:	2300      	movs	r3, #0
 8017dd4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8017dd6:	2300      	movs	r3, #0
 8017dd8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8017dda:	687b      	ldr	r3, [r7, #4]
 8017ddc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8017de0:	4618      	mov	r0, r3
 8017de2:	f7f0 fbf6 	bl	80085d2 <HAL_HCD_Stop>
 8017de6:	4603      	mov	r3, r0
 8017de8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8017dea:	7bfb      	ldrb	r3, [r7, #15]
 8017dec:	4618      	mov	r0, r3
 8017dee:	f000 f941 	bl	8018074 <USBH_Get_USB_Status>
 8017df2:	4603      	mov	r3, r0
 8017df4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017df6:	7bbb      	ldrb	r3, [r7, #14]
}
 8017df8:	4618      	mov	r0, r3
 8017dfa:	3710      	adds	r7, #16
 8017dfc:	46bd      	mov	sp, r7
 8017dfe:	bd80      	pop	{r7, pc}

08017e00 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8017e00:	b580      	push	{r7, lr}
 8017e02:	b084      	sub	sp, #16
 8017e04:	af00      	add	r7, sp, #0
 8017e06:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8017e08:	2301      	movs	r3, #1
 8017e0a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8017e0c:	687b      	ldr	r3, [r7, #4]
 8017e0e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8017e12:	4618      	mov	r0, r3
 8017e14:	f7f0 fc3e 	bl	8008694 <HAL_HCD_GetCurrentSpeed>
 8017e18:	4603      	mov	r3, r0
 8017e1a:	2b02      	cmp	r3, #2
 8017e1c:	d00c      	beq.n	8017e38 <USBH_LL_GetSpeed+0x38>
 8017e1e:	2b02      	cmp	r3, #2
 8017e20:	d80d      	bhi.n	8017e3e <USBH_LL_GetSpeed+0x3e>
 8017e22:	2b00      	cmp	r3, #0
 8017e24:	d002      	beq.n	8017e2c <USBH_LL_GetSpeed+0x2c>
 8017e26:	2b01      	cmp	r3, #1
 8017e28:	d003      	beq.n	8017e32 <USBH_LL_GetSpeed+0x32>
 8017e2a:	e008      	b.n	8017e3e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8017e2c:	2300      	movs	r3, #0
 8017e2e:	73fb      	strb	r3, [r7, #15]
    break;
 8017e30:	e008      	b.n	8017e44 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8017e32:	2301      	movs	r3, #1
 8017e34:	73fb      	strb	r3, [r7, #15]
    break;
 8017e36:	e005      	b.n	8017e44 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8017e38:	2302      	movs	r3, #2
 8017e3a:	73fb      	strb	r3, [r7, #15]
    break;
 8017e3c:	e002      	b.n	8017e44 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8017e3e:	2301      	movs	r3, #1
 8017e40:	73fb      	strb	r3, [r7, #15]
    break;
 8017e42:	bf00      	nop
  }
  return  speed;
 8017e44:	7bfb      	ldrb	r3, [r7, #15]
}
 8017e46:	4618      	mov	r0, r3
 8017e48:	3710      	adds	r7, #16
 8017e4a:	46bd      	mov	sp, r7
 8017e4c:	bd80      	pop	{r7, pc}

08017e4e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8017e4e:	b580      	push	{r7, lr}
 8017e50:	b084      	sub	sp, #16
 8017e52:	af00      	add	r7, sp, #0
 8017e54:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017e56:	2300      	movs	r3, #0
 8017e58:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8017e5a:	2300      	movs	r3, #0
 8017e5c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8017e5e:	687b      	ldr	r3, [r7, #4]
 8017e60:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8017e64:	4618      	mov	r0, r3
 8017e66:	f7f0 fbd1 	bl	800860c <HAL_HCD_ResetPort>
 8017e6a:	4603      	mov	r3, r0
 8017e6c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8017e6e:	7bfb      	ldrb	r3, [r7, #15]
 8017e70:	4618      	mov	r0, r3
 8017e72:	f000 f8ff 	bl	8018074 <USBH_Get_USB_Status>
 8017e76:	4603      	mov	r3, r0
 8017e78:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017e7a:	7bbb      	ldrb	r3, [r7, #14]
}
 8017e7c:	4618      	mov	r0, r3
 8017e7e:	3710      	adds	r7, #16
 8017e80:	46bd      	mov	sp, r7
 8017e82:	bd80      	pop	{r7, pc}

08017e84 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8017e84:	b580      	push	{r7, lr}
 8017e86:	b082      	sub	sp, #8
 8017e88:	af00      	add	r7, sp, #0
 8017e8a:	6078      	str	r0, [r7, #4]
 8017e8c:	460b      	mov	r3, r1
 8017e8e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8017e90:	687b      	ldr	r3, [r7, #4]
 8017e92:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8017e96:	78fa      	ldrb	r2, [r7, #3]
 8017e98:	4611      	mov	r1, r2
 8017e9a:	4618      	mov	r0, r3
 8017e9c:	f7f0 fbd8 	bl	8008650 <HAL_HCD_HC_GetXferCount>
 8017ea0:	4603      	mov	r3, r0
}
 8017ea2:	4618      	mov	r0, r3
 8017ea4:	3708      	adds	r7, #8
 8017ea6:	46bd      	mov	sp, r7
 8017ea8:	bd80      	pop	{r7, pc}

08017eaa <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8017eaa:	b590      	push	{r4, r7, lr}
 8017eac:	b089      	sub	sp, #36	; 0x24
 8017eae:	af04      	add	r7, sp, #16
 8017eb0:	6078      	str	r0, [r7, #4]
 8017eb2:	4608      	mov	r0, r1
 8017eb4:	4611      	mov	r1, r2
 8017eb6:	461a      	mov	r2, r3
 8017eb8:	4603      	mov	r3, r0
 8017eba:	70fb      	strb	r3, [r7, #3]
 8017ebc:	460b      	mov	r3, r1
 8017ebe:	70bb      	strb	r3, [r7, #2]
 8017ec0:	4613      	mov	r3, r2
 8017ec2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017ec4:	2300      	movs	r3, #0
 8017ec6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8017ec8:	2300      	movs	r3, #0
 8017eca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8017ecc:	687b      	ldr	r3, [r7, #4]
 8017ece:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8017ed2:	787c      	ldrb	r4, [r7, #1]
 8017ed4:	78ba      	ldrb	r2, [r7, #2]
 8017ed6:	78f9      	ldrb	r1, [r7, #3]
 8017ed8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8017eda:	9302      	str	r3, [sp, #8]
 8017edc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8017ee0:	9301      	str	r3, [sp, #4]
 8017ee2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8017ee6:	9300      	str	r3, [sp, #0]
 8017ee8:	4623      	mov	r3, r4
 8017eea:	f7f0 f842 	bl	8007f72 <HAL_HCD_HC_Init>
 8017eee:	4603      	mov	r3, r0
 8017ef0:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8017ef2:	7bfb      	ldrb	r3, [r7, #15]
 8017ef4:	4618      	mov	r0, r3
 8017ef6:	f000 f8bd 	bl	8018074 <USBH_Get_USB_Status>
 8017efa:	4603      	mov	r3, r0
 8017efc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017efe:	7bbb      	ldrb	r3, [r7, #14]
}
 8017f00:	4618      	mov	r0, r3
 8017f02:	3714      	adds	r7, #20
 8017f04:	46bd      	mov	sp, r7
 8017f06:	bd90      	pop	{r4, r7, pc}

08017f08 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8017f08:	b580      	push	{r7, lr}
 8017f0a:	b084      	sub	sp, #16
 8017f0c:	af00      	add	r7, sp, #0
 8017f0e:	6078      	str	r0, [r7, #4]
 8017f10:	460b      	mov	r3, r1
 8017f12:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017f14:	2300      	movs	r3, #0
 8017f16:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8017f18:	2300      	movs	r3, #0
 8017f1a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8017f1c:	687b      	ldr	r3, [r7, #4]
 8017f1e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8017f22:	78fa      	ldrb	r2, [r7, #3]
 8017f24:	4611      	mov	r1, r2
 8017f26:	4618      	mov	r0, r3
 8017f28:	f7f0 f8b2 	bl	8008090 <HAL_HCD_HC_Halt>
 8017f2c:	4603      	mov	r3, r0
 8017f2e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8017f30:	7bfb      	ldrb	r3, [r7, #15]
 8017f32:	4618      	mov	r0, r3
 8017f34:	f000 f89e 	bl	8018074 <USBH_Get_USB_Status>
 8017f38:	4603      	mov	r3, r0
 8017f3a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017f3c:	7bbb      	ldrb	r3, [r7, #14]
}
 8017f3e:	4618      	mov	r0, r3
 8017f40:	3710      	adds	r7, #16
 8017f42:	46bd      	mov	sp, r7
 8017f44:	bd80      	pop	{r7, pc}

08017f46 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8017f46:	b590      	push	{r4, r7, lr}
 8017f48:	b089      	sub	sp, #36	; 0x24
 8017f4a:	af04      	add	r7, sp, #16
 8017f4c:	6078      	str	r0, [r7, #4]
 8017f4e:	4608      	mov	r0, r1
 8017f50:	4611      	mov	r1, r2
 8017f52:	461a      	mov	r2, r3
 8017f54:	4603      	mov	r3, r0
 8017f56:	70fb      	strb	r3, [r7, #3]
 8017f58:	460b      	mov	r3, r1
 8017f5a:	70bb      	strb	r3, [r7, #2]
 8017f5c:	4613      	mov	r3, r2
 8017f5e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017f60:	2300      	movs	r3, #0
 8017f62:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8017f64:	2300      	movs	r3, #0
 8017f66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8017f68:	687b      	ldr	r3, [r7, #4]
 8017f6a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8017f6e:	787c      	ldrb	r4, [r7, #1]
 8017f70:	78ba      	ldrb	r2, [r7, #2]
 8017f72:	78f9      	ldrb	r1, [r7, #3]
 8017f74:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8017f78:	9303      	str	r3, [sp, #12]
 8017f7a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8017f7c:	9302      	str	r3, [sp, #8]
 8017f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f80:	9301      	str	r3, [sp, #4]
 8017f82:	f897 3020 	ldrb.w	r3, [r7, #32]
 8017f86:	9300      	str	r3, [sp, #0]
 8017f88:	4623      	mov	r3, r4
 8017f8a:	f7f0 f8a5 	bl	80080d8 <HAL_HCD_HC_SubmitRequest>
 8017f8e:	4603      	mov	r3, r0
 8017f90:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8017f92:	7bfb      	ldrb	r3, [r7, #15]
 8017f94:	4618      	mov	r0, r3
 8017f96:	f000 f86d 	bl	8018074 <USBH_Get_USB_Status>
 8017f9a:	4603      	mov	r3, r0
 8017f9c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017f9e:	7bbb      	ldrb	r3, [r7, #14]
}
 8017fa0:	4618      	mov	r0, r3
 8017fa2:	3714      	adds	r7, #20
 8017fa4:	46bd      	mov	sp, r7
 8017fa6:	bd90      	pop	{r4, r7, pc}

08017fa8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8017fa8:	b580      	push	{r7, lr}
 8017faa:	b082      	sub	sp, #8
 8017fac:	af00      	add	r7, sp, #0
 8017fae:	6078      	str	r0, [r7, #4]
 8017fb0:	460b      	mov	r3, r1
 8017fb2:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8017fb4:	687b      	ldr	r3, [r7, #4]
 8017fb6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8017fba:	78fa      	ldrb	r2, [r7, #3]
 8017fbc:	4611      	mov	r1, r2
 8017fbe:	4618      	mov	r0, r3
 8017fc0:	f7f0 fb32 	bl	8008628 <HAL_HCD_HC_GetURBState>
 8017fc4:	4603      	mov	r3, r0
}
 8017fc6:	4618      	mov	r0, r3
 8017fc8:	3708      	adds	r7, #8
 8017fca:	46bd      	mov	sp, r7
 8017fcc:	bd80      	pop	{r7, pc}

08017fce <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8017fce:	b580      	push	{r7, lr}
 8017fd0:	b082      	sub	sp, #8
 8017fd2:	af00      	add	r7, sp, #0
 8017fd4:	6078      	str	r0, [r7, #4]
 8017fd6:	460b      	mov	r3, r1
 8017fd8:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8017fda:	687b      	ldr	r3, [r7, #4]
 8017fdc:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8017fe0:	2b01      	cmp	r3, #1
 8017fe2:	d103      	bne.n	8017fec <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8017fe4:	78fb      	ldrb	r3, [r7, #3]
 8017fe6:	4618      	mov	r0, r3
 8017fe8:	f000 f870 	bl	80180cc <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8017fec:	20c8      	movs	r0, #200	; 0xc8
 8017fee:	f7ed fe91 	bl	8005d14 <HAL_Delay>
  return USBH_OK;
 8017ff2:	2300      	movs	r3, #0
}
 8017ff4:	4618      	mov	r0, r3
 8017ff6:	3708      	adds	r7, #8
 8017ff8:	46bd      	mov	sp, r7
 8017ffa:	bd80      	pop	{r7, pc}

08017ffc <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8017ffc:	b480      	push	{r7}
 8017ffe:	b085      	sub	sp, #20
 8018000:	af00      	add	r7, sp, #0
 8018002:	6078      	str	r0, [r7, #4]
 8018004:	460b      	mov	r3, r1
 8018006:	70fb      	strb	r3, [r7, #3]
 8018008:	4613      	mov	r3, r2
 801800a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 801800c:	687b      	ldr	r3, [r7, #4]
 801800e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8018012:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8018014:	78fb      	ldrb	r3, [r7, #3]
 8018016:	68fa      	ldr	r2, [r7, #12]
 8018018:	212c      	movs	r1, #44	; 0x2c
 801801a:	fb01 f303 	mul.w	r3, r1, r3
 801801e:	4413      	add	r3, r2
 8018020:	333b      	adds	r3, #59	; 0x3b
 8018022:	781b      	ldrb	r3, [r3, #0]
 8018024:	2b00      	cmp	r3, #0
 8018026:	d009      	beq.n	801803c <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8018028:	78fb      	ldrb	r3, [r7, #3]
 801802a:	68fa      	ldr	r2, [r7, #12]
 801802c:	212c      	movs	r1, #44	; 0x2c
 801802e:	fb01 f303 	mul.w	r3, r1, r3
 8018032:	4413      	add	r3, r2
 8018034:	3354      	adds	r3, #84	; 0x54
 8018036:	78ba      	ldrb	r2, [r7, #2]
 8018038:	701a      	strb	r2, [r3, #0]
 801803a:	e008      	b.n	801804e <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 801803c:	78fb      	ldrb	r3, [r7, #3]
 801803e:	68fa      	ldr	r2, [r7, #12]
 8018040:	212c      	movs	r1, #44	; 0x2c
 8018042:	fb01 f303 	mul.w	r3, r1, r3
 8018046:	4413      	add	r3, r2
 8018048:	3355      	adds	r3, #85	; 0x55
 801804a:	78ba      	ldrb	r2, [r7, #2]
 801804c:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 801804e:	2300      	movs	r3, #0
}
 8018050:	4618      	mov	r0, r3
 8018052:	3714      	adds	r7, #20
 8018054:	46bd      	mov	sp, r7
 8018056:	f85d 7b04 	ldr.w	r7, [sp], #4
 801805a:	4770      	bx	lr

0801805c <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 801805c:	b580      	push	{r7, lr}
 801805e:	b082      	sub	sp, #8
 8018060:	af00      	add	r7, sp, #0
 8018062:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8018064:	6878      	ldr	r0, [r7, #4]
 8018066:	f7ed fe55 	bl	8005d14 <HAL_Delay>
}
 801806a:	bf00      	nop
 801806c:	3708      	adds	r7, #8
 801806e:	46bd      	mov	sp, r7
 8018070:	bd80      	pop	{r7, pc}
	...

08018074 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8018074:	b480      	push	{r7}
 8018076:	b085      	sub	sp, #20
 8018078:	af00      	add	r7, sp, #0
 801807a:	4603      	mov	r3, r0
 801807c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801807e:	2300      	movs	r3, #0
 8018080:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8018082:	79fb      	ldrb	r3, [r7, #7]
 8018084:	2b03      	cmp	r3, #3
 8018086:	d817      	bhi.n	80180b8 <USBH_Get_USB_Status+0x44>
 8018088:	a201      	add	r2, pc, #4	; (adr r2, 8018090 <USBH_Get_USB_Status+0x1c>)
 801808a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801808e:	bf00      	nop
 8018090:	080180a1 	.word	0x080180a1
 8018094:	080180a7 	.word	0x080180a7
 8018098:	080180ad 	.word	0x080180ad
 801809c:	080180b3 	.word	0x080180b3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80180a0:	2300      	movs	r3, #0
 80180a2:	73fb      	strb	r3, [r7, #15]
    break;
 80180a4:	e00b      	b.n	80180be <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80180a6:	2302      	movs	r3, #2
 80180a8:	73fb      	strb	r3, [r7, #15]
    break;
 80180aa:	e008      	b.n	80180be <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80180ac:	2301      	movs	r3, #1
 80180ae:	73fb      	strb	r3, [r7, #15]
    break;
 80180b0:	e005      	b.n	80180be <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80180b2:	2302      	movs	r3, #2
 80180b4:	73fb      	strb	r3, [r7, #15]
    break;
 80180b6:	e002      	b.n	80180be <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80180b8:	2302      	movs	r3, #2
 80180ba:	73fb      	strb	r3, [r7, #15]
    break;
 80180bc:	bf00      	nop
  }
  return usb_status;
 80180be:	7bfb      	ldrb	r3, [r7, #15]
}
 80180c0:	4618      	mov	r0, r3
 80180c2:	3714      	adds	r7, #20
 80180c4:	46bd      	mov	sp, r7
 80180c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180ca:	4770      	bx	lr

080180cc <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80180cc:	b580      	push	{r7, lr}
 80180ce:	b084      	sub	sp, #16
 80180d0:	af00      	add	r7, sp, #0
 80180d2:	4603      	mov	r3, r0
 80180d4:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80180d6:	79fb      	ldrb	r3, [r7, #7]
 80180d8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80180da:	79fb      	ldrb	r3, [r7, #7]
 80180dc:	2b00      	cmp	r3, #0
 80180de:	d102      	bne.n	80180e6 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 80180e0:	2301      	movs	r3, #1
 80180e2:	73fb      	strb	r3, [r7, #15]
 80180e4:	e001      	b.n	80180ea <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 80180e6:	2300      	movs	r3, #0
 80180e8:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_5,(GPIO_PinState)data);
 80180ea:	7bfb      	ldrb	r3, [r7, #15]
 80180ec:	461a      	mov	r2, r3
 80180ee:	2120      	movs	r1, #32
 80180f0:	4803      	ldr	r0, [pc, #12]	; (8018100 <MX_DriverVbusFS+0x34>)
 80180f2:	f7ef fe85 	bl	8007e00 <HAL_GPIO_WritePin>
}
 80180f6:	bf00      	nop
 80180f8:	3710      	adds	r7, #16
 80180fa:	46bd      	mov	sp, r7
 80180fc:	bd80      	pop	{r7, pc}
 80180fe:	bf00      	nop
 8018100:	40020c00 	.word	0x40020c00

08018104 <__errno>:
 8018104:	4b01      	ldr	r3, [pc, #4]	; (801810c <__errno+0x8>)
 8018106:	6818      	ldr	r0, [r3, #0]
 8018108:	4770      	bx	lr
 801810a:	bf00      	nop
 801810c:	20000058 	.word	0x20000058

08018110 <__libc_init_array>:
 8018110:	b570      	push	{r4, r5, r6, lr}
 8018112:	4d0d      	ldr	r5, [pc, #52]	; (8018148 <__libc_init_array+0x38>)
 8018114:	4c0d      	ldr	r4, [pc, #52]	; (801814c <__libc_init_array+0x3c>)
 8018116:	1b64      	subs	r4, r4, r5
 8018118:	10a4      	asrs	r4, r4, #2
 801811a:	2600      	movs	r6, #0
 801811c:	42a6      	cmp	r6, r4
 801811e:	d109      	bne.n	8018134 <__libc_init_array+0x24>
 8018120:	4d0b      	ldr	r5, [pc, #44]	; (8018150 <__libc_init_array+0x40>)
 8018122:	4c0c      	ldr	r4, [pc, #48]	; (8018154 <__libc_init_array+0x44>)
 8018124:	f003 fa3e 	bl	801b5a4 <_init>
 8018128:	1b64      	subs	r4, r4, r5
 801812a:	10a4      	asrs	r4, r4, #2
 801812c:	2600      	movs	r6, #0
 801812e:	42a6      	cmp	r6, r4
 8018130:	d105      	bne.n	801813e <__libc_init_array+0x2e>
 8018132:	bd70      	pop	{r4, r5, r6, pc}
 8018134:	f855 3b04 	ldr.w	r3, [r5], #4
 8018138:	4798      	blx	r3
 801813a:	3601      	adds	r6, #1
 801813c:	e7ee      	b.n	801811c <__libc_init_array+0xc>
 801813e:	f855 3b04 	ldr.w	r3, [r5], #4
 8018142:	4798      	blx	r3
 8018144:	3601      	adds	r6, #1
 8018146:	e7f2      	b.n	801812e <__libc_init_array+0x1e>
 8018148:	0801db30 	.word	0x0801db30
 801814c:	0801db30 	.word	0x0801db30
 8018150:	0801db30 	.word	0x0801db30
 8018154:	0801db34 	.word	0x0801db34

08018158 <malloc>:
 8018158:	4b02      	ldr	r3, [pc, #8]	; (8018164 <malloc+0xc>)
 801815a:	4601      	mov	r1, r0
 801815c:	6818      	ldr	r0, [r3, #0]
 801815e:	f000 b871 	b.w	8018244 <_malloc_r>
 8018162:	bf00      	nop
 8018164:	20000058 	.word	0x20000058

08018168 <free>:
 8018168:	4b02      	ldr	r3, [pc, #8]	; (8018174 <free+0xc>)
 801816a:	4601      	mov	r1, r0
 801816c:	6818      	ldr	r0, [r3, #0]
 801816e:	f000 b819 	b.w	80181a4 <_free_r>
 8018172:	bf00      	nop
 8018174:	20000058 	.word	0x20000058

08018178 <memcpy>:
 8018178:	440a      	add	r2, r1
 801817a:	4291      	cmp	r1, r2
 801817c:	f100 33ff 	add.w	r3, r0, #4294967295
 8018180:	d100      	bne.n	8018184 <memcpy+0xc>
 8018182:	4770      	bx	lr
 8018184:	b510      	push	{r4, lr}
 8018186:	f811 4b01 	ldrb.w	r4, [r1], #1
 801818a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801818e:	4291      	cmp	r1, r2
 8018190:	d1f9      	bne.n	8018186 <memcpy+0xe>
 8018192:	bd10      	pop	{r4, pc}

08018194 <memset>:
 8018194:	4402      	add	r2, r0
 8018196:	4603      	mov	r3, r0
 8018198:	4293      	cmp	r3, r2
 801819a:	d100      	bne.n	801819e <memset+0xa>
 801819c:	4770      	bx	lr
 801819e:	f803 1b01 	strb.w	r1, [r3], #1
 80181a2:	e7f9      	b.n	8018198 <memset+0x4>

080181a4 <_free_r>:
 80181a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80181a6:	2900      	cmp	r1, #0
 80181a8:	d048      	beq.n	801823c <_free_r+0x98>
 80181aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80181ae:	9001      	str	r0, [sp, #4]
 80181b0:	2b00      	cmp	r3, #0
 80181b2:	f1a1 0404 	sub.w	r4, r1, #4
 80181b6:	bfb8      	it	lt
 80181b8:	18e4      	addlt	r4, r4, r3
 80181ba:	f001 ff67 	bl	801a08c <__malloc_lock>
 80181be:	4a20      	ldr	r2, [pc, #128]	; (8018240 <_free_r+0x9c>)
 80181c0:	9801      	ldr	r0, [sp, #4]
 80181c2:	6813      	ldr	r3, [r2, #0]
 80181c4:	4615      	mov	r5, r2
 80181c6:	b933      	cbnz	r3, 80181d6 <_free_r+0x32>
 80181c8:	6063      	str	r3, [r4, #4]
 80181ca:	6014      	str	r4, [r2, #0]
 80181cc:	b003      	add	sp, #12
 80181ce:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80181d2:	f001 bf61 	b.w	801a098 <__malloc_unlock>
 80181d6:	42a3      	cmp	r3, r4
 80181d8:	d90b      	bls.n	80181f2 <_free_r+0x4e>
 80181da:	6821      	ldr	r1, [r4, #0]
 80181dc:	1862      	adds	r2, r4, r1
 80181de:	4293      	cmp	r3, r2
 80181e0:	bf04      	itt	eq
 80181e2:	681a      	ldreq	r2, [r3, #0]
 80181e4:	685b      	ldreq	r3, [r3, #4]
 80181e6:	6063      	str	r3, [r4, #4]
 80181e8:	bf04      	itt	eq
 80181ea:	1852      	addeq	r2, r2, r1
 80181ec:	6022      	streq	r2, [r4, #0]
 80181ee:	602c      	str	r4, [r5, #0]
 80181f0:	e7ec      	b.n	80181cc <_free_r+0x28>
 80181f2:	461a      	mov	r2, r3
 80181f4:	685b      	ldr	r3, [r3, #4]
 80181f6:	b10b      	cbz	r3, 80181fc <_free_r+0x58>
 80181f8:	42a3      	cmp	r3, r4
 80181fa:	d9fa      	bls.n	80181f2 <_free_r+0x4e>
 80181fc:	6811      	ldr	r1, [r2, #0]
 80181fe:	1855      	adds	r5, r2, r1
 8018200:	42a5      	cmp	r5, r4
 8018202:	d10b      	bne.n	801821c <_free_r+0x78>
 8018204:	6824      	ldr	r4, [r4, #0]
 8018206:	4421      	add	r1, r4
 8018208:	1854      	adds	r4, r2, r1
 801820a:	42a3      	cmp	r3, r4
 801820c:	6011      	str	r1, [r2, #0]
 801820e:	d1dd      	bne.n	80181cc <_free_r+0x28>
 8018210:	681c      	ldr	r4, [r3, #0]
 8018212:	685b      	ldr	r3, [r3, #4]
 8018214:	6053      	str	r3, [r2, #4]
 8018216:	4421      	add	r1, r4
 8018218:	6011      	str	r1, [r2, #0]
 801821a:	e7d7      	b.n	80181cc <_free_r+0x28>
 801821c:	d902      	bls.n	8018224 <_free_r+0x80>
 801821e:	230c      	movs	r3, #12
 8018220:	6003      	str	r3, [r0, #0]
 8018222:	e7d3      	b.n	80181cc <_free_r+0x28>
 8018224:	6825      	ldr	r5, [r4, #0]
 8018226:	1961      	adds	r1, r4, r5
 8018228:	428b      	cmp	r3, r1
 801822a:	bf04      	itt	eq
 801822c:	6819      	ldreq	r1, [r3, #0]
 801822e:	685b      	ldreq	r3, [r3, #4]
 8018230:	6063      	str	r3, [r4, #4]
 8018232:	bf04      	itt	eq
 8018234:	1949      	addeq	r1, r1, r5
 8018236:	6021      	streq	r1, [r4, #0]
 8018238:	6054      	str	r4, [r2, #4]
 801823a:	e7c7      	b.n	80181cc <_free_r+0x28>
 801823c:	b003      	add	sp, #12
 801823e:	bd30      	pop	{r4, r5, pc}
 8018240:	20008664 	.word	0x20008664

08018244 <_malloc_r>:
 8018244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018246:	1ccd      	adds	r5, r1, #3
 8018248:	f025 0503 	bic.w	r5, r5, #3
 801824c:	3508      	adds	r5, #8
 801824e:	2d0c      	cmp	r5, #12
 8018250:	bf38      	it	cc
 8018252:	250c      	movcc	r5, #12
 8018254:	2d00      	cmp	r5, #0
 8018256:	4606      	mov	r6, r0
 8018258:	db01      	blt.n	801825e <_malloc_r+0x1a>
 801825a:	42a9      	cmp	r1, r5
 801825c:	d903      	bls.n	8018266 <_malloc_r+0x22>
 801825e:	230c      	movs	r3, #12
 8018260:	6033      	str	r3, [r6, #0]
 8018262:	2000      	movs	r0, #0
 8018264:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018266:	f001 ff11 	bl	801a08c <__malloc_lock>
 801826a:	4921      	ldr	r1, [pc, #132]	; (80182f0 <_malloc_r+0xac>)
 801826c:	680a      	ldr	r2, [r1, #0]
 801826e:	4614      	mov	r4, r2
 8018270:	b99c      	cbnz	r4, 801829a <_malloc_r+0x56>
 8018272:	4f20      	ldr	r7, [pc, #128]	; (80182f4 <_malloc_r+0xb0>)
 8018274:	683b      	ldr	r3, [r7, #0]
 8018276:	b923      	cbnz	r3, 8018282 <_malloc_r+0x3e>
 8018278:	4621      	mov	r1, r4
 801827a:	4630      	mov	r0, r6
 801827c:	f000 fd4a 	bl	8018d14 <_sbrk_r>
 8018280:	6038      	str	r0, [r7, #0]
 8018282:	4629      	mov	r1, r5
 8018284:	4630      	mov	r0, r6
 8018286:	f000 fd45 	bl	8018d14 <_sbrk_r>
 801828a:	1c43      	adds	r3, r0, #1
 801828c:	d123      	bne.n	80182d6 <_malloc_r+0x92>
 801828e:	230c      	movs	r3, #12
 8018290:	6033      	str	r3, [r6, #0]
 8018292:	4630      	mov	r0, r6
 8018294:	f001 ff00 	bl	801a098 <__malloc_unlock>
 8018298:	e7e3      	b.n	8018262 <_malloc_r+0x1e>
 801829a:	6823      	ldr	r3, [r4, #0]
 801829c:	1b5b      	subs	r3, r3, r5
 801829e:	d417      	bmi.n	80182d0 <_malloc_r+0x8c>
 80182a0:	2b0b      	cmp	r3, #11
 80182a2:	d903      	bls.n	80182ac <_malloc_r+0x68>
 80182a4:	6023      	str	r3, [r4, #0]
 80182a6:	441c      	add	r4, r3
 80182a8:	6025      	str	r5, [r4, #0]
 80182aa:	e004      	b.n	80182b6 <_malloc_r+0x72>
 80182ac:	6863      	ldr	r3, [r4, #4]
 80182ae:	42a2      	cmp	r2, r4
 80182b0:	bf0c      	ite	eq
 80182b2:	600b      	streq	r3, [r1, #0]
 80182b4:	6053      	strne	r3, [r2, #4]
 80182b6:	4630      	mov	r0, r6
 80182b8:	f001 feee 	bl	801a098 <__malloc_unlock>
 80182bc:	f104 000b 	add.w	r0, r4, #11
 80182c0:	1d23      	adds	r3, r4, #4
 80182c2:	f020 0007 	bic.w	r0, r0, #7
 80182c6:	1ac2      	subs	r2, r0, r3
 80182c8:	d0cc      	beq.n	8018264 <_malloc_r+0x20>
 80182ca:	1a1b      	subs	r3, r3, r0
 80182cc:	50a3      	str	r3, [r4, r2]
 80182ce:	e7c9      	b.n	8018264 <_malloc_r+0x20>
 80182d0:	4622      	mov	r2, r4
 80182d2:	6864      	ldr	r4, [r4, #4]
 80182d4:	e7cc      	b.n	8018270 <_malloc_r+0x2c>
 80182d6:	1cc4      	adds	r4, r0, #3
 80182d8:	f024 0403 	bic.w	r4, r4, #3
 80182dc:	42a0      	cmp	r0, r4
 80182de:	d0e3      	beq.n	80182a8 <_malloc_r+0x64>
 80182e0:	1a21      	subs	r1, r4, r0
 80182e2:	4630      	mov	r0, r6
 80182e4:	f000 fd16 	bl	8018d14 <_sbrk_r>
 80182e8:	3001      	adds	r0, #1
 80182ea:	d1dd      	bne.n	80182a8 <_malloc_r+0x64>
 80182ec:	e7cf      	b.n	801828e <_malloc_r+0x4a>
 80182ee:	bf00      	nop
 80182f0:	20008664 	.word	0x20008664
 80182f4:	20008668 	.word	0x20008668

080182f8 <__cvt>:
 80182f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80182fc:	ec55 4b10 	vmov	r4, r5, d0
 8018300:	2d00      	cmp	r5, #0
 8018302:	460e      	mov	r6, r1
 8018304:	4619      	mov	r1, r3
 8018306:	462b      	mov	r3, r5
 8018308:	bfbb      	ittet	lt
 801830a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801830e:	461d      	movlt	r5, r3
 8018310:	2300      	movge	r3, #0
 8018312:	232d      	movlt	r3, #45	; 0x2d
 8018314:	700b      	strb	r3, [r1, #0]
 8018316:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018318:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801831c:	4691      	mov	r9, r2
 801831e:	f023 0820 	bic.w	r8, r3, #32
 8018322:	bfbc      	itt	lt
 8018324:	4622      	movlt	r2, r4
 8018326:	4614      	movlt	r4, r2
 8018328:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801832c:	d005      	beq.n	801833a <__cvt+0x42>
 801832e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8018332:	d100      	bne.n	8018336 <__cvt+0x3e>
 8018334:	3601      	adds	r6, #1
 8018336:	2102      	movs	r1, #2
 8018338:	e000      	b.n	801833c <__cvt+0x44>
 801833a:	2103      	movs	r1, #3
 801833c:	ab03      	add	r3, sp, #12
 801833e:	9301      	str	r3, [sp, #4]
 8018340:	ab02      	add	r3, sp, #8
 8018342:	9300      	str	r3, [sp, #0]
 8018344:	ec45 4b10 	vmov	d0, r4, r5
 8018348:	4653      	mov	r3, sl
 801834a:	4632      	mov	r2, r6
 801834c:	f000 fe7c 	bl	8019048 <_dtoa_r>
 8018350:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8018354:	4607      	mov	r7, r0
 8018356:	d102      	bne.n	801835e <__cvt+0x66>
 8018358:	f019 0f01 	tst.w	r9, #1
 801835c:	d022      	beq.n	80183a4 <__cvt+0xac>
 801835e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8018362:	eb07 0906 	add.w	r9, r7, r6
 8018366:	d110      	bne.n	801838a <__cvt+0x92>
 8018368:	783b      	ldrb	r3, [r7, #0]
 801836a:	2b30      	cmp	r3, #48	; 0x30
 801836c:	d10a      	bne.n	8018384 <__cvt+0x8c>
 801836e:	2200      	movs	r2, #0
 8018370:	2300      	movs	r3, #0
 8018372:	4620      	mov	r0, r4
 8018374:	4629      	mov	r1, r5
 8018376:	f7e8 fbc7 	bl	8000b08 <__aeabi_dcmpeq>
 801837a:	b918      	cbnz	r0, 8018384 <__cvt+0x8c>
 801837c:	f1c6 0601 	rsb	r6, r6, #1
 8018380:	f8ca 6000 	str.w	r6, [sl]
 8018384:	f8da 3000 	ldr.w	r3, [sl]
 8018388:	4499      	add	r9, r3
 801838a:	2200      	movs	r2, #0
 801838c:	2300      	movs	r3, #0
 801838e:	4620      	mov	r0, r4
 8018390:	4629      	mov	r1, r5
 8018392:	f7e8 fbb9 	bl	8000b08 <__aeabi_dcmpeq>
 8018396:	b108      	cbz	r0, 801839c <__cvt+0xa4>
 8018398:	f8cd 900c 	str.w	r9, [sp, #12]
 801839c:	2230      	movs	r2, #48	; 0x30
 801839e:	9b03      	ldr	r3, [sp, #12]
 80183a0:	454b      	cmp	r3, r9
 80183a2:	d307      	bcc.n	80183b4 <__cvt+0xbc>
 80183a4:	9b03      	ldr	r3, [sp, #12]
 80183a6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80183a8:	1bdb      	subs	r3, r3, r7
 80183aa:	4638      	mov	r0, r7
 80183ac:	6013      	str	r3, [r2, #0]
 80183ae:	b004      	add	sp, #16
 80183b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80183b4:	1c59      	adds	r1, r3, #1
 80183b6:	9103      	str	r1, [sp, #12]
 80183b8:	701a      	strb	r2, [r3, #0]
 80183ba:	e7f0      	b.n	801839e <__cvt+0xa6>

080183bc <__exponent>:
 80183bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80183be:	4603      	mov	r3, r0
 80183c0:	2900      	cmp	r1, #0
 80183c2:	bfb8      	it	lt
 80183c4:	4249      	neglt	r1, r1
 80183c6:	f803 2b02 	strb.w	r2, [r3], #2
 80183ca:	bfb4      	ite	lt
 80183cc:	222d      	movlt	r2, #45	; 0x2d
 80183ce:	222b      	movge	r2, #43	; 0x2b
 80183d0:	2909      	cmp	r1, #9
 80183d2:	7042      	strb	r2, [r0, #1]
 80183d4:	dd2a      	ble.n	801842c <__exponent+0x70>
 80183d6:	f10d 0407 	add.w	r4, sp, #7
 80183da:	46a4      	mov	ip, r4
 80183dc:	270a      	movs	r7, #10
 80183de:	46a6      	mov	lr, r4
 80183e0:	460a      	mov	r2, r1
 80183e2:	fb91 f6f7 	sdiv	r6, r1, r7
 80183e6:	fb07 1516 	mls	r5, r7, r6, r1
 80183ea:	3530      	adds	r5, #48	; 0x30
 80183ec:	2a63      	cmp	r2, #99	; 0x63
 80183ee:	f104 34ff 	add.w	r4, r4, #4294967295
 80183f2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80183f6:	4631      	mov	r1, r6
 80183f8:	dcf1      	bgt.n	80183de <__exponent+0x22>
 80183fa:	3130      	adds	r1, #48	; 0x30
 80183fc:	f1ae 0502 	sub.w	r5, lr, #2
 8018400:	f804 1c01 	strb.w	r1, [r4, #-1]
 8018404:	1c44      	adds	r4, r0, #1
 8018406:	4629      	mov	r1, r5
 8018408:	4561      	cmp	r1, ip
 801840a:	d30a      	bcc.n	8018422 <__exponent+0x66>
 801840c:	f10d 0209 	add.w	r2, sp, #9
 8018410:	eba2 020e 	sub.w	r2, r2, lr
 8018414:	4565      	cmp	r5, ip
 8018416:	bf88      	it	hi
 8018418:	2200      	movhi	r2, #0
 801841a:	4413      	add	r3, r2
 801841c:	1a18      	subs	r0, r3, r0
 801841e:	b003      	add	sp, #12
 8018420:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018422:	f811 2b01 	ldrb.w	r2, [r1], #1
 8018426:	f804 2f01 	strb.w	r2, [r4, #1]!
 801842a:	e7ed      	b.n	8018408 <__exponent+0x4c>
 801842c:	2330      	movs	r3, #48	; 0x30
 801842e:	3130      	adds	r1, #48	; 0x30
 8018430:	7083      	strb	r3, [r0, #2]
 8018432:	70c1      	strb	r1, [r0, #3]
 8018434:	1d03      	adds	r3, r0, #4
 8018436:	e7f1      	b.n	801841c <__exponent+0x60>

08018438 <_printf_float>:
 8018438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801843c:	ed2d 8b02 	vpush	{d8}
 8018440:	b08d      	sub	sp, #52	; 0x34
 8018442:	460c      	mov	r4, r1
 8018444:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8018448:	4616      	mov	r6, r2
 801844a:	461f      	mov	r7, r3
 801844c:	4605      	mov	r5, r0
 801844e:	f001 fdb1 	bl	8019fb4 <_localeconv_r>
 8018452:	f8d0 a000 	ldr.w	sl, [r0]
 8018456:	4650      	mov	r0, sl
 8018458:	f7e7 feda 	bl	8000210 <strlen>
 801845c:	2300      	movs	r3, #0
 801845e:	930a      	str	r3, [sp, #40]	; 0x28
 8018460:	6823      	ldr	r3, [r4, #0]
 8018462:	9305      	str	r3, [sp, #20]
 8018464:	f8d8 3000 	ldr.w	r3, [r8]
 8018468:	f894 b018 	ldrb.w	fp, [r4, #24]
 801846c:	3307      	adds	r3, #7
 801846e:	f023 0307 	bic.w	r3, r3, #7
 8018472:	f103 0208 	add.w	r2, r3, #8
 8018476:	f8c8 2000 	str.w	r2, [r8]
 801847a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801847e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8018482:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8018486:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801848a:	9307      	str	r3, [sp, #28]
 801848c:	f8cd 8018 	str.w	r8, [sp, #24]
 8018490:	ee08 0a10 	vmov	s16, r0
 8018494:	4b9f      	ldr	r3, [pc, #636]	; (8018714 <_printf_float+0x2dc>)
 8018496:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801849a:	f04f 32ff 	mov.w	r2, #4294967295
 801849e:	f7e8 fb65 	bl	8000b6c <__aeabi_dcmpun>
 80184a2:	bb88      	cbnz	r0, 8018508 <_printf_float+0xd0>
 80184a4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80184a8:	4b9a      	ldr	r3, [pc, #616]	; (8018714 <_printf_float+0x2dc>)
 80184aa:	f04f 32ff 	mov.w	r2, #4294967295
 80184ae:	f7e8 fb3f 	bl	8000b30 <__aeabi_dcmple>
 80184b2:	bb48      	cbnz	r0, 8018508 <_printf_float+0xd0>
 80184b4:	2200      	movs	r2, #0
 80184b6:	2300      	movs	r3, #0
 80184b8:	4640      	mov	r0, r8
 80184ba:	4649      	mov	r1, r9
 80184bc:	f7e8 fb2e 	bl	8000b1c <__aeabi_dcmplt>
 80184c0:	b110      	cbz	r0, 80184c8 <_printf_float+0x90>
 80184c2:	232d      	movs	r3, #45	; 0x2d
 80184c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80184c8:	4b93      	ldr	r3, [pc, #588]	; (8018718 <_printf_float+0x2e0>)
 80184ca:	4894      	ldr	r0, [pc, #592]	; (801871c <_printf_float+0x2e4>)
 80184cc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80184d0:	bf94      	ite	ls
 80184d2:	4698      	movls	r8, r3
 80184d4:	4680      	movhi	r8, r0
 80184d6:	2303      	movs	r3, #3
 80184d8:	6123      	str	r3, [r4, #16]
 80184da:	9b05      	ldr	r3, [sp, #20]
 80184dc:	f023 0204 	bic.w	r2, r3, #4
 80184e0:	6022      	str	r2, [r4, #0]
 80184e2:	f04f 0900 	mov.w	r9, #0
 80184e6:	9700      	str	r7, [sp, #0]
 80184e8:	4633      	mov	r3, r6
 80184ea:	aa0b      	add	r2, sp, #44	; 0x2c
 80184ec:	4621      	mov	r1, r4
 80184ee:	4628      	mov	r0, r5
 80184f0:	f000 f9d8 	bl	80188a4 <_printf_common>
 80184f4:	3001      	adds	r0, #1
 80184f6:	f040 8090 	bne.w	801861a <_printf_float+0x1e2>
 80184fa:	f04f 30ff 	mov.w	r0, #4294967295
 80184fe:	b00d      	add	sp, #52	; 0x34
 8018500:	ecbd 8b02 	vpop	{d8}
 8018504:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018508:	4642      	mov	r2, r8
 801850a:	464b      	mov	r3, r9
 801850c:	4640      	mov	r0, r8
 801850e:	4649      	mov	r1, r9
 8018510:	f7e8 fb2c 	bl	8000b6c <__aeabi_dcmpun>
 8018514:	b140      	cbz	r0, 8018528 <_printf_float+0xf0>
 8018516:	464b      	mov	r3, r9
 8018518:	2b00      	cmp	r3, #0
 801851a:	bfbc      	itt	lt
 801851c:	232d      	movlt	r3, #45	; 0x2d
 801851e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8018522:	487f      	ldr	r0, [pc, #508]	; (8018720 <_printf_float+0x2e8>)
 8018524:	4b7f      	ldr	r3, [pc, #508]	; (8018724 <_printf_float+0x2ec>)
 8018526:	e7d1      	b.n	80184cc <_printf_float+0x94>
 8018528:	6863      	ldr	r3, [r4, #4]
 801852a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801852e:	9206      	str	r2, [sp, #24]
 8018530:	1c5a      	adds	r2, r3, #1
 8018532:	d13f      	bne.n	80185b4 <_printf_float+0x17c>
 8018534:	2306      	movs	r3, #6
 8018536:	6063      	str	r3, [r4, #4]
 8018538:	9b05      	ldr	r3, [sp, #20]
 801853a:	6861      	ldr	r1, [r4, #4]
 801853c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8018540:	2300      	movs	r3, #0
 8018542:	9303      	str	r3, [sp, #12]
 8018544:	ab0a      	add	r3, sp, #40	; 0x28
 8018546:	e9cd b301 	strd	fp, r3, [sp, #4]
 801854a:	ab09      	add	r3, sp, #36	; 0x24
 801854c:	ec49 8b10 	vmov	d0, r8, r9
 8018550:	9300      	str	r3, [sp, #0]
 8018552:	6022      	str	r2, [r4, #0]
 8018554:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8018558:	4628      	mov	r0, r5
 801855a:	f7ff fecd 	bl	80182f8 <__cvt>
 801855e:	9b06      	ldr	r3, [sp, #24]
 8018560:	9909      	ldr	r1, [sp, #36]	; 0x24
 8018562:	2b47      	cmp	r3, #71	; 0x47
 8018564:	4680      	mov	r8, r0
 8018566:	d108      	bne.n	801857a <_printf_float+0x142>
 8018568:	1cc8      	adds	r0, r1, #3
 801856a:	db02      	blt.n	8018572 <_printf_float+0x13a>
 801856c:	6863      	ldr	r3, [r4, #4]
 801856e:	4299      	cmp	r1, r3
 8018570:	dd41      	ble.n	80185f6 <_printf_float+0x1be>
 8018572:	f1ab 0b02 	sub.w	fp, fp, #2
 8018576:	fa5f fb8b 	uxtb.w	fp, fp
 801857a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801857e:	d820      	bhi.n	80185c2 <_printf_float+0x18a>
 8018580:	3901      	subs	r1, #1
 8018582:	465a      	mov	r2, fp
 8018584:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8018588:	9109      	str	r1, [sp, #36]	; 0x24
 801858a:	f7ff ff17 	bl	80183bc <__exponent>
 801858e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018590:	1813      	adds	r3, r2, r0
 8018592:	2a01      	cmp	r2, #1
 8018594:	4681      	mov	r9, r0
 8018596:	6123      	str	r3, [r4, #16]
 8018598:	dc02      	bgt.n	80185a0 <_printf_float+0x168>
 801859a:	6822      	ldr	r2, [r4, #0]
 801859c:	07d2      	lsls	r2, r2, #31
 801859e:	d501      	bpl.n	80185a4 <_printf_float+0x16c>
 80185a0:	3301      	adds	r3, #1
 80185a2:	6123      	str	r3, [r4, #16]
 80185a4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80185a8:	2b00      	cmp	r3, #0
 80185aa:	d09c      	beq.n	80184e6 <_printf_float+0xae>
 80185ac:	232d      	movs	r3, #45	; 0x2d
 80185ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80185b2:	e798      	b.n	80184e6 <_printf_float+0xae>
 80185b4:	9a06      	ldr	r2, [sp, #24]
 80185b6:	2a47      	cmp	r2, #71	; 0x47
 80185b8:	d1be      	bne.n	8018538 <_printf_float+0x100>
 80185ba:	2b00      	cmp	r3, #0
 80185bc:	d1bc      	bne.n	8018538 <_printf_float+0x100>
 80185be:	2301      	movs	r3, #1
 80185c0:	e7b9      	b.n	8018536 <_printf_float+0xfe>
 80185c2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80185c6:	d118      	bne.n	80185fa <_printf_float+0x1c2>
 80185c8:	2900      	cmp	r1, #0
 80185ca:	6863      	ldr	r3, [r4, #4]
 80185cc:	dd0b      	ble.n	80185e6 <_printf_float+0x1ae>
 80185ce:	6121      	str	r1, [r4, #16]
 80185d0:	b913      	cbnz	r3, 80185d8 <_printf_float+0x1a0>
 80185d2:	6822      	ldr	r2, [r4, #0]
 80185d4:	07d0      	lsls	r0, r2, #31
 80185d6:	d502      	bpl.n	80185de <_printf_float+0x1a6>
 80185d8:	3301      	adds	r3, #1
 80185da:	440b      	add	r3, r1
 80185dc:	6123      	str	r3, [r4, #16]
 80185de:	65a1      	str	r1, [r4, #88]	; 0x58
 80185e0:	f04f 0900 	mov.w	r9, #0
 80185e4:	e7de      	b.n	80185a4 <_printf_float+0x16c>
 80185e6:	b913      	cbnz	r3, 80185ee <_printf_float+0x1b6>
 80185e8:	6822      	ldr	r2, [r4, #0]
 80185ea:	07d2      	lsls	r2, r2, #31
 80185ec:	d501      	bpl.n	80185f2 <_printf_float+0x1ba>
 80185ee:	3302      	adds	r3, #2
 80185f0:	e7f4      	b.n	80185dc <_printf_float+0x1a4>
 80185f2:	2301      	movs	r3, #1
 80185f4:	e7f2      	b.n	80185dc <_printf_float+0x1a4>
 80185f6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80185fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80185fc:	4299      	cmp	r1, r3
 80185fe:	db05      	blt.n	801860c <_printf_float+0x1d4>
 8018600:	6823      	ldr	r3, [r4, #0]
 8018602:	6121      	str	r1, [r4, #16]
 8018604:	07d8      	lsls	r0, r3, #31
 8018606:	d5ea      	bpl.n	80185de <_printf_float+0x1a6>
 8018608:	1c4b      	adds	r3, r1, #1
 801860a:	e7e7      	b.n	80185dc <_printf_float+0x1a4>
 801860c:	2900      	cmp	r1, #0
 801860e:	bfd4      	ite	le
 8018610:	f1c1 0202 	rsble	r2, r1, #2
 8018614:	2201      	movgt	r2, #1
 8018616:	4413      	add	r3, r2
 8018618:	e7e0      	b.n	80185dc <_printf_float+0x1a4>
 801861a:	6823      	ldr	r3, [r4, #0]
 801861c:	055a      	lsls	r2, r3, #21
 801861e:	d407      	bmi.n	8018630 <_printf_float+0x1f8>
 8018620:	6923      	ldr	r3, [r4, #16]
 8018622:	4642      	mov	r2, r8
 8018624:	4631      	mov	r1, r6
 8018626:	4628      	mov	r0, r5
 8018628:	47b8      	blx	r7
 801862a:	3001      	adds	r0, #1
 801862c:	d12c      	bne.n	8018688 <_printf_float+0x250>
 801862e:	e764      	b.n	80184fa <_printf_float+0xc2>
 8018630:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8018634:	f240 80e0 	bls.w	80187f8 <_printf_float+0x3c0>
 8018638:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801863c:	2200      	movs	r2, #0
 801863e:	2300      	movs	r3, #0
 8018640:	f7e8 fa62 	bl	8000b08 <__aeabi_dcmpeq>
 8018644:	2800      	cmp	r0, #0
 8018646:	d034      	beq.n	80186b2 <_printf_float+0x27a>
 8018648:	4a37      	ldr	r2, [pc, #220]	; (8018728 <_printf_float+0x2f0>)
 801864a:	2301      	movs	r3, #1
 801864c:	4631      	mov	r1, r6
 801864e:	4628      	mov	r0, r5
 8018650:	47b8      	blx	r7
 8018652:	3001      	adds	r0, #1
 8018654:	f43f af51 	beq.w	80184fa <_printf_float+0xc2>
 8018658:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801865c:	429a      	cmp	r2, r3
 801865e:	db02      	blt.n	8018666 <_printf_float+0x22e>
 8018660:	6823      	ldr	r3, [r4, #0]
 8018662:	07d8      	lsls	r0, r3, #31
 8018664:	d510      	bpl.n	8018688 <_printf_float+0x250>
 8018666:	ee18 3a10 	vmov	r3, s16
 801866a:	4652      	mov	r2, sl
 801866c:	4631      	mov	r1, r6
 801866e:	4628      	mov	r0, r5
 8018670:	47b8      	blx	r7
 8018672:	3001      	adds	r0, #1
 8018674:	f43f af41 	beq.w	80184fa <_printf_float+0xc2>
 8018678:	f04f 0800 	mov.w	r8, #0
 801867c:	f104 091a 	add.w	r9, r4, #26
 8018680:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018682:	3b01      	subs	r3, #1
 8018684:	4543      	cmp	r3, r8
 8018686:	dc09      	bgt.n	801869c <_printf_float+0x264>
 8018688:	6823      	ldr	r3, [r4, #0]
 801868a:	079b      	lsls	r3, r3, #30
 801868c:	f100 8105 	bmi.w	801889a <_printf_float+0x462>
 8018690:	68e0      	ldr	r0, [r4, #12]
 8018692:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018694:	4298      	cmp	r0, r3
 8018696:	bfb8      	it	lt
 8018698:	4618      	movlt	r0, r3
 801869a:	e730      	b.n	80184fe <_printf_float+0xc6>
 801869c:	2301      	movs	r3, #1
 801869e:	464a      	mov	r2, r9
 80186a0:	4631      	mov	r1, r6
 80186a2:	4628      	mov	r0, r5
 80186a4:	47b8      	blx	r7
 80186a6:	3001      	adds	r0, #1
 80186a8:	f43f af27 	beq.w	80184fa <_printf_float+0xc2>
 80186ac:	f108 0801 	add.w	r8, r8, #1
 80186b0:	e7e6      	b.n	8018680 <_printf_float+0x248>
 80186b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80186b4:	2b00      	cmp	r3, #0
 80186b6:	dc39      	bgt.n	801872c <_printf_float+0x2f4>
 80186b8:	4a1b      	ldr	r2, [pc, #108]	; (8018728 <_printf_float+0x2f0>)
 80186ba:	2301      	movs	r3, #1
 80186bc:	4631      	mov	r1, r6
 80186be:	4628      	mov	r0, r5
 80186c0:	47b8      	blx	r7
 80186c2:	3001      	adds	r0, #1
 80186c4:	f43f af19 	beq.w	80184fa <_printf_float+0xc2>
 80186c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80186cc:	4313      	orrs	r3, r2
 80186ce:	d102      	bne.n	80186d6 <_printf_float+0x29e>
 80186d0:	6823      	ldr	r3, [r4, #0]
 80186d2:	07d9      	lsls	r1, r3, #31
 80186d4:	d5d8      	bpl.n	8018688 <_printf_float+0x250>
 80186d6:	ee18 3a10 	vmov	r3, s16
 80186da:	4652      	mov	r2, sl
 80186dc:	4631      	mov	r1, r6
 80186de:	4628      	mov	r0, r5
 80186e0:	47b8      	blx	r7
 80186e2:	3001      	adds	r0, #1
 80186e4:	f43f af09 	beq.w	80184fa <_printf_float+0xc2>
 80186e8:	f04f 0900 	mov.w	r9, #0
 80186ec:	f104 0a1a 	add.w	sl, r4, #26
 80186f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80186f2:	425b      	negs	r3, r3
 80186f4:	454b      	cmp	r3, r9
 80186f6:	dc01      	bgt.n	80186fc <_printf_float+0x2c4>
 80186f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80186fa:	e792      	b.n	8018622 <_printf_float+0x1ea>
 80186fc:	2301      	movs	r3, #1
 80186fe:	4652      	mov	r2, sl
 8018700:	4631      	mov	r1, r6
 8018702:	4628      	mov	r0, r5
 8018704:	47b8      	blx	r7
 8018706:	3001      	adds	r0, #1
 8018708:	f43f aef7 	beq.w	80184fa <_printf_float+0xc2>
 801870c:	f109 0901 	add.w	r9, r9, #1
 8018710:	e7ee      	b.n	80186f0 <_printf_float+0x2b8>
 8018712:	bf00      	nop
 8018714:	7fefffff 	.word	0x7fefffff
 8018718:	0801d748 	.word	0x0801d748
 801871c:	0801d74c 	.word	0x0801d74c
 8018720:	0801d754 	.word	0x0801d754
 8018724:	0801d750 	.word	0x0801d750
 8018728:	0801d758 	.word	0x0801d758
 801872c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801872e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8018730:	429a      	cmp	r2, r3
 8018732:	bfa8      	it	ge
 8018734:	461a      	movge	r2, r3
 8018736:	2a00      	cmp	r2, #0
 8018738:	4691      	mov	r9, r2
 801873a:	dc37      	bgt.n	80187ac <_printf_float+0x374>
 801873c:	f04f 0b00 	mov.w	fp, #0
 8018740:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8018744:	f104 021a 	add.w	r2, r4, #26
 8018748:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801874a:	9305      	str	r3, [sp, #20]
 801874c:	eba3 0309 	sub.w	r3, r3, r9
 8018750:	455b      	cmp	r3, fp
 8018752:	dc33      	bgt.n	80187bc <_printf_float+0x384>
 8018754:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8018758:	429a      	cmp	r2, r3
 801875a:	db3b      	blt.n	80187d4 <_printf_float+0x39c>
 801875c:	6823      	ldr	r3, [r4, #0]
 801875e:	07da      	lsls	r2, r3, #31
 8018760:	d438      	bmi.n	80187d4 <_printf_float+0x39c>
 8018762:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018764:	9b05      	ldr	r3, [sp, #20]
 8018766:	9909      	ldr	r1, [sp, #36]	; 0x24
 8018768:	1ad3      	subs	r3, r2, r3
 801876a:	eba2 0901 	sub.w	r9, r2, r1
 801876e:	4599      	cmp	r9, r3
 8018770:	bfa8      	it	ge
 8018772:	4699      	movge	r9, r3
 8018774:	f1b9 0f00 	cmp.w	r9, #0
 8018778:	dc35      	bgt.n	80187e6 <_printf_float+0x3ae>
 801877a:	f04f 0800 	mov.w	r8, #0
 801877e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8018782:	f104 0a1a 	add.w	sl, r4, #26
 8018786:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801878a:	1a9b      	subs	r3, r3, r2
 801878c:	eba3 0309 	sub.w	r3, r3, r9
 8018790:	4543      	cmp	r3, r8
 8018792:	f77f af79 	ble.w	8018688 <_printf_float+0x250>
 8018796:	2301      	movs	r3, #1
 8018798:	4652      	mov	r2, sl
 801879a:	4631      	mov	r1, r6
 801879c:	4628      	mov	r0, r5
 801879e:	47b8      	blx	r7
 80187a0:	3001      	adds	r0, #1
 80187a2:	f43f aeaa 	beq.w	80184fa <_printf_float+0xc2>
 80187a6:	f108 0801 	add.w	r8, r8, #1
 80187aa:	e7ec      	b.n	8018786 <_printf_float+0x34e>
 80187ac:	4613      	mov	r3, r2
 80187ae:	4631      	mov	r1, r6
 80187b0:	4642      	mov	r2, r8
 80187b2:	4628      	mov	r0, r5
 80187b4:	47b8      	blx	r7
 80187b6:	3001      	adds	r0, #1
 80187b8:	d1c0      	bne.n	801873c <_printf_float+0x304>
 80187ba:	e69e      	b.n	80184fa <_printf_float+0xc2>
 80187bc:	2301      	movs	r3, #1
 80187be:	4631      	mov	r1, r6
 80187c0:	4628      	mov	r0, r5
 80187c2:	9205      	str	r2, [sp, #20]
 80187c4:	47b8      	blx	r7
 80187c6:	3001      	adds	r0, #1
 80187c8:	f43f ae97 	beq.w	80184fa <_printf_float+0xc2>
 80187cc:	9a05      	ldr	r2, [sp, #20]
 80187ce:	f10b 0b01 	add.w	fp, fp, #1
 80187d2:	e7b9      	b.n	8018748 <_printf_float+0x310>
 80187d4:	ee18 3a10 	vmov	r3, s16
 80187d8:	4652      	mov	r2, sl
 80187da:	4631      	mov	r1, r6
 80187dc:	4628      	mov	r0, r5
 80187de:	47b8      	blx	r7
 80187e0:	3001      	adds	r0, #1
 80187e2:	d1be      	bne.n	8018762 <_printf_float+0x32a>
 80187e4:	e689      	b.n	80184fa <_printf_float+0xc2>
 80187e6:	9a05      	ldr	r2, [sp, #20]
 80187e8:	464b      	mov	r3, r9
 80187ea:	4442      	add	r2, r8
 80187ec:	4631      	mov	r1, r6
 80187ee:	4628      	mov	r0, r5
 80187f0:	47b8      	blx	r7
 80187f2:	3001      	adds	r0, #1
 80187f4:	d1c1      	bne.n	801877a <_printf_float+0x342>
 80187f6:	e680      	b.n	80184fa <_printf_float+0xc2>
 80187f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80187fa:	2a01      	cmp	r2, #1
 80187fc:	dc01      	bgt.n	8018802 <_printf_float+0x3ca>
 80187fe:	07db      	lsls	r3, r3, #31
 8018800:	d538      	bpl.n	8018874 <_printf_float+0x43c>
 8018802:	2301      	movs	r3, #1
 8018804:	4642      	mov	r2, r8
 8018806:	4631      	mov	r1, r6
 8018808:	4628      	mov	r0, r5
 801880a:	47b8      	blx	r7
 801880c:	3001      	adds	r0, #1
 801880e:	f43f ae74 	beq.w	80184fa <_printf_float+0xc2>
 8018812:	ee18 3a10 	vmov	r3, s16
 8018816:	4652      	mov	r2, sl
 8018818:	4631      	mov	r1, r6
 801881a:	4628      	mov	r0, r5
 801881c:	47b8      	blx	r7
 801881e:	3001      	adds	r0, #1
 8018820:	f43f ae6b 	beq.w	80184fa <_printf_float+0xc2>
 8018824:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8018828:	2200      	movs	r2, #0
 801882a:	2300      	movs	r3, #0
 801882c:	f7e8 f96c 	bl	8000b08 <__aeabi_dcmpeq>
 8018830:	b9d8      	cbnz	r0, 801886a <_printf_float+0x432>
 8018832:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018834:	f108 0201 	add.w	r2, r8, #1
 8018838:	3b01      	subs	r3, #1
 801883a:	4631      	mov	r1, r6
 801883c:	4628      	mov	r0, r5
 801883e:	47b8      	blx	r7
 8018840:	3001      	adds	r0, #1
 8018842:	d10e      	bne.n	8018862 <_printf_float+0x42a>
 8018844:	e659      	b.n	80184fa <_printf_float+0xc2>
 8018846:	2301      	movs	r3, #1
 8018848:	4652      	mov	r2, sl
 801884a:	4631      	mov	r1, r6
 801884c:	4628      	mov	r0, r5
 801884e:	47b8      	blx	r7
 8018850:	3001      	adds	r0, #1
 8018852:	f43f ae52 	beq.w	80184fa <_printf_float+0xc2>
 8018856:	f108 0801 	add.w	r8, r8, #1
 801885a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801885c:	3b01      	subs	r3, #1
 801885e:	4543      	cmp	r3, r8
 8018860:	dcf1      	bgt.n	8018846 <_printf_float+0x40e>
 8018862:	464b      	mov	r3, r9
 8018864:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8018868:	e6dc      	b.n	8018624 <_printf_float+0x1ec>
 801886a:	f04f 0800 	mov.w	r8, #0
 801886e:	f104 0a1a 	add.w	sl, r4, #26
 8018872:	e7f2      	b.n	801885a <_printf_float+0x422>
 8018874:	2301      	movs	r3, #1
 8018876:	4642      	mov	r2, r8
 8018878:	e7df      	b.n	801883a <_printf_float+0x402>
 801887a:	2301      	movs	r3, #1
 801887c:	464a      	mov	r2, r9
 801887e:	4631      	mov	r1, r6
 8018880:	4628      	mov	r0, r5
 8018882:	47b8      	blx	r7
 8018884:	3001      	adds	r0, #1
 8018886:	f43f ae38 	beq.w	80184fa <_printf_float+0xc2>
 801888a:	f108 0801 	add.w	r8, r8, #1
 801888e:	68e3      	ldr	r3, [r4, #12]
 8018890:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8018892:	1a5b      	subs	r3, r3, r1
 8018894:	4543      	cmp	r3, r8
 8018896:	dcf0      	bgt.n	801887a <_printf_float+0x442>
 8018898:	e6fa      	b.n	8018690 <_printf_float+0x258>
 801889a:	f04f 0800 	mov.w	r8, #0
 801889e:	f104 0919 	add.w	r9, r4, #25
 80188a2:	e7f4      	b.n	801888e <_printf_float+0x456>

080188a4 <_printf_common>:
 80188a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80188a8:	4616      	mov	r6, r2
 80188aa:	4699      	mov	r9, r3
 80188ac:	688a      	ldr	r2, [r1, #8]
 80188ae:	690b      	ldr	r3, [r1, #16]
 80188b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80188b4:	4293      	cmp	r3, r2
 80188b6:	bfb8      	it	lt
 80188b8:	4613      	movlt	r3, r2
 80188ba:	6033      	str	r3, [r6, #0]
 80188bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80188c0:	4607      	mov	r7, r0
 80188c2:	460c      	mov	r4, r1
 80188c4:	b10a      	cbz	r2, 80188ca <_printf_common+0x26>
 80188c6:	3301      	adds	r3, #1
 80188c8:	6033      	str	r3, [r6, #0]
 80188ca:	6823      	ldr	r3, [r4, #0]
 80188cc:	0699      	lsls	r1, r3, #26
 80188ce:	bf42      	ittt	mi
 80188d0:	6833      	ldrmi	r3, [r6, #0]
 80188d2:	3302      	addmi	r3, #2
 80188d4:	6033      	strmi	r3, [r6, #0]
 80188d6:	6825      	ldr	r5, [r4, #0]
 80188d8:	f015 0506 	ands.w	r5, r5, #6
 80188dc:	d106      	bne.n	80188ec <_printf_common+0x48>
 80188de:	f104 0a19 	add.w	sl, r4, #25
 80188e2:	68e3      	ldr	r3, [r4, #12]
 80188e4:	6832      	ldr	r2, [r6, #0]
 80188e6:	1a9b      	subs	r3, r3, r2
 80188e8:	42ab      	cmp	r3, r5
 80188ea:	dc26      	bgt.n	801893a <_printf_common+0x96>
 80188ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80188f0:	1e13      	subs	r3, r2, #0
 80188f2:	6822      	ldr	r2, [r4, #0]
 80188f4:	bf18      	it	ne
 80188f6:	2301      	movne	r3, #1
 80188f8:	0692      	lsls	r2, r2, #26
 80188fa:	d42b      	bmi.n	8018954 <_printf_common+0xb0>
 80188fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8018900:	4649      	mov	r1, r9
 8018902:	4638      	mov	r0, r7
 8018904:	47c0      	blx	r8
 8018906:	3001      	adds	r0, #1
 8018908:	d01e      	beq.n	8018948 <_printf_common+0xa4>
 801890a:	6823      	ldr	r3, [r4, #0]
 801890c:	68e5      	ldr	r5, [r4, #12]
 801890e:	6832      	ldr	r2, [r6, #0]
 8018910:	f003 0306 	and.w	r3, r3, #6
 8018914:	2b04      	cmp	r3, #4
 8018916:	bf08      	it	eq
 8018918:	1aad      	subeq	r5, r5, r2
 801891a:	68a3      	ldr	r3, [r4, #8]
 801891c:	6922      	ldr	r2, [r4, #16]
 801891e:	bf0c      	ite	eq
 8018920:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8018924:	2500      	movne	r5, #0
 8018926:	4293      	cmp	r3, r2
 8018928:	bfc4      	itt	gt
 801892a:	1a9b      	subgt	r3, r3, r2
 801892c:	18ed      	addgt	r5, r5, r3
 801892e:	2600      	movs	r6, #0
 8018930:	341a      	adds	r4, #26
 8018932:	42b5      	cmp	r5, r6
 8018934:	d11a      	bne.n	801896c <_printf_common+0xc8>
 8018936:	2000      	movs	r0, #0
 8018938:	e008      	b.n	801894c <_printf_common+0xa8>
 801893a:	2301      	movs	r3, #1
 801893c:	4652      	mov	r2, sl
 801893e:	4649      	mov	r1, r9
 8018940:	4638      	mov	r0, r7
 8018942:	47c0      	blx	r8
 8018944:	3001      	adds	r0, #1
 8018946:	d103      	bne.n	8018950 <_printf_common+0xac>
 8018948:	f04f 30ff 	mov.w	r0, #4294967295
 801894c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018950:	3501      	adds	r5, #1
 8018952:	e7c6      	b.n	80188e2 <_printf_common+0x3e>
 8018954:	18e1      	adds	r1, r4, r3
 8018956:	1c5a      	adds	r2, r3, #1
 8018958:	2030      	movs	r0, #48	; 0x30
 801895a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801895e:	4422      	add	r2, r4
 8018960:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8018964:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8018968:	3302      	adds	r3, #2
 801896a:	e7c7      	b.n	80188fc <_printf_common+0x58>
 801896c:	2301      	movs	r3, #1
 801896e:	4622      	mov	r2, r4
 8018970:	4649      	mov	r1, r9
 8018972:	4638      	mov	r0, r7
 8018974:	47c0      	blx	r8
 8018976:	3001      	adds	r0, #1
 8018978:	d0e6      	beq.n	8018948 <_printf_common+0xa4>
 801897a:	3601      	adds	r6, #1
 801897c:	e7d9      	b.n	8018932 <_printf_common+0x8e>
	...

08018980 <_printf_i>:
 8018980:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8018984:	460c      	mov	r4, r1
 8018986:	4691      	mov	r9, r2
 8018988:	7e27      	ldrb	r7, [r4, #24]
 801898a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801898c:	2f78      	cmp	r7, #120	; 0x78
 801898e:	4680      	mov	r8, r0
 8018990:	469a      	mov	sl, r3
 8018992:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8018996:	d807      	bhi.n	80189a8 <_printf_i+0x28>
 8018998:	2f62      	cmp	r7, #98	; 0x62
 801899a:	d80a      	bhi.n	80189b2 <_printf_i+0x32>
 801899c:	2f00      	cmp	r7, #0
 801899e:	f000 80d8 	beq.w	8018b52 <_printf_i+0x1d2>
 80189a2:	2f58      	cmp	r7, #88	; 0x58
 80189a4:	f000 80a3 	beq.w	8018aee <_printf_i+0x16e>
 80189a8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80189ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80189b0:	e03a      	b.n	8018a28 <_printf_i+0xa8>
 80189b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80189b6:	2b15      	cmp	r3, #21
 80189b8:	d8f6      	bhi.n	80189a8 <_printf_i+0x28>
 80189ba:	a001      	add	r0, pc, #4	; (adr r0, 80189c0 <_printf_i+0x40>)
 80189bc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80189c0:	08018a19 	.word	0x08018a19
 80189c4:	08018a2d 	.word	0x08018a2d
 80189c8:	080189a9 	.word	0x080189a9
 80189cc:	080189a9 	.word	0x080189a9
 80189d0:	080189a9 	.word	0x080189a9
 80189d4:	080189a9 	.word	0x080189a9
 80189d8:	08018a2d 	.word	0x08018a2d
 80189dc:	080189a9 	.word	0x080189a9
 80189e0:	080189a9 	.word	0x080189a9
 80189e4:	080189a9 	.word	0x080189a9
 80189e8:	080189a9 	.word	0x080189a9
 80189ec:	08018b39 	.word	0x08018b39
 80189f0:	08018a5d 	.word	0x08018a5d
 80189f4:	08018b1b 	.word	0x08018b1b
 80189f8:	080189a9 	.word	0x080189a9
 80189fc:	080189a9 	.word	0x080189a9
 8018a00:	08018b5b 	.word	0x08018b5b
 8018a04:	080189a9 	.word	0x080189a9
 8018a08:	08018a5d 	.word	0x08018a5d
 8018a0c:	080189a9 	.word	0x080189a9
 8018a10:	080189a9 	.word	0x080189a9
 8018a14:	08018b23 	.word	0x08018b23
 8018a18:	680b      	ldr	r3, [r1, #0]
 8018a1a:	1d1a      	adds	r2, r3, #4
 8018a1c:	681b      	ldr	r3, [r3, #0]
 8018a1e:	600a      	str	r2, [r1, #0]
 8018a20:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8018a24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8018a28:	2301      	movs	r3, #1
 8018a2a:	e0a3      	b.n	8018b74 <_printf_i+0x1f4>
 8018a2c:	6825      	ldr	r5, [r4, #0]
 8018a2e:	6808      	ldr	r0, [r1, #0]
 8018a30:	062e      	lsls	r6, r5, #24
 8018a32:	f100 0304 	add.w	r3, r0, #4
 8018a36:	d50a      	bpl.n	8018a4e <_printf_i+0xce>
 8018a38:	6805      	ldr	r5, [r0, #0]
 8018a3a:	600b      	str	r3, [r1, #0]
 8018a3c:	2d00      	cmp	r5, #0
 8018a3e:	da03      	bge.n	8018a48 <_printf_i+0xc8>
 8018a40:	232d      	movs	r3, #45	; 0x2d
 8018a42:	426d      	negs	r5, r5
 8018a44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018a48:	485e      	ldr	r0, [pc, #376]	; (8018bc4 <_printf_i+0x244>)
 8018a4a:	230a      	movs	r3, #10
 8018a4c:	e019      	b.n	8018a82 <_printf_i+0x102>
 8018a4e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8018a52:	6805      	ldr	r5, [r0, #0]
 8018a54:	600b      	str	r3, [r1, #0]
 8018a56:	bf18      	it	ne
 8018a58:	b22d      	sxthne	r5, r5
 8018a5a:	e7ef      	b.n	8018a3c <_printf_i+0xbc>
 8018a5c:	680b      	ldr	r3, [r1, #0]
 8018a5e:	6825      	ldr	r5, [r4, #0]
 8018a60:	1d18      	adds	r0, r3, #4
 8018a62:	6008      	str	r0, [r1, #0]
 8018a64:	0628      	lsls	r0, r5, #24
 8018a66:	d501      	bpl.n	8018a6c <_printf_i+0xec>
 8018a68:	681d      	ldr	r5, [r3, #0]
 8018a6a:	e002      	b.n	8018a72 <_printf_i+0xf2>
 8018a6c:	0669      	lsls	r1, r5, #25
 8018a6e:	d5fb      	bpl.n	8018a68 <_printf_i+0xe8>
 8018a70:	881d      	ldrh	r5, [r3, #0]
 8018a72:	4854      	ldr	r0, [pc, #336]	; (8018bc4 <_printf_i+0x244>)
 8018a74:	2f6f      	cmp	r7, #111	; 0x6f
 8018a76:	bf0c      	ite	eq
 8018a78:	2308      	moveq	r3, #8
 8018a7a:	230a      	movne	r3, #10
 8018a7c:	2100      	movs	r1, #0
 8018a7e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8018a82:	6866      	ldr	r6, [r4, #4]
 8018a84:	60a6      	str	r6, [r4, #8]
 8018a86:	2e00      	cmp	r6, #0
 8018a88:	bfa2      	ittt	ge
 8018a8a:	6821      	ldrge	r1, [r4, #0]
 8018a8c:	f021 0104 	bicge.w	r1, r1, #4
 8018a90:	6021      	strge	r1, [r4, #0]
 8018a92:	b90d      	cbnz	r5, 8018a98 <_printf_i+0x118>
 8018a94:	2e00      	cmp	r6, #0
 8018a96:	d04d      	beq.n	8018b34 <_printf_i+0x1b4>
 8018a98:	4616      	mov	r6, r2
 8018a9a:	fbb5 f1f3 	udiv	r1, r5, r3
 8018a9e:	fb03 5711 	mls	r7, r3, r1, r5
 8018aa2:	5dc7      	ldrb	r7, [r0, r7]
 8018aa4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8018aa8:	462f      	mov	r7, r5
 8018aaa:	42bb      	cmp	r3, r7
 8018aac:	460d      	mov	r5, r1
 8018aae:	d9f4      	bls.n	8018a9a <_printf_i+0x11a>
 8018ab0:	2b08      	cmp	r3, #8
 8018ab2:	d10b      	bne.n	8018acc <_printf_i+0x14c>
 8018ab4:	6823      	ldr	r3, [r4, #0]
 8018ab6:	07df      	lsls	r7, r3, #31
 8018ab8:	d508      	bpl.n	8018acc <_printf_i+0x14c>
 8018aba:	6923      	ldr	r3, [r4, #16]
 8018abc:	6861      	ldr	r1, [r4, #4]
 8018abe:	4299      	cmp	r1, r3
 8018ac0:	bfde      	ittt	le
 8018ac2:	2330      	movle	r3, #48	; 0x30
 8018ac4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8018ac8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8018acc:	1b92      	subs	r2, r2, r6
 8018ace:	6122      	str	r2, [r4, #16]
 8018ad0:	f8cd a000 	str.w	sl, [sp]
 8018ad4:	464b      	mov	r3, r9
 8018ad6:	aa03      	add	r2, sp, #12
 8018ad8:	4621      	mov	r1, r4
 8018ada:	4640      	mov	r0, r8
 8018adc:	f7ff fee2 	bl	80188a4 <_printf_common>
 8018ae0:	3001      	adds	r0, #1
 8018ae2:	d14c      	bne.n	8018b7e <_printf_i+0x1fe>
 8018ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8018ae8:	b004      	add	sp, #16
 8018aea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018aee:	4835      	ldr	r0, [pc, #212]	; (8018bc4 <_printf_i+0x244>)
 8018af0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8018af4:	6823      	ldr	r3, [r4, #0]
 8018af6:	680e      	ldr	r6, [r1, #0]
 8018af8:	061f      	lsls	r7, r3, #24
 8018afa:	f856 5b04 	ldr.w	r5, [r6], #4
 8018afe:	600e      	str	r6, [r1, #0]
 8018b00:	d514      	bpl.n	8018b2c <_printf_i+0x1ac>
 8018b02:	07d9      	lsls	r1, r3, #31
 8018b04:	bf44      	itt	mi
 8018b06:	f043 0320 	orrmi.w	r3, r3, #32
 8018b0a:	6023      	strmi	r3, [r4, #0]
 8018b0c:	b91d      	cbnz	r5, 8018b16 <_printf_i+0x196>
 8018b0e:	6823      	ldr	r3, [r4, #0]
 8018b10:	f023 0320 	bic.w	r3, r3, #32
 8018b14:	6023      	str	r3, [r4, #0]
 8018b16:	2310      	movs	r3, #16
 8018b18:	e7b0      	b.n	8018a7c <_printf_i+0xfc>
 8018b1a:	6823      	ldr	r3, [r4, #0]
 8018b1c:	f043 0320 	orr.w	r3, r3, #32
 8018b20:	6023      	str	r3, [r4, #0]
 8018b22:	2378      	movs	r3, #120	; 0x78
 8018b24:	4828      	ldr	r0, [pc, #160]	; (8018bc8 <_printf_i+0x248>)
 8018b26:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8018b2a:	e7e3      	b.n	8018af4 <_printf_i+0x174>
 8018b2c:	065e      	lsls	r6, r3, #25
 8018b2e:	bf48      	it	mi
 8018b30:	b2ad      	uxthmi	r5, r5
 8018b32:	e7e6      	b.n	8018b02 <_printf_i+0x182>
 8018b34:	4616      	mov	r6, r2
 8018b36:	e7bb      	b.n	8018ab0 <_printf_i+0x130>
 8018b38:	680b      	ldr	r3, [r1, #0]
 8018b3a:	6826      	ldr	r6, [r4, #0]
 8018b3c:	6960      	ldr	r0, [r4, #20]
 8018b3e:	1d1d      	adds	r5, r3, #4
 8018b40:	600d      	str	r5, [r1, #0]
 8018b42:	0635      	lsls	r5, r6, #24
 8018b44:	681b      	ldr	r3, [r3, #0]
 8018b46:	d501      	bpl.n	8018b4c <_printf_i+0x1cc>
 8018b48:	6018      	str	r0, [r3, #0]
 8018b4a:	e002      	b.n	8018b52 <_printf_i+0x1d2>
 8018b4c:	0671      	lsls	r1, r6, #25
 8018b4e:	d5fb      	bpl.n	8018b48 <_printf_i+0x1c8>
 8018b50:	8018      	strh	r0, [r3, #0]
 8018b52:	2300      	movs	r3, #0
 8018b54:	6123      	str	r3, [r4, #16]
 8018b56:	4616      	mov	r6, r2
 8018b58:	e7ba      	b.n	8018ad0 <_printf_i+0x150>
 8018b5a:	680b      	ldr	r3, [r1, #0]
 8018b5c:	1d1a      	adds	r2, r3, #4
 8018b5e:	600a      	str	r2, [r1, #0]
 8018b60:	681e      	ldr	r6, [r3, #0]
 8018b62:	6862      	ldr	r2, [r4, #4]
 8018b64:	2100      	movs	r1, #0
 8018b66:	4630      	mov	r0, r6
 8018b68:	f7e7 fb5a 	bl	8000220 <memchr>
 8018b6c:	b108      	cbz	r0, 8018b72 <_printf_i+0x1f2>
 8018b6e:	1b80      	subs	r0, r0, r6
 8018b70:	6060      	str	r0, [r4, #4]
 8018b72:	6863      	ldr	r3, [r4, #4]
 8018b74:	6123      	str	r3, [r4, #16]
 8018b76:	2300      	movs	r3, #0
 8018b78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018b7c:	e7a8      	b.n	8018ad0 <_printf_i+0x150>
 8018b7e:	6923      	ldr	r3, [r4, #16]
 8018b80:	4632      	mov	r2, r6
 8018b82:	4649      	mov	r1, r9
 8018b84:	4640      	mov	r0, r8
 8018b86:	47d0      	blx	sl
 8018b88:	3001      	adds	r0, #1
 8018b8a:	d0ab      	beq.n	8018ae4 <_printf_i+0x164>
 8018b8c:	6823      	ldr	r3, [r4, #0]
 8018b8e:	079b      	lsls	r3, r3, #30
 8018b90:	d413      	bmi.n	8018bba <_printf_i+0x23a>
 8018b92:	68e0      	ldr	r0, [r4, #12]
 8018b94:	9b03      	ldr	r3, [sp, #12]
 8018b96:	4298      	cmp	r0, r3
 8018b98:	bfb8      	it	lt
 8018b9a:	4618      	movlt	r0, r3
 8018b9c:	e7a4      	b.n	8018ae8 <_printf_i+0x168>
 8018b9e:	2301      	movs	r3, #1
 8018ba0:	4632      	mov	r2, r6
 8018ba2:	4649      	mov	r1, r9
 8018ba4:	4640      	mov	r0, r8
 8018ba6:	47d0      	blx	sl
 8018ba8:	3001      	adds	r0, #1
 8018baa:	d09b      	beq.n	8018ae4 <_printf_i+0x164>
 8018bac:	3501      	adds	r5, #1
 8018bae:	68e3      	ldr	r3, [r4, #12]
 8018bb0:	9903      	ldr	r1, [sp, #12]
 8018bb2:	1a5b      	subs	r3, r3, r1
 8018bb4:	42ab      	cmp	r3, r5
 8018bb6:	dcf2      	bgt.n	8018b9e <_printf_i+0x21e>
 8018bb8:	e7eb      	b.n	8018b92 <_printf_i+0x212>
 8018bba:	2500      	movs	r5, #0
 8018bbc:	f104 0619 	add.w	r6, r4, #25
 8018bc0:	e7f5      	b.n	8018bae <_printf_i+0x22e>
 8018bc2:	bf00      	nop
 8018bc4:	0801d75a 	.word	0x0801d75a
 8018bc8:	0801d76b 	.word	0x0801d76b

08018bcc <iprintf>:
 8018bcc:	b40f      	push	{r0, r1, r2, r3}
 8018bce:	4b0a      	ldr	r3, [pc, #40]	; (8018bf8 <iprintf+0x2c>)
 8018bd0:	b513      	push	{r0, r1, r4, lr}
 8018bd2:	681c      	ldr	r4, [r3, #0]
 8018bd4:	b124      	cbz	r4, 8018be0 <iprintf+0x14>
 8018bd6:	69a3      	ldr	r3, [r4, #24]
 8018bd8:	b913      	cbnz	r3, 8018be0 <iprintf+0x14>
 8018bda:	4620      	mov	r0, r4
 8018bdc:	f001 f93a 	bl	8019e54 <__sinit>
 8018be0:	ab05      	add	r3, sp, #20
 8018be2:	9a04      	ldr	r2, [sp, #16]
 8018be4:	68a1      	ldr	r1, [r4, #8]
 8018be6:	9301      	str	r3, [sp, #4]
 8018be8:	4620      	mov	r0, r4
 8018bea:	f001 ff6d 	bl	801aac8 <_vfiprintf_r>
 8018bee:	b002      	add	sp, #8
 8018bf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018bf4:	b004      	add	sp, #16
 8018bf6:	4770      	bx	lr
 8018bf8:	20000058 	.word	0x20000058

08018bfc <putchar>:
 8018bfc:	4b09      	ldr	r3, [pc, #36]	; (8018c24 <putchar+0x28>)
 8018bfe:	b513      	push	{r0, r1, r4, lr}
 8018c00:	681c      	ldr	r4, [r3, #0]
 8018c02:	4601      	mov	r1, r0
 8018c04:	b134      	cbz	r4, 8018c14 <putchar+0x18>
 8018c06:	69a3      	ldr	r3, [r4, #24]
 8018c08:	b923      	cbnz	r3, 8018c14 <putchar+0x18>
 8018c0a:	9001      	str	r0, [sp, #4]
 8018c0c:	4620      	mov	r0, r4
 8018c0e:	f001 f921 	bl	8019e54 <__sinit>
 8018c12:	9901      	ldr	r1, [sp, #4]
 8018c14:	68a2      	ldr	r2, [r4, #8]
 8018c16:	4620      	mov	r0, r4
 8018c18:	b002      	add	sp, #8
 8018c1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018c1e:	f002 b883 	b.w	801ad28 <_putc_r>
 8018c22:	bf00      	nop
 8018c24:	20000058 	.word	0x20000058

08018c28 <_puts_r>:
 8018c28:	b570      	push	{r4, r5, r6, lr}
 8018c2a:	460e      	mov	r6, r1
 8018c2c:	4605      	mov	r5, r0
 8018c2e:	b118      	cbz	r0, 8018c38 <_puts_r+0x10>
 8018c30:	6983      	ldr	r3, [r0, #24]
 8018c32:	b90b      	cbnz	r3, 8018c38 <_puts_r+0x10>
 8018c34:	f001 f90e 	bl	8019e54 <__sinit>
 8018c38:	69ab      	ldr	r3, [r5, #24]
 8018c3a:	68ac      	ldr	r4, [r5, #8]
 8018c3c:	b913      	cbnz	r3, 8018c44 <_puts_r+0x1c>
 8018c3e:	4628      	mov	r0, r5
 8018c40:	f001 f908 	bl	8019e54 <__sinit>
 8018c44:	4b2c      	ldr	r3, [pc, #176]	; (8018cf8 <_puts_r+0xd0>)
 8018c46:	429c      	cmp	r4, r3
 8018c48:	d120      	bne.n	8018c8c <_puts_r+0x64>
 8018c4a:	686c      	ldr	r4, [r5, #4]
 8018c4c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018c4e:	07db      	lsls	r3, r3, #31
 8018c50:	d405      	bmi.n	8018c5e <_puts_r+0x36>
 8018c52:	89a3      	ldrh	r3, [r4, #12]
 8018c54:	0598      	lsls	r0, r3, #22
 8018c56:	d402      	bmi.n	8018c5e <_puts_r+0x36>
 8018c58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018c5a:	f001 f9b0 	bl	8019fbe <__retarget_lock_acquire_recursive>
 8018c5e:	89a3      	ldrh	r3, [r4, #12]
 8018c60:	0719      	lsls	r1, r3, #28
 8018c62:	d51d      	bpl.n	8018ca0 <_puts_r+0x78>
 8018c64:	6923      	ldr	r3, [r4, #16]
 8018c66:	b1db      	cbz	r3, 8018ca0 <_puts_r+0x78>
 8018c68:	3e01      	subs	r6, #1
 8018c6a:	68a3      	ldr	r3, [r4, #8]
 8018c6c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8018c70:	3b01      	subs	r3, #1
 8018c72:	60a3      	str	r3, [r4, #8]
 8018c74:	bb39      	cbnz	r1, 8018cc6 <_puts_r+0x9e>
 8018c76:	2b00      	cmp	r3, #0
 8018c78:	da38      	bge.n	8018cec <_puts_r+0xc4>
 8018c7a:	4622      	mov	r2, r4
 8018c7c:	210a      	movs	r1, #10
 8018c7e:	4628      	mov	r0, r5
 8018c80:	f000 f878 	bl	8018d74 <__swbuf_r>
 8018c84:	3001      	adds	r0, #1
 8018c86:	d011      	beq.n	8018cac <_puts_r+0x84>
 8018c88:	250a      	movs	r5, #10
 8018c8a:	e011      	b.n	8018cb0 <_puts_r+0x88>
 8018c8c:	4b1b      	ldr	r3, [pc, #108]	; (8018cfc <_puts_r+0xd4>)
 8018c8e:	429c      	cmp	r4, r3
 8018c90:	d101      	bne.n	8018c96 <_puts_r+0x6e>
 8018c92:	68ac      	ldr	r4, [r5, #8]
 8018c94:	e7da      	b.n	8018c4c <_puts_r+0x24>
 8018c96:	4b1a      	ldr	r3, [pc, #104]	; (8018d00 <_puts_r+0xd8>)
 8018c98:	429c      	cmp	r4, r3
 8018c9a:	bf08      	it	eq
 8018c9c:	68ec      	ldreq	r4, [r5, #12]
 8018c9e:	e7d5      	b.n	8018c4c <_puts_r+0x24>
 8018ca0:	4621      	mov	r1, r4
 8018ca2:	4628      	mov	r0, r5
 8018ca4:	f000 f8b8 	bl	8018e18 <__swsetup_r>
 8018ca8:	2800      	cmp	r0, #0
 8018caa:	d0dd      	beq.n	8018c68 <_puts_r+0x40>
 8018cac:	f04f 35ff 	mov.w	r5, #4294967295
 8018cb0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018cb2:	07da      	lsls	r2, r3, #31
 8018cb4:	d405      	bmi.n	8018cc2 <_puts_r+0x9a>
 8018cb6:	89a3      	ldrh	r3, [r4, #12]
 8018cb8:	059b      	lsls	r3, r3, #22
 8018cba:	d402      	bmi.n	8018cc2 <_puts_r+0x9a>
 8018cbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018cbe:	f001 f97f 	bl	8019fc0 <__retarget_lock_release_recursive>
 8018cc2:	4628      	mov	r0, r5
 8018cc4:	bd70      	pop	{r4, r5, r6, pc}
 8018cc6:	2b00      	cmp	r3, #0
 8018cc8:	da04      	bge.n	8018cd4 <_puts_r+0xac>
 8018cca:	69a2      	ldr	r2, [r4, #24]
 8018ccc:	429a      	cmp	r2, r3
 8018cce:	dc06      	bgt.n	8018cde <_puts_r+0xb6>
 8018cd0:	290a      	cmp	r1, #10
 8018cd2:	d004      	beq.n	8018cde <_puts_r+0xb6>
 8018cd4:	6823      	ldr	r3, [r4, #0]
 8018cd6:	1c5a      	adds	r2, r3, #1
 8018cd8:	6022      	str	r2, [r4, #0]
 8018cda:	7019      	strb	r1, [r3, #0]
 8018cdc:	e7c5      	b.n	8018c6a <_puts_r+0x42>
 8018cde:	4622      	mov	r2, r4
 8018ce0:	4628      	mov	r0, r5
 8018ce2:	f000 f847 	bl	8018d74 <__swbuf_r>
 8018ce6:	3001      	adds	r0, #1
 8018ce8:	d1bf      	bne.n	8018c6a <_puts_r+0x42>
 8018cea:	e7df      	b.n	8018cac <_puts_r+0x84>
 8018cec:	6823      	ldr	r3, [r4, #0]
 8018cee:	250a      	movs	r5, #10
 8018cf0:	1c5a      	adds	r2, r3, #1
 8018cf2:	6022      	str	r2, [r4, #0]
 8018cf4:	701d      	strb	r5, [r3, #0]
 8018cf6:	e7db      	b.n	8018cb0 <_puts_r+0x88>
 8018cf8:	0801d86c 	.word	0x0801d86c
 8018cfc:	0801d88c 	.word	0x0801d88c
 8018d00:	0801d84c 	.word	0x0801d84c

08018d04 <puts>:
 8018d04:	4b02      	ldr	r3, [pc, #8]	; (8018d10 <puts+0xc>)
 8018d06:	4601      	mov	r1, r0
 8018d08:	6818      	ldr	r0, [r3, #0]
 8018d0a:	f7ff bf8d 	b.w	8018c28 <_puts_r>
 8018d0e:	bf00      	nop
 8018d10:	20000058 	.word	0x20000058

08018d14 <_sbrk_r>:
 8018d14:	b538      	push	{r3, r4, r5, lr}
 8018d16:	4d06      	ldr	r5, [pc, #24]	; (8018d30 <_sbrk_r+0x1c>)
 8018d18:	2300      	movs	r3, #0
 8018d1a:	4604      	mov	r4, r0
 8018d1c:	4608      	mov	r0, r1
 8018d1e:	602b      	str	r3, [r5, #0]
 8018d20:	f7eb f95a 	bl	8003fd8 <_sbrk>
 8018d24:	1c43      	adds	r3, r0, #1
 8018d26:	d102      	bne.n	8018d2e <_sbrk_r+0x1a>
 8018d28:	682b      	ldr	r3, [r5, #0]
 8018d2a:	b103      	cbz	r3, 8018d2e <_sbrk_r+0x1a>
 8018d2c:	6023      	str	r3, [r4, #0]
 8018d2e:	bd38      	pop	{r3, r4, r5, pc}
 8018d30:	2004a72c 	.word	0x2004a72c

08018d34 <siprintf>:
 8018d34:	b40e      	push	{r1, r2, r3}
 8018d36:	b500      	push	{lr}
 8018d38:	b09c      	sub	sp, #112	; 0x70
 8018d3a:	ab1d      	add	r3, sp, #116	; 0x74
 8018d3c:	9002      	str	r0, [sp, #8]
 8018d3e:	9006      	str	r0, [sp, #24]
 8018d40:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8018d44:	4809      	ldr	r0, [pc, #36]	; (8018d6c <siprintf+0x38>)
 8018d46:	9107      	str	r1, [sp, #28]
 8018d48:	9104      	str	r1, [sp, #16]
 8018d4a:	4909      	ldr	r1, [pc, #36]	; (8018d70 <siprintf+0x3c>)
 8018d4c:	f853 2b04 	ldr.w	r2, [r3], #4
 8018d50:	9105      	str	r1, [sp, #20]
 8018d52:	6800      	ldr	r0, [r0, #0]
 8018d54:	9301      	str	r3, [sp, #4]
 8018d56:	a902      	add	r1, sp, #8
 8018d58:	f001 fd8c 	bl	801a874 <_svfiprintf_r>
 8018d5c:	9b02      	ldr	r3, [sp, #8]
 8018d5e:	2200      	movs	r2, #0
 8018d60:	701a      	strb	r2, [r3, #0]
 8018d62:	b01c      	add	sp, #112	; 0x70
 8018d64:	f85d eb04 	ldr.w	lr, [sp], #4
 8018d68:	b003      	add	sp, #12
 8018d6a:	4770      	bx	lr
 8018d6c:	20000058 	.word	0x20000058
 8018d70:	ffff0208 	.word	0xffff0208

08018d74 <__swbuf_r>:
 8018d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018d76:	460e      	mov	r6, r1
 8018d78:	4614      	mov	r4, r2
 8018d7a:	4605      	mov	r5, r0
 8018d7c:	b118      	cbz	r0, 8018d86 <__swbuf_r+0x12>
 8018d7e:	6983      	ldr	r3, [r0, #24]
 8018d80:	b90b      	cbnz	r3, 8018d86 <__swbuf_r+0x12>
 8018d82:	f001 f867 	bl	8019e54 <__sinit>
 8018d86:	4b21      	ldr	r3, [pc, #132]	; (8018e0c <__swbuf_r+0x98>)
 8018d88:	429c      	cmp	r4, r3
 8018d8a:	d12b      	bne.n	8018de4 <__swbuf_r+0x70>
 8018d8c:	686c      	ldr	r4, [r5, #4]
 8018d8e:	69a3      	ldr	r3, [r4, #24]
 8018d90:	60a3      	str	r3, [r4, #8]
 8018d92:	89a3      	ldrh	r3, [r4, #12]
 8018d94:	071a      	lsls	r2, r3, #28
 8018d96:	d52f      	bpl.n	8018df8 <__swbuf_r+0x84>
 8018d98:	6923      	ldr	r3, [r4, #16]
 8018d9a:	b36b      	cbz	r3, 8018df8 <__swbuf_r+0x84>
 8018d9c:	6923      	ldr	r3, [r4, #16]
 8018d9e:	6820      	ldr	r0, [r4, #0]
 8018da0:	1ac0      	subs	r0, r0, r3
 8018da2:	6963      	ldr	r3, [r4, #20]
 8018da4:	b2f6      	uxtb	r6, r6
 8018da6:	4283      	cmp	r3, r0
 8018da8:	4637      	mov	r7, r6
 8018daa:	dc04      	bgt.n	8018db6 <__swbuf_r+0x42>
 8018dac:	4621      	mov	r1, r4
 8018dae:	4628      	mov	r0, r5
 8018db0:	f000 ffbc 	bl	8019d2c <_fflush_r>
 8018db4:	bb30      	cbnz	r0, 8018e04 <__swbuf_r+0x90>
 8018db6:	68a3      	ldr	r3, [r4, #8]
 8018db8:	3b01      	subs	r3, #1
 8018dba:	60a3      	str	r3, [r4, #8]
 8018dbc:	6823      	ldr	r3, [r4, #0]
 8018dbe:	1c5a      	adds	r2, r3, #1
 8018dc0:	6022      	str	r2, [r4, #0]
 8018dc2:	701e      	strb	r6, [r3, #0]
 8018dc4:	6963      	ldr	r3, [r4, #20]
 8018dc6:	3001      	adds	r0, #1
 8018dc8:	4283      	cmp	r3, r0
 8018dca:	d004      	beq.n	8018dd6 <__swbuf_r+0x62>
 8018dcc:	89a3      	ldrh	r3, [r4, #12]
 8018dce:	07db      	lsls	r3, r3, #31
 8018dd0:	d506      	bpl.n	8018de0 <__swbuf_r+0x6c>
 8018dd2:	2e0a      	cmp	r6, #10
 8018dd4:	d104      	bne.n	8018de0 <__swbuf_r+0x6c>
 8018dd6:	4621      	mov	r1, r4
 8018dd8:	4628      	mov	r0, r5
 8018dda:	f000 ffa7 	bl	8019d2c <_fflush_r>
 8018dde:	b988      	cbnz	r0, 8018e04 <__swbuf_r+0x90>
 8018de0:	4638      	mov	r0, r7
 8018de2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018de4:	4b0a      	ldr	r3, [pc, #40]	; (8018e10 <__swbuf_r+0x9c>)
 8018de6:	429c      	cmp	r4, r3
 8018de8:	d101      	bne.n	8018dee <__swbuf_r+0x7a>
 8018dea:	68ac      	ldr	r4, [r5, #8]
 8018dec:	e7cf      	b.n	8018d8e <__swbuf_r+0x1a>
 8018dee:	4b09      	ldr	r3, [pc, #36]	; (8018e14 <__swbuf_r+0xa0>)
 8018df0:	429c      	cmp	r4, r3
 8018df2:	bf08      	it	eq
 8018df4:	68ec      	ldreq	r4, [r5, #12]
 8018df6:	e7ca      	b.n	8018d8e <__swbuf_r+0x1a>
 8018df8:	4621      	mov	r1, r4
 8018dfa:	4628      	mov	r0, r5
 8018dfc:	f000 f80c 	bl	8018e18 <__swsetup_r>
 8018e00:	2800      	cmp	r0, #0
 8018e02:	d0cb      	beq.n	8018d9c <__swbuf_r+0x28>
 8018e04:	f04f 37ff 	mov.w	r7, #4294967295
 8018e08:	e7ea      	b.n	8018de0 <__swbuf_r+0x6c>
 8018e0a:	bf00      	nop
 8018e0c:	0801d86c 	.word	0x0801d86c
 8018e10:	0801d88c 	.word	0x0801d88c
 8018e14:	0801d84c 	.word	0x0801d84c

08018e18 <__swsetup_r>:
 8018e18:	4b32      	ldr	r3, [pc, #200]	; (8018ee4 <__swsetup_r+0xcc>)
 8018e1a:	b570      	push	{r4, r5, r6, lr}
 8018e1c:	681d      	ldr	r5, [r3, #0]
 8018e1e:	4606      	mov	r6, r0
 8018e20:	460c      	mov	r4, r1
 8018e22:	b125      	cbz	r5, 8018e2e <__swsetup_r+0x16>
 8018e24:	69ab      	ldr	r3, [r5, #24]
 8018e26:	b913      	cbnz	r3, 8018e2e <__swsetup_r+0x16>
 8018e28:	4628      	mov	r0, r5
 8018e2a:	f001 f813 	bl	8019e54 <__sinit>
 8018e2e:	4b2e      	ldr	r3, [pc, #184]	; (8018ee8 <__swsetup_r+0xd0>)
 8018e30:	429c      	cmp	r4, r3
 8018e32:	d10f      	bne.n	8018e54 <__swsetup_r+0x3c>
 8018e34:	686c      	ldr	r4, [r5, #4]
 8018e36:	89a3      	ldrh	r3, [r4, #12]
 8018e38:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8018e3c:	0719      	lsls	r1, r3, #28
 8018e3e:	d42c      	bmi.n	8018e9a <__swsetup_r+0x82>
 8018e40:	06dd      	lsls	r5, r3, #27
 8018e42:	d411      	bmi.n	8018e68 <__swsetup_r+0x50>
 8018e44:	2309      	movs	r3, #9
 8018e46:	6033      	str	r3, [r6, #0]
 8018e48:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8018e4c:	81a3      	strh	r3, [r4, #12]
 8018e4e:	f04f 30ff 	mov.w	r0, #4294967295
 8018e52:	e03e      	b.n	8018ed2 <__swsetup_r+0xba>
 8018e54:	4b25      	ldr	r3, [pc, #148]	; (8018eec <__swsetup_r+0xd4>)
 8018e56:	429c      	cmp	r4, r3
 8018e58:	d101      	bne.n	8018e5e <__swsetup_r+0x46>
 8018e5a:	68ac      	ldr	r4, [r5, #8]
 8018e5c:	e7eb      	b.n	8018e36 <__swsetup_r+0x1e>
 8018e5e:	4b24      	ldr	r3, [pc, #144]	; (8018ef0 <__swsetup_r+0xd8>)
 8018e60:	429c      	cmp	r4, r3
 8018e62:	bf08      	it	eq
 8018e64:	68ec      	ldreq	r4, [r5, #12]
 8018e66:	e7e6      	b.n	8018e36 <__swsetup_r+0x1e>
 8018e68:	0758      	lsls	r0, r3, #29
 8018e6a:	d512      	bpl.n	8018e92 <__swsetup_r+0x7a>
 8018e6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018e6e:	b141      	cbz	r1, 8018e82 <__swsetup_r+0x6a>
 8018e70:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018e74:	4299      	cmp	r1, r3
 8018e76:	d002      	beq.n	8018e7e <__swsetup_r+0x66>
 8018e78:	4630      	mov	r0, r6
 8018e7a:	f7ff f993 	bl	80181a4 <_free_r>
 8018e7e:	2300      	movs	r3, #0
 8018e80:	6363      	str	r3, [r4, #52]	; 0x34
 8018e82:	89a3      	ldrh	r3, [r4, #12]
 8018e84:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8018e88:	81a3      	strh	r3, [r4, #12]
 8018e8a:	2300      	movs	r3, #0
 8018e8c:	6063      	str	r3, [r4, #4]
 8018e8e:	6923      	ldr	r3, [r4, #16]
 8018e90:	6023      	str	r3, [r4, #0]
 8018e92:	89a3      	ldrh	r3, [r4, #12]
 8018e94:	f043 0308 	orr.w	r3, r3, #8
 8018e98:	81a3      	strh	r3, [r4, #12]
 8018e9a:	6923      	ldr	r3, [r4, #16]
 8018e9c:	b94b      	cbnz	r3, 8018eb2 <__swsetup_r+0x9a>
 8018e9e:	89a3      	ldrh	r3, [r4, #12]
 8018ea0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8018ea4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018ea8:	d003      	beq.n	8018eb2 <__swsetup_r+0x9a>
 8018eaa:	4621      	mov	r1, r4
 8018eac:	4630      	mov	r0, r6
 8018eae:	f001 f8ad 	bl	801a00c <__smakebuf_r>
 8018eb2:	89a0      	ldrh	r0, [r4, #12]
 8018eb4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8018eb8:	f010 0301 	ands.w	r3, r0, #1
 8018ebc:	d00a      	beq.n	8018ed4 <__swsetup_r+0xbc>
 8018ebe:	2300      	movs	r3, #0
 8018ec0:	60a3      	str	r3, [r4, #8]
 8018ec2:	6963      	ldr	r3, [r4, #20]
 8018ec4:	425b      	negs	r3, r3
 8018ec6:	61a3      	str	r3, [r4, #24]
 8018ec8:	6923      	ldr	r3, [r4, #16]
 8018eca:	b943      	cbnz	r3, 8018ede <__swsetup_r+0xc6>
 8018ecc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8018ed0:	d1ba      	bne.n	8018e48 <__swsetup_r+0x30>
 8018ed2:	bd70      	pop	{r4, r5, r6, pc}
 8018ed4:	0781      	lsls	r1, r0, #30
 8018ed6:	bf58      	it	pl
 8018ed8:	6963      	ldrpl	r3, [r4, #20]
 8018eda:	60a3      	str	r3, [r4, #8]
 8018edc:	e7f4      	b.n	8018ec8 <__swsetup_r+0xb0>
 8018ede:	2000      	movs	r0, #0
 8018ee0:	e7f7      	b.n	8018ed2 <__swsetup_r+0xba>
 8018ee2:	bf00      	nop
 8018ee4:	20000058 	.word	0x20000058
 8018ee8:	0801d86c 	.word	0x0801d86c
 8018eec:	0801d88c 	.word	0x0801d88c
 8018ef0:	0801d84c 	.word	0x0801d84c

08018ef4 <__assert_func>:
 8018ef4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8018ef6:	4614      	mov	r4, r2
 8018ef8:	461a      	mov	r2, r3
 8018efa:	4b09      	ldr	r3, [pc, #36]	; (8018f20 <__assert_func+0x2c>)
 8018efc:	681b      	ldr	r3, [r3, #0]
 8018efe:	4605      	mov	r5, r0
 8018f00:	68d8      	ldr	r0, [r3, #12]
 8018f02:	b14c      	cbz	r4, 8018f18 <__assert_func+0x24>
 8018f04:	4b07      	ldr	r3, [pc, #28]	; (8018f24 <__assert_func+0x30>)
 8018f06:	9100      	str	r1, [sp, #0]
 8018f08:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8018f0c:	4906      	ldr	r1, [pc, #24]	; (8018f28 <__assert_func+0x34>)
 8018f0e:	462b      	mov	r3, r5
 8018f10:	f001 f81e 	bl	8019f50 <fiprintf>
 8018f14:	f001 ffa6 	bl	801ae64 <abort>
 8018f18:	4b04      	ldr	r3, [pc, #16]	; (8018f2c <__assert_func+0x38>)
 8018f1a:	461c      	mov	r4, r3
 8018f1c:	e7f3      	b.n	8018f06 <__assert_func+0x12>
 8018f1e:	bf00      	nop
 8018f20:	20000058 	.word	0x20000058
 8018f24:	0801d77c 	.word	0x0801d77c
 8018f28:	0801d789 	.word	0x0801d789
 8018f2c:	0801d7b7 	.word	0x0801d7b7

08018f30 <quorem>:
 8018f30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018f34:	6903      	ldr	r3, [r0, #16]
 8018f36:	690c      	ldr	r4, [r1, #16]
 8018f38:	42a3      	cmp	r3, r4
 8018f3a:	4607      	mov	r7, r0
 8018f3c:	f2c0 8081 	blt.w	8019042 <quorem+0x112>
 8018f40:	3c01      	subs	r4, #1
 8018f42:	f101 0814 	add.w	r8, r1, #20
 8018f46:	f100 0514 	add.w	r5, r0, #20
 8018f4a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8018f4e:	9301      	str	r3, [sp, #4]
 8018f50:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8018f54:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8018f58:	3301      	adds	r3, #1
 8018f5a:	429a      	cmp	r2, r3
 8018f5c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8018f60:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8018f64:	fbb2 f6f3 	udiv	r6, r2, r3
 8018f68:	d331      	bcc.n	8018fce <quorem+0x9e>
 8018f6a:	f04f 0e00 	mov.w	lr, #0
 8018f6e:	4640      	mov	r0, r8
 8018f70:	46ac      	mov	ip, r5
 8018f72:	46f2      	mov	sl, lr
 8018f74:	f850 2b04 	ldr.w	r2, [r0], #4
 8018f78:	b293      	uxth	r3, r2
 8018f7a:	fb06 e303 	mla	r3, r6, r3, lr
 8018f7e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8018f82:	b29b      	uxth	r3, r3
 8018f84:	ebaa 0303 	sub.w	r3, sl, r3
 8018f88:	0c12      	lsrs	r2, r2, #16
 8018f8a:	f8dc a000 	ldr.w	sl, [ip]
 8018f8e:	fb06 e202 	mla	r2, r6, r2, lr
 8018f92:	fa13 f38a 	uxtah	r3, r3, sl
 8018f96:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8018f9a:	fa1f fa82 	uxth.w	sl, r2
 8018f9e:	f8dc 2000 	ldr.w	r2, [ip]
 8018fa2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8018fa6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8018faa:	b29b      	uxth	r3, r3
 8018fac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8018fb0:	4581      	cmp	r9, r0
 8018fb2:	f84c 3b04 	str.w	r3, [ip], #4
 8018fb6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8018fba:	d2db      	bcs.n	8018f74 <quorem+0x44>
 8018fbc:	f855 300b 	ldr.w	r3, [r5, fp]
 8018fc0:	b92b      	cbnz	r3, 8018fce <quorem+0x9e>
 8018fc2:	9b01      	ldr	r3, [sp, #4]
 8018fc4:	3b04      	subs	r3, #4
 8018fc6:	429d      	cmp	r5, r3
 8018fc8:	461a      	mov	r2, r3
 8018fca:	d32e      	bcc.n	801902a <quorem+0xfa>
 8018fcc:	613c      	str	r4, [r7, #16]
 8018fce:	4638      	mov	r0, r7
 8018fd0:	f001 fae6 	bl	801a5a0 <__mcmp>
 8018fd4:	2800      	cmp	r0, #0
 8018fd6:	db24      	blt.n	8019022 <quorem+0xf2>
 8018fd8:	3601      	adds	r6, #1
 8018fda:	4628      	mov	r0, r5
 8018fdc:	f04f 0c00 	mov.w	ip, #0
 8018fe0:	f858 2b04 	ldr.w	r2, [r8], #4
 8018fe4:	f8d0 e000 	ldr.w	lr, [r0]
 8018fe8:	b293      	uxth	r3, r2
 8018fea:	ebac 0303 	sub.w	r3, ip, r3
 8018fee:	0c12      	lsrs	r2, r2, #16
 8018ff0:	fa13 f38e 	uxtah	r3, r3, lr
 8018ff4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8018ff8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8018ffc:	b29b      	uxth	r3, r3
 8018ffe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8019002:	45c1      	cmp	r9, r8
 8019004:	f840 3b04 	str.w	r3, [r0], #4
 8019008:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801900c:	d2e8      	bcs.n	8018fe0 <quorem+0xb0>
 801900e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8019012:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8019016:	b922      	cbnz	r2, 8019022 <quorem+0xf2>
 8019018:	3b04      	subs	r3, #4
 801901a:	429d      	cmp	r5, r3
 801901c:	461a      	mov	r2, r3
 801901e:	d30a      	bcc.n	8019036 <quorem+0x106>
 8019020:	613c      	str	r4, [r7, #16]
 8019022:	4630      	mov	r0, r6
 8019024:	b003      	add	sp, #12
 8019026:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801902a:	6812      	ldr	r2, [r2, #0]
 801902c:	3b04      	subs	r3, #4
 801902e:	2a00      	cmp	r2, #0
 8019030:	d1cc      	bne.n	8018fcc <quorem+0x9c>
 8019032:	3c01      	subs	r4, #1
 8019034:	e7c7      	b.n	8018fc6 <quorem+0x96>
 8019036:	6812      	ldr	r2, [r2, #0]
 8019038:	3b04      	subs	r3, #4
 801903a:	2a00      	cmp	r2, #0
 801903c:	d1f0      	bne.n	8019020 <quorem+0xf0>
 801903e:	3c01      	subs	r4, #1
 8019040:	e7eb      	b.n	801901a <quorem+0xea>
 8019042:	2000      	movs	r0, #0
 8019044:	e7ee      	b.n	8019024 <quorem+0xf4>
	...

08019048 <_dtoa_r>:
 8019048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801904c:	ed2d 8b02 	vpush	{d8}
 8019050:	ec57 6b10 	vmov	r6, r7, d0
 8019054:	b095      	sub	sp, #84	; 0x54
 8019056:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8019058:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801905c:	9105      	str	r1, [sp, #20]
 801905e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8019062:	4604      	mov	r4, r0
 8019064:	9209      	str	r2, [sp, #36]	; 0x24
 8019066:	930f      	str	r3, [sp, #60]	; 0x3c
 8019068:	b975      	cbnz	r5, 8019088 <_dtoa_r+0x40>
 801906a:	2010      	movs	r0, #16
 801906c:	f7ff f874 	bl	8018158 <malloc>
 8019070:	4602      	mov	r2, r0
 8019072:	6260      	str	r0, [r4, #36]	; 0x24
 8019074:	b920      	cbnz	r0, 8019080 <_dtoa_r+0x38>
 8019076:	4bb2      	ldr	r3, [pc, #712]	; (8019340 <_dtoa_r+0x2f8>)
 8019078:	21ea      	movs	r1, #234	; 0xea
 801907a:	48b2      	ldr	r0, [pc, #712]	; (8019344 <_dtoa_r+0x2fc>)
 801907c:	f7ff ff3a 	bl	8018ef4 <__assert_func>
 8019080:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8019084:	6005      	str	r5, [r0, #0]
 8019086:	60c5      	str	r5, [r0, #12]
 8019088:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801908a:	6819      	ldr	r1, [r3, #0]
 801908c:	b151      	cbz	r1, 80190a4 <_dtoa_r+0x5c>
 801908e:	685a      	ldr	r2, [r3, #4]
 8019090:	604a      	str	r2, [r1, #4]
 8019092:	2301      	movs	r3, #1
 8019094:	4093      	lsls	r3, r2
 8019096:	608b      	str	r3, [r1, #8]
 8019098:	4620      	mov	r0, r4
 801909a:	f001 f843 	bl	801a124 <_Bfree>
 801909e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80190a0:	2200      	movs	r2, #0
 80190a2:	601a      	str	r2, [r3, #0]
 80190a4:	1e3b      	subs	r3, r7, #0
 80190a6:	bfb9      	ittee	lt
 80190a8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80190ac:	9303      	strlt	r3, [sp, #12]
 80190ae:	2300      	movge	r3, #0
 80190b0:	f8c8 3000 	strge.w	r3, [r8]
 80190b4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80190b8:	4ba3      	ldr	r3, [pc, #652]	; (8019348 <_dtoa_r+0x300>)
 80190ba:	bfbc      	itt	lt
 80190bc:	2201      	movlt	r2, #1
 80190be:	f8c8 2000 	strlt.w	r2, [r8]
 80190c2:	ea33 0309 	bics.w	r3, r3, r9
 80190c6:	d11b      	bne.n	8019100 <_dtoa_r+0xb8>
 80190c8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80190ca:	f242 730f 	movw	r3, #9999	; 0x270f
 80190ce:	6013      	str	r3, [r2, #0]
 80190d0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80190d4:	4333      	orrs	r3, r6
 80190d6:	f000 857a 	beq.w	8019bce <_dtoa_r+0xb86>
 80190da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80190dc:	b963      	cbnz	r3, 80190f8 <_dtoa_r+0xb0>
 80190de:	4b9b      	ldr	r3, [pc, #620]	; (801934c <_dtoa_r+0x304>)
 80190e0:	e024      	b.n	801912c <_dtoa_r+0xe4>
 80190e2:	4b9b      	ldr	r3, [pc, #620]	; (8019350 <_dtoa_r+0x308>)
 80190e4:	9300      	str	r3, [sp, #0]
 80190e6:	3308      	adds	r3, #8
 80190e8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80190ea:	6013      	str	r3, [r2, #0]
 80190ec:	9800      	ldr	r0, [sp, #0]
 80190ee:	b015      	add	sp, #84	; 0x54
 80190f0:	ecbd 8b02 	vpop	{d8}
 80190f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80190f8:	4b94      	ldr	r3, [pc, #592]	; (801934c <_dtoa_r+0x304>)
 80190fa:	9300      	str	r3, [sp, #0]
 80190fc:	3303      	adds	r3, #3
 80190fe:	e7f3      	b.n	80190e8 <_dtoa_r+0xa0>
 8019100:	ed9d 7b02 	vldr	d7, [sp, #8]
 8019104:	2200      	movs	r2, #0
 8019106:	ec51 0b17 	vmov	r0, r1, d7
 801910a:	2300      	movs	r3, #0
 801910c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8019110:	f7e7 fcfa 	bl	8000b08 <__aeabi_dcmpeq>
 8019114:	4680      	mov	r8, r0
 8019116:	b158      	cbz	r0, 8019130 <_dtoa_r+0xe8>
 8019118:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801911a:	2301      	movs	r3, #1
 801911c:	6013      	str	r3, [r2, #0]
 801911e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8019120:	2b00      	cmp	r3, #0
 8019122:	f000 8551 	beq.w	8019bc8 <_dtoa_r+0xb80>
 8019126:	488b      	ldr	r0, [pc, #556]	; (8019354 <_dtoa_r+0x30c>)
 8019128:	6018      	str	r0, [r3, #0]
 801912a:	1e43      	subs	r3, r0, #1
 801912c:	9300      	str	r3, [sp, #0]
 801912e:	e7dd      	b.n	80190ec <_dtoa_r+0xa4>
 8019130:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8019134:	aa12      	add	r2, sp, #72	; 0x48
 8019136:	a913      	add	r1, sp, #76	; 0x4c
 8019138:	4620      	mov	r0, r4
 801913a:	f001 fad5 	bl	801a6e8 <__d2b>
 801913e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8019142:	4683      	mov	fp, r0
 8019144:	2d00      	cmp	r5, #0
 8019146:	d07c      	beq.n	8019242 <_dtoa_r+0x1fa>
 8019148:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801914a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 801914e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8019152:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8019156:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801915a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801915e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8019162:	4b7d      	ldr	r3, [pc, #500]	; (8019358 <_dtoa_r+0x310>)
 8019164:	2200      	movs	r2, #0
 8019166:	4630      	mov	r0, r6
 8019168:	4639      	mov	r1, r7
 801916a:	f7e7 f8ad 	bl	80002c8 <__aeabi_dsub>
 801916e:	a36e      	add	r3, pc, #440	; (adr r3, 8019328 <_dtoa_r+0x2e0>)
 8019170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019174:	f7e7 fa60 	bl	8000638 <__aeabi_dmul>
 8019178:	a36d      	add	r3, pc, #436	; (adr r3, 8019330 <_dtoa_r+0x2e8>)
 801917a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801917e:	f7e7 f8a5 	bl	80002cc <__adddf3>
 8019182:	4606      	mov	r6, r0
 8019184:	4628      	mov	r0, r5
 8019186:	460f      	mov	r7, r1
 8019188:	f7e7 f9ec 	bl	8000564 <__aeabi_i2d>
 801918c:	a36a      	add	r3, pc, #424	; (adr r3, 8019338 <_dtoa_r+0x2f0>)
 801918e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019192:	f7e7 fa51 	bl	8000638 <__aeabi_dmul>
 8019196:	4602      	mov	r2, r0
 8019198:	460b      	mov	r3, r1
 801919a:	4630      	mov	r0, r6
 801919c:	4639      	mov	r1, r7
 801919e:	f7e7 f895 	bl	80002cc <__adddf3>
 80191a2:	4606      	mov	r6, r0
 80191a4:	460f      	mov	r7, r1
 80191a6:	f7e7 fcf7 	bl	8000b98 <__aeabi_d2iz>
 80191aa:	2200      	movs	r2, #0
 80191ac:	4682      	mov	sl, r0
 80191ae:	2300      	movs	r3, #0
 80191b0:	4630      	mov	r0, r6
 80191b2:	4639      	mov	r1, r7
 80191b4:	f7e7 fcb2 	bl	8000b1c <__aeabi_dcmplt>
 80191b8:	b148      	cbz	r0, 80191ce <_dtoa_r+0x186>
 80191ba:	4650      	mov	r0, sl
 80191bc:	f7e7 f9d2 	bl	8000564 <__aeabi_i2d>
 80191c0:	4632      	mov	r2, r6
 80191c2:	463b      	mov	r3, r7
 80191c4:	f7e7 fca0 	bl	8000b08 <__aeabi_dcmpeq>
 80191c8:	b908      	cbnz	r0, 80191ce <_dtoa_r+0x186>
 80191ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 80191ce:	f1ba 0f16 	cmp.w	sl, #22
 80191d2:	d854      	bhi.n	801927e <_dtoa_r+0x236>
 80191d4:	4b61      	ldr	r3, [pc, #388]	; (801935c <_dtoa_r+0x314>)
 80191d6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80191da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80191de:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80191e2:	f7e7 fc9b 	bl	8000b1c <__aeabi_dcmplt>
 80191e6:	2800      	cmp	r0, #0
 80191e8:	d04b      	beq.n	8019282 <_dtoa_r+0x23a>
 80191ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 80191ee:	2300      	movs	r3, #0
 80191f0:	930e      	str	r3, [sp, #56]	; 0x38
 80191f2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80191f4:	1b5d      	subs	r5, r3, r5
 80191f6:	1e6b      	subs	r3, r5, #1
 80191f8:	9304      	str	r3, [sp, #16]
 80191fa:	bf43      	ittte	mi
 80191fc:	2300      	movmi	r3, #0
 80191fe:	f1c5 0801 	rsbmi	r8, r5, #1
 8019202:	9304      	strmi	r3, [sp, #16]
 8019204:	f04f 0800 	movpl.w	r8, #0
 8019208:	f1ba 0f00 	cmp.w	sl, #0
 801920c:	db3b      	blt.n	8019286 <_dtoa_r+0x23e>
 801920e:	9b04      	ldr	r3, [sp, #16]
 8019210:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8019214:	4453      	add	r3, sl
 8019216:	9304      	str	r3, [sp, #16]
 8019218:	2300      	movs	r3, #0
 801921a:	9306      	str	r3, [sp, #24]
 801921c:	9b05      	ldr	r3, [sp, #20]
 801921e:	2b09      	cmp	r3, #9
 8019220:	d869      	bhi.n	80192f6 <_dtoa_r+0x2ae>
 8019222:	2b05      	cmp	r3, #5
 8019224:	bfc4      	itt	gt
 8019226:	3b04      	subgt	r3, #4
 8019228:	9305      	strgt	r3, [sp, #20]
 801922a:	9b05      	ldr	r3, [sp, #20]
 801922c:	f1a3 0302 	sub.w	r3, r3, #2
 8019230:	bfcc      	ite	gt
 8019232:	2500      	movgt	r5, #0
 8019234:	2501      	movle	r5, #1
 8019236:	2b03      	cmp	r3, #3
 8019238:	d869      	bhi.n	801930e <_dtoa_r+0x2c6>
 801923a:	e8df f003 	tbb	[pc, r3]
 801923e:	4e2c      	.short	0x4e2c
 8019240:	5a4c      	.short	0x5a4c
 8019242:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8019246:	441d      	add	r5, r3
 8019248:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801924c:	2b20      	cmp	r3, #32
 801924e:	bfc1      	itttt	gt
 8019250:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8019254:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8019258:	fa09 f303 	lslgt.w	r3, r9, r3
 801925c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8019260:	bfda      	itte	le
 8019262:	f1c3 0320 	rsble	r3, r3, #32
 8019266:	fa06 f003 	lslle.w	r0, r6, r3
 801926a:	4318      	orrgt	r0, r3
 801926c:	f7e7 f96a 	bl	8000544 <__aeabi_ui2d>
 8019270:	2301      	movs	r3, #1
 8019272:	4606      	mov	r6, r0
 8019274:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8019278:	3d01      	subs	r5, #1
 801927a:	9310      	str	r3, [sp, #64]	; 0x40
 801927c:	e771      	b.n	8019162 <_dtoa_r+0x11a>
 801927e:	2301      	movs	r3, #1
 8019280:	e7b6      	b.n	80191f0 <_dtoa_r+0x1a8>
 8019282:	900e      	str	r0, [sp, #56]	; 0x38
 8019284:	e7b5      	b.n	80191f2 <_dtoa_r+0x1aa>
 8019286:	f1ca 0300 	rsb	r3, sl, #0
 801928a:	9306      	str	r3, [sp, #24]
 801928c:	2300      	movs	r3, #0
 801928e:	eba8 080a 	sub.w	r8, r8, sl
 8019292:	930d      	str	r3, [sp, #52]	; 0x34
 8019294:	e7c2      	b.n	801921c <_dtoa_r+0x1d4>
 8019296:	2300      	movs	r3, #0
 8019298:	9308      	str	r3, [sp, #32]
 801929a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801929c:	2b00      	cmp	r3, #0
 801929e:	dc39      	bgt.n	8019314 <_dtoa_r+0x2cc>
 80192a0:	f04f 0901 	mov.w	r9, #1
 80192a4:	f8cd 9004 	str.w	r9, [sp, #4]
 80192a8:	464b      	mov	r3, r9
 80192aa:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80192ae:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80192b0:	2200      	movs	r2, #0
 80192b2:	6042      	str	r2, [r0, #4]
 80192b4:	2204      	movs	r2, #4
 80192b6:	f102 0614 	add.w	r6, r2, #20
 80192ba:	429e      	cmp	r6, r3
 80192bc:	6841      	ldr	r1, [r0, #4]
 80192be:	d92f      	bls.n	8019320 <_dtoa_r+0x2d8>
 80192c0:	4620      	mov	r0, r4
 80192c2:	f000 feef 	bl	801a0a4 <_Balloc>
 80192c6:	9000      	str	r0, [sp, #0]
 80192c8:	2800      	cmp	r0, #0
 80192ca:	d14b      	bne.n	8019364 <_dtoa_r+0x31c>
 80192cc:	4b24      	ldr	r3, [pc, #144]	; (8019360 <_dtoa_r+0x318>)
 80192ce:	4602      	mov	r2, r0
 80192d0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80192d4:	e6d1      	b.n	801907a <_dtoa_r+0x32>
 80192d6:	2301      	movs	r3, #1
 80192d8:	e7de      	b.n	8019298 <_dtoa_r+0x250>
 80192da:	2300      	movs	r3, #0
 80192dc:	9308      	str	r3, [sp, #32]
 80192de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80192e0:	eb0a 0903 	add.w	r9, sl, r3
 80192e4:	f109 0301 	add.w	r3, r9, #1
 80192e8:	2b01      	cmp	r3, #1
 80192ea:	9301      	str	r3, [sp, #4]
 80192ec:	bfb8      	it	lt
 80192ee:	2301      	movlt	r3, #1
 80192f0:	e7dd      	b.n	80192ae <_dtoa_r+0x266>
 80192f2:	2301      	movs	r3, #1
 80192f4:	e7f2      	b.n	80192dc <_dtoa_r+0x294>
 80192f6:	2501      	movs	r5, #1
 80192f8:	2300      	movs	r3, #0
 80192fa:	9305      	str	r3, [sp, #20]
 80192fc:	9508      	str	r5, [sp, #32]
 80192fe:	f04f 39ff 	mov.w	r9, #4294967295
 8019302:	2200      	movs	r2, #0
 8019304:	f8cd 9004 	str.w	r9, [sp, #4]
 8019308:	2312      	movs	r3, #18
 801930a:	9209      	str	r2, [sp, #36]	; 0x24
 801930c:	e7cf      	b.n	80192ae <_dtoa_r+0x266>
 801930e:	2301      	movs	r3, #1
 8019310:	9308      	str	r3, [sp, #32]
 8019312:	e7f4      	b.n	80192fe <_dtoa_r+0x2b6>
 8019314:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8019318:	f8cd 9004 	str.w	r9, [sp, #4]
 801931c:	464b      	mov	r3, r9
 801931e:	e7c6      	b.n	80192ae <_dtoa_r+0x266>
 8019320:	3101      	adds	r1, #1
 8019322:	6041      	str	r1, [r0, #4]
 8019324:	0052      	lsls	r2, r2, #1
 8019326:	e7c6      	b.n	80192b6 <_dtoa_r+0x26e>
 8019328:	636f4361 	.word	0x636f4361
 801932c:	3fd287a7 	.word	0x3fd287a7
 8019330:	8b60c8b3 	.word	0x8b60c8b3
 8019334:	3fc68a28 	.word	0x3fc68a28
 8019338:	509f79fb 	.word	0x509f79fb
 801933c:	3fd34413 	.word	0x3fd34413
 8019340:	0801d7c5 	.word	0x0801d7c5
 8019344:	0801d7dc 	.word	0x0801d7dc
 8019348:	7ff00000 	.word	0x7ff00000
 801934c:	0801d7c1 	.word	0x0801d7c1
 8019350:	0801d7b8 	.word	0x0801d7b8
 8019354:	0801d759 	.word	0x0801d759
 8019358:	3ff80000 	.word	0x3ff80000
 801935c:	0801d938 	.word	0x0801d938
 8019360:	0801d83b 	.word	0x0801d83b
 8019364:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8019366:	9a00      	ldr	r2, [sp, #0]
 8019368:	601a      	str	r2, [r3, #0]
 801936a:	9b01      	ldr	r3, [sp, #4]
 801936c:	2b0e      	cmp	r3, #14
 801936e:	f200 80ad 	bhi.w	80194cc <_dtoa_r+0x484>
 8019372:	2d00      	cmp	r5, #0
 8019374:	f000 80aa 	beq.w	80194cc <_dtoa_r+0x484>
 8019378:	f1ba 0f00 	cmp.w	sl, #0
 801937c:	dd36      	ble.n	80193ec <_dtoa_r+0x3a4>
 801937e:	4ac3      	ldr	r2, [pc, #780]	; (801968c <_dtoa_r+0x644>)
 8019380:	f00a 030f 	and.w	r3, sl, #15
 8019384:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8019388:	ed93 7b00 	vldr	d7, [r3]
 801938c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8019390:	ea4f 172a 	mov.w	r7, sl, asr #4
 8019394:	eeb0 8a47 	vmov.f32	s16, s14
 8019398:	eef0 8a67 	vmov.f32	s17, s15
 801939c:	d016      	beq.n	80193cc <_dtoa_r+0x384>
 801939e:	4bbc      	ldr	r3, [pc, #752]	; (8019690 <_dtoa_r+0x648>)
 80193a0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80193a4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80193a8:	f7e7 fa70 	bl	800088c <__aeabi_ddiv>
 80193ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80193b0:	f007 070f 	and.w	r7, r7, #15
 80193b4:	2503      	movs	r5, #3
 80193b6:	4eb6      	ldr	r6, [pc, #728]	; (8019690 <_dtoa_r+0x648>)
 80193b8:	b957      	cbnz	r7, 80193d0 <_dtoa_r+0x388>
 80193ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80193be:	ec53 2b18 	vmov	r2, r3, d8
 80193c2:	f7e7 fa63 	bl	800088c <__aeabi_ddiv>
 80193c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80193ca:	e029      	b.n	8019420 <_dtoa_r+0x3d8>
 80193cc:	2502      	movs	r5, #2
 80193ce:	e7f2      	b.n	80193b6 <_dtoa_r+0x36e>
 80193d0:	07f9      	lsls	r1, r7, #31
 80193d2:	d508      	bpl.n	80193e6 <_dtoa_r+0x39e>
 80193d4:	ec51 0b18 	vmov	r0, r1, d8
 80193d8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80193dc:	f7e7 f92c 	bl	8000638 <__aeabi_dmul>
 80193e0:	ec41 0b18 	vmov	d8, r0, r1
 80193e4:	3501      	adds	r5, #1
 80193e6:	107f      	asrs	r7, r7, #1
 80193e8:	3608      	adds	r6, #8
 80193ea:	e7e5      	b.n	80193b8 <_dtoa_r+0x370>
 80193ec:	f000 80a6 	beq.w	801953c <_dtoa_r+0x4f4>
 80193f0:	f1ca 0600 	rsb	r6, sl, #0
 80193f4:	4ba5      	ldr	r3, [pc, #660]	; (801968c <_dtoa_r+0x644>)
 80193f6:	4fa6      	ldr	r7, [pc, #664]	; (8019690 <_dtoa_r+0x648>)
 80193f8:	f006 020f 	and.w	r2, r6, #15
 80193fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8019400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019404:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8019408:	f7e7 f916 	bl	8000638 <__aeabi_dmul>
 801940c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8019410:	1136      	asrs	r6, r6, #4
 8019412:	2300      	movs	r3, #0
 8019414:	2502      	movs	r5, #2
 8019416:	2e00      	cmp	r6, #0
 8019418:	f040 8085 	bne.w	8019526 <_dtoa_r+0x4de>
 801941c:	2b00      	cmp	r3, #0
 801941e:	d1d2      	bne.n	80193c6 <_dtoa_r+0x37e>
 8019420:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019422:	2b00      	cmp	r3, #0
 8019424:	f000 808c 	beq.w	8019540 <_dtoa_r+0x4f8>
 8019428:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801942c:	4b99      	ldr	r3, [pc, #612]	; (8019694 <_dtoa_r+0x64c>)
 801942e:	2200      	movs	r2, #0
 8019430:	4630      	mov	r0, r6
 8019432:	4639      	mov	r1, r7
 8019434:	f7e7 fb72 	bl	8000b1c <__aeabi_dcmplt>
 8019438:	2800      	cmp	r0, #0
 801943a:	f000 8081 	beq.w	8019540 <_dtoa_r+0x4f8>
 801943e:	9b01      	ldr	r3, [sp, #4]
 8019440:	2b00      	cmp	r3, #0
 8019442:	d07d      	beq.n	8019540 <_dtoa_r+0x4f8>
 8019444:	f1b9 0f00 	cmp.w	r9, #0
 8019448:	dd3c      	ble.n	80194c4 <_dtoa_r+0x47c>
 801944a:	f10a 33ff 	add.w	r3, sl, #4294967295
 801944e:	9307      	str	r3, [sp, #28]
 8019450:	2200      	movs	r2, #0
 8019452:	4b91      	ldr	r3, [pc, #580]	; (8019698 <_dtoa_r+0x650>)
 8019454:	4630      	mov	r0, r6
 8019456:	4639      	mov	r1, r7
 8019458:	f7e7 f8ee 	bl	8000638 <__aeabi_dmul>
 801945c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8019460:	3501      	adds	r5, #1
 8019462:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8019466:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801946a:	4628      	mov	r0, r5
 801946c:	f7e7 f87a 	bl	8000564 <__aeabi_i2d>
 8019470:	4632      	mov	r2, r6
 8019472:	463b      	mov	r3, r7
 8019474:	f7e7 f8e0 	bl	8000638 <__aeabi_dmul>
 8019478:	4b88      	ldr	r3, [pc, #544]	; (801969c <_dtoa_r+0x654>)
 801947a:	2200      	movs	r2, #0
 801947c:	f7e6 ff26 	bl	80002cc <__adddf3>
 8019480:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8019484:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8019488:	9303      	str	r3, [sp, #12]
 801948a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801948c:	2b00      	cmp	r3, #0
 801948e:	d15c      	bne.n	801954a <_dtoa_r+0x502>
 8019490:	4b83      	ldr	r3, [pc, #524]	; (80196a0 <_dtoa_r+0x658>)
 8019492:	2200      	movs	r2, #0
 8019494:	4630      	mov	r0, r6
 8019496:	4639      	mov	r1, r7
 8019498:	f7e6 ff16 	bl	80002c8 <__aeabi_dsub>
 801949c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80194a0:	4606      	mov	r6, r0
 80194a2:	460f      	mov	r7, r1
 80194a4:	f7e7 fb58 	bl	8000b58 <__aeabi_dcmpgt>
 80194a8:	2800      	cmp	r0, #0
 80194aa:	f040 8296 	bne.w	80199da <_dtoa_r+0x992>
 80194ae:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80194b2:	4630      	mov	r0, r6
 80194b4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80194b8:	4639      	mov	r1, r7
 80194ba:	f7e7 fb2f 	bl	8000b1c <__aeabi_dcmplt>
 80194be:	2800      	cmp	r0, #0
 80194c0:	f040 8288 	bne.w	80199d4 <_dtoa_r+0x98c>
 80194c4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80194c8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80194cc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80194ce:	2b00      	cmp	r3, #0
 80194d0:	f2c0 8158 	blt.w	8019784 <_dtoa_r+0x73c>
 80194d4:	f1ba 0f0e 	cmp.w	sl, #14
 80194d8:	f300 8154 	bgt.w	8019784 <_dtoa_r+0x73c>
 80194dc:	4b6b      	ldr	r3, [pc, #428]	; (801968c <_dtoa_r+0x644>)
 80194de:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80194e2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80194e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80194e8:	2b00      	cmp	r3, #0
 80194ea:	f280 80e3 	bge.w	80196b4 <_dtoa_r+0x66c>
 80194ee:	9b01      	ldr	r3, [sp, #4]
 80194f0:	2b00      	cmp	r3, #0
 80194f2:	f300 80df 	bgt.w	80196b4 <_dtoa_r+0x66c>
 80194f6:	f040 826d 	bne.w	80199d4 <_dtoa_r+0x98c>
 80194fa:	4b69      	ldr	r3, [pc, #420]	; (80196a0 <_dtoa_r+0x658>)
 80194fc:	2200      	movs	r2, #0
 80194fe:	4640      	mov	r0, r8
 8019500:	4649      	mov	r1, r9
 8019502:	f7e7 f899 	bl	8000638 <__aeabi_dmul>
 8019506:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801950a:	f7e7 fb1b 	bl	8000b44 <__aeabi_dcmpge>
 801950e:	9e01      	ldr	r6, [sp, #4]
 8019510:	4637      	mov	r7, r6
 8019512:	2800      	cmp	r0, #0
 8019514:	f040 8243 	bne.w	801999e <_dtoa_r+0x956>
 8019518:	9d00      	ldr	r5, [sp, #0]
 801951a:	2331      	movs	r3, #49	; 0x31
 801951c:	f805 3b01 	strb.w	r3, [r5], #1
 8019520:	f10a 0a01 	add.w	sl, sl, #1
 8019524:	e23f      	b.n	80199a6 <_dtoa_r+0x95e>
 8019526:	07f2      	lsls	r2, r6, #31
 8019528:	d505      	bpl.n	8019536 <_dtoa_r+0x4ee>
 801952a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801952e:	f7e7 f883 	bl	8000638 <__aeabi_dmul>
 8019532:	3501      	adds	r5, #1
 8019534:	2301      	movs	r3, #1
 8019536:	1076      	asrs	r6, r6, #1
 8019538:	3708      	adds	r7, #8
 801953a:	e76c      	b.n	8019416 <_dtoa_r+0x3ce>
 801953c:	2502      	movs	r5, #2
 801953e:	e76f      	b.n	8019420 <_dtoa_r+0x3d8>
 8019540:	9b01      	ldr	r3, [sp, #4]
 8019542:	f8cd a01c 	str.w	sl, [sp, #28]
 8019546:	930c      	str	r3, [sp, #48]	; 0x30
 8019548:	e78d      	b.n	8019466 <_dtoa_r+0x41e>
 801954a:	9900      	ldr	r1, [sp, #0]
 801954c:	980c      	ldr	r0, [sp, #48]	; 0x30
 801954e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8019550:	4b4e      	ldr	r3, [pc, #312]	; (801968c <_dtoa_r+0x644>)
 8019552:	ed9d 7b02 	vldr	d7, [sp, #8]
 8019556:	4401      	add	r1, r0
 8019558:	9102      	str	r1, [sp, #8]
 801955a:	9908      	ldr	r1, [sp, #32]
 801955c:	eeb0 8a47 	vmov.f32	s16, s14
 8019560:	eef0 8a67 	vmov.f32	s17, s15
 8019564:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8019568:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801956c:	2900      	cmp	r1, #0
 801956e:	d045      	beq.n	80195fc <_dtoa_r+0x5b4>
 8019570:	494c      	ldr	r1, [pc, #304]	; (80196a4 <_dtoa_r+0x65c>)
 8019572:	2000      	movs	r0, #0
 8019574:	f7e7 f98a 	bl	800088c <__aeabi_ddiv>
 8019578:	ec53 2b18 	vmov	r2, r3, d8
 801957c:	f7e6 fea4 	bl	80002c8 <__aeabi_dsub>
 8019580:	9d00      	ldr	r5, [sp, #0]
 8019582:	ec41 0b18 	vmov	d8, r0, r1
 8019586:	4639      	mov	r1, r7
 8019588:	4630      	mov	r0, r6
 801958a:	f7e7 fb05 	bl	8000b98 <__aeabi_d2iz>
 801958e:	900c      	str	r0, [sp, #48]	; 0x30
 8019590:	f7e6 ffe8 	bl	8000564 <__aeabi_i2d>
 8019594:	4602      	mov	r2, r0
 8019596:	460b      	mov	r3, r1
 8019598:	4630      	mov	r0, r6
 801959a:	4639      	mov	r1, r7
 801959c:	f7e6 fe94 	bl	80002c8 <__aeabi_dsub>
 80195a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80195a2:	3330      	adds	r3, #48	; 0x30
 80195a4:	f805 3b01 	strb.w	r3, [r5], #1
 80195a8:	ec53 2b18 	vmov	r2, r3, d8
 80195ac:	4606      	mov	r6, r0
 80195ae:	460f      	mov	r7, r1
 80195b0:	f7e7 fab4 	bl	8000b1c <__aeabi_dcmplt>
 80195b4:	2800      	cmp	r0, #0
 80195b6:	d165      	bne.n	8019684 <_dtoa_r+0x63c>
 80195b8:	4632      	mov	r2, r6
 80195ba:	463b      	mov	r3, r7
 80195bc:	4935      	ldr	r1, [pc, #212]	; (8019694 <_dtoa_r+0x64c>)
 80195be:	2000      	movs	r0, #0
 80195c0:	f7e6 fe82 	bl	80002c8 <__aeabi_dsub>
 80195c4:	ec53 2b18 	vmov	r2, r3, d8
 80195c8:	f7e7 faa8 	bl	8000b1c <__aeabi_dcmplt>
 80195cc:	2800      	cmp	r0, #0
 80195ce:	f040 80b9 	bne.w	8019744 <_dtoa_r+0x6fc>
 80195d2:	9b02      	ldr	r3, [sp, #8]
 80195d4:	429d      	cmp	r5, r3
 80195d6:	f43f af75 	beq.w	80194c4 <_dtoa_r+0x47c>
 80195da:	4b2f      	ldr	r3, [pc, #188]	; (8019698 <_dtoa_r+0x650>)
 80195dc:	ec51 0b18 	vmov	r0, r1, d8
 80195e0:	2200      	movs	r2, #0
 80195e2:	f7e7 f829 	bl	8000638 <__aeabi_dmul>
 80195e6:	4b2c      	ldr	r3, [pc, #176]	; (8019698 <_dtoa_r+0x650>)
 80195e8:	ec41 0b18 	vmov	d8, r0, r1
 80195ec:	2200      	movs	r2, #0
 80195ee:	4630      	mov	r0, r6
 80195f0:	4639      	mov	r1, r7
 80195f2:	f7e7 f821 	bl	8000638 <__aeabi_dmul>
 80195f6:	4606      	mov	r6, r0
 80195f8:	460f      	mov	r7, r1
 80195fa:	e7c4      	b.n	8019586 <_dtoa_r+0x53e>
 80195fc:	ec51 0b17 	vmov	r0, r1, d7
 8019600:	f7e7 f81a 	bl	8000638 <__aeabi_dmul>
 8019604:	9b02      	ldr	r3, [sp, #8]
 8019606:	9d00      	ldr	r5, [sp, #0]
 8019608:	930c      	str	r3, [sp, #48]	; 0x30
 801960a:	ec41 0b18 	vmov	d8, r0, r1
 801960e:	4639      	mov	r1, r7
 8019610:	4630      	mov	r0, r6
 8019612:	f7e7 fac1 	bl	8000b98 <__aeabi_d2iz>
 8019616:	9011      	str	r0, [sp, #68]	; 0x44
 8019618:	f7e6 ffa4 	bl	8000564 <__aeabi_i2d>
 801961c:	4602      	mov	r2, r0
 801961e:	460b      	mov	r3, r1
 8019620:	4630      	mov	r0, r6
 8019622:	4639      	mov	r1, r7
 8019624:	f7e6 fe50 	bl	80002c8 <__aeabi_dsub>
 8019628:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801962a:	3330      	adds	r3, #48	; 0x30
 801962c:	f805 3b01 	strb.w	r3, [r5], #1
 8019630:	9b02      	ldr	r3, [sp, #8]
 8019632:	429d      	cmp	r5, r3
 8019634:	4606      	mov	r6, r0
 8019636:	460f      	mov	r7, r1
 8019638:	f04f 0200 	mov.w	r2, #0
 801963c:	d134      	bne.n	80196a8 <_dtoa_r+0x660>
 801963e:	4b19      	ldr	r3, [pc, #100]	; (80196a4 <_dtoa_r+0x65c>)
 8019640:	ec51 0b18 	vmov	r0, r1, d8
 8019644:	f7e6 fe42 	bl	80002cc <__adddf3>
 8019648:	4602      	mov	r2, r0
 801964a:	460b      	mov	r3, r1
 801964c:	4630      	mov	r0, r6
 801964e:	4639      	mov	r1, r7
 8019650:	f7e7 fa82 	bl	8000b58 <__aeabi_dcmpgt>
 8019654:	2800      	cmp	r0, #0
 8019656:	d175      	bne.n	8019744 <_dtoa_r+0x6fc>
 8019658:	ec53 2b18 	vmov	r2, r3, d8
 801965c:	4911      	ldr	r1, [pc, #68]	; (80196a4 <_dtoa_r+0x65c>)
 801965e:	2000      	movs	r0, #0
 8019660:	f7e6 fe32 	bl	80002c8 <__aeabi_dsub>
 8019664:	4602      	mov	r2, r0
 8019666:	460b      	mov	r3, r1
 8019668:	4630      	mov	r0, r6
 801966a:	4639      	mov	r1, r7
 801966c:	f7e7 fa56 	bl	8000b1c <__aeabi_dcmplt>
 8019670:	2800      	cmp	r0, #0
 8019672:	f43f af27 	beq.w	80194c4 <_dtoa_r+0x47c>
 8019676:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8019678:	1e6b      	subs	r3, r5, #1
 801967a:	930c      	str	r3, [sp, #48]	; 0x30
 801967c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8019680:	2b30      	cmp	r3, #48	; 0x30
 8019682:	d0f8      	beq.n	8019676 <_dtoa_r+0x62e>
 8019684:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8019688:	e04a      	b.n	8019720 <_dtoa_r+0x6d8>
 801968a:	bf00      	nop
 801968c:	0801d938 	.word	0x0801d938
 8019690:	0801d910 	.word	0x0801d910
 8019694:	3ff00000 	.word	0x3ff00000
 8019698:	40240000 	.word	0x40240000
 801969c:	401c0000 	.word	0x401c0000
 80196a0:	40140000 	.word	0x40140000
 80196a4:	3fe00000 	.word	0x3fe00000
 80196a8:	4baf      	ldr	r3, [pc, #700]	; (8019968 <_dtoa_r+0x920>)
 80196aa:	f7e6 ffc5 	bl	8000638 <__aeabi_dmul>
 80196ae:	4606      	mov	r6, r0
 80196b0:	460f      	mov	r7, r1
 80196b2:	e7ac      	b.n	801960e <_dtoa_r+0x5c6>
 80196b4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80196b8:	9d00      	ldr	r5, [sp, #0]
 80196ba:	4642      	mov	r2, r8
 80196bc:	464b      	mov	r3, r9
 80196be:	4630      	mov	r0, r6
 80196c0:	4639      	mov	r1, r7
 80196c2:	f7e7 f8e3 	bl	800088c <__aeabi_ddiv>
 80196c6:	f7e7 fa67 	bl	8000b98 <__aeabi_d2iz>
 80196ca:	9002      	str	r0, [sp, #8]
 80196cc:	f7e6 ff4a 	bl	8000564 <__aeabi_i2d>
 80196d0:	4642      	mov	r2, r8
 80196d2:	464b      	mov	r3, r9
 80196d4:	f7e6 ffb0 	bl	8000638 <__aeabi_dmul>
 80196d8:	4602      	mov	r2, r0
 80196da:	460b      	mov	r3, r1
 80196dc:	4630      	mov	r0, r6
 80196de:	4639      	mov	r1, r7
 80196e0:	f7e6 fdf2 	bl	80002c8 <__aeabi_dsub>
 80196e4:	9e02      	ldr	r6, [sp, #8]
 80196e6:	9f01      	ldr	r7, [sp, #4]
 80196e8:	3630      	adds	r6, #48	; 0x30
 80196ea:	f805 6b01 	strb.w	r6, [r5], #1
 80196ee:	9e00      	ldr	r6, [sp, #0]
 80196f0:	1bae      	subs	r6, r5, r6
 80196f2:	42b7      	cmp	r7, r6
 80196f4:	4602      	mov	r2, r0
 80196f6:	460b      	mov	r3, r1
 80196f8:	d137      	bne.n	801976a <_dtoa_r+0x722>
 80196fa:	f7e6 fde7 	bl	80002cc <__adddf3>
 80196fe:	4642      	mov	r2, r8
 8019700:	464b      	mov	r3, r9
 8019702:	4606      	mov	r6, r0
 8019704:	460f      	mov	r7, r1
 8019706:	f7e7 fa27 	bl	8000b58 <__aeabi_dcmpgt>
 801970a:	b9c8      	cbnz	r0, 8019740 <_dtoa_r+0x6f8>
 801970c:	4642      	mov	r2, r8
 801970e:	464b      	mov	r3, r9
 8019710:	4630      	mov	r0, r6
 8019712:	4639      	mov	r1, r7
 8019714:	f7e7 f9f8 	bl	8000b08 <__aeabi_dcmpeq>
 8019718:	b110      	cbz	r0, 8019720 <_dtoa_r+0x6d8>
 801971a:	9b02      	ldr	r3, [sp, #8]
 801971c:	07d9      	lsls	r1, r3, #31
 801971e:	d40f      	bmi.n	8019740 <_dtoa_r+0x6f8>
 8019720:	4620      	mov	r0, r4
 8019722:	4659      	mov	r1, fp
 8019724:	f000 fcfe 	bl	801a124 <_Bfree>
 8019728:	2300      	movs	r3, #0
 801972a:	702b      	strb	r3, [r5, #0]
 801972c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801972e:	f10a 0001 	add.w	r0, sl, #1
 8019732:	6018      	str	r0, [r3, #0]
 8019734:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8019736:	2b00      	cmp	r3, #0
 8019738:	f43f acd8 	beq.w	80190ec <_dtoa_r+0xa4>
 801973c:	601d      	str	r5, [r3, #0]
 801973e:	e4d5      	b.n	80190ec <_dtoa_r+0xa4>
 8019740:	f8cd a01c 	str.w	sl, [sp, #28]
 8019744:	462b      	mov	r3, r5
 8019746:	461d      	mov	r5, r3
 8019748:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801974c:	2a39      	cmp	r2, #57	; 0x39
 801974e:	d108      	bne.n	8019762 <_dtoa_r+0x71a>
 8019750:	9a00      	ldr	r2, [sp, #0]
 8019752:	429a      	cmp	r2, r3
 8019754:	d1f7      	bne.n	8019746 <_dtoa_r+0x6fe>
 8019756:	9a07      	ldr	r2, [sp, #28]
 8019758:	9900      	ldr	r1, [sp, #0]
 801975a:	3201      	adds	r2, #1
 801975c:	9207      	str	r2, [sp, #28]
 801975e:	2230      	movs	r2, #48	; 0x30
 8019760:	700a      	strb	r2, [r1, #0]
 8019762:	781a      	ldrb	r2, [r3, #0]
 8019764:	3201      	adds	r2, #1
 8019766:	701a      	strb	r2, [r3, #0]
 8019768:	e78c      	b.n	8019684 <_dtoa_r+0x63c>
 801976a:	4b7f      	ldr	r3, [pc, #508]	; (8019968 <_dtoa_r+0x920>)
 801976c:	2200      	movs	r2, #0
 801976e:	f7e6 ff63 	bl	8000638 <__aeabi_dmul>
 8019772:	2200      	movs	r2, #0
 8019774:	2300      	movs	r3, #0
 8019776:	4606      	mov	r6, r0
 8019778:	460f      	mov	r7, r1
 801977a:	f7e7 f9c5 	bl	8000b08 <__aeabi_dcmpeq>
 801977e:	2800      	cmp	r0, #0
 8019780:	d09b      	beq.n	80196ba <_dtoa_r+0x672>
 8019782:	e7cd      	b.n	8019720 <_dtoa_r+0x6d8>
 8019784:	9a08      	ldr	r2, [sp, #32]
 8019786:	2a00      	cmp	r2, #0
 8019788:	f000 80c4 	beq.w	8019914 <_dtoa_r+0x8cc>
 801978c:	9a05      	ldr	r2, [sp, #20]
 801978e:	2a01      	cmp	r2, #1
 8019790:	f300 80a8 	bgt.w	80198e4 <_dtoa_r+0x89c>
 8019794:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8019796:	2a00      	cmp	r2, #0
 8019798:	f000 80a0 	beq.w	80198dc <_dtoa_r+0x894>
 801979c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80197a0:	9e06      	ldr	r6, [sp, #24]
 80197a2:	4645      	mov	r5, r8
 80197a4:	9a04      	ldr	r2, [sp, #16]
 80197a6:	2101      	movs	r1, #1
 80197a8:	441a      	add	r2, r3
 80197aa:	4620      	mov	r0, r4
 80197ac:	4498      	add	r8, r3
 80197ae:	9204      	str	r2, [sp, #16]
 80197b0:	f000 fd74 	bl	801a29c <__i2b>
 80197b4:	4607      	mov	r7, r0
 80197b6:	2d00      	cmp	r5, #0
 80197b8:	dd0b      	ble.n	80197d2 <_dtoa_r+0x78a>
 80197ba:	9b04      	ldr	r3, [sp, #16]
 80197bc:	2b00      	cmp	r3, #0
 80197be:	dd08      	ble.n	80197d2 <_dtoa_r+0x78a>
 80197c0:	42ab      	cmp	r3, r5
 80197c2:	9a04      	ldr	r2, [sp, #16]
 80197c4:	bfa8      	it	ge
 80197c6:	462b      	movge	r3, r5
 80197c8:	eba8 0803 	sub.w	r8, r8, r3
 80197cc:	1aed      	subs	r5, r5, r3
 80197ce:	1ad3      	subs	r3, r2, r3
 80197d0:	9304      	str	r3, [sp, #16]
 80197d2:	9b06      	ldr	r3, [sp, #24]
 80197d4:	b1fb      	cbz	r3, 8019816 <_dtoa_r+0x7ce>
 80197d6:	9b08      	ldr	r3, [sp, #32]
 80197d8:	2b00      	cmp	r3, #0
 80197da:	f000 809f 	beq.w	801991c <_dtoa_r+0x8d4>
 80197de:	2e00      	cmp	r6, #0
 80197e0:	dd11      	ble.n	8019806 <_dtoa_r+0x7be>
 80197e2:	4639      	mov	r1, r7
 80197e4:	4632      	mov	r2, r6
 80197e6:	4620      	mov	r0, r4
 80197e8:	f000 fe14 	bl	801a414 <__pow5mult>
 80197ec:	465a      	mov	r2, fp
 80197ee:	4601      	mov	r1, r0
 80197f0:	4607      	mov	r7, r0
 80197f2:	4620      	mov	r0, r4
 80197f4:	f000 fd68 	bl	801a2c8 <__multiply>
 80197f8:	4659      	mov	r1, fp
 80197fa:	9007      	str	r0, [sp, #28]
 80197fc:	4620      	mov	r0, r4
 80197fe:	f000 fc91 	bl	801a124 <_Bfree>
 8019802:	9b07      	ldr	r3, [sp, #28]
 8019804:	469b      	mov	fp, r3
 8019806:	9b06      	ldr	r3, [sp, #24]
 8019808:	1b9a      	subs	r2, r3, r6
 801980a:	d004      	beq.n	8019816 <_dtoa_r+0x7ce>
 801980c:	4659      	mov	r1, fp
 801980e:	4620      	mov	r0, r4
 8019810:	f000 fe00 	bl	801a414 <__pow5mult>
 8019814:	4683      	mov	fp, r0
 8019816:	2101      	movs	r1, #1
 8019818:	4620      	mov	r0, r4
 801981a:	f000 fd3f 	bl	801a29c <__i2b>
 801981e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019820:	2b00      	cmp	r3, #0
 8019822:	4606      	mov	r6, r0
 8019824:	dd7c      	ble.n	8019920 <_dtoa_r+0x8d8>
 8019826:	461a      	mov	r2, r3
 8019828:	4601      	mov	r1, r0
 801982a:	4620      	mov	r0, r4
 801982c:	f000 fdf2 	bl	801a414 <__pow5mult>
 8019830:	9b05      	ldr	r3, [sp, #20]
 8019832:	2b01      	cmp	r3, #1
 8019834:	4606      	mov	r6, r0
 8019836:	dd76      	ble.n	8019926 <_dtoa_r+0x8de>
 8019838:	2300      	movs	r3, #0
 801983a:	9306      	str	r3, [sp, #24]
 801983c:	6933      	ldr	r3, [r6, #16]
 801983e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8019842:	6918      	ldr	r0, [r3, #16]
 8019844:	f000 fcda 	bl	801a1fc <__hi0bits>
 8019848:	f1c0 0020 	rsb	r0, r0, #32
 801984c:	9b04      	ldr	r3, [sp, #16]
 801984e:	4418      	add	r0, r3
 8019850:	f010 001f 	ands.w	r0, r0, #31
 8019854:	f000 8086 	beq.w	8019964 <_dtoa_r+0x91c>
 8019858:	f1c0 0320 	rsb	r3, r0, #32
 801985c:	2b04      	cmp	r3, #4
 801985e:	dd7f      	ble.n	8019960 <_dtoa_r+0x918>
 8019860:	f1c0 001c 	rsb	r0, r0, #28
 8019864:	9b04      	ldr	r3, [sp, #16]
 8019866:	4403      	add	r3, r0
 8019868:	4480      	add	r8, r0
 801986a:	4405      	add	r5, r0
 801986c:	9304      	str	r3, [sp, #16]
 801986e:	f1b8 0f00 	cmp.w	r8, #0
 8019872:	dd05      	ble.n	8019880 <_dtoa_r+0x838>
 8019874:	4659      	mov	r1, fp
 8019876:	4642      	mov	r2, r8
 8019878:	4620      	mov	r0, r4
 801987a:	f000 fe25 	bl	801a4c8 <__lshift>
 801987e:	4683      	mov	fp, r0
 8019880:	9b04      	ldr	r3, [sp, #16]
 8019882:	2b00      	cmp	r3, #0
 8019884:	dd05      	ble.n	8019892 <_dtoa_r+0x84a>
 8019886:	4631      	mov	r1, r6
 8019888:	461a      	mov	r2, r3
 801988a:	4620      	mov	r0, r4
 801988c:	f000 fe1c 	bl	801a4c8 <__lshift>
 8019890:	4606      	mov	r6, r0
 8019892:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019894:	2b00      	cmp	r3, #0
 8019896:	d069      	beq.n	801996c <_dtoa_r+0x924>
 8019898:	4631      	mov	r1, r6
 801989a:	4658      	mov	r0, fp
 801989c:	f000 fe80 	bl	801a5a0 <__mcmp>
 80198a0:	2800      	cmp	r0, #0
 80198a2:	da63      	bge.n	801996c <_dtoa_r+0x924>
 80198a4:	2300      	movs	r3, #0
 80198a6:	4659      	mov	r1, fp
 80198a8:	220a      	movs	r2, #10
 80198aa:	4620      	mov	r0, r4
 80198ac:	f000 fc5c 	bl	801a168 <__multadd>
 80198b0:	9b08      	ldr	r3, [sp, #32]
 80198b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80198b6:	4683      	mov	fp, r0
 80198b8:	2b00      	cmp	r3, #0
 80198ba:	f000 818f 	beq.w	8019bdc <_dtoa_r+0xb94>
 80198be:	4639      	mov	r1, r7
 80198c0:	2300      	movs	r3, #0
 80198c2:	220a      	movs	r2, #10
 80198c4:	4620      	mov	r0, r4
 80198c6:	f000 fc4f 	bl	801a168 <__multadd>
 80198ca:	f1b9 0f00 	cmp.w	r9, #0
 80198ce:	4607      	mov	r7, r0
 80198d0:	f300 808e 	bgt.w	80199f0 <_dtoa_r+0x9a8>
 80198d4:	9b05      	ldr	r3, [sp, #20]
 80198d6:	2b02      	cmp	r3, #2
 80198d8:	dc50      	bgt.n	801997c <_dtoa_r+0x934>
 80198da:	e089      	b.n	80199f0 <_dtoa_r+0x9a8>
 80198dc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80198de:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80198e2:	e75d      	b.n	80197a0 <_dtoa_r+0x758>
 80198e4:	9b01      	ldr	r3, [sp, #4]
 80198e6:	1e5e      	subs	r6, r3, #1
 80198e8:	9b06      	ldr	r3, [sp, #24]
 80198ea:	42b3      	cmp	r3, r6
 80198ec:	bfbf      	itttt	lt
 80198ee:	9b06      	ldrlt	r3, [sp, #24]
 80198f0:	9606      	strlt	r6, [sp, #24]
 80198f2:	1af2      	sublt	r2, r6, r3
 80198f4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80198f6:	bfb6      	itet	lt
 80198f8:	189b      	addlt	r3, r3, r2
 80198fa:	1b9e      	subge	r6, r3, r6
 80198fc:	930d      	strlt	r3, [sp, #52]	; 0x34
 80198fe:	9b01      	ldr	r3, [sp, #4]
 8019900:	bfb8      	it	lt
 8019902:	2600      	movlt	r6, #0
 8019904:	2b00      	cmp	r3, #0
 8019906:	bfb5      	itete	lt
 8019908:	eba8 0503 	sublt.w	r5, r8, r3
 801990c:	9b01      	ldrge	r3, [sp, #4]
 801990e:	2300      	movlt	r3, #0
 8019910:	4645      	movge	r5, r8
 8019912:	e747      	b.n	80197a4 <_dtoa_r+0x75c>
 8019914:	9e06      	ldr	r6, [sp, #24]
 8019916:	9f08      	ldr	r7, [sp, #32]
 8019918:	4645      	mov	r5, r8
 801991a:	e74c      	b.n	80197b6 <_dtoa_r+0x76e>
 801991c:	9a06      	ldr	r2, [sp, #24]
 801991e:	e775      	b.n	801980c <_dtoa_r+0x7c4>
 8019920:	9b05      	ldr	r3, [sp, #20]
 8019922:	2b01      	cmp	r3, #1
 8019924:	dc18      	bgt.n	8019958 <_dtoa_r+0x910>
 8019926:	9b02      	ldr	r3, [sp, #8]
 8019928:	b9b3      	cbnz	r3, 8019958 <_dtoa_r+0x910>
 801992a:	9b03      	ldr	r3, [sp, #12]
 801992c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8019930:	b9a3      	cbnz	r3, 801995c <_dtoa_r+0x914>
 8019932:	9b03      	ldr	r3, [sp, #12]
 8019934:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8019938:	0d1b      	lsrs	r3, r3, #20
 801993a:	051b      	lsls	r3, r3, #20
 801993c:	b12b      	cbz	r3, 801994a <_dtoa_r+0x902>
 801993e:	9b04      	ldr	r3, [sp, #16]
 8019940:	3301      	adds	r3, #1
 8019942:	9304      	str	r3, [sp, #16]
 8019944:	f108 0801 	add.w	r8, r8, #1
 8019948:	2301      	movs	r3, #1
 801994a:	9306      	str	r3, [sp, #24]
 801994c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801994e:	2b00      	cmp	r3, #0
 8019950:	f47f af74 	bne.w	801983c <_dtoa_r+0x7f4>
 8019954:	2001      	movs	r0, #1
 8019956:	e779      	b.n	801984c <_dtoa_r+0x804>
 8019958:	2300      	movs	r3, #0
 801995a:	e7f6      	b.n	801994a <_dtoa_r+0x902>
 801995c:	9b02      	ldr	r3, [sp, #8]
 801995e:	e7f4      	b.n	801994a <_dtoa_r+0x902>
 8019960:	d085      	beq.n	801986e <_dtoa_r+0x826>
 8019962:	4618      	mov	r0, r3
 8019964:	301c      	adds	r0, #28
 8019966:	e77d      	b.n	8019864 <_dtoa_r+0x81c>
 8019968:	40240000 	.word	0x40240000
 801996c:	9b01      	ldr	r3, [sp, #4]
 801996e:	2b00      	cmp	r3, #0
 8019970:	dc38      	bgt.n	80199e4 <_dtoa_r+0x99c>
 8019972:	9b05      	ldr	r3, [sp, #20]
 8019974:	2b02      	cmp	r3, #2
 8019976:	dd35      	ble.n	80199e4 <_dtoa_r+0x99c>
 8019978:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801997c:	f1b9 0f00 	cmp.w	r9, #0
 8019980:	d10d      	bne.n	801999e <_dtoa_r+0x956>
 8019982:	4631      	mov	r1, r6
 8019984:	464b      	mov	r3, r9
 8019986:	2205      	movs	r2, #5
 8019988:	4620      	mov	r0, r4
 801998a:	f000 fbed 	bl	801a168 <__multadd>
 801998e:	4601      	mov	r1, r0
 8019990:	4606      	mov	r6, r0
 8019992:	4658      	mov	r0, fp
 8019994:	f000 fe04 	bl	801a5a0 <__mcmp>
 8019998:	2800      	cmp	r0, #0
 801999a:	f73f adbd 	bgt.w	8019518 <_dtoa_r+0x4d0>
 801999e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80199a0:	9d00      	ldr	r5, [sp, #0]
 80199a2:	ea6f 0a03 	mvn.w	sl, r3
 80199a6:	f04f 0800 	mov.w	r8, #0
 80199aa:	4631      	mov	r1, r6
 80199ac:	4620      	mov	r0, r4
 80199ae:	f000 fbb9 	bl	801a124 <_Bfree>
 80199b2:	2f00      	cmp	r7, #0
 80199b4:	f43f aeb4 	beq.w	8019720 <_dtoa_r+0x6d8>
 80199b8:	f1b8 0f00 	cmp.w	r8, #0
 80199bc:	d005      	beq.n	80199ca <_dtoa_r+0x982>
 80199be:	45b8      	cmp	r8, r7
 80199c0:	d003      	beq.n	80199ca <_dtoa_r+0x982>
 80199c2:	4641      	mov	r1, r8
 80199c4:	4620      	mov	r0, r4
 80199c6:	f000 fbad 	bl	801a124 <_Bfree>
 80199ca:	4639      	mov	r1, r7
 80199cc:	4620      	mov	r0, r4
 80199ce:	f000 fba9 	bl	801a124 <_Bfree>
 80199d2:	e6a5      	b.n	8019720 <_dtoa_r+0x6d8>
 80199d4:	2600      	movs	r6, #0
 80199d6:	4637      	mov	r7, r6
 80199d8:	e7e1      	b.n	801999e <_dtoa_r+0x956>
 80199da:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80199dc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80199e0:	4637      	mov	r7, r6
 80199e2:	e599      	b.n	8019518 <_dtoa_r+0x4d0>
 80199e4:	9b08      	ldr	r3, [sp, #32]
 80199e6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80199ea:	2b00      	cmp	r3, #0
 80199ec:	f000 80fd 	beq.w	8019bea <_dtoa_r+0xba2>
 80199f0:	2d00      	cmp	r5, #0
 80199f2:	dd05      	ble.n	8019a00 <_dtoa_r+0x9b8>
 80199f4:	4639      	mov	r1, r7
 80199f6:	462a      	mov	r2, r5
 80199f8:	4620      	mov	r0, r4
 80199fa:	f000 fd65 	bl	801a4c8 <__lshift>
 80199fe:	4607      	mov	r7, r0
 8019a00:	9b06      	ldr	r3, [sp, #24]
 8019a02:	2b00      	cmp	r3, #0
 8019a04:	d05c      	beq.n	8019ac0 <_dtoa_r+0xa78>
 8019a06:	6879      	ldr	r1, [r7, #4]
 8019a08:	4620      	mov	r0, r4
 8019a0a:	f000 fb4b 	bl	801a0a4 <_Balloc>
 8019a0e:	4605      	mov	r5, r0
 8019a10:	b928      	cbnz	r0, 8019a1e <_dtoa_r+0x9d6>
 8019a12:	4b80      	ldr	r3, [pc, #512]	; (8019c14 <_dtoa_r+0xbcc>)
 8019a14:	4602      	mov	r2, r0
 8019a16:	f240 21ea 	movw	r1, #746	; 0x2ea
 8019a1a:	f7ff bb2e 	b.w	801907a <_dtoa_r+0x32>
 8019a1e:	693a      	ldr	r2, [r7, #16]
 8019a20:	3202      	adds	r2, #2
 8019a22:	0092      	lsls	r2, r2, #2
 8019a24:	f107 010c 	add.w	r1, r7, #12
 8019a28:	300c      	adds	r0, #12
 8019a2a:	f7fe fba5 	bl	8018178 <memcpy>
 8019a2e:	2201      	movs	r2, #1
 8019a30:	4629      	mov	r1, r5
 8019a32:	4620      	mov	r0, r4
 8019a34:	f000 fd48 	bl	801a4c8 <__lshift>
 8019a38:	9b00      	ldr	r3, [sp, #0]
 8019a3a:	3301      	adds	r3, #1
 8019a3c:	9301      	str	r3, [sp, #4]
 8019a3e:	9b00      	ldr	r3, [sp, #0]
 8019a40:	444b      	add	r3, r9
 8019a42:	9307      	str	r3, [sp, #28]
 8019a44:	9b02      	ldr	r3, [sp, #8]
 8019a46:	f003 0301 	and.w	r3, r3, #1
 8019a4a:	46b8      	mov	r8, r7
 8019a4c:	9306      	str	r3, [sp, #24]
 8019a4e:	4607      	mov	r7, r0
 8019a50:	9b01      	ldr	r3, [sp, #4]
 8019a52:	4631      	mov	r1, r6
 8019a54:	3b01      	subs	r3, #1
 8019a56:	4658      	mov	r0, fp
 8019a58:	9302      	str	r3, [sp, #8]
 8019a5a:	f7ff fa69 	bl	8018f30 <quorem>
 8019a5e:	4603      	mov	r3, r0
 8019a60:	3330      	adds	r3, #48	; 0x30
 8019a62:	9004      	str	r0, [sp, #16]
 8019a64:	4641      	mov	r1, r8
 8019a66:	4658      	mov	r0, fp
 8019a68:	9308      	str	r3, [sp, #32]
 8019a6a:	f000 fd99 	bl	801a5a0 <__mcmp>
 8019a6e:	463a      	mov	r2, r7
 8019a70:	4681      	mov	r9, r0
 8019a72:	4631      	mov	r1, r6
 8019a74:	4620      	mov	r0, r4
 8019a76:	f000 fdaf 	bl	801a5d8 <__mdiff>
 8019a7a:	68c2      	ldr	r2, [r0, #12]
 8019a7c:	9b08      	ldr	r3, [sp, #32]
 8019a7e:	4605      	mov	r5, r0
 8019a80:	bb02      	cbnz	r2, 8019ac4 <_dtoa_r+0xa7c>
 8019a82:	4601      	mov	r1, r0
 8019a84:	4658      	mov	r0, fp
 8019a86:	f000 fd8b 	bl	801a5a0 <__mcmp>
 8019a8a:	9b08      	ldr	r3, [sp, #32]
 8019a8c:	4602      	mov	r2, r0
 8019a8e:	4629      	mov	r1, r5
 8019a90:	4620      	mov	r0, r4
 8019a92:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8019a96:	f000 fb45 	bl	801a124 <_Bfree>
 8019a9a:	9b05      	ldr	r3, [sp, #20]
 8019a9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019a9e:	9d01      	ldr	r5, [sp, #4]
 8019aa0:	ea43 0102 	orr.w	r1, r3, r2
 8019aa4:	9b06      	ldr	r3, [sp, #24]
 8019aa6:	430b      	orrs	r3, r1
 8019aa8:	9b08      	ldr	r3, [sp, #32]
 8019aaa:	d10d      	bne.n	8019ac8 <_dtoa_r+0xa80>
 8019aac:	2b39      	cmp	r3, #57	; 0x39
 8019aae:	d029      	beq.n	8019b04 <_dtoa_r+0xabc>
 8019ab0:	f1b9 0f00 	cmp.w	r9, #0
 8019ab4:	dd01      	ble.n	8019aba <_dtoa_r+0xa72>
 8019ab6:	9b04      	ldr	r3, [sp, #16]
 8019ab8:	3331      	adds	r3, #49	; 0x31
 8019aba:	9a02      	ldr	r2, [sp, #8]
 8019abc:	7013      	strb	r3, [r2, #0]
 8019abe:	e774      	b.n	80199aa <_dtoa_r+0x962>
 8019ac0:	4638      	mov	r0, r7
 8019ac2:	e7b9      	b.n	8019a38 <_dtoa_r+0x9f0>
 8019ac4:	2201      	movs	r2, #1
 8019ac6:	e7e2      	b.n	8019a8e <_dtoa_r+0xa46>
 8019ac8:	f1b9 0f00 	cmp.w	r9, #0
 8019acc:	db06      	blt.n	8019adc <_dtoa_r+0xa94>
 8019ace:	9905      	ldr	r1, [sp, #20]
 8019ad0:	ea41 0909 	orr.w	r9, r1, r9
 8019ad4:	9906      	ldr	r1, [sp, #24]
 8019ad6:	ea59 0101 	orrs.w	r1, r9, r1
 8019ada:	d120      	bne.n	8019b1e <_dtoa_r+0xad6>
 8019adc:	2a00      	cmp	r2, #0
 8019ade:	ddec      	ble.n	8019aba <_dtoa_r+0xa72>
 8019ae0:	4659      	mov	r1, fp
 8019ae2:	2201      	movs	r2, #1
 8019ae4:	4620      	mov	r0, r4
 8019ae6:	9301      	str	r3, [sp, #4]
 8019ae8:	f000 fcee 	bl	801a4c8 <__lshift>
 8019aec:	4631      	mov	r1, r6
 8019aee:	4683      	mov	fp, r0
 8019af0:	f000 fd56 	bl	801a5a0 <__mcmp>
 8019af4:	2800      	cmp	r0, #0
 8019af6:	9b01      	ldr	r3, [sp, #4]
 8019af8:	dc02      	bgt.n	8019b00 <_dtoa_r+0xab8>
 8019afa:	d1de      	bne.n	8019aba <_dtoa_r+0xa72>
 8019afc:	07da      	lsls	r2, r3, #31
 8019afe:	d5dc      	bpl.n	8019aba <_dtoa_r+0xa72>
 8019b00:	2b39      	cmp	r3, #57	; 0x39
 8019b02:	d1d8      	bne.n	8019ab6 <_dtoa_r+0xa6e>
 8019b04:	9a02      	ldr	r2, [sp, #8]
 8019b06:	2339      	movs	r3, #57	; 0x39
 8019b08:	7013      	strb	r3, [r2, #0]
 8019b0a:	462b      	mov	r3, r5
 8019b0c:	461d      	mov	r5, r3
 8019b0e:	3b01      	subs	r3, #1
 8019b10:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8019b14:	2a39      	cmp	r2, #57	; 0x39
 8019b16:	d050      	beq.n	8019bba <_dtoa_r+0xb72>
 8019b18:	3201      	adds	r2, #1
 8019b1a:	701a      	strb	r2, [r3, #0]
 8019b1c:	e745      	b.n	80199aa <_dtoa_r+0x962>
 8019b1e:	2a00      	cmp	r2, #0
 8019b20:	dd03      	ble.n	8019b2a <_dtoa_r+0xae2>
 8019b22:	2b39      	cmp	r3, #57	; 0x39
 8019b24:	d0ee      	beq.n	8019b04 <_dtoa_r+0xabc>
 8019b26:	3301      	adds	r3, #1
 8019b28:	e7c7      	b.n	8019aba <_dtoa_r+0xa72>
 8019b2a:	9a01      	ldr	r2, [sp, #4]
 8019b2c:	9907      	ldr	r1, [sp, #28]
 8019b2e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8019b32:	428a      	cmp	r2, r1
 8019b34:	d02a      	beq.n	8019b8c <_dtoa_r+0xb44>
 8019b36:	4659      	mov	r1, fp
 8019b38:	2300      	movs	r3, #0
 8019b3a:	220a      	movs	r2, #10
 8019b3c:	4620      	mov	r0, r4
 8019b3e:	f000 fb13 	bl	801a168 <__multadd>
 8019b42:	45b8      	cmp	r8, r7
 8019b44:	4683      	mov	fp, r0
 8019b46:	f04f 0300 	mov.w	r3, #0
 8019b4a:	f04f 020a 	mov.w	r2, #10
 8019b4e:	4641      	mov	r1, r8
 8019b50:	4620      	mov	r0, r4
 8019b52:	d107      	bne.n	8019b64 <_dtoa_r+0xb1c>
 8019b54:	f000 fb08 	bl	801a168 <__multadd>
 8019b58:	4680      	mov	r8, r0
 8019b5a:	4607      	mov	r7, r0
 8019b5c:	9b01      	ldr	r3, [sp, #4]
 8019b5e:	3301      	adds	r3, #1
 8019b60:	9301      	str	r3, [sp, #4]
 8019b62:	e775      	b.n	8019a50 <_dtoa_r+0xa08>
 8019b64:	f000 fb00 	bl	801a168 <__multadd>
 8019b68:	4639      	mov	r1, r7
 8019b6a:	4680      	mov	r8, r0
 8019b6c:	2300      	movs	r3, #0
 8019b6e:	220a      	movs	r2, #10
 8019b70:	4620      	mov	r0, r4
 8019b72:	f000 faf9 	bl	801a168 <__multadd>
 8019b76:	4607      	mov	r7, r0
 8019b78:	e7f0      	b.n	8019b5c <_dtoa_r+0xb14>
 8019b7a:	f1b9 0f00 	cmp.w	r9, #0
 8019b7e:	9a00      	ldr	r2, [sp, #0]
 8019b80:	bfcc      	ite	gt
 8019b82:	464d      	movgt	r5, r9
 8019b84:	2501      	movle	r5, #1
 8019b86:	4415      	add	r5, r2
 8019b88:	f04f 0800 	mov.w	r8, #0
 8019b8c:	4659      	mov	r1, fp
 8019b8e:	2201      	movs	r2, #1
 8019b90:	4620      	mov	r0, r4
 8019b92:	9301      	str	r3, [sp, #4]
 8019b94:	f000 fc98 	bl	801a4c8 <__lshift>
 8019b98:	4631      	mov	r1, r6
 8019b9a:	4683      	mov	fp, r0
 8019b9c:	f000 fd00 	bl	801a5a0 <__mcmp>
 8019ba0:	2800      	cmp	r0, #0
 8019ba2:	dcb2      	bgt.n	8019b0a <_dtoa_r+0xac2>
 8019ba4:	d102      	bne.n	8019bac <_dtoa_r+0xb64>
 8019ba6:	9b01      	ldr	r3, [sp, #4]
 8019ba8:	07db      	lsls	r3, r3, #31
 8019baa:	d4ae      	bmi.n	8019b0a <_dtoa_r+0xac2>
 8019bac:	462b      	mov	r3, r5
 8019bae:	461d      	mov	r5, r3
 8019bb0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8019bb4:	2a30      	cmp	r2, #48	; 0x30
 8019bb6:	d0fa      	beq.n	8019bae <_dtoa_r+0xb66>
 8019bb8:	e6f7      	b.n	80199aa <_dtoa_r+0x962>
 8019bba:	9a00      	ldr	r2, [sp, #0]
 8019bbc:	429a      	cmp	r2, r3
 8019bbe:	d1a5      	bne.n	8019b0c <_dtoa_r+0xac4>
 8019bc0:	f10a 0a01 	add.w	sl, sl, #1
 8019bc4:	2331      	movs	r3, #49	; 0x31
 8019bc6:	e779      	b.n	8019abc <_dtoa_r+0xa74>
 8019bc8:	4b13      	ldr	r3, [pc, #76]	; (8019c18 <_dtoa_r+0xbd0>)
 8019bca:	f7ff baaf 	b.w	801912c <_dtoa_r+0xe4>
 8019bce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8019bd0:	2b00      	cmp	r3, #0
 8019bd2:	f47f aa86 	bne.w	80190e2 <_dtoa_r+0x9a>
 8019bd6:	4b11      	ldr	r3, [pc, #68]	; (8019c1c <_dtoa_r+0xbd4>)
 8019bd8:	f7ff baa8 	b.w	801912c <_dtoa_r+0xe4>
 8019bdc:	f1b9 0f00 	cmp.w	r9, #0
 8019be0:	dc03      	bgt.n	8019bea <_dtoa_r+0xba2>
 8019be2:	9b05      	ldr	r3, [sp, #20]
 8019be4:	2b02      	cmp	r3, #2
 8019be6:	f73f aec9 	bgt.w	801997c <_dtoa_r+0x934>
 8019bea:	9d00      	ldr	r5, [sp, #0]
 8019bec:	4631      	mov	r1, r6
 8019bee:	4658      	mov	r0, fp
 8019bf0:	f7ff f99e 	bl	8018f30 <quorem>
 8019bf4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8019bf8:	f805 3b01 	strb.w	r3, [r5], #1
 8019bfc:	9a00      	ldr	r2, [sp, #0]
 8019bfe:	1aaa      	subs	r2, r5, r2
 8019c00:	4591      	cmp	r9, r2
 8019c02:	ddba      	ble.n	8019b7a <_dtoa_r+0xb32>
 8019c04:	4659      	mov	r1, fp
 8019c06:	2300      	movs	r3, #0
 8019c08:	220a      	movs	r2, #10
 8019c0a:	4620      	mov	r0, r4
 8019c0c:	f000 faac 	bl	801a168 <__multadd>
 8019c10:	4683      	mov	fp, r0
 8019c12:	e7eb      	b.n	8019bec <_dtoa_r+0xba4>
 8019c14:	0801d83b 	.word	0x0801d83b
 8019c18:	0801d758 	.word	0x0801d758
 8019c1c:	0801d7b8 	.word	0x0801d7b8

08019c20 <__sflush_r>:
 8019c20:	898a      	ldrh	r2, [r1, #12]
 8019c22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019c26:	4605      	mov	r5, r0
 8019c28:	0710      	lsls	r0, r2, #28
 8019c2a:	460c      	mov	r4, r1
 8019c2c:	d458      	bmi.n	8019ce0 <__sflush_r+0xc0>
 8019c2e:	684b      	ldr	r3, [r1, #4]
 8019c30:	2b00      	cmp	r3, #0
 8019c32:	dc05      	bgt.n	8019c40 <__sflush_r+0x20>
 8019c34:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8019c36:	2b00      	cmp	r3, #0
 8019c38:	dc02      	bgt.n	8019c40 <__sflush_r+0x20>
 8019c3a:	2000      	movs	r0, #0
 8019c3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019c40:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019c42:	2e00      	cmp	r6, #0
 8019c44:	d0f9      	beq.n	8019c3a <__sflush_r+0x1a>
 8019c46:	2300      	movs	r3, #0
 8019c48:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8019c4c:	682f      	ldr	r7, [r5, #0]
 8019c4e:	602b      	str	r3, [r5, #0]
 8019c50:	d032      	beq.n	8019cb8 <__sflush_r+0x98>
 8019c52:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8019c54:	89a3      	ldrh	r3, [r4, #12]
 8019c56:	075a      	lsls	r2, r3, #29
 8019c58:	d505      	bpl.n	8019c66 <__sflush_r+0x46>
 8019c5a:	6863      	ldr	r3, [r4, #4]
 8019c5c:	1ac0      	subs	r0, r0, r3
 8019c5e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8019c60:	b10b      	cbz	r3, 8019c66 <__sflush_r+0x46>
 8019c62:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8019c64:	1ac0      	subs	r0, r0, r3
 8019c66:	2300      	movs	r3, #0
 8019c68:	4602      	mov	r2, r0
 8019c6a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019c6c:	6a21      	ldr	r1, [r4, #32]
 8019c6e:	4628      	mov	r0, r5
 8019c70:	47b0      	blx	r6
 8019c72:	1c43      	adds	r3, r0, #1
 8019c74:	89a3      	ldrh	r3, [r4, #12]
 8019c76:	d106      	bne.n	8019c86 <__sflush_r+0x66>
 8019c78:	6829      	ldr	r1, [r5, #0]
 8019c7a:	291d      	cmp	r1, #29
 8019c7c:	d82c      	bhi.n	8019cd8 <__sflush_r+0xb8>
 8019c7e:	4a2a      	ldr	r2, [pc, #168]	; (8019d28 <__sflush_r+0x108>)
 8019c80:	40ca      	lsrs	r2, r1
 8019c82:	07d6      	lsls	r6, r2, #31
 8019c84:	d528      	bpl.n	8019cd8 <__sflush_r+0xb8>
 8019c86:	2200      	movs	r2, #0
 8019c88:	6062      	str	r2, [r4, #4]
 8019c8a:	04d9      	lsls	r1, r3, #19
 8019c8c:	6922      	ldr	r2, [r4, #16]
 8019c8e:	6022      	str	r2, [r4, #0]
 8019c90:	d504      	bpl.n	8019c9c <__sflush_r+0x7c>
 8019c92:	1c42      	adds	r2, r0, #1
 8019c94:	d101      	bne.n	8019c9a <__sflush_r+0x7a>
 8019c96:	682b      	ldr	r3, [r5, #0]
 8019c98:	b903      	cbnz	r3, 8019c9c <__sflush_r+0x7c>
 8019c9a:	6560      	str	r0, [r4, #84]	; 0x54
 8019c9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019c9e:	602f      	str	r7, [r5, #0]
 8019ca0:	2900      	cmp	r1, #0
 8019ca2:	d0ca      	beq.n	8019c3a <__sflush_r+0x1a>
 8019ca4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019ca8:	4299      	cmp	r1, r3
 8019caa:	d002      	beq.n	8019cb2 <__sflush_r+0x92>
 8019cac:	4628      	mov	r0, r5
 8019cae:	f7fe fa79 	bl	80181a4 <_free_r>
 8019cb2:	2000      	movs	r0, #0
 8019cb4:	6360      	str	r0, [r4, #52]	; 0x34
 8019cb6:	e7c1      	b.n	8019c3c <__sflush_r+0x1c>
 8019cb8:	6a21      	ldr	r1, [r4, #32]
 8019cba:	2301      	movs	r3, #1
 8019cbc:	4628      	mov	r0, r5
 8019cbe:	47b0      	blx	r6
 8019cc0:	1c41      	adds	r1, r0, #1
 8019cc2:	d1c7      	bne.n	8019c54 <__sflush_r+0x34>
 8019cc4:	682b      	ldr	r3, [r5, #0]
 8019cc6:	2b00      	cmp	r3, #0
 8019cc8:	d0c4      	beq.n	8019c54 <__sflush_r+0x34>
 8019cca:	2b1d      	cmp	r3, #29
 8019ccc:	d001      	beq.n	8019cd2 <__sflush_r+0xb2>
 8019cce:	2b16      	cmp	r3, #22
 8019cd0:	d101      	bne.n	8019cd6 <__sflush_r+0xb6>
 8019cd2:	602f      	str	r7, [r5, #0]
 8019cd4:	e7b1      	b.n	8019c3a <__sflush_r+0x1a>
 8019cd6:	89a3      	ldrh	r3, [r4, #12]
 8019cd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019cdc:	81a3      	strh	r3, [r4, #12]
 8019cde:	e7ad      	b.n	8019c3c <__sflush_r+0x1c>
 8019ce0:	690f      	ldr	r7, [r1, #16]
 8019ce2:	2f00      	cmp	r7, #0
 8019ce4:	d0a9      	beq.n	8019c3a <__sflush_r+0x1a>
 8019ce6:	0793      	lsls	r3, r2, #30
 8019ce8:	680e      	ldr	r6, [r1, #0]
 8019cea:	bf08      	it	eq
 8019cec:	694b      	ldreq	r3, [r1, #20]
 8019cee:	600f      	str	r7, [r1, #0]
 8019cf0:	bf18      	it	ne
 8019cf2:	2300      	movne	r3, #0
 8019cf4:	eba6 0807 	sub.w	r8, r6, r7
 8019cf8:	608b      	str	r3, [r1, #8]
 8019cfa:	f1b8 0f00 	cmp.w	r8, #0
 8019cfe:	dd9c      	ble.n	8019c3a <__sflush_r+0x1a>
 8019d00:	6a21      	ldr	r1, [r4, #32]
 8019d02:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8019d04:	4643      	mov	r3, r8
 8019d06:	463a      	mov	r2, r7
 8019d08:	4628      	mov	r0, r5
 8019d0a:	47b0      	blx	r6
 8019d0c:	2800      	cmp	r0, #0
 8019d0e:	dc06      	bgt.n	8019d1e <__sflush_r+0xfe>
 8019d10:	89a3      	ldrh	r3, [r4, #12]
 8019d12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019d16:	81a3      	strh	r3, [r4, #12]
 8019d18:	f04f 30ff 	mov.w	r0, #4294967295
 8019d1c:	e78e      	b.n	8019c3c <__sflush_r+0x1c>
 8019d1e:	4407      	add	r7, r0
 8019d20:	eba8 0800 	sub.w	r8, r8, r0
 8019d24:	e7e9      	b.n	8019cfa <__sflush_r+0xda>
 8019d26:	bf00      	nop
 8019d28:	20400001 	.word	0x20400001

08019d2c <_fflush_r>:
 8019d2c:	b538      	push	{r3, r4, r5, lr}
 8019d2e:	690b      	ldr	r3, [r1, #16]
 8019d30:	4605      	mov	r5, r0
 8019d32:	460c      	mov	r4, r1
 8019d34:	b913      	cbnz	r3, 8019d3c <_fflush_r+0x10>
 8019d36:	2500      	movs	r5, #0
 8019d38:	4628      	mov	r0, r5
 8019d3a:	bd38      	pop	{r3, r4, r5, pc}
 8019d3c:	b118      	cbz	r0, 8019d46 <_fflush_r+0x1a>
 8019d3e:	6983      	ldr	r3, [r0, #24]
 8019d40:	b90b      	cbnz	r3, 8019d46 <_fflush_r+0x1a>
 8019d42:	f000 f887 	bl	8019e54 <__sinit>
 8019d46:	4b14      	ldr	r3, [pc, #80]	; (8019d98 <_fflush_r+0x6c>)
 8019d48:	429c      	cmp	r4, r3
 8019d4a:	d11b      	bne.n	8019d84 <_fflush_r+0x58>
 8019d4c:	686c      	ldr	r4, [r5, #4]
 8019d4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019d52:	2b00      	cmp	r3, #0
 8019d54:	d0ef      	beq.n	8019d36 <_fflush_r+0xa>
 8019d56:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8019d58:	07d0      	lsls	r0, r2, #31
 8019d5a:	d404      	bmi.n	8019d66 <_fflush_r+0x3a>
 8019d5c:	0599      	lsls	r1, r3, #22
 8019d5e:	d402      	bmi.n	8019d66 <_fflush_r+0x3a>
 8019d60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019d62:	f000 f92c 	bl	8019fbe <__retarget_lock_acquire_recursive>
 8019d66:	4628      	mov	r0, r5
 8019d68:	4621      	mov	r1, r4
 8019d6a:	f7ff ff59 	bl	8019c20 <__sflush_r>
 8019d6e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019d70:	07da      	lsls	r2, r3, #31
 8019d72:	4605      	mov	r5, r0
 8019d74:	d4e0      	bmi.n	8019d38 <_fflush_r+0xc>
 8019d76:	89a3      	ldrh	r3, [r4, #12]
 8019d78:	059b      	lsls	r3, r3, #22
 8019d7a:	d4dd      	bmi.n	8019d38 <_fflush_r+0xc>
 8019d7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019d7e:	f000 f91f 	bl	8019fc0 <__retarget_lock_release_recursive>
 8019d82:	e7d9      	b.n	8019d38 <_fflush_r+0xc>
 8019d84:	4b05      	ldr	r3, [pc, #20]	; (8019d9c <_fflush_r+0x70>)
 8019d86:	429c      	cmp	r4, r3
 8019d88:	d101      	bne.n	8019d8e <_fflush_r+0x62>
 8019d8a:	68ac      	ldr	r4, [r5, #8]
 8019d8c:	e7df      	b.n	8019d4e <_fflush_r+0x22>
 8019d8e:	4b04      	ldr	r3, [pc, #16]	; (8019da0 <_fflush_r+0x74>)
 8019d90:	429c      	cmp	r4, r3
 8019d92:	bf08      	it	eq
 8019d94:	68ec      	ldreq	r4, [r5, #12]
 8019d96:	e7da      	b.n	8019d4e <_fflush_r+0x22>
 8019d98:	0801d86c 	.word	0x0801d86c
 8019d9c:	0801d88c 	.word	0x0801d88c
 8019da0:	0801d84c 	.word	0x0801d84c

08019da4 <std>:
 8019da4:	2300      	movs	r3, #0
 8019da6:	b510      	push	{r4, lr}
 8019da8:	4604      	mov	r4, r0
 8019daa:	e9c0 3300 	strd	r3, r3, [r0]
 8019dae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8019db2:	6083      	str	r3, [r0, #8]
 8019db4:	8181      	strh	r1, [r0, #12]
 8019db6:	6643      	str	r3, [r0, #100]	; 0x64
 8019db8:	81c2      	strh	r2, [r0, #14]
 8019dba:	6183      	str	r3, [r0, #24]
 8019dbc:	4619      	mov	r1, r3
 8019dbe:	2208      	movs	r2, #8
 8019dc0:	305c      	adds	r0, #92	; 0x5c
 8019dc2:	f7fe f9e7 	bl	8018194 <memset>
 8019dc6:	4b05      	ldr	r3, [pc, #20]	; (8019ddc <std+0x38>)
 8019dc8:	6263      	str	r3, [r4, #36]	; 0x24
 8019dca:	4b05      	ldr	r3, [pc, #20]	; (8019de0 <std+0x3c>)
 8019dcc:	62a3      	str	r3, [r4, #40]	; 0x28
 8019dce:	4b05      	ldr	r3, [pc, #20]	; (8019de4 <std+0x40>)
 8019dd0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8019dd2:	4b05      	ldr	r3, [pc, #20]	; (8019de8 <std+0x44>)
 8019dd4:	6224      	str	r4, [r4, #32]
 8019dd6:	6323      	str	r3, [r4, #48]	; 0x30
 8019dd8:	bd10      	pop	{r4, pc}
 8019dda:	bf00      	nop
 8019ddc:	0801adb9 	.word	0x0801adb9
 8019de0:	0801addb 	.word	0x0801addb
 8019de4:	0801ae13 	.word	0x0801ae13
 8019de8:	0801ae37 	.word	0x0801ae37

08019dec <_cleanup_r>:
 8019dec:	4901      	ldr	r1, [pc, #4]	; (8019df4 <_cleanup_r+0x8>)
 8019dee:	f000 b8c1 	b.w	8019f74 <_fwalk_reent>
 8019df2:	bf00      	nop
 8019df4:	08019d2d 	.word	0x08019d2d

08019df8 <__sfmoreglue>:
 8019df8:	b570      	push	{r4, r5, r6, lr}
 8019dfa:	1e4a      	subs	r2, r1, #1
 8019dfc:	2568      	movs	r5, #104	; 0x68
 8019dfe:	4355      	muls	r5, r2
 8019e00:	460e      	mov	r6, r1
 8019e02:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8019e06:	f7fe fa1d 	bl	8018244 <_malloc_r>
 8019e0a:	4604      	mov	r4, r0
 8019e0c:	b140      	cbz	r0, 8019e20 <__sfmoreglue+0x28>
 8019e0e:	2100      	movs	r1, #0
 8019e10:	e9c0 1600 	strd	r1, r6, [r0]
 8019e14:	300c      	adds	r0, #12
 8019e16:	60a0      	str	r0, [r4, #8]
 8019e18:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8019e1c:	f7fe f9ba 	bl	8018194 <memset>
 8019e20:	4620      	mov	r0, r4
 8019e22:	bd70      	pop	{r4, r5, r6, pc}

08019e24 <__sfp_lock_acquire>:
 8019e24:	4801      	ldr	r0, [pc, #4]	; (8019e2c <__sfp_lock_acquire+0x8>)
 8019e26:	f000 b8ca 	b.w	8019fbe <__retarget_lock_acquire_recursive>
 8019e2a:	bf00      	nop
 8019e2c:	2004a728 	.word	0x2004a728

08019e30 <__sfp_lock_release>:
 8019e30:	4801      	ldr	r0, [pc, #4]	; (8019e38 <__sfp_lock_release+0x8>)
 8019e32:	f000 b8c5 	b.w	8019fc0 <__retarget_lock_release_recursive>
 8019e36:	bf00      	nop
 8019e38:	2004a728 	.word	0x2004a728

08019e3c <__sinit_lock_acquire>:
 8019e3c:	4801      	ldr	r0, [pc, #4]	; (8019e44 <__sinit_lock_acquire+0x8>)
 8019e3e:	f000 b8be 	b.w	8019fbe <__retarget_lock_acquire_recursive>
 8019e42:	bf00      	nop
 8019e44:	2004a723 	.word	0x2004a723

08019e48 <__sinit_lock_release>:
 8019e48:	4801      	ldr	r0, [pc, #4]	; (8019e50 <__sinit_lock_release+0x8>)
 8019e4a:	f000 b8b9 	b.w	8019fc0 <__retarget_lock_release_recursive>
 8019e4e:	bf00      	nop
 8019e50:	2004a723 	.word	0x2004a723

08019e54 <__sinit>:
 8019e54:	b510      	push	{r4, lr}
 8019e56:	4604      	mov	r4, r0
 8019e58:	f7ff fff0 	bl	8019e3c <__sinit_lock_acquire>
 8019e5c:	69a3      	ldr	r3, [r4, #24]
 8019e5e:	b11b      	cbz	r3, 8019e68 <__sinit+0x14>
 8019e60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019e64:	f7ff bff0 	b.w	8019e48 <__sinit_lock_release>
 8019e68:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8019e6c:	6523      	str	r3, [r4, #80]	; 0x50
 8019e6e:	4b13      	ldr	r3, [pc, #76]	; (8019ebc <__sinit+0x68>)
 8019e70:	4a13      	ldr	r2, [pc, #76]	; (8019ec0 <__sinit+0x6c>)
 8019e72:	681b      	ldr	r3, [r3, #0]
 8019e74:	62a2      	str	r2, [r4, #40]	; 0x28
 8019e76:	42a3      	cmp	r3, r4
 8019e78:	bf04      	itt	eq
 8019e7a:	2301      	moveq	r3, #1
 8019e7c:	61a3      	streq	r3, [r4, #24]
 8019e7e:	4620      	mov	r0, r4
 8019e80:	f000 f820 	bl	8019ec4 <__sfp>
 8019e84:	6060      	str	r0, [r4, #4]
 8019e86:	4620      	mov	r0, r4
 8019e88:	f000 f81c 	bl	8019ec4 <__sfp>
 8019e8c:	60a0      	str	r0, [r4, #8]
 8019e8e:	4620      	mov	r0, r4
 8019e90:	f000 f818 	bl	8019ec4 <__sfp>
 8019e94:	2200      	movs	r2, #0
 8019e96:	60e0      	str	r0, [r4, #12]
 8019e98:	2104      	movs	r1, #4
 8019e9a:	6860      	ldr	r0, [r4, #4]
 8019e9c:	f7ff ff82 	bl	8019da4 <std>
 8019ea0:	68a0      	ldr	r0, [r4, #8]
 8019ea2:	2201      	movs	r2, #1
 8019ea4:	2109      	movs	r1, #9
 8019ea6:	f7ff ff7d 	bl	8019da4 <std>
 8019eaa:	68e0      	ldr	r0, [r4, #12]
 8019eac:	2202      	movs	r2, #2
 8019eae:	2112      	movs	r1, #18
 8019eb0:	f7ff ff78 	bl	8019da4 <std>
 8019eb4:	2301      	movs	r3, #1
 8019eb6:	61a3      	str	r3, [r4, #24]
 8019eb8:	e7d2      	b.n	8019e60 <__sinit+0xc>
 8019eba:	bf00      	nop
 8019ebc:	0801d744 	.word	0x0801d744
 8019ec0:	08019ded 	.word	0x08019ded

08019ec4 <__sfp>:
 8019ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019ec6:	4607      	mov	r7, r0
 8019ec8:	f7ff ffac 	bl	8019e24 <__sfp_lock_acquire>
 8019ecc:	4b1e      	ldr	r3, [pc, #120]	; (8019f48 <__sfp+0x84>)
 8019ece:	681e      	ldr	r6, [r3, #0]
 8019ed0:	69b3      	ldr	r3, [r6, #24]
 8019ed2:	b913      	cbnz	r3, 8019eda <__sfp+0x16>
 8019ed4:	4630      	mov	r0, r6
 8019ed6:	f7ff ffbd 	bl	8019e54 <__sinit>
 8019eda:	3648      	adds	r6, #72	; 0x48
 8019edc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8019ee0:	3b01      	subs	r3, #1
 8019ee2:	d503      	bpl.n	8019eec <__sfp+0x28>
 8019ee4:	6833      	ldr	r3, [r6, #0]
 8019ee6:	b30b      	cbz	r3, 8019f2c <__sfp+0x68>
 8019ee8:	6836      	ldr	r6, [r6, #0]
 8019eea:	e7f7      	b.n	8019edc <__sfp+0x18>
 8019eec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8019ef0:	b9d5      	cbnz	r5, 8019f28 <__sfp+0x64>
 8019ef2:	4b16      	ldr	r3, [pc, #88]	; (8019f4c <__sfp+0x88>)
 8019ef4:	60e3      	str	r3, [r4, #12]
 8019ef6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8019efa:	6665      	str	r5, [r4, #100]	; 0x64
 8019efc:	f000 f85e 	bl	8019fbc <__retarget_lock_init_recursive>
 8019f00:	f7ff ff96 	bl	8019e30 <__sfp_lock_release>
 8019f04:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8019f08:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8019f0c:	6025      	str	r5, [r4, #0]
 8019f0e:	61a5      	str	r5, [r4, #24]
 8019f10:	2208      	movs	r2, #8
 8019f12:	4629      	mov	r1, r5
 8019f14:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8019f18:	f7fe f93c 	bl	8018194 <memset>
 8019f1c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8019f20:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8019f24:	4620      	mov	r0, r4
 8019f26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019f28:	3468      	adds	r4, #104	; 0x68
 8019f2a:	e7d9      	b.n	8019ee0 <__sfp+0x1c>
 8019f2c:	2104      	movs	r1, #4
 8019f2e:	4638      	mov	r0, r7
 8019f30:	f7ff ff62 	bl	8019df8 <__sfmoreglue>
 8019f34:	4604      	mov	r4, r0
 8019f36:	6030      	str	r0, [r6, #0]
 8019f38:	2800      	cmp	r0, #0
 8019f3a:	d1d5      	bne.n	8019ee8 <__sfp+0x24>
 8019f3c:	f7ff ff78 	bl	8019e30 <__sfp_lock_release>
 8019f40:	230c      	movs	r3, #12
 8019f42:	603b      	str	r3, [r7, #0]
 8019f44:	e7ee      	b.n	8019f24 <__sfp+0x60>
 8019f46:	bf00      	nop
 8019f48:	0801d744 	.word	0x0801d744
 8019f4c:	ffff0001 	.word	0xffff0001

08019f50 <fiprintf>:
 8019f50:	b40e      	push	{r1, r2, r3}
 8019f52:	b503      	push	{r0, r1, lr}
 8019f54:	4601      	mov	r1, r0
 8019f56:	ab03      	add	r3, sp, #12
 8019f58:	4805      	ldr	r0, [pc, #20]	; (8019f70 <fiprintf+0x20>)
 8019f5a:	f853 2b04 	ldr.w	r2, [r3], #4
 8019f5e:	6800      	ldr	r0, [r0, #0]
 8019f60:	9301      	str	r3, [sp, #4]
 8019f62:	f000 fdb1 	bl	801aac8 <_vfiprintf_r>
 8019f66:	b002      	add	sp, #8
 8019f68:	f85d eb04 	ldr.w	lr, [sp], #4
 8019f6c:	b003      	add	sp, #12
 8019f6e:	4770      	bx	lr
 8019f70:	20000058 	.word	0x20000058

08019f74 <_fwalk_reent>:
 8019f74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019f78:	4606      	mov	r6, r0
 8019f7a:	4688      	mov	r8, r1
 8019f7c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8019f80:	2700      	movs	r7, #0
 8019f82:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8019f86:	f1b9 0901 	subs.w	r9, r9, #1
 8019f8a:	d505      	bpl.n	8019f98 <_fwalk_reent+0x24>
 8019f8c:	6824      	ldr	r4, [r4, #0]
 8019f8e:	2c00      	cmp	r4, #0
 8019f90:	d1f7      	bne.n	8019f82 <_fwalk_reent+0xe>
 8019f92:	4638      	mov	r0, r7
 8019f94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019f98:	89ab      	ldrh	r3, [r5, #12]
 8019f9a:	2b01      	cmp	r3, #1
 8019f9c:	d907      	bls.n	8019fae <_fwalk_reent+0x3a>
 8019f9e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8019fa2:	3301      	adds	r3, #1
 8019fa4:	d003      	beq.n	8019fae <_fwalk_reent+0x3a>
 8019fa6:	4629      	mov	r1, r5
 8019fa8:	4630      	mov	r0, r6
 8019faa:	47c0      	blx	r8
 8019fac:	4307      	orrs	r7, r0
 8019fae:	3568      	adds	r5, #104	; 0x68
 8019fb0:	e7e9      	b.n	8019f86 <_fwalk_reent+0x12>
	...

08019fb4 <_localeconv_r>:
 8019fb4:	4800      	ldr	r0, [pc, #0]	; (8019fb8 <_localeconv_r+0x4>)
 8019fb6:	4770      	bx	lr
 8019fb8:	200001ac 	.word	0x200001ac

08019fbc <__retarget_lock_init_recursive>:
 8019fbc:	4770      	bx	lr

08019fbe <__retarget_lock_acquire_recursive>:
 8019fbe:	4770      	bx	lr

08019fc0 <__retarget_lock_release_recursive>:
 8019fc0:	4770      	bx	lr

08019fc2 <__swhatbuf_r>:
 8019fc2:	b570      	push	{r4, r5, r6, lr}
 8019fc4:	460e      	mov	r6, r1
 8019fc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019fca:	2900      	cmp	r1, #0
 8019fcc:	b096      	sub	sp, #88	; 0x58
 8019fce:	4614      	mov	r4, r2
 8019fd0:	461d      	mov	r5, r3
 8019fd2:	da07      	bge.n	8019fe4 <__swhatbuf_r+0x22>
 8019fd4:	2300      	movs	r3, #0
 8019fd6:	602b      	str	r3, [r5, #0]
 8019fd8:	89b3      	ldrh	r3, [r6, #12]
 8019fda:	061a      	lsls	r2, r3, #24
 8019fdc:	d410      	bmi.n	801a000 <__swhatbuf_r+0x3e>
 8019fde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8019fe2:	e00e      	b.n	801a002 <__swhatbuf_r+0x40>
 8019fe4:	466a      	mov	r2, sp
 8019fe6:	f000 ff55 	bl	801ae94 <_fstat_r>
 8019fea:	2800      	cmp	r0, #0
 8019fec:	dbf2      	blt.n	8019fd4 <__swhatbuf_r+0x12>
 8019fee:	9a01      	ldr	r2, [sp, #4]
 8019ff0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8019ff4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8019ff8:	425a      	negs	r2, r3
 8019ffa:	415a      	adcs	r2, r3
 8019ffc:	602a      	str	r2, [r5, #0]
 8019ffe:	e7ee      	b.n	8019fde <__swhatbuf_r+0x1c>
 801a000:	2340      	movs	r3, #64	; 0x40
 801a002:	2000      	movs	r0, #0
 801a004:	6023      	str	r3, [r4, #0]
 801a006:	b016      	add	sp, #88	; 0x58
 801a008:	bd70      	pop	{r4, r5, r6, pc}
	...

0801a00c <__smakebuf_r>:
 801a00c:	898b      	ldrh	r3, [r1, #12]
 801a00e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801a010:	079d      	lsls	r5, r3, #30
 801a012:	4606      	mov	r6, r0
 801a014:	460c      	mov	r4, r1
 801a016:	d507      	bpl.n	801a028 <__smakebuf_r+0x1c>
 801a018:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801a01c:	6023      	str	r3, [r4, #0]
 801a01e:	6123      	str	r3, [r4, #16]
 801a020:	2301      	movs	r3, #1
 801a022:	6163      	str	r3, [r4, #20]
 801a024:	b002      	add	sp, #8
 801a026:	bd70      	pop	{r4, r5, r6, pc}
 801a028:	ab01      	add	r3, sp, #4
 801a02a:	466a      	mov	r2, sp
 801a02c:	f7ff ffc9 	bl	8019fc2 <__swhatbuf_r>
 801a030:	9900      	ldr	r1, [sp, #0]
 801a032:	4605      	mov	r5, r0
 801a034:	4630      	mov	r0, r6
 801a036:	f7fe f905 	bl	8018244 <_malloc_r>
 801a03a:	b948      	cbnz	r0, 801a050 <__smakebuf_r+0x44>
 801a03c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a040:	059a      	lsls	r2, r3, #22
 801a042:	d4ef      	bmi.n	801a024 <__smakebuf_r+0x18>
 801a044:	f023 0303 	bic.w	r3, r3, #3
 801a048:	f043 0302 	orr.w	r3, r3, #2
 801a04c:	81a3      	strh	r3, [r4, #12]
 801a04e:	e7e3      	b.n	801a018 <__smakebuf_r+0xc>
 801a050:	4b0d      	ldr	r3, [pc, #52]	; (801a088 <__smakebuf_r+0x7c>)
 801a052:	62b3      	str	r3, [r6, #40]	; 0x28
 801a054:	89a3      	ldrh	r3, [r4, #12]
 801a056:	6020      	str	r0, [r4, #0]
 801a058:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a05c:	81a3      	strh	r3, [r4, #12]
 801a05e:	9b00      	ldr	r3, [sp, #0]
 801a060:	6163      	str	r3, [r4, #20]
 801a062:	9b01      	ldr	r3, [sp, #4]
 801a064:	6120      	str	r0, [r4, #16]
 801a066:	b15b      	cbz	r3, 801a080 <__smakebuf_r+0x74>
 801a068:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a06c:	4630      	mov	r0, r6
 801a06e:	f000 ff23 	bl	801aeb8 <_isatty_r>
 801a072:	b128      	cbz	r0, 801a080 <__smakebuf_r+0x74>
 801a074:	89a3      	ldrh	r3, [r4, #12]
 801a076:	f023 0303 	bic.w	r3, r3, #3
 801a07a:	f043 0301 	orr.w	r3, r3, #1
 801a07e:	81a3      	strh	r3, [r4, #12]
 801a080:	89a0      	ldrh	r0, [r4, #12]
 801a082:	4305      	orrs	r5, r0
 801a084:	81a5      	strh	r5, [r4, #12]
 801a086:	e7cd      	b.n	801a024 <__smakebuf_r+0x18>
 801a088:	08019ded 	.word	0x08019ded

0801a08c <__malloc_lock>:
 801a08c:	4801      	ldr	r0, [pc, #4]	; (801a094 <__malloc_lock+0x8>)
 801a08e:	f7ff bf96 	b.w	8019fbe <__retarget_lock_acquire_recursive>
 801a092:	bf00      	nop
 801a094:	2004a724 	.word	0x2004a724

0801a098 <__malloc_unlock>:
 801a098:	4801      	ldr	r0, [pc, #4]	; (801a0a0 <__malloc_unlock+0x8>)
 801a09a:	f7ff bf91 	b.w	8019fc0 <__retarget_lock_release_recursive>
 801a09e:	bf00      	nop
 801a0a0:	2004a724 	.word	0x2004a724

0801a0a4 <_Balloc>:
 801a0a4:	b570      	push	{r4, r5, r6, lr}
 801a0a6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801a0a8:	4604      	mov	r4, r0
 801a0aa:	460d      	mov	r5, r1
 801a0ac:	b976      	cbnz	r6, 801a0cc <_Balloc+0x28>
 801a0ae:	2010      	movs	r0, #16
 801a0b0:	f7fe f852 	bl	8018158 <malloc>
 801a0b4:	4602      	mov	r2, r0
 801a0b6:	6260      	str	r0, [r4, #36]	; 0x24
 801a0b8:	b920      	cbnz	r0, 801a0c4 <_Balloc+0x20>
 801a0ba:	4b18      	ldr	r3, [pc, #96]	; (801a11c <_Balloc+0x78>)
 801a0bc:	4818      	ldr	r0, [pc, #96]	; (801a120 <_Balloc+0x7c>)
 801a0be:	2166      	movs	r1, #102	; 0x66
 801a0c0:	f7fe ff18 	bl	8018ef4 <__assert_func>
 801a0c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801a0c8:	6006      	str	r6, [r0, #0]
 801a0ca:	60c6      	str	r6, [r0, #12]
 801a0cc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801a0ce:	68f3      	ldr	r3, [r6, #12]
 801a0d0:	b183      	cbz	r3, 801a0f4 <_Balloc+0x50>
 801a0d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801a0d4:	68db      	ldr	r3, [r3, #12]
 801a0d6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801a0da:	b9b8      	cbnz	r0, 801a10c <_Balloc+0x68>
 801a0dc:	2101      	movs	r1, #1
 801a0de:	fa01 f605 	lsl.w	r6, r1, r5
 801a0e2:	1d72      	adds	r2, r6, #5
 801a0e4:	0092      	lsls	r2, r2, #2
 801a0e6:	4620      	mov	r0, r4
 801a0e8:	f000 fb5a 	bl	801a7a0 <_calloc_r>
 801a0ec:	b160      	cbz	r0, 801a108 <_Balloc+0x64>
 801a0ee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801a0f2:	e00e      	b.n	801a112 <_Balloc+0x6e>
 801a0f4:	2221      	movs	r2, #33	; 0x21
 801a0f6:	2104      	movs	r1, #4
 801a0f8:	4620      	mov	r0, r4
 801a0fa:	f000 fb51 	bl	801a7a0 <_calloc_r>
 801a0fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801a100:	60f0      	str	r0, [r6, #12]
 801a102:	68db      	ldr	r3, [r3, #12]
 801a104:	2b00      	cmp	r3, #0
 801a106:	d1e4      	bne.n	801a0d2 <_Balloc+0x2e>
 801a108:	2000      	movs	r0, #0
 801a10a:	bd70      	pop	{r4, r5, r6, pc}
 801a10c:	6802      	ldr	r2, [r0, #0]
 801a10e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801a112:	2300      	movs	r3, #0
 801a114:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801a118:	e7f7      	b.n	801a10a <_Balloc+0x66>
 801a11a:	bf00      	nop
 801a11c:	0801d7c5 	.word	0x0801d7c5
 801a120:	0801d8ac 	.word	0x0801d8ac

0801a124 <_Bfree>:
 801a124:	b570      	push	{r4, r5, r6, lr}
 801a126:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801a128:	4605      	mov	r5, r0
 801a12a:	460c      	mov	r4, r1
 801a12c:	b976      	cbnz	r6, 801a14c <_Bfree+0x28>
 801a12e:	2010      	movs	r0, #16
 801a130:	f7fe f812 	bl	8018158 <malloc>
 801a134:	4602      	mov	r2, r0
 801a136:	6268      	str	r0, [r5, #36]	; 0x24
 801a138:	b920      	cbnz	r0, 801a144 <_Bfree+0x20>
 801a13a:	4b09      	ldr	r3, [pc, #36]	; (801a160 <_Bfree+0x3c>)
 801a13c:	4809      	ldr	r0, [pc, #36]	; (801a164 <_Bfree+0x40>)
 801a13e:	218a      	movs	r1, #138	; 0x8a
 801a140:	f7fe fed8 	bl	8018ef4 <__assert_func>
 801a144:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801a148:	6006      	str	r6, [r0, #0]
 801a14a:	60c6      	str	r6, [r0, #12]
 801a14c:	b13c      	cbz	r4, 801a15e <_Bfree+0x3a>
 801a14e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801a150:	6862      	ldr	r2, [r4, #4]
 801a152:	68db      	ldr	r3, [r3, #12]
 801a154:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801a158:	6021      	str	r1, [r4, #0]
 801a15a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801a15e:	bd70      	pop	{r4, r5, r6, pc}
 801a160:	0801d7c5 	.word	0x0801d7c5
 801a164:	0801d8ac 	.word	0x0801d8ac

0801a168 <__multadd>:
 801a168:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a16c:	690e      	ldr	r6, [r1, #16]
 801a16e:	4607      	mov	r7, r0
 801a170:	4698      	mov	r8, r3
 801a172:	460c      	mov	r4, r1
 801a174:	f101 0014 	add.w	r0, r1, #20
 801a178:	2300      	movs	r3, #0
 801a17a:	6805      	ldr	r5, [r0, #0]
 801a17c:	b2a9      	uxth	r1, r5
 801a17e:	fb02 8101 	mla	r1, r2, r1, r8
 801a182:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 801a186:	0c2d      	lsrs	r5, r5, #16
 801a188:	fb02 c505 	mla	r5, r2, r5, ip
 801a18c:	b289      	uxth	r1, r1
 801a18e:	3301      	adds	r3, #1
 801a190:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 801a194:	429e      	cmp	r6, r3
 801a196:	f840 1b04 	str.w	r1, [r0], #4
 801a19a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 801a19e:	dcec      	bgt.n	801a17a <__multadd+0x12>
 801a1a0:	f1b8 0f00 	cmp.w	r8, #0
 801a1a4:	d022      	beq.n	801a1ec <__multadd+0x84>
 801a1a6:	68a3      	ldr	r3, [r4, #8]
 801a1a8:	42b3      	cmp	r3, r6
 801a1aa:	dc19      	bgt.n	801a1e0 <__multadd+0x78>
 801a1ac:	6861      	ldr	r1, [r4, #4]
 801a1ae:	4638      	mov	r0, r7
 801a1b0:	3101      	adds	r1, #1
 801a1b2:	f7ff ff77 	bl	801a0a4 <_Balloc>
 801a1b6:	4605      	mov	r5, r0
 801a1b8:	b928      	cbnz	r0, 801a1c6 <__multadd+0x5e>
 801a1ba:	4602      	mov	r2, r0
 801a1bc:	4b0d      	ldr	r3, [pc, #52]	; (801a1f4 <__multadd+0x8c>)
 801a1be:	480e      	ldr	r0, [pc, #56]	; (801a1f8 <__multadd+0x90>)
 801a1c0:	21b5      	movs	r1, #181	; 0xb5
 801a1c2:	f7fe fe97 	bl	8018ef4 <__assert_func>
 801a1c6:	6922      	ldr	r2, [r4, #16]
 801a1c8:	3202      	adds	r2, #2
 801a1ca:	f104 010c 	add.w	r1, r4, #12
 801a1ce:	0092      	lsls	r2, r2, #2
 801a1d0:	300c      	adds	r0, #12
 801a1d2:	f7fd ffd1 	bl	8018178 <memcpy>
 801a1d6:	4621      	mov	r1, r4
 801a1d8:	4638      	mov	r0, r7
 801a1da:	f7ff ffa3 	bl	801a124 <_Bfree>
 801a1de:	462c      	mov	r4, r5
 801a1e0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 801a1e4:	3601      	adds	r6, #1
 801a1e6:	f8c3 8014 	str.w	r8, [r3, #20]
 801a1ea:	6126      	str	r6, [r4, #16]
 801a1ec:	4620      	mov	r0, r4
 801a1ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a1f2:	bf00      	nop
 801a1f4:	0801d83b 	.word	0x0801d83b
 801a1f8:	0801d8ac 	.word	0x0801d8ac

0801a1fc <__hi0bits>:
 801a1fc:	0c03      	lsrs	r3, r0, #16
 801a1fe:	041b      	lsls	r3, r3, #16
 801a200:	b9d3      	cbnz	r3, 801a238 <__hi0bits+0x3c>
 801a202:	0400      	lsls	r0, r0, #16
 801a204:	2310      	movs	r3, #16
 801a206:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801a20a:	bf04      	itt	eq
 801a20c:	0200      	lsleq	r0, r0, #8
 801a20e:	3308      	addeq	r3, #8
 801a210:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801a214:	bf04      	itt	eq
 801a216:	0100      	lsleq	r0, r0, #4
 801a218:	3304      	addeq	r3, #4
 801a21a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801a21e:	bf04      	itt	eq
 801a220:	0080      	lsleq	r0, r0, #2
 801a222:	3302      	addeq	r3, #2
 801a224:	2800      	cmp	r0, #0
 801a226:	db05      	blt.n	801a234 <__hi0bits+0x38>
 801a228:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801a22c:	f103 0301 	add.w	r3, r3, #1
 801a230:	bf08      	it	eq
 801a232:	2320      	moveq	r3, #32
 801a234:	4618      	mov	r0, r3
 801a236:	4770      	bx	lr
 801a238:	2300      	movs	r3, #0
 801a23a:	e7e4      	b.n	801a206 <__hi0bits+0xa>

0801a23c <__lo0bits>:
 801a23c:	6803      	ldr	r3, [r0, #0]
 801a23e:	f013 0207 	ands.w	r2, r3, #7
 801a242:	4601      	mov	r1, r0
 801a244:	d00b      	beq.n	801a25e <__lo0bits+0x22>
 801a246:	07da      	lsls	r2, r3, #31
 801a248:	d424      	bmi.n	801a294 <__lo0bits+0x58>
 801a24a:	0798      	lsls	r0, r3, #30
 801a24c:	bf49      	itett	mi
 801a24e:	085b      	lsrmi	r3, r3, #1
 801a250:	089b      	lsrpl	r3, r3, #2
 801a252:	2001      	movmi	r0, #1
 801a254:	600b      	strmi	r3, [r1, #0]
 801a256:	bf5c      	itt	pl
 801a258:	600b      	strpl	r3, [r1, #0]
 801a25a:	2002      	movpl	r0, #2
 801a25c:	4770      	bx	lr
 801a25e:	b298      	uxth	r0, r3
 801a260:	b9b0      	cbnz	r0, 801a290 <__lo0bits+0x54>
 801a262:	0c1b      	lsrs	r3, r3, #16
 801a264:	2010      	movs	r0, #16
 801a266:	f013 0fff 	tst.w	r3, #255	; 0xff
 801a26a:	bf04      	itt	eq
 801a26c:	0a1b      	lsreq	r3, r3, #8
 801a26e:	3008      	addeq	r0, #8
 801a270:	071a      	lsls	r2, r3, #28
 801a272:	bf04      	itt	eq
 801a274:	091b      	lsreq	r3, r3, #4
 801a276:	3004      	addeq	r0, #4
 801a278:	079a      	lsls	r2, r3, #30
 801a27a:	bf04      	itt	eq
 801a27c:	089b      	lsreq	r3, r3, #2
 801a27e:	3002      	addeq	r0, #2
 801a280:	07da      	lsls	r2, r3, #31
 801a282:	d403      	bmi.n	801a28c <__lo0bits+0x50>
 801a284:	085b      	lsrs	r3, r3, #1
 801a286:	f100 0001 	add.w	r0, r0, #1
 801a28a:	d005      	beq.n	801a298 <__lo0bits+0x5c>
 801a28c:	600b      	str	r3, [r1, #0]
 801a28e:	4770      	bx	lr
 801a290:	4610      	mov	r0, r2
 801a292:	e7e8      	b.n	801a266 <__lo0bits+0x2a>
 801a294:	2000      	movs	r0, #0
 801a296:	4770      	bx	lr
 801a298:	2020      	movs	r0, #32
 801a29a:	4770      	bx	lr

0801a29c <__i2b>:
 801a29c:	b510      	push	{r4, lr}
 801a29e:	460c      	mov	r4, r1
 801a2a0:	2101      	movs	r1, #1
 801a2a2:	f7ff feff 	bl	801a0a4 <_Balloc>
 801a2a6:	4602      	mov	r2, r0
 801a2a8:	b928      	cbnz	r0, 801a2b6 <__i2b+0x1a>
 801a2aa:	4b05      	ldr	r3, [pc, #20]	; (801a2c0 <__i2b+0x24>)
 801a2ac:	4805      	ldr	r0, [pc, #20]	; (801a2c4 <__i2b+0x28>)
 801a2ae:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801a2b2:	f7fe fe1f 	bl	8018ef4 <__assert_func>
 801a2b6:	2301      	movs	r3, #1
 801a2b8:	6144      	str	r4, [r0, #20]
 801a2ba:	6103      	str	r3, [r0, #16]
 801a2bc:	bd10      	pop	{r4, pc}
 801a2be:	bf00      	nop
 801a2c0:	0801d83b 	.word	0x0801d83b
 801a2c4:	0801d8ac 	.word	0x0801d8ac

0801a2c8 <__multiply>:
 801a2c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a2cc:	4614      	mov	r4, r2
 801a2ce:	690a      	ldr	r2, [r1, #16]
 801a2d0:	6923      	ldr	r3, [r4, #16]
 801a2d2:	429a      	cmp	r2, r3
 801a2d4:	bfb8      	it	lt
 801a2d6:	460b      	movlt	r3, r1
 801a2d8:	460d      	mov	r5, r1
 801a2da:	bfbc      	itt	lt
 801a2dc:	4625      	movlt	r5, r4
 801a2de:	461c      	movlt	r4, r3
 801a2e0:	f8d5 a010 	ldr.w	sl, [r5, #16]
 801a2e4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801a2e8:	68ab      	ldr	r3, [r5, #8]
 801a2ea:	6869      	ldr	r1, [r5, #4]
 801a2ec:	eb0a 0709 	add.w	r7, sl, r9
 801a2f0:	42bb      	cmp	r3, r7
 801a2f2:	b085      	sub	sp, #20
 801a2f4:	bfb8      	it	lt
 801a2f6:	3101      	addlt	r1, #1
 801a2f8:	f7ff fed4 	bl	801a0a4 <_Balloc>
 801a2fc:	b930      	cbnz	r0, 801a30c <__multiply+0x44>
 801a2fe:	4602      	mov	r2, r0
 801a300:	4b42      	ldr	r3, [pc, #264]	; (801a40c <__multiply+0x144>)
 801a302:	4843      	ldr	r0, [pc, #268]	; (801a410 <__multiply+0x148>)
 801a304:	f240 115d 	movw	r1, #349	; 0x15d
 801a308:	f7fe fdf4 	bl	8018ef4 <__assert_func>
 801a30c:	f100 0614 	add.w	r6, r0, #20
 801a310:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 801a314:	4633      	mov	r3, r6
 801a316:	2200      	movs	r2, #0
 801a318:	4543      	cmp	r3, r8
 801a31a:	d31e      	bcc.n	801a35a <__multiply+0x92>
 801a31c:	f105 0c14 	add.w	ip, r5, #20
 801a320:	f104 0314 	add.w	r3, r4, #20
 801a324:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 801a328:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 801a32c:	9202      	str	r2, [sp, #8]
 801a32e:	ebac 0205 	sub.w	r2, ip, r5
 801a332:	3a15      	subs	r2, #21
 801a334:	f022 0203 	bic.w	r2, r2, #3
 801a338:	3204      	adds	r2, #4
 801a33a:	f105 0115 	add.w	r1, r5, #21
 801a33e:	458c      	cmp	ip, r1
 801a340:	bf38      	it	cc
 801a342:	2204      	movcc	r2, #4
 801a344:	9201      	str	r2, [sp, #4]
 801a346:	9a02      	ldr	r2, [sp, #8]
 801a348:	9303      	str	r3, [sp, #12]
 801a34a:	429a      	cmp	r2, r3
 801a34c:	d808      	bhi.n	801a360 <__multiply+0x98>
 801a34e:	2f00      	cmp	r7, #0
 801a350:	dc55      	bgt.n	801a3fe <__multiply+0x136>
 801a352:	6107      	str	r7, [r0, #16]
 801a354:	b005      	add	sp, #20
 801a356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a35a:	f843 2b04 	str.w	r2, [r3], #4
 801a35e:	e7db      	b.n	801a318 <__multiply+0x50>
 801a360:	f8b3 a000 	ldrh.w	sl, [r3]
 801a364:	f1ba 0f00 	cmp.w	sl, #0
 801a368:	d020      	beq.n	801a3ac <__multiply+0xe4>
 801a36a:	f105 0e14 	add.w	lr, r5, #20
 801a36e:	46b1      	mov	r9, r6
 801a370:	2200      	movs	r2, #0
 801a372:	f85e 4b04 	ldr.w	r4, [lr], #4
 801a376:	f8d9 b000 	ldr.w	fp, [r9]
 801a37a:	b2a1      	uxth	r1, r4
 801a37c:	fa1f fb8b 	uxth.w	fp, fp
 801a380:	fb0a b101 	mla	r1, sl, r1, fp
 801a384:	4411      	add	r1, r2
 801a386:	f8d9 2000 	ldr.w	r2, [r9]
 801a38a:	0c24      	lsrs	r4, r4, #16
 801a38c:	0c12      	lsrs	r2, r2, #16
 801a38e:	fb0a 2404 	mla	r4, sl, r4, r2
 801a392:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 801a396:	b289      	uxth	r1, r1
 801a398:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 801a39c:	45f4      	cmp	ip, lr
 801a39e:	f849 1b04 	str.w	r1, [r9], #4
 801a3a2:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801a3a6:	d8e4      	bhi.n	801a372 <__multiply+0xaa>
 801a3a8:	9901      	ldr	r1, [sp, #4]
 801a3aa:	5072      	str	r2, [r6, r1]
 801a3ac:	9a03      	ldr	r2, [sp, #12]
 801a3ae:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801a3b2:	3304      	adds	r3, #4
 801a3b4:	f1b9 0f00 	cmp.w	r9, #0
 801a3b8:	d01f      	beq.n	801a3fa <__multiply+0x132>
 801a3ba:	6834      	ldr	r4, [r6, #0]
 801a3bc:	f105 0114 	add.w	r1, r5, #20
 801a3c0:	46b6      	mov	lr, r6
 801a3c2:	f04f 0a00 	mov.w	sl, #0
 801a3c6:	880a      	ldrh	r2, [r1, #0]
 801a3c8:	f8be b002 	ldrh.w	fp, [lr, #2]
 801a3cc:	fb09 b202 	mla	r2, r9, r2, fp
 801a3d0:	4492      	add	sl, r2
 801a3d2:	b2a4      	uxth	r4, r4
 801a3d4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 801a3d8:	f84e 4b04 	str.w	r4, [lr], #4
 801a3dc:	f851 4b04 	ldr.w	r4, [r1], #4
 801a3e0:	f8be 2000 	ldrh.w	r2, [lr]
 801a3e4:	0c24      	lsrs	r4, r4, #16
 801a3e6:	fb09 2404 	mla	r4, r9, r4, r2
 801a3ea:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 801a3ee:	458c      	cmp	ip, r1
 801a3f0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801a3f4:	d8e7      	bhi.n	801a3c6 <__multiply+0xfe>
 801a3f6:	9a01      	ldr	r2, [sp, #4]
 801a3f8:	50b4      	str	r4, [r6, r2]
 801a3fa:	3604      	adds	r6, #4
 801a3fc:	e7a3      	b.n	801a346 <__multiply+0x7e>
 801a3fe:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801a402:	2b00      	cmp	r3, #0
 801a404:	d1a5      	bne.n	801a352 <__multiply+0x8a>
 801a406:	3f01      	subs	r7, #1
 801a408:	e7a1      	b.n	801a34e <__multiply+0x86>
 801a40a:	bf00      	nop
 801a40c:	0801d83b 	.word	0x0801d83b
 801a410:	0801d8ac 	.word	0x0801d8ac

0801a414 <__pow5mult>:
 801a414:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a418:	4615      	mov	r5, r2
 801a41a:	f012 0203 	ands.w	r2, r2, #3
 801a41e:	4606      	mov	r6, r0
 801a420:	460f      	mov	r7, r1
 801a422:	d007      	beq.n	801a434 <__pow5mult+0x20>
 801a424:	4c25      	ldr	r4, [pc, #148]	; (801a4bc <__pow5mult+0xa8>)
 801a426:	3a01      	subs	r2, #1
 801a428:	2300      	movs	r3, #0
 801a42a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801a42e:	f7ff fe9b 	bl	801a168 <__multadd>
 801a432:	4607      	mov	r7, r0
 801a434:	10ad      	asrs	r5, r5, #2
 801a436:	d03d      	beq.n	801a4b4 <__pow5mult+0xa0>
 801a438:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801a43a:	b97c      	cbnz	r4, 801a45c <__pow5mult+0x48>
 801a43c:	2010      	movs	r0, #16
 801a43e:	f7fd fe8b 	bl	8018158 <malloc>
 801a442:	4602      	mov	r2, r0
 801a444:	6270      	str	r0, [r6, #36]	; 0x24
 801a446:	b928      	cbnz	r0, 801a454 <__pow5mult+0x40>
 801a448:	4b1d      	ldr	r3, [pc, #116]	; (801a4c0 <__pow5mult+0xac>)
 801a44a:	481e      	ldr	r0, [pc, #120]	; (801a4c4 <__pow5mult+0xb0>)
 801a44c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801a450:	f7fe fd50 	bl	8018ef4 <__assert_func>
 801a454:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801a458:	6004      	str	r4, [r0, #0]
 801a45a:	60c4      	str	r4, [r0, #12]
 801a45c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801a460:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801a464:	b94c      	cbnz	r4, 801a47a <__pow5mult+0x66>
 801a466:	f240 2171 	movw	r1, #625	; 0x271
 801a46a:	4630      	mov	r0, r6
 801a46c:	f7ff ff16 	bl	801a29c <__i2b>
 801a470:	2300      	movs	r3, #0
 801a472:	f8c8 0008 	str.w	r0, [r8, #8]
 801a476:	4604      	mov	r4, r0
 801a478:	6003      	str	r3, [r0, #0]
 801a47a:	f04f 0900 	mov.w	r9, #0
 801a47e:	07eb      	lsls	r3, r5, #31
 801a480:	d50a      	bpl.n	801a498 <__pow5mult+0x84>
 801a482:	4639      	mov	r1, r7
 801a484:	4622      	mov	r2, r4
 801a486:	4630      	mov	r0, r6
 801a488:	f7ff ff1e 	bl	801a2c8 <__multiply>
 801a48c:	4639      	mov	r1, r7
 801a48e:	4680      	mov	r8, r0
 801a490:	4630      	mov	r0, r6
 801a492:	f7ff fe47 	bl	801a124 <_Bfree>
 801a496:	4647      	mov	r7, r8
 801a498:	106d      	asrs	r5, r5, #1
 801a49a:	d00b      	beq.n	801a4b4 <__pow5mult+0xa0>
 801a49c:	6820      	ldr	r0, [r4, #0]
 801a49e:	b938      	cbnz	r0, 801a4b0 <__pow5mult+0x9c>
 801a4a0:	4622      	mov	r2, r4
 801a4a2:	4621      	mov	r1, r4
 801a4a4:	4630      	mov	r0, r6
 801a4a6:	f7ff ff0f 	bl	801a2c8 <__multiply>
 801a4aa:	6020      	str	r0, [r4, #0]
 801a4ac:	f8c0 9000 	str.w	r9, [r0]
 801a4b0:	4604      	mov	r4, r0
 801a4b2:	e7e4      	b.n	801a47e <__pow5mult+0x6a>
 801a4b4:	4638      	mov	r0, r7
 801a4b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a4ba:	bf00      	nop
 801a4bc:	0801da00 	.word	0x0801da00
 801a4c0:	0801d7c5 	.word	0x0801d7c5
 801a4c4:	0801d8ac 	.word	0x0801d8ac

0801a4c8 <__lshift>:
 801a4c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a4cc:	460c      	mov	r4, r1
 801a4ce:	6849      	ldr	r1, [r1, #4]
 801a4d0:	6923      	ldr	r3, [r4, #16]
 801a4d2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801a4d6:	68a3      	ldr	r3, [r4, #8]
 801a4d8:	4607      	mov	r7, r0
 801a4da:	4691      	mov	r9, r2
 801a4dc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801a4e0:	f108 0601 	add.w	r6, r8, #1
 801a4e4:	42b3      	cmp	r3, r6
 801a4e6:	db0b      	blt.n	801a500 <__lshift+0x38>
 801a4e8:	4638      	mov	r0, r7
 801a4ea:	f7ff fddb 	bl	801a0a4 <_Balloc>
 801a4ee:	4605      	mov	r5, r0
 801a4f0:	b948      	cbnz	r0, 801a506 <__lshift+0x3e>
 801a4f2:	4602      	mov	r2, r0
 801a4f4:	4b28      	ldr	r3, [pc, #160]	; (801a598 <__lshift+0xd0>)
 801a4f6:	4829      	ldr	r0, [pc, #164]	; (801a59c <__lshift+0xd4>)
 801a4f8:	f240 11d9 	movw	r1, #473	; 0x1d9
 801a4fc:	f7fe fcfa 	bl	8018ef4 <__assert_func>
 801a500:	3101      	adds	r1, #1
 801a502:	005b      	lsls	r3, r3, #1
 801a504:	e7ee      	b.n	801a4e4 <__lshift+0x1c>
 801a506:	2300      	movs	r3, #0
 801a508:	f100 0114 	add.w	r1, r0, #20
 801a50c:	f100 0210 	add.w	r2, r0, #16
 801a510:	4618      	mov	r0, r3
 801a512:	4553      	cmp	r3, sl
 801a514:	db33      	blt.n	801a57e <__lshift+0xb6>
 801a516:	6920      	ldr	r0, [r4, #16]
 801a518:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801a51c:	f104 0314 	add.w	r3, r4, #20
 801a520:	f019 091f 	ands.w	r9, r9, #31
 801a524:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801a528:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801a52c:	d02b      	beq.n	801a586 <__lshift+0xbe>
 801a52e:	f1c9 0e20 	rsb	lr, r9, #32
 801a532:	468a      	mov	sl, r1
 801a534:	2200      	movs	r2, #0
 801a536:	6818      	ldr	r0, [r3, #0]
 801a538:	fa00 f009 	lsl.w	r0, r0, r9
 801a53c:	4302      	orrs	r2, r0
 801a53e:	f84a 2b04 	str.w	r2, [sl], #4
 801a542:	f853 2b04 	ldr.w	r2, [r3], #4
 801a546:	459c      	cmp	ip, r3
 801a548:	fa22 f20e 	lsr.w	r2, r2, lr
 801a54c:	d8f3      	bhi.n	801a536 <__lshift+0x6e>
 801a54e:	ebac 0304 	sub.w	r3, ip, r4
 801a552:	3b15      	subs	r3, #21
 801a554:	f023 0303 	bic.w	r3, r3, #3
 801a558:	3304      	adds	r3, #4
 801a55a:	f104 0015 	add.w	r0, r4, #21
 801a55e:	4584      	cmp	ip, r0
 801a560:	bf38      	it	cc
 801a562:	2304      	movcc	r3, #4
 801a564:	50ca      	str	r2, [r1, r3]
 801a566:	b10a      	cbz	r2, 801a56c <__lshift+0xa4>
 801a568:	f108 0602 	add.w	r6, r8, #2
 801a56c:	3e01      	subs	r6, #1
 801a56e:	4638      	mov	r0, r7
 801a570:	612e      	str	r6, [r5, #16]
 801a572:	4621      	mov	r1, r4
 801a574:	f7ff fdd6 	bl	801a124 <_Bfree>
 801a578:	4628      	mov	r0, r5
 801a57a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a57e:	f842 0f04 	str.w	r0, [r2, #4]!
 801a582:	3301      	adds	r3, #1
 801a584:	e7c5      	b.n	801a512 <__lshift+0x4a>
 801a586:	3904      	subs	r1, #4
 801a588:	f853 2b04 	ldr.w	r2, [r3], #4
 801a58c:	f841 2f04 	str.w	r2, [r1, #4]!
 801a590:	459c      	cmp	ip, r3
 801a592:	d8f9      	bhi.n	801a588 <__lshift+0xc0>
 801a594:	e7ea      	b.n	801a56c <__lshift+0xa4>
 801a596:	bf00      	nop
 801a598:	0801d83b 	.word	0x0801d83b
 801a59c:	0801d8ac 	.word	0x0801d8ac

0801a5a0 <__mcmp>:
 801a5a0:	b530      	push	{r4, r5, lr}
 801a5a2:	6902      	ldr	r2, [r0, #16]
 801a5a4:	690c      	ldr	r4, [r1, #16]
 801a5a6:	1b12      	subs	r2, r2, r4
 801a5a8:	d10e      	bne.n	801a5c8 <__mcmp+0x28>
 801a5aa:	f100 0314 	add.w	r3, r0, #20
 801a5ae:	3114      	adds	r1, #20
 801a5b0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801a5b4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801a5b8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801a5bc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801a5c0:	42a5      	cmp	r5, r4
 801a5c2:	d003      	beq.n	801a5cc <__mcmp+0x2c>
 801a5c4:	d305      	bcc.n	801a5d2 <__mcmp+0x32>
 801a5c6:	2201      	movs	r2, #1
 801a5c8:	4610      	mov	r0, r2
 801a5ca:	bd30      	pop	{r4, r5, pc}
 801a5cc:	4283      	cmp	r3, r0
 801a5ce:	d3f3      	bcc.n	801a5b8 <__mcmp+0x18>
 801a5d0:	e7fa      	b.n	801a5c8 <__mcmp+0x28>
 801a5d2:	f04f 32ff 	mov.w	r2, #4294967295
 801a5d6:	e7f7      	b.n	801a5c8 <__mcmp+0x28>

0801a5d8 <__mdiff>:
 801a5d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a5dc:	460c      	mov	r4, r1
 801a5de:	4606      	mov	r6, r0
 801a5e0:	4611      	mov	r1, r2
 801a5e2:	4620      	mov	r0, r4
 801a5e4:	4617      	mov	r7, r2
 801a5e6:	f7ff ffdb 	bl	801a5a0 <__mcmp>
 801a5ea:	1e05      	subs	r5, r0, #0
 801a5ec:	d110      	bne.n	801a610 <__mdiff+0x38>
 801a5ee:	4629      	mov	r1, r5
 801a5f0:	4630      	mov	r0, r6
 801a5f2:	f7ff fd57 	bl	801a0a4 <_Balloc>
 801a5f6:	b930      	cbnz	r0, 801a606 <__mdiff+0x2e>
 801a5f8:	4b39      	ldr	r3, [pc, #228]	; (801a6e0 <__mdiff+0x108>)
 801a5fa:	4602      	mov	r2, r0
 801a5fc:	f240 2132 	movw	r1, #562	; 0x232
 801a600:	4838      	ldr	r0, [pc, #224]	; (801a6e4 <__mdiff+0x10c>)
 801a602:	f7fe fc77 	bl	8018ef4 <__assert_func>
 801a606:	2301      	movs	r3, #1
 801a608:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801a60c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a610:	bfa4      	itt	ge
 801a612:	463b      	movge	r3, r7
 801a614:	4627      	movge	r7, r4
 801a616:	4630      	mov	r0, r6
 801a618:	6879      	ldr	r1, [r7, #4]
 801a61a:	bfa6      	itte	ge
 801a61c:	461c      	movge	r4, r3
 801a61e:	2500      	movge	r5, #0
 801a620:	2501      	movlt	r5, #1
 801a622:	f7ff fd3f 	bl	801a0a4 <_Balloc>
 801a626:	b920      	cbnz	r0, 801a632 <__mdiff+0x5a>
 801a628:	4b2d      	ldr	r3, [pc, #180]	; (801a6e0 <__mdiff+0x108>)
 801a62a:	4602      	mov	r2, r0
 801a62c:	f44f 7110 	mov.w	r1, #576	; 0x240
 801a630:	e7e6      	b.n	801a600 <__mdiff+0x28>
 801a632:	693e      	ldr	r6, [r7, #16]
 801a634:	60c5      	str	r5, [r0, #12]
 801a636:	6925      	ldr	r5, [r4, #16]
 801a638:	f107 0114 	add.w	r1, r7, #20
 801a63c:	f104 0914 	add.w	r9, r4, #20
 801a640:	f100 0e14 	add.w	lr, r0, #20
 801a644:	f107 0210 	add.w	r2, r7, #16
 801a648:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 801a64c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 801a650:	46f2      	mov	sl, lr
 801a652:	2700      	movs	r7, #0
 801a654:	f859 3b04 	ldr.w	r3, [r9], #4
 801a658:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801a65c:	fa1f f883 	uxth.w	r8, r3
 801a660:	fa17 f78b 	uxtah	r7, r7, fp
 801a664:	0c1b      	lsrs	r3, r3, #16
 801a666:	eba7 0808 	sub.w	r8, r7, r8
 801a66a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801a66e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801a672:	fa1f f888 	uxth.w	r8, r8
 801a676:	141f      	asrs	r7, r3, #16
 801a678:	454d      	cmp	r5, r9
 801a67a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801a67e:	f84a 3b04 	str.w	r3, [sl], #4
 801a682:	d8e7      	bhi.n	801a654 <__mdiff+0x7c>
 801a684:	1b2b      	subs	r3, r5, r4
 801a686:	3b15      	subs	r3, #21
 801a688:	f023 0303 	bic.w	r3, r3, #3
 801a68c:	3304      	adds	r3, #4
 801a68e:	3415      	adds	r4, #21
 801a690:	42a5      	cmp	r5, r4
 801a692:	bf38      	it	cc
 801a694:	2304      	movcc	r3, #4
 801a696:	4419      	add	r1, r3
 801a698:	4473      	add	r3, lr
 801a69a:	469e      	mov	lr, r3
 801a69c:	460d      	mov	r5, r1
 801a69e:	4565      	cmp	r5, ip
 801a6a0:	d30e      	bcc.n	801a6c0 <__mdiff+0xe8>
 801a6a2:	f10c 0203 	add.w	r2, ip, #3
 801a6a6:	1a52      	subs	r2, r2, r1
 801a6a8:	f022 0203 	bic.w	r2, r2, #3
 801a6ac:	3903      	subs	r1, #3
 801a6ae:	458c      	cmp	ip, r1
 801a6b0:	bf38      	it	cc
 801a6b2:	2200      	movcc	r2, #0
 801a6b4:	441a      	add	r2, r3
 801a6b6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801a6ba:	b17b      	cbz	r3, 801a6dc <__mdiff+0x104>
 801a6bc:	6106      	str	r6, [r0, #16]
 801a6be:	e7a5      	b.n	801a60c <__mdiff+0x34>
 801a6c0:	f855 8b04 	ldr.w	r8, [r5], #4
 801a6c4:	fa17 f488 	uxtah	r4, r7, r8
 801a6c8:	1422      	asrs	r2, r4, #16
 801a6ca:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 801a6ce:	b2a4      	uxth	r4, r4
 801a6d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 801a6d4:	f84e 4b04 	str.w	r4, [lr], #4
 801a6d8:	1417      	asrs	r7, r2, #16
 801a6da:	e7e0      	b.n	801a69e <__mdiff+0xc6>
 801a6dc:	3e01      	subs	r6, #1
 801a6de:	e7ea      	b.n	801a6b6 <__mdiff+0xde>
 801a6e0:	0801d83b 	.word	0x0801d83b
 801a6e4:	0801d8ac 	.word	0x0801d8ac

0801a6e8 <__d2b>:
 801a6e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801a6ec:	4689      	mov	r9, r1
 801a6ee:	2101      	movs	r1, #1
 801a6f0:	ec57 6b10 	vmov	r6, r7, d0
 801a6f4:	4690      	mov	r8, r2
 801a6f6:	f7ff fcd5 	bl	801a0a4 <_Balloc>
 801a6fa:	4604      	mov	r4, r0
 801a6fc:	b930      	cbnz	r0, 801a70c <__d2b+0x24>
 801a6fe:	4602      	mov	r2, r0
 801a700:	4b25      	ldr	r3, [pc, #148]	; (801a798 <__d2b+0xb0>)
 801a702:	4826      	ldr	r0, [pc, #152]	; (801a79c <__d2b+0xb4>)
 801a704:	f240 310a 	movw	r1, #778	; 0x30a
 801a708:	f7fe fbf4 	bl	8018ef4 <__assert_func>
 801a70c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801a710:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801a714:	bb35      	cbnz	r5, 801a764 <__d2b+0x7c>
 801a716:	2e00      	cmp	r6, #0
 801a718:	9301      	str	r3, [sp, #4]
 801a71a:	d028      	beq.n	801a76e <__d2b+0x86>
 801a71c:	4668      	mov	r0, sp
 801a71e:	9600      	str	r6, [sp, #0]
 801a720:	f7ff fd8c 	bl	801a23c <__lo0bits>
 801a724:	9900      	ldr	r1, [sp, #0]
 801a726:	b300      	cbz	r0, 801a76a <__d2b+0x82>
 801a728:	9a01      	ldr	r2, [sp, #4]
 801a72a:	f1c0 0320 	rsb	r3, r0, #32
 801a72e:	fa02 f303 	lsl.w	r3, r2, r3
 801a732:	430b      	orrs	r3, r1
 801a734:	40c2      	lsrs	r2, r0
 801a736:	6163      	str	r3, [r4, #20]
 801a738:	9201      	str	r2, [sp, #4]
 801a73a:	9b01      	ldr	r3, [sp, #4]
 801a73c:	61a3      	str	r3, [r4, #24]
 801a73e:	2b00      	cmp	r3, #0
 801a740:	bf14      	ite	ne
 801a742:	2202      	movne	r2, #2
 801a744:	2201      	moveq	r2, #1
 801a746:	6122      	str	r2, [r4, #16]
 801a748:	b1d5      	cbz	r5, 801a780 <__d2b+0x98>
 801a74a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801a74e:	4405      	add	r5, r0
 801a750:	f8c9 5000 	str.w	r5, [r9]
 801a754:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801a758:	f8c8 0000 	str.w	r0, [r8]
 801a75c:	4620      	mov	r0, r4
 801a75e:	b003      	add	sp, #12
 801a760:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a764:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801a768:	e7d5      	b.n	801a716 <__d2b+0x2e>
 801a76a:	6161      	str	r1, [r4, #20]
 801a76c:	e7e5      	b.n	801a73a <__d2b+0x52>
 801a76e:	a801      	add	r0, sp, #4
 801a770:	f7ff fd64 	bl	801a23c <__lo0bits>
 801a774:	9b01      	ldr	r3, [sp, #4]
 801a776:	6163      	str	r3, [r4, #20]
 801a778:	2201      	movs	r2, #1
 801a77a:	6122      	str	r2, [r4, #16]
 801a77c:	3020      	adds	r0, #32
 801a77e:	e7e3      	b.n	801a748 <__d2b+0x60>
 801a780:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801a784:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801a788:	f8c9 0000 	str.w	r0, [r9]
 801a78c:	6918      	ldr	r0, [r3, #16]
 801a78e:	f7ff fd35 	bl	801a1fc <__hi0bits>
 801a792:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801a796:	e7df      	b.n	801a758 <__d2b+0x70>
 801a798:	0801d83b 	.word	0x0801d83b
 801a79c:	0801d8ac 	.word	0x0801d8ac

0801a7a0 <_calloc_r>:
 801a7a0:	b513      	push	{r0, r1, r4, lr}
 801a7a2:	434a      	muls	r2, r1
 801a7a4:	4611      	mov	r1, r2
 801a7a6:	9201      	str	r2, [sp, #4]
 801a7a8:	f7fd fd4c 	bl	8018244 <_malloc_r>
 801a7ac:	4604      	mov	r4, r0
 801a7ae:	b118      	cbz	r0, 801a7b8 <_calloc_r+0x18>
 801a7b0:	9a01      	ldr	r2, [sp, #4]
 801a7b2:	2100      	movs	r1, #0
 801a7b4:	f7fd fcee 	bl	8018194 <memset>
 801a7b8:	4620      	mov	r0, r4
 801a7ba:	b002      	add	sp, #8
 801a7bc:	bd10      	pop	{r4, pc}

0801a7be <__ssputs_r>:
 801a7be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a7c2:	688e      	ldr	r6, [r1, #8]
 801a7c4:	429e      	cmp	r6, r3
 801a7c6:	4682      	mov	sl, r0
 801a7c8:	460c      	mov	r4, r1
 801a7ca:	4690      	mov	r8, r2
 801a7cc:	461f      	mov	r7, r3
 801a7ce:	d838      	bhi.n	801a842 <__ssputs_r+0x84>
 801a7d0:	898a      	ldrh	r2, [r1, #12]
 801a7d2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801a7d6:	d032      	beq.n	801a83e <__ssputs_r+0x80>
 801a7d8:	6825      	ldr	r5, [r4, #0]
 801a7da:	6909      	ldr	r1, [r1, #16]
 801a7dc:	eba5 0901 	sub.w	r9, r5, r1
 801a7e0:	6965      	ldr	r5, [r4, #20]
 801a7e2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a7e6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801a7ea:	3301      	adds	r3, #1
 801a7ec:	444b      	add	r3, r9
 801a7ee:	106d      	asrs	r5, r5, #1
 801a7f0:	429d      	cmp	r5, r3
 801a7f2:	bf38      	it	cc
 801a7f4:	461d      	movcc	r5, r3
 801a7f6:	0553      	lsls	r3, r2, #21
 801a7f8:	d531      	bpl.n	801a85e <__ssputs_r+0xa0>
 801a7fa:	4629      	mov	r1, r5
 801a7fc:	f7fd fd22 	bl	8018244 <_malloc_r>
 801a800:	4606      	mov	r6, r0
 801a802:	b950      	cbnz	r0, 801a81a <__ssputs_r+0x5c>
 801a804:	230c      	movs	r3, #12
 801a806:	f8ca 3000 	str.w	r3, [sl]
 801a80a:	89a3      	ldrh	r3, [r4, #12]
 801a80c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a810:	81a3      	strh	r3, [r4, #12]
 801a812:	f04f 30ff 	mov.w	r0, #4294967295
 801a816:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a81a:	6921      	ldr	r1, [r4, #16]
 801a81c:	464a      	mov	r2, r9
 801a81e:	f7fd fcab 	bl	8018178 <memcpy>
 801a822:	89a3      	ldrh	r3, [r4, #12]
 801a824:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801a828:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a82c:	81a3      	strh	r3, [r4, #12]
 801a82e:	6126      	str	r6, [r4, #16]
 801a830:	6165      	str	r5, [r4, #20]
 801a832:	444e      	add	r6, r9
 801a834:	eba5 0509 	sub.w	r5, r5, r9
 801a838:	6026      	str	r6, [r4, #0]
 801a83a:	60a5      	str	r5, [r4, #8]
 801a83c:	463e      	mov	r6, r7
 801a83e:	42be      	cmp	r6, r7
 801a840:	d900      	bls.n	801a844 <__ssputs_r+0x86>
 801a842:	463e      	mov	r6, r7
 801a844:	4632      	mov	r2, r6
 801a846:	6820      	ldr	r0, [r4, #0]
 801a848:	4641      	mov	r1, r8
 801a84a:	f000 fb69 	bl	801af20 <memmove>
 801a84e:	68a3      	ldr	r3, [r4, #8]
 801a850:	6822      	ldr	r2, [r4, #0]
 801a852:	1b9b      	subs	r3, r3, r6
 801a854:	4432      	add	r2, r6
 801a856:	60a3      	str	r3, [r4, #8]
 801a858:	6022      	str	r2, [r4, #0]
 801a85a:	2000      	movs	r0, #0
 801a85c:	e7db      	b.n	801a816 <__ssputs_r+0x58>
 801a85e:	462a      	mov	r2, r5
 801a860:	f000 fb78 	bl	801af54 <_realloc_r>
 801a864:	4606      	mov	r6, r0
 801a866:	2800      	cmp	r0, #0
 801a868:	d1e1      	bne.n	801a82e <__ssputs_r+0x70>
 801a86a:	6921      	ldr	r1, [r4, #16]
 801a86c:	4650      	mov	r0, sl
 801a86e:	f7fd fc99 	bl	80181a4 <_free_r>
 801a872:	e7c7      	b.n	801a804 <__ssputs_r+0x46>

0801a874 <_svfiprintf_r>:
 801a874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a878:	4698      	mov	r8, r3
 801a87a:	898b      	ldrh	r3, [r1, #12]
 801a87c:	061b      	lsls	r3, r3, #24
 801a87e:	b09d      	sub	sp, #116	; 0x74
 801a880:	4607      	mov	r7, r0
 801a882:	460d      	mov	r5, r1
 801a884:	4614      	mov	r4, r2
 801a886:	d50e      	bpl.n	801a8a6 <_svfiprintf_r+0x32>
 801a888:	690b      	ldr	r3, [r1, #16]
 801a88a:	b963      	cbnz	r3, 801a8a6 <_svfiprintf_r+0x32>
 801a88c:	2140      	movs	r1, #64	; 0x40
 801a88e:	f7fd fcd9 	bl	8018244 <_malloc_r>
 801a892:	6028      	str	r0, [r5, #0]
 801a894:	6128      	str	r0, [r5, #16]
 801a896:	b920      	cbnz	r0, 801a8a2 <_svfiprintf_r+0x2e>
 801a898:	230c      	movs	r3, #12
 801a89a:	603b      	str	r3, [r7, #0]
 801a89c:	f04f 30ff 	mov.w	r0, #4294967295
 801a8a0:	e0d1      	b.n	801aa46 <_svfiprintf_r+0x1d2>
 801a8a2:	2340      	movs	r3, #64	; 0x40
 801a8a4:	616b      	str	r3, [r5, #20]
 801a8a6:	2300      	movs	r3, #0
 801a8a8:	9309      	str	r3, [sp, #36]	; 0x24
 801a8aa:	2320      	movs	r3, #32
 801a8ac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a8b0:	f8cd 800c 	str.w	r8, [sp, #12]
 801a8b4:	2330      	movs	r3, #48	; 0x30
 801a8b6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801aa60 <_svfiprintf_r+0x1ec>
 801a8ba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a8be:	f04f 0901 	mov.w	r9, #1
 801a8c2:	4623      	mov	r3, r4
 801a8c4:	469a      	mov	sl, r3
 801a8c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a8ca:	b10a      	cbz	r2, 801a8d0 <_svfiprintf_r+0x5c>
 801a8cc:	2a25      	cmp	r2, #37	; 0x25
 801a8ce:	d1f9      	bne.n	801a8c4 <_svfiprintf_r+0x50>
 801a8d0:	ebba 0b04 	subs.w	fp, sl, r4
 801a8d4:	d00b      	beq.n	801a8ee <_svfiprintf_r+0x7a>
 801a8d6:	465b      	mov	r3, fp
 801a8d8:	4622      	mov	r2, r4
 801a8da:	4629      	mov	r1, r5
 801a8dc:	4638      	mov	r0, r7
 801a8de:	f7ff ff6e 	bl	801a7be <__ssputs_r>
 801a8e2:	3001      	adds	r0, #1
 801a8e4:	f000 80aa 	beq.w	801aa3c <_svfiprintf_r+0x1c8>
 801a8e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a8ea:	445a      	add	r2, fp
 801a8ec:	9209      	str	r2, [sp, #36]	; 0x24
 801a8ee:	f89a 3000 	ldrb.w	r3, [sl]
 801a8f2:	2b00      	cmp	r3, #0
 801a8f4:	f000 80a2 	beq.w	801aa3c <_svfiprintf_r+0x1c8>
 801a8f8:	2300      	movs	r3, #0
 801a8fa:	f04f 32ff 	mov.w	r2, #4294967295
 801a8fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a902:	f10a 0a01 	add.w	sl, sl, #1
 801a906:	9304      	str	r3, [sp, #16]
 801a908:	9307      	str	r3, [sp, #28]
 801a90a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a90e:	931a      	str	r3, [sp, #104]	; 0x68
 801a910:	4654      	mov	r4, sl
 801a912:	2205      	movs	r2, #5
 801a914:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a918:	4851      	ldr	r0, [pc, #324]	; (801aa60 <_svfiprintf_r+0x1ec>)
 801a91a:	f7e5 fc81 	bl	8000220 <memchr>
 801a91e:	9a04      	ldr	r2, [sp, #16]
 801a920:	b9d8      	cbnz	r0, 801a95a <_svfiprintf_r+0xe6>
 801a922:	06d0      	lsls	r0, r2, #27
 801a924:	bf44      	itt	mi
 801a926:	2320      	movmi	r3, #32
 801a928:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a92c:	0711      	lsls	r1, r2, #28
 801a92e:	bf44      	itt	mi
 801a930:	232b      	movmi	r3, #43	; 0x2b
 801a932:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a936:	f89a 3000 	ldrb.w	r3, [sl]
 801a93a:	2b2a      	cmp	r3, #42	; 0x2a
 801a93c:	d015      	beq.n	801a96a <_svfiprintf_r+0xf6>
 801a93e:	9a07      	ldr	r2, [sp, #28]
 801a940:	4654      	mov	r4, sl
 801a942:	2000      	movs	r0, #0
 801a944:	f04f 0c0a 	mov.w	ip, #10
 801a948:	4621      	mov	r1, r4
 801a94a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a94e:	3b30      	subs	r3, #48	; 0x30
 801a950:	2b09      	cmp	r3, #9
 801a952:	d94e      	bls.n	801a9f2 <_svfiprintf_r+0x17e>
 801a954:	b1b0      	cbz	r0, 801a984 <_svfiprintf_r+0x110>
 801a956:	9207      	str	r2, [sp, #28]
 801a958:	e014      	b.n	801a984 <_svfiprintf_r+0x110>
 801a95a:	eba0 0308 	sub.w	r3, r0, r8
 801a95e:	fa09 f303 	lsl.w	r3, r9, r3
 801a962:	4313      	orrs	r3, r2
 801a964:	9304      	str	r3, [sp, #16]
 801a966:	46a2      	mov	sl, r4
 801a968:	e7d2      	b.n	801a910 <_svfiprintf_r+0x9c>
 801a96a:	9b03      	ldr	r3, [sp, #12]
 801a96c:	1d19      	adds	r1, r3, #4
 801a96e:	681b      	ldr	r3, [r3, #0]
 801a970:	9103      	str	r1, [sp, #12]
 801a972:	2b00      	cmp	r3, #0
 801a974:	bfbb      	ittet	lt
 801a976:	425b      	neglt	r3, r3
 801a978:	f042 0202 	orrlt.w	r2, r2, #2
 801a97c:	9307      	strge	r3, [sp, #28]
 801a97e:	9307      	strlt	r3, [sp, #28]
 801a980:	bfb8      	it	lt
 801a982:	9204      	strlt	r2, [sp, #16]
 801a984:	7823      	ldrb	r3, [r4, #0]
 801a986:	2b2e      	cmp	r3, #46	; 0x2e
 801a988:	d10c      	bne.n	801a9a4 <_svfiprintf_r+0x130>
 801a98a:	7863      	ldrb	r3, [r4, #1]
 801a98c:	2b2a      	cmp	r3, #42	; 0x2a
 801a98e:	d135      	bne.n	801a9fc <_svfiprintf_r+0x188>
 801a990:	9b03      	ldr	r3, [sp, #12]
 801a992:	1d1a      	adds	r2, r3, #4
 801a994:	681b      	ldr	r3, [r3, #0]
 801a996:	9203      	str	r2, [sp, #12]
 801a998:	2b00      	cmp	r3, #0
 801a99a:	bfb8      	it	lt
 801a99c:	f04f 33ff 	movlt.w	r3, #4294967295
 801a9a0:	3402      	adds	r4, #2
 801a9a2:	9305      	str	r3, [sp, #20]
 801a9a4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801aa70 <_svfiprintf_r+0x1fc>
 801a9a8:	7821      	ldrb	r1, [r4, #0]
 801a9aa:	2203      	movs	r2, #3
 801a9ac:	4650      	mov	r0, sl
 801a9ae:	f7e5 fc37 	bl	8000220 <memchr>
 801a9b2:	b140      	cbz	r0, 801a9c6 <_svfiprintf_r+0x152>
 801a9b4:	2340      	movs	r3, #64	; 0x40
 801a9b6:	eba0 000a 	sub.w	r0, r0, sl
 801a9ba:	fa03 f000 	lsl.w	r0, r3, r0
 801a9be:	9b04      	ldr	r3, [sp, #16]
 801a9c0:	4303      	orrs	r3, r0
 801a9c2:	3401      	adds	r4, #1
 801a9c4:	9304      	str	r3, [sp, #16]
 801a9c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a9ca:	4826      	ldr	r0, [pc, #152]	; (801aa64 <_svfiprintf_r+0x1f0>)
 801a9cc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a9d0:	2206      	movs	r2, #6
 801a9d2:	f7e5 fc25 	bl	8000220 <memchr>
 801a9d6:	2800      	cmp	r0, #0
 801a9d8:	d038      	beq.n	801aa4c <_svfiprintf_r+0x1d8>
 801a9da:	4b23      	ldr	r3, [pc, #140]	; (801aa68 <_svfiprintf_r+0x1f4>)
 801a9dc:	bb1b      	cbnz	r3, 801aa26 <_svfiprintf_r+0x1b2>
 801a9de:	9b03      	ldr	r3, [sp, #12]
 801a9e0:	3307      	adds	r3, #7
 801a9e2:	f023 0307 	bic.w	r3, r3, #7
 801a9e6:	3308      	adds	r3, #8
 801a9e8:	9303      	str	r3, [sp, #12]
 801a9ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a9ec:	4433      	add	r3, r6
 801a9ee:	9309      	str	r3, [sp, #36]	; 0x24
 801a9f0:	e767      	b.n	801a8c2 <_svfiprintf_r+0x4e>
 801a9f2:	fb0c 3202 	mla	r2, ip, r2, r3
 801a9f6:	460c      	mov	r4, r1
 801a9f8:	2001      	movs	r0, #1
 801a9fa:	e7a5      	b.n	801a948 <_svfiprintf_r+0xd4>
 801a9fc:	2300      	movs	r3, #0
 801a9fe:	3401      	adds	r4, #1
 801aa00:	9305      	str	r3, [sp, #20]
 801aa02:	4619      	mov	r1, r3
 801aa04:	f04f 0c0a 	mov.w	ip, #10
 801aa08:	4620      	mov	r0, r4
 801aa0a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801aa0e:	3a30      	subs	r2, #48	; 0x30
 801aa10:	2a09      	cmp	r2, #9
 801aa12:	d903      	bls.n	801aa1c <_svfiprintf_r+0x1a8>
 801aa14:	2b00      	cmp	r3, #0
 801aa16:	d0c5      	beq.n	801a9a4 <_svfiprintf_r+0x130>
 801aa18:	9105      	str	r1, [sp, #20]
 801aa1a:	e7c3      	b.n	801a9a4 <_svfiprintf_r+0x130>
 801aa1c:	fb0c 2101 	mla	r1, ip, r1, r2
 801aa20:	4604      	mov	r4, r0
 801aa22:	2301      	movs	r3, #1
 801aa24:	e7f0      	b.n	801aa08 <_svfiprintf_r+0x194>
 801aa26:	ab03      	add	r3, sp, #12
 801aa28:	9300      	str	r3, [sp, #0]
 801aa2a:	462a      	mov	r2, r5
 801aa2c:	4b0f      	ldr	r3, [pc, #60]	; (801aa6c <_svfiprintf_r+0x1f8>)
 801aa2e:	a904      	add	r1, sp, #16
 801aa30:	4638      	mov	r0, r7
 801aa32:	f7fd fd01 	bl	8018438 <_printf_float>
 801aa36:	1c42      	adds	r2, r0, #1
 801aa38:	4606      	mov	r6, r0
 801aa3a:	d1d6      	bne.n	801a9ea <_svfiprintf_r+0x176>
 801aa3c:	89ab      	ldrh	r3, [r5, #12]
 801aa3e:	065b      	lsls	r3, r3, #25
 801aa40:	f53f af2c 	bmi.w	801a89c <_svfiprintf_r+0x28>
 801aa44:	9809      	ldr	r0, [sp, #36]	; 0x24
 801aa46:	b01d      	add	sp, #116	; 0x74
 801aa48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aa4c:	ab03      	add	r3, sp, #12
 801aa4e:	9300      	str	r3, [sp, #0]
 801aa50:	462a      	mov	r2, r5
 801aa52:	4b06      	ldr	r3, [pc, #24]	; (801aa6c <_svfiprintf_r+0x1f8>)
 801aa54:	a904      	add	r1, sp, #16
 801aa56:	4638      	mov	r0, r7
 801aa58:	f7fd ff92 	bl	8018980 <_printf_i>
 801aa5c:	e7eb      	b.n	801aa36 <_svfiprintf_r+0x1c2>
 801aa5e:	bf00      	nop
 801aa60:	0801da0c 	.word	0x0801da0c
 801aa64:	0801da16 	.word	0x0801da16
 801aa68:	08018439 	.word	0x08018439
 801aa6c:	0801a7bf 	.word	0x0801a7bf
 801aa70:	0801da12 	.word	0x0801da12

0801aa74 <__sfputc_r>:
 801aa74:	6893      	ldr	r3, [r2, #8]
 801aa76:	3b01      	subs	r3, #1
 801aa78:	2b00      	cmp	r3, #0
 801aa7a:	b410      	push	{r4}
 801aa7c:	6093      	str	r3, [r2, #8]
 801aa7e:	da08      	bge.n	801aa92 <__sfputc_r+0x1e>
 801aa80:	6994      	ldr	r4, [r2, #24]
 801aa82:	42a3      	cmp	r3, r4
 801aa84:	db01      	blt.n	801aa8a <__sfputc_r+0x16>
 801aa86:	290a      	cmp	r1, #10
 801aa88:	d103      	bne.n	801aa92 <__sfputc_r+0x1e>
 801aa8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801aa8e:	f7fe b971 	b.w	8018d74 <__swbuf_r>
 801aa92:	6813      	ldr	r3, [r2, #0]
 801aa94:	1c58      	adds	r0, r3, #1
 801aa96:	6010      	str	r0, [r2, #0]
 801aa98:	7019      	strb	r1, [r3, #0]
 801aa9a:	4608      	mov	r0, r1
 801aa9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801aaa0:	4770      	bx	lr

0801aaa2 <__sfputs_r>:
 801aaa2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801aaa4:	4606      	mov	r6, r0
 801aaa6:	460f      	mov	r7, r1
 801aaa8:	4614      	mov	r4, r2
 801aaaa:	18d5      	adds	r5, r2, r3
 801aaac:	42ac      	cmp	r4, r5
 801aaae:	d101      	bne.n	801aab4 <__sfputs_r+0x12>
 801aab0:	2000      	movs	r0, #0
 801aab2:	e007      	b.n	801aac4 <__sfputs_r+0x22>
 801aab4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801aab8:	463a      	mov	r2, r7
 801aaba:	4630      	mov	r0, r6
 801aabc:	f7ff ffda 	bl	801aa74 <__sfputc_r>
 801aac0:	1c43      	adds	r3, r0, #1
 801aac2:	d1f3      	bne.n	801aaac <__sfputs_r+0xa>
 801aac4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801aac8 <_vfiprintf_r>:
 801aac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aacc:	460d      	mov	r5, r1
 801aace:	b09d      	sub	sp, #116	; 0x74
 801aad0:	4614      	mov	r4, r2
 801aad2:	4698      	mov	r8, r3
 801aad4:	4606      	mov	r6, r0
 801aad6:	b118      	cbz	r0, 801aae0 <_vfiprintf_r+0x18>
 801aad8:	6983      	ldr	r3, [r0, #24]
 801aada:	b90b      	cbnz	r3, 801aae0 <_vfiprintf_r+0x18>
 801aadc:	f7ff f9ba 	bl	8019e54 <__sinit>
 801aae0:	4b89      	ldr	r3, [pc, #548]	; (801ad08 <_vfiprintf_r+0x240>)
 801aae2:	429d      	cmp	r5, r3
 801aae4:	d11b      	bne.n	801ab1e <_vfiprintf_r+0x56>
 801aae6:	6875      	ldr	r5, [r6, #4]
 801aae8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801aaea:	07d9      	lsls	r1, r3, #31
 801aaec:	d405      	bmi.n	801aafa <_vfiprintf_r+0x32>
 801aaee:	89ab      	ldrh	r3, [r5, #12]
 801aaf0:	059a      	lsls	r2, r3, #22
 801aaf2:	d402      	bmi.n	801aafa <_vfiprintf_r+0x32>
 801aaf4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801aaf6:	f7ff fa62 	bl	8019fbe <__retarget_lock_acquire_recursive>
 801aafa:	89ab      	ldrh	r3, [r5, #12]
 801aafc:	071b      	lsls	r3, r3, #28
 801aafe:	d501      	bpl.n	801ab04 <_vfiprintf_r+0x3c>
 801ab00:	692b      	ldr	r3, [r5, #16]
 801ab02:	b9eb      	cbnz	r3, 801ab40 <_vfiprintf_r+0x78>
 801ab04:	4629      	mov	r1, r5
 801ab06:	4630      	mov	r0, r6
 801ab08:	f7fe f986 	bl	8018e18 <__swsetup_r>
 801ab0c:	b1c0      	cbz	r0, 801ab40 <_vfiprintf_r+0x78>
 801ab0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801ab10:	07dc      	lsls	r4, r3, #31
 801ab12:	d50e      	bpl.n	801ab32 <_vfiprintf_r+0x6a>
 801ab14:	f04f 30ff 	mov.w	r0, #4294967295
 801ab18:	b01d      	add	sp, #116	; 0x74
 801ab1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ab1e:	4b7b      	ldr	r3, [pc, #492]	; (801ad0c <_vfiprintf_r+0x244>)
 801ab20:	429d      	cmp	r5, r3
 801ab22:	d101      	bne.n	801ab28 <_vfiprintf_r+0x60>
 801ab24:	68b5      	ldr	r5, [r6, #8]
 801ab26:	e7df      	b.n	801aae8 <_vfiprintf_r+0x20>
 801ab28:	4b79      	ldr	r3, [pc, #484]	; (801ad10 <_vfiprintf_r+0x248>)
 801ab2a:	429d      	cmp	r5, r3
 801ab2c:	bf08      	it	eq
 801ab2e:	68f5      	ldreq	r5, [r6, #12]
 801ab30:	e7da      	b.n	801aae8 <_vfiprintf_r+0x20>
 801ab32:	89ab      	ldrh	r3, [r5, #12]
 801ab34:	0598      	lsls	r0, r3, #22
 801ab36:	d4ed      	bmi.n	801ab14 <_vfiprintf_r+0x4c>
 801ab38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801ab3a:	f7ff fa41 	bl	8019fc0 <__retarget_lock_release_recursive>
 801ab3e:	e7e9      	b.n	801ab14 <_vfiprintf_r+0x4c>
 801ab40:	2300      	movs	r3, #0
 801ab42:	9309      	str	r3, [sp, #36]	; 0x24
 801ab44:	2320      	movs	r3, #32
 801ab46:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801ab4a:	f8cd 800c 	str.w	r8, [sp, #12]
 801ab4e:	2330      	movs	r3, #48	; 0x30
 801ab50:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801ad14 <_vfiprintf_r+0x24c>
 801ab54:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801ab58:	f04f 0901 	mov.w	r9, #1
 801ab5c:	4623      	mov	r3, r4
 801ab5e:	469a      	mov	sl, r3
 801ab60:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ab64:	b10a      	cbz	r2, 801ab6a <_vfiprintf_r+0xa2>
 801ab66:	2a25      	cmp	r2, #37	; 0x25
 801ab68:	d1f9      	bne.n	801ab5e <_vfiprintf_r+0x96>
 801ab6a:	ebba 0b04 	subs.w	fp, sl, r4
 801ab6e:	d00b      	beq.n	801ab88 <_vfiprintf_r+0xc0>
 801ab70:	465b      	mov	r3, fp
 801ab72:	4622      	mov	r2, r4
 801ab74:	4629      	mov	r1, r5
 801ab76:	4630      	mov	r0, r6
 801ab78:	f7ff ff93 	bl	801aaa2 <__sfputs_r>
 801ab7c:	3001      	adds	r0, #1
 801ab7e:	f000 80aa 	beq.w	801acd6 <_vfiprintf_r+0x20e>
 801ab82:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ab84:	445a      	add	r2, fp
 801ab86:	9209      	str	r2, [sp, #36]	; 0x24
 801ab88:	f89a 3000 	ldrb.w	r3, [sl]
 801ab8c:	2b00      	cmp	r3, #0
 801ab8e:	f000 80a2 	beq.w	801acd6 <_vfiprintf_r+0x20e>
 801ab92:	2300      	movs	r3, #0
 801ab94:	f04f 32ff 	mov.w	r2, #4294967295
 801ab98:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801ab9c:	f10a 0a01 	add.w	sl, sl, #1
 801aba0:	9304      	str	r3, [sp, #16]
 801aba2:	9307      	str	r3, [sp, #28]
 801aba4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801aba8:	931a      	str	r3, [sp, #104]	; 0x68
 801abaa:	4654      	mov	r4, sl
 801abac:	2205      	movs	r2, #5
 801abae:	f814 1b01 	ldrb.w	r1, [r4], #1
 801abb2:	4858      	ldr	r0, [pc, #352]	; (801ad14 <_vfiprintf_r+0x24c>)
 801abb4:	f7e5 fb34 	bl	8000220 <memchr>
 801abb8:	9a04      	ldr	r2, [sp, #16]
 801abba:	b9d8      	cbnz	r0, 801abf4 <_vfiprintf_r+0x12c>
 801abbc:	06d1      	lsls	r1, r2, #27
 801abbe:	bf44      	itt	mi
 801abc0:	2320      	movmi	r3, #32
 801abc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801abc6:	0713      	lsls	r3, r2, #28
 801abc8:	bf44      	itt	mi
 801abca:	232b      	movmi	r3, #43	; 0x2b
 801abcc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801abd0:	f89a 3000 	ldrb.w	r3, [sl]
 801abd4:	2b2a      	cmp	r3, #42	; 0x2a
 801abd6:	d015      	beq.n	801ac04 <_vfiprintf_r+0x13c>
 801abd8:	9a07      	ldr	r2, [sp, #28]
 801abda:	4654      	mov	r4, sl
 801abdc:	2000      	movs	r0, #0
 801abde:	f04f 0c0a 	mov.w	ip, #10
 801abe2:	4621      	mov	r1, r4
 801abe4:	f811 3b01 	ldrb.w	r3, [r1], #1
 801abe8:	3b30      	subs	r3, #48	; 0x30
 801abea:	2b09      	cmp	r3, #9
 801abec:	d94e      	bls.n	801ac8c <_vfiprintf_r+0x1c4>
 801abee:	b1b0      	cbz	r0, 801ac1e <_vfiprintf_r+0x156>
 801abf0:	9207      	str	r2, [sp, #28]
 801abf2:	e014      	b.n	801ac1e <_vfiprintf_r+0x156>
 801abf4:	eba0 0308 	sub.w	r3, r0, r8
 801abf8:	fa09 f303 	lsl.w	r3, r9, r3
 801abfc:	4313      	orrs	r3, r2
 801abfe:	9304      	str	r3, [sp, #16]
 801ac00:	46a2      	mov	sl, r4
 801ac02:	e7d2      	b.n	801abaa <_vfiprintf_r+0xe2>
 801ac04:	9b03      	ldr	r3, [sp, #12]
 801ac06:	1d19      	adds	r1, r3, #4
 801ac08:	681b      	ldr	r3, [r3, #0]
 801ac0a:	9103      	str	r1, [sp, #12]
 801ac0c:	2b00      	cmp	r3, #0
 801ac0e:	bfbb      	ittet	lt
 801ac10:	425b      	neglt	r3, r3
 801ac12:	f042 0202 	orrlt.w	r2, r2, #2
 801ac16:	9307      	strge	r3, [sp, #28]
 801ac18:	9307      	strlt	r3, [sp, #28]
 801ac1a:	bfb8      	it	lt
 801ac1c:	9204      	strlt	r2, [sp, #16]
 801ac1e:	7823      	ldrb	r3, [r4, #0]
 801ac20:	2b2e      	cmp	r3, #46	; 0x2e
 801ac22:	d10c      	bne.n	801ac3e <_vfiprintf_r+0x176>
 801ac24:	7863      	ldrb	r3, [r4, #1]
 801ac26:	2b2a      	cmp	r3, #42	; 0x2a
 801ac28:	d135      	bne.n	801ac96 <_vfiprintf_r+0x1ce>
 801ac2a:	9b03      	ldr	r3, [sp, #12]
 801ac2c:	1d1a      	adds	r2, r3, #4
 801ac2e:	681b      	ldr	r3, [r3, #0]
 801ac30:	9203      	str	r2, [sp, #12]
 801ac32:	2b00      	cmp	r3, #0
 801ac34:	bfb8      	it	lt
 801ac36:	f04f 33ff 	movlt.w	r3, #4294967295
 801ac3a:	3402      	adds	r4, #2
 801ac3c:	9305      	str	r3, [sp, #20]
 801ac3e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801ad24 <_vfiprintf_r+0x25c>
 801ac42:	7821      	ldrb	r1, [r4, #0]
 801ac44:	2203      	movs	r2, #3
 801ac46:	4650      	mov	r0, sl
 801ac48:	f7e5 faea 	bl	8000220 <memchr>
 801ac4c:	b140      	cbz	r0, 801ac60 <_vfiprintf_r+0x198>
 801ac4e:	2340      	movs	r3, #64	; 0x40
 801ac50:	eba0 000a 	sub.w	r0, r0, sl
 801ac54:	fa03 f000 	lsl.w	r0, r3, r0
 801ac58:	9b04      	ldr	r3, [sp, #16]
 801ac5a:	4303      	orrs	r3, r0
 801ac5c:	3401      	adds	r4, #1
 801ac5e:	9304      	str	r3, [sp, #16]
 801ac60:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ac64:	482c      	ldr	r0, [pc, #176]	; (801ad18 <_vfiprintf_r+0x250>)
 801ac66:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801ac6a:	2206      	movs	r2, #6
 801ac6c:	f7e5 fad8 	bl	8000220 <memchr>
 801ac70:	2800      	cmp	r0, #0
 801ac72:	d03f      	beq.n	801acf4 <_vfiprintf_r+0x22c>
 801ac74:	4b29      	ldr	r3, [pc, #164]	; (801ad1c <_vfiprintf_r+0x254>)
 801ac76:	bb1b      	cbnz	r3, 801acc0 <_vfiprintf_r+0x1f8>
 801ac78:	9b03      	ldr	r3, [sp, #12]
 801ac7a:	3307      	adds	r3, #7
 801ac7c:	f023 0307 	bic.w	r3, r3, #7
 801ac80:	3308      	adds	r3, #8
 801ac82:	9303      	str	r3, [sp, #12]
 801ac84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ac86:	443b      	add	r3, r7
 801ac88:	9309      	str	r3, [sp, #36]	; 0x24
 801ac8a:	e767      	b.n	801ab5c <_vfiprintf_r+0x94>
 801ac8c:	fb0c 3202 	mla	r2, ip, r2, r3
 801ac90:	460c      	mov	r4, r1
 801ac92:	2001      	movs	r0, #1
 801ac94:	e7a5      	b.n	801abe2 <_vfiprintf_r+0x11a>
 801ac96:	2300      	movs	r3, #0
 801ac98:	3401      	adds	r4, #1
 801ac9a:	9305      	str	r3, [sp, #20]
 801ac9c:	4619      	mov	r1, r3
 801ac9e:	f04f 0c0a 	mov.w	ip, #10
 801aca2:	4620      	mov	r0, r4
 801aca4:	f810 2b01 	ldrb.w	r2, [r0], #1
 801aca8:	3a30      	subs	r2, #48	; 0x30
 801acaa:	2a09      	cmp	r2, #9
 801acac:	d903      	bls.n	801acb6 <_vfiprintf_r+0x1ee>
 801acae:	2b00      	cmp	r3, #0
 801acb0:	d0c5      	beq.n	801ac3e <_vfiprintf_r+0x176>
 801acb2:	9105      	str	r1, [sp, #20]
 801acb4:	e7c3      	b.n	801ac3e <_vfiprintf_r+0x176>
 801acb6:	fb0c 2101 	mla	r1, ip, r1, r2
 801acba:	4604      	mov	r4, r0
 801acbc:	2301      	movs	r3, #1
 801acbe:	e7f0      	b.n	801aca2 <_vfiprintf_r+0x1da>
 801acc0:	ab03      	add	r3, sp, #12
 801acc2:	9300      	str	r3, [sp, #0]
 801acc4:	462a      	mov	r2, r5
 801acc6:	4b16      	ldr	r3, [pc, #88]	; (801ad20 <_vfiprintf_r+0x258>)
 801acc8:	a904      	add	r1, sp, #16
 801acca:	4630      	mov	r0, r6
 801accc:	f7fd fbb4 	bl	8018438 <_printf_float>
 801acd0:	4607      	mov	r7, r0
 801acd2:	1c78      	adds	r0, r7, #1
 801acd4:	d1d6      	bne.n	801ac84 <_vfiprintf_r+0x1bc>
 801acd6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801acd8:	07d9      	lsls	r1, r3, #31
 801acda:	d405      	bmi.n	801ace8 <_vfiprintf_r+0x220>
 801acdc:	89ab      	ldrh	r3, [r5, #12]
 801acde:	059a      	lsls	r2, r3, #22
 801ace0:	d402      	bmi.n	801ace8 <_vfiprintf_r+0x220>
 801ace2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801ace4:	f7ff f96c 	bl	8019fc0 <__retarget_lock_release_recursive>
 801ace8:	89ab      	ldrh	r3, [r5, #12]
 801acea:	065b      	lsls	r3, r3, #25
 801acec:	f53f af12 	bmi.w	801ab14 <_vfiprintf_r+0x4c>
 801acf0:	9809      	ldr	r0, [sp, #36]	; 0x24
 801acf2:	e711      	b.n	801ab18 <_vfiprintf_r+0x50>
 801acf4:	ab03      	add	r3, sp, #12
 801acf6:	9300      	str	r3, [sp, #0]
 801acf8:	462a      	mov	r2, r5
 801acfa:	4b09      	ldr	r3, [pc, #36]	; (801ad20 <_vfiprintf_r+0x258>)
 801acfc:	a904      	add	r1, sp, #16
 801acfe:	4630      	mov	r0, r6
 801ad00:	f7fd fe3e 	bl	8018980 <_printf_i>
 801ad04:	e7e4      	b.n	801acd0 <_vfiprintf_r+0x208>
 801ad06:	bf00      	nop
 801ad08:	0801d86c 	.word	0x0801d86c
 801ad0c:	0801d88c 	.word	0x0801d88c
 801ad10:	0801d84c 	.word	0x0801d84c
 801ad14:	0801da0c 	.word	0x0801da0c
 801ad18:	0801da16 	.word	0x0801da16
 801ad1c:	08018439 	.word	0x08018439
 801ad20:	0801aaa3 	.word	0x0801aaa3
 801ad24:	0801da12 	.word	0x0801da12

0801ad28 <_putc_r>:
 801ad28:	b570      	push	{r4, r5, r6, lr}
 801ad2a:	460d      	mov	r5, r1
 801ad2c:	4614      	mov	r4, r2
 801ad2e:	4606      	mov	r6, r0
 801ad30:	b118      	cbz	r0, 801ad3a <_putc_r+0x12>
 801ad32:	6983      	ldr	r3, [r0, #24]
 801ad34:	b90b      	cbnz	r3, 801ad3a <_putc_r+0x12>
 801ad36:	f7ff f88d 	bl	8019e54 <__sinit>
 801ad3a:	4b1c      	ldr	r3, [pc, #112]	; (801adac <_putc_r+0x84>)
 801ad3c:	429c      	cmp	r4, r3
 801ad3e:	d124      	bne.n	801ad8a <_putc_r+0x62>
 801ad40:	6874      	ldr	r4, [r6, #4]
 801ad42:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801ad44:	07d8      	lsls	r0, r3, #31
 801ad46:	d405      	bmi.n	801ad54 <_putc_r+0x2c>
 801ad48:	89a3      	ldrh	r3, [r4, #12]
 801ad4a:	0599      	lsls	r1, r3, #22
 801ad4c:	d402      	bmi.n	801ad54 <_putc_r+0x2c>
 801ad4e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ad50:	f7ff f935 	bl	8019fbe <__retarget_lock_acquire_recursive>
 801ad54:	68a3      	ldr	r3, [r4, #8]
 801ad56:	3b01      	subs	r3, #1
 801ad58:	2b00      	cmp	r3, #0
 801ad5a:	60a3      	str	r3, [r4, #8]
 801ad5c:	da05      	bge.n	801ad6a <_putc_r+0x42>
 801ad5e:	69a2      	ldr	r2, [r4, #24]
 801ad60:	4293      	cmp	r3, r2
 801ad62:	db1c      	blt.n	801ad9e <_putc_r+0x76>
 801ad64:	b2eb      	uxtb	r3, r5
 801ad66:	2b0a      	cmp	r3, #10
 801ad68:	d019      	beq.n	801ad9e <_putc_r+0x76>
 801ad6a:	6823      	ldr	r3, [r4, #0]
 801ad6c:	1c5a      	adds	r2, r3, #1
 801ad6e:	6022      	str	r2, [r4, #0]
 801ad70:	701d      	strb	r5, [r3, #0]
 801ad72:	b2ed      	uxtb	r5, r5
 801ad74:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801ad76:	07da      	lsls	r2, r3, #31
 801ad78:	d405      	bmi.n	801ad86 <_putc_r+0x5e>
 801ad7a:	89a3      	ldrh	r3, [r4, #12]
 801ad7c:	059b      	lsls	r3, r3, #22
 801ad7e:	d402      	bmi.n	801ad86 <_putc_r+0x5e>
 801ad80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ad82:	f7ff f91d 	bl	8019fc0 <__retarget_lock_release_recursive>
 801ad86:	4628      	mov	r0, r5
 801ad88:	bd70      	pop	{r4, r5, r6, pc}
 801ad8a:	4b09      	ldr	r3, [pc, #36]	; (801adb0 <_putc_r+0x88>)
 801ad8c:	429c      	cmp	r4, r3
 801ad8e:	d101      	bne.n	801ad94 <_putc_r+0x6c>
 801ad90:	68b4      	ldr	r4, [r6, #8]
 801ad92:	e7d6      	b.n	801ad42 <_putc_r+0x1a>
 801ad94:	4b07      	ldr	r3, [pc, #28]	; (801adb4 <_putc_r+0x8c>)
 801ad96:	429c      	cmp	r4, r3
 801ad98:	bf08      	it	eq
 801ad9a:	68f4      	ldreq	r4, [r6, #12]
 801ad9c:	e7d1      	b.n	801ad42 <_putc_r+0x1a>
 801ad9e:	4629      	mov	r1, r5
 801ada0:	4622      	mov	r2, r4
 801ada2:	4630      	mov	r0, r6
 801ada4:	f7fd ffe6 	bl	8018d74 <__swbuf_r>
 801ada8:	4605      	mov	r5, r0
 801adaa:	e7e3      	b.n	801ad74 <_putc_r+0x4c>
 801adac:	0801d86c 	.word	0x0801d86c
 801adb0:	0801d88c 	.word	0x0801d88c
 801adb4:	0801d84c 	.word	0x0801d84c

0801adb8 <__sread>:
 801adb8:	b510      	push	{r4, lr}
 801adba:	460c      	mov	r4, r1
 801adbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801adc0:	f000 f8ee 	bl	801afa0 <_read_r>
 801adc4:	2800      	cmp	r0, #0
 801adc6:	bfab      	itete	ge
 801adc8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801adca:	89a3      	ldrhlt	r3, [r4, #12]
 801adcc:	181b      	addge	r3, r3, r0
 801adce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801add2:	bfac      	ite	ge
 801add4:	6563      	strge	r3, [r4, #84]	; 0x54
 801add6:	81a3      	strhlt	r3, [r4, #12]
 801add8:	bd10      	pop	{r4, pc}

0801adda <__swrite>:
 801adda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801adde:	461f      	mov	r7, r3
 801ade0:	898b      	ldrh	r3, [r1, #12]
 801ade2:	05db      	lsls	r3, r3, #23
 801ade4:	4605      	mov	r5, r0
 801ade6:	460c      	mov	r4, r1
 801ade8:	4616      	mov	r6, r2
 801adea:	d505      	bpl.n	801adf8 <__swrite+0x1e>
 801adec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801adf0:	2302      	movs	r3, #2
 801adf2:	2200      	movs	r2, #0
 801adf4:	f000 f870 	bl	801aed8 <_lseek_r>
 801adf8:	89a3      	ldrh	r3, [r4, #12]
 801adfa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801adfe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801ae02:	81a3      	strh	r3, [r4, #12]
 801ae04:	4632      	mov	r2, r6
 801ae06:	463b      	mov	r3, r7
 801ae08:	4628      	mov	r0, r5
 801ae0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ae0e:	f000 b817 	b.w	801ae40 <_write_r>

0801ae12 <__sseek>:
 801ae12:	b510      	push	{r4, lr}
 801ae14:	460c      	mov	r4, r1
 801ae16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ae1a:	f000 f85d 	bl	801aed8 <_lseek_r>
 801ae1e:	1c43      	adds	r3, r0, #1
 801ae20:	89a3      	ldrh	r3, [r4, #12]
 801ae22:	bf15      	itete	ne
 801ae24:	6560      	strne	r0, [r4, #84]	; 0x54
 801ae26:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801ae2a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801ae2e:	81a3      	strheq	r3, [r4, #12]
 801ae30:	bf18      	it	ne
 801ae32:	81a3      	strhne	r3, [r4, #12]
 801ae34:	bd10      	pop	{r4, pc}

0801ae36 <__sclose>:
 801ae36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ae3a:	f000 b81b 	b.w	801ae74 <_close_r>
	...

0801ae40 <_write_r>:
 801ae40:	b538      	push	{r3, r4, r5, lr}
 801ae42:	4d07      	ldr	r5, [pc, #28]	; (801ae60 <_write_r+0x20>)
 801ae44:	4604      	mov	r4, r0
 801ae46:	4608      	mov	r0, r1
 801ae48:	4611      	mov	r1, r2
 801ae4a:	2200      	movs	r2, #0
 801ae4c:	602a      	str	r2, [r5, #0]
 801ae4e:	461a      	mov	r2, r3
 801ae50:	f7e9 f871 	bl	8003f36 <_write>
 801ae54:	1c43      	adds	r3, r0, #1
 801ae56:	d102      	bne.n	801ae5e <_write_r+0x1e>
 801ae58:	682b      	ldr	r3, [r5, #0]
 801ae5a:	b103      	cbz	r3, 801ae5e <_write_r+0x1e>
 801ae5c:	6023      	str	r3, [r4, #0]
 801ae5e:	bd38      	pop	{r3, r4, r5, pc}
 801ae60:	2004a72c 	.word	0x2004a72c

0801ae64 <abort>:
 801ae64:	b508      	push	{r3, lr}
 801ae66:	2006      	movs	r0, #6
 801ae68:	f000 f8d4 	bl	801b014 <raise>
 801ae6c:	2001      	movs	r0, #1
 801ae6e:	f7e9 f83b 	bl	8003ee8 <_exit>
	...

0801ae74 <_close_r>:
 801ae74:	b538      	push	{r3, r4, r5, lr}
 801ae76:	4d06      	ldr	r5, [pc, #24]	; (801ae90 <_close_r+0x1c>)
 801ae78:	2300      	movs	r3, #0
 801ae7a:	4604      	mov	r4, r0
 801ae7c:	4608      	mov	r0, r1
 801ae7e:	602b      	str	r3, [r5, #0]
 801ae80:	f7e9 f875 	bl	8003f6e <_close>
 801ae84:	1c43      	adds	r3, r0, #1
 801ae86:	d102      	bne.n	801ae8e <_close_r+0x1a>
 801ae88:	682b      	ldr	r3, [r5, #0]
 801ae8a:	b103      	cbz	r3, 801ae8e <_close_r+0x1a>
 801ae8c:	6023      	str	r3, [r4, #0]
 801ae8e:	bd38      	pop	{r3, r4, r5, pc}
 801ae90:	2004a72c 	.word	0x2004a72c

0801ae94 <_fstat_r>:
 801ae94:	b538      	push	{r3, r4, r5, lr}
 801ae96:	4d07      	ldr	r5, [pc, #28]	; (801aeb4 <_fstat_r+0x20>)
 801ae98:	2300      	movs	r3, #0
 801ae9a:	4604      	mov	r4, r0
 801ae9c:	4608      	mov	r0, r1
 801ae9e:	4611      	mov	r1, r2
 801aea0:	602b      	str	r3, [r5, #0]
 801aea2:	f7e9 f870 	bl	8003f86 <_fstat>
 801aea6:	1c43      	adds	r3, r0, #1
 801aea8:	d102      	bne.n	801aeb0 <_fstat_r+0x1c>
 801aeaa:	682b      	ldr	r3, [r5, #0]
 801aeac:	b103      	cbz	r3, 801aeb0 <_fstat_r+0x1c>
 801aeae:	6023      	str	r3, [r4, #0]
 801aeb0:	bd38      	pop	{r3, r4, r5, pc}
 801aeb2:	bf00      	nop
 801aeb4:	2004a72c 	.word	0x2004a72c

0801aeb8 <_isatty_r>:
 801aeb8:	b538      	push	{r3, r4, r5, lr}
 801aeba:	4d06      	ldr	r5, [pc, #24]	; (801aed4 <_isatty_r+0x1c>)
 801aebc:	2300      	movs	r3, #0
 801aebe:	4604      	mov	r4, r0
 801aec0:	4608      	mov	r0, r1
 801aec2:	602b      	str	r3, [r5, #0]
 801aec4:	f7e9 f86f 	bl	8003fa6 <_isatty>
 801aec8:	1c43      	adds	r3, r0, #1
 801aeca:	d102      	bne.n	801aed2 <_isatty_r+0x1a>
 801aecc:	682b      	ldr	r3, [r5, #0]
 801aece:	b103      	cbz	r3, 801aed2 <_isatty_r+0x1a>
 801aed0:	6023      	str	r3, [r4, #0]
 801aed2:	bd38      	pop	{r3, r4, r5, pc}
 801aed4:	2004a72c 	.word	0x2004a72c

0801aed8 <_lseek_r>:
 801aed8:	b538      	push	{r3, r4, r5, lr}
 801aeda:	4d07      	ldr	r5, [pc, #28]	; (801aef8 <_lseek_r+0x20>)
 801aedc:	4604      	mov	r4, r0
 801aede:	4608      	mov	r0, r1
 801aee0:	4611      	mov	r1, r2
 801aee2:	2200      	movs	r2, #0
 801aee4:	602a      	str	r2, [r5, #0]
 801aee6:	461a      	mov	r2, r3
 801aee8:	f7e9 f868 	bl	8003fbc <_lseek>
 801aeec:	1c43      	adds	r3, r0, #1
 801aeee:	d102      	bne.n	801aef6 <_lseek_r+0x1e>
 801aef0:	682b      	ldr	r3, [r5, #0]
 801aef2:	b103      	cbz	r3, 801aef6 <_lseek_r+0x1e>
 801aef4:	6023      	str	r3, [r4, #0]
 801aef6:	bd38      	pop	{r3, r4, r5, pc}
 801aef8:	2004a72c 	.word	0x2004a72c

0801aefc <__ascii_mbtowc>:
 801aefc:	b082      	sub	sp, #8
 801aefe:	b901      	cbnz	r1, 801af02 <__ascii_mbtowc+0x6>
 801af00:	a901      	add	r1, sp, #4
 801af02:	b142      	cbz	r2, 801af16 <__ascii_mbtowc+0x1a>
 801af04:	b14b      	cbz	r3, 801af1a <__ascii_mbtowc+0x1e>
 801af06:	7813      	ldrb	r3, [r2, #0]
 801af08:	600b      	str	r3, [r1, #0]
 801af0a:	7812      	ldrb	r2, [r2, #0]
 801af0c:	1e10      	subs	r0, r2, #0
 801af0e:	bf18      	it	ne
 801af10:	2001      	movne	r0, #1
 801af12:	b002      	add	sp, #8
 801af14:	4770      	bx	lr
 801af16:	4610      	mov	r0, r2
 801af18:	e7fb      	b.n	801af12 <__ascii_mbtowc+0x16>
 801af1a:	f06f 0001 	mvn.w	r0, #1
 801af1e:	e7f8      	b.n	801af12 <__ascii_mbtowc+0x16>

0801af20 <memmove>:
 801af20:	4288      	cmp	r0, r1
 801af22:	b510      	push	{r4, lr}
 801af24:	eb01 0402 	add.w	r4, r1, r2
 801af28:	d902      	bls.n	801af30 <memmove+0x10>
 801af2a:	4284      	cmp	r4, r0
 801af2c:	4623      	mov	r3, r4
 801af2e:	d807      	bhi.n	801af40 <memmove+0x20>
 801af30:	1e43      	subs	r3, r0, #1
 801af32:	42a1      	cmp	r1, r4
 801af34:	d008      	beq.n	801af48 <memmove+0x28>
 801af36:	f811 2b01 	ldrb.w	r2, [r1], #1
 801af3a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801af3e:	e7f8      	b.n	801af32 <memmove+0x12>
 801af40:	4402      	add	r2, r0
 801af42:	4601      	mov	r1, r0
 801af44:	428a      	cmp	r2, r1
 801af46:	d100      	bne.n	801af4a <memmove+0x2a>
 801af48:	bd10      	pop	{r4, pc}
 801af4a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801af4e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801af52:	e7f7      	b.n	801af44 <memmove+0x24>

0801af54 <_realloc_r>:
 801af54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801af56:	4607      	mov	r7, r0
 801af58:	4614      	mov	r4, r2
 801af5a:	460e      	mov	r6, r1
 801af5c:	b921      	cbnz	r1, 801af68 <_realloc_r+0x14>
 801af5e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801af62:	4611      	mov	r1, r2
 801af64:	f7fd b96e 	b.w	8018244 <_malloc_r>
 801af68:	b922      	cbnz	r2, 801af74 <_realloc_r+0x20>
 801af6a:	f7fd f91b 	bl	80181a4 <_free_r>
 801af6e:	4625      	mov	r5, r4
 801af70:	4628      	mov	r0, r5
 801af72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801af74:	f000 f877 	bl	801b066 <_malloc_usable_size_r>
 801af78:	42a0      	cmp	r0, r4
 801af7a:	d20f      	bcs.n	801af9c <_realloc_r+0x48>
 801af7c:	4621      	mov	r1, r4
 801af7e:	4638      	mov	r0, r7
 801af80:	f7fd f960 	bl	8018244 <_malloc_r>
 801af84:	4605      	mov	r5, r0
 801af86:	2800      	cmp	r0, #0
 801af88:	d0f2      	beq.n	801af70 <_realloc_r+0x1c>
 801af8a:	4631      	mov	r1, r6
 801af8c:	4622      	mov	r2, r4
 801af8e:	f7fd f8f3 	bl	8018178 <memcpy>
 801af92:	4631      	mov	r1, r6
 801af94:	4638      	mov	r0, r7
 801af96:	f7fd f905 	bl	80181a4 <_free_r>
 801af9a:	e7e9      	b.n	801af70 <_realloc_r+0x1c>
 801af9c:	4635      	mov	r5, r6
 801af9e:	e7e7      	b.n	801af70 <_realloc_r+0x1c>

0801afa0 <_read_r>:
 801afa0:	b538      	push	{r3, r4, r5, lr}
 801afa2:	4d07      	ldr	r5, [pc, #28]	; (801afc0 <_read_r+0x20>)
 801afa4:	4604      	mov	r4, r0
 801afa6:	4608      	mov	r0, r1
 801afa8:	4611      	mov	r1, r2
 801afaa:	2200      	movs	r2, #0
 801afac:	602a      	str	r2, [r5, #0]
 801afae:	461a      	mov	r2, r3
 801afb0:	f7e8 ffa4 	bl	8003efc <_read>
 801afb4:	1c43      	adds	r3, r0, #1
 801afb6:	d102      	bne.n	801afbe <_read_r+0x1e>
 801afb8:	682b      	ldr	r3, [r5, #0]
 801afba:	b103      	cbz	r3, 801afbe <_read_r+0x1e>
 801afbc:	6023      	str	r3, [r4, #0]
 801afbe:	bd38      	pop	{r3, r4, r5, pc}
 801afc0:	2004a72c 	.word	0x2004a72c

0801afc4 <_raise_r>:
 801afc4:	291f      	cmp	r1, #31
 801afc6:	b538      	push	{r3, r4, r5, lr}
 801afc8:	4604      	mov	r4, r0
 801afca:	460d      	mov	r5, r1
 801afcc:	d904      	bls.n	801afd8 <_raise_r+0x14>
 801afce:	2316      	movs	r3, #22
 801afd0:	6003      	str	r3, [r0, #0]
 801afd2:	f04f 30ff 	mov.w	r0, #4294967295
 801afd6:	bd38      	pop	{r3, r4, r5, pc}
 801afd8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801afda:	b112      	cbz	r2, 801afe2 <_raise_r+0x1e>
 801afdc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801afe0:	b94b      	cbnz	r3, 801aff6 <_raise_r+0x32>
 801afe2:	4620      	mov	r0, r4
 801afe4:	f000 f830 	bl	801b048 <_getpid_r>
 801afe8:	462a      	mov	r2, r5
 801afea:	4601      	mov	r1, r0
 801afec:	4620      	mov	r0, r4
 801afee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801aff2:	f000 b817 	b.w	801b024 <_kill_r>
 801aff6:	2b01      	cmp	r3, #1
 801aff8:	d00a      	beq.n	801b010 <_raise_r+0x4c>
 801affa:	1c59      	adds	r1, r3, #1
 801affc:	d103      	bne.n	801b006 <_raise_r+0x42>
 801affe:	2316      	movs	r3, #22
 801b000:	6003      	str	r3, [r0, #0]
 801b002:	2001      	movs	r0, #1
 801b004:	e7e7      	b.n	801afd6 <_raise_r+0x12>
 801b006:	2400      	movs	r4, #0
 801b008:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801b00c:	4628      	mov	r0, r5
 801b00e:	4798      	blx	r3
 801b010:	2000      	movs	r0, #0
 801b012:	e7e0      	b.n	801afd6 <_raise_r+0x12>

0801b014 <raise>:
 801b014:	4b02      	ldr	r3, [pc, #8]	; (801b020 <raise+0xc>)
 801b016:	4601      	mov	r1, r0
 801b018:	6818      	ldr	r0, [r3, #0]
 801b01a:	f7ff bfd3 	b.w	801afc4 <_raise_r>
 801b01e:	bf00      	nop
 801b020:	20000058 	.word	0x20000058

0801b024 <_kill_r>:
 801b024:	b538      	push	{r3, r4, r5, lr}
 801b026:	4d07      	ldr	r5, [pc, #28]	; (801b044 <_kill_r+0x20>)
 801b028:	2300      	movs	r3, #0
 801b02a:	4604      	mov	r4, r0
 801b02c:	4608      	mov	r0, r1
 801b02e:	4611      	mov	r1, r2
 801b030:	602b      	str	r3, [r5, #0]
 801b032:	f7e8 ff49 	bl	8003ec8 <_kill>
 801b036:	1c43      	adds	r3, r0, #1
 801b038:	d102      	bne.n	801b040 <_kill_r+0x1c>
 801b03a:	682b      	ldr	r3, [r5, #0]
 801b03c:	b103      	cbz	r3, 801b040 <_kill_r+0x1c>
 801b03e:	6023      	str	r3, [r4, #0]
 801b040:	bd38      	pop	{r3, r4, r5, pc}
 801b042:	bf00      	nop
 801b044:	2004a72c 	.word	0x2004a72c

0801b048 <_getpid_r>:
 801b048:	f7e8 bf36 	b.w	8003eb8 <_getpid>

0801b04c <__ascii_wctomb>:
 801b04c:	b149      	cbz	r1, 801b062 <__ascii_wctomb+0x16>
 801b04e:	2aff      	cmp	r2, #255	; 0xff
 801b050:	bf85      	ittet	hi
 801b052:	238a      	movhi	r3, #138	; 0x8a
 801b054:	6003      	strhi	r3, [r0, #0]
 801b056:	700a      	strbls	r2, [r1, #0]
 801b058:	f04f 30ff 	movhi.w	r0, #4294967295
 801b05c:	bf98      	it	ls
 801b05e:	2001      	movls	r0, #1
 801b060:	4770      	bx	lr
 801b062:	4608      	mov	r0, r1
 801b064:	4770      	bx	lr

0801b066 <_malloc_usable_size_r>:
 801b066:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b06a:	1f18      	subs	r0, r3, #4
 801b06c:	2b00      	cmp	r3, #0
 801b06e:	bfbc      	itt	lt
 801b070:	580b      	ldrlt	r3, [r1, r0]
 801b072:	18c0      	addlt	r0, r0, r3
 801b074:	4770      	bx	lr
	...

0801b078 <log10>:
 801b078:	b538      	push	{r3, r4, r5, lr}
 801b07a:	ed2d 8b02 	vpush	{d8}
 801b07e:	ec55 4b10 	vmov	r4, r5, d0
 801b082:	f000 f841 	bl	801b108 <__ieee754_log10>
 801b086:	4b1e      	ldr	r3, [pc, #120]	; (801b100 <log10+0x88>)
 801b088:	eeb0 8a40 	vmov.f32	s16, s0
 801b08c:	eef0 8a60 	vmov.f32	s17, s1
 801b090:	f993 3000 	ldrsb.w	r3, [r3]
 801b094:	3301      	adds	r3, #1
 801b096:	d01a      	beq.n	801b0ce <log10+0x56>
 801b098:	4622      	mov	r2, r4
 801b09a:	462b      	mov	r3, r5
 801b09c:	4620      	mov	r0, r4
 801b09e:	4629      	mov	r1, r5
 801b0a0:	f7e5 fd64 	bl	8000b6c <__aeabi_dcmpun>
 801b0a4:	b998      	cbnz	r0, 801b0ce <log10+0x56>
 801b0a6:	2200      	movs	r2, #0
 801b0a8:	2300      	movs	r3, #0
 801b0aa:	4620      	mov	r0, r4
 801b0ac:	4629      	mov	r1, r5
 801b0ae:	f7e5 fd3f 	bl	8000b30 <__aeabi_dcmple>
 801b0b2:	b160      	cbz	r0, 801b0ce <log10+0x56>
 801b0b4:	2200      	movs	r2, #0
 801b0b6:	2300      	movs	r3, #0
 801b0b8:	4620      	mov	r0, r4
 801b0ba:	4629      	mov	r1, r5
 801b0bc:	f7e5 fd24 	bl	8000b08 <__aeabi_dcmpeq>
 801b0c0:	b160      	cbz	r0, 801b0dc <log10+0x64>
 801b0c2:	f7fd f81f 	bl	8018104 <__errno>
 801b0c6:	ed9f 8b0c 	vldr	d8, [pc, #48]	; 801b0f8 <log10+0x80>
 801b0ca:	2322      	movs	r3, #34	; 0x22
 801b0cc:	6003      	str	r3, [r0, #0]
 801b0ce:	eeb0 0a48 	vmov.f32	s0, s16
 801b0d2:	eef0 0a68 	vmov.f32	s1, s17
 801b0d6:	ecbd 8b02 	vpop	{d8}
 801b0da:	bd38      	pop	{r3, r4, r5, pc}
 801b0dc:	f7fd f812 	bl	8018104 <__errno>
 801b0e0:	ecbd 8b02 	vpop	{d8}
 801b0e4:	2321      	movs	r3, #33	; 0x21
 801b0e6:	6003      	str	r3, [r0, #0]
 801b0e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b0ec:	4805      	ldr	r0, [pc, #20]	; (801b104 <log10+0x8c>)
 801b0ee:	f000 b897 	b.w	801b220 <nan>
 801b0f2:	bf00      	nop
 801b0f4:	f3af 8000 	nop.w
 801b0f8:	00000000 	.word	0x00000000
 801b0fc:	fff00000 	.word	0xfff00000
 801b100:	20000228 	.word	0x20000228
 801b104:	0801d7b7 	.word	0x0801d7b7

0801b108 <__ieee754_log10>:
 801b108:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b10c:	ec55 4b10 	vmov	r4, r5, d0
 801b110:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 801b114:	462b      	mov	r3, r5
 801b116:	da2f      	bge.n	801b178 <__ieee754_log10+0x70>
 801b118:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 801b11c:	4322      	orrs	r2, r4
 801b11e:	d109      	bne.n	801b134 <__ieee754_log10+0x2c>
 801b120:	493b      	ldr	r1, [pc, #236]	; (801b210 <__ieee754_log10+0x108>)
 801b122:	2200      	movs	r2, #0
 801b124:	2300      	movs	r3, #0
 801b126:	2000      	movs	r0, #0
 801b128:	f7e5 fbb0 	bl	800088c <__aeabi_ddiv>
 801b12c:	ec41 0b10 	vmov	d0, r0, r1
 801b130:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b134:	2d00      	cmp	r5, #0
 801b136:	da09      	bge.n	801b14c <__ieee754_log10+0x44>
 801b138:	ee10 2a10 	vmov	r2, s0
 801b13c:	ee10 0a10 	vmov	r0, s0
 801b140:	4629      	mov	r1, r5
 801b142:	f7e5 f8c1 	bl	80002c8 <__aeabi_dsub>
 801b146:	2200      	movs	r2, #0
 801b148:	2300      	movs	r3, #0
 801b14a:	e7ed      	b.n	801b128 <__ieee754_log10+0x20>
 801b14c:	4b31      	ldr	r3, [pc, #196]	; (801b214 <__ieee754_log10+0x10c>)
 801b14e:	2200      	movs	r2, #0
 801b150:	4629      	mov	r1, r5
 801b152:	ee10 0a10 	vmov	r0, s0
 801b156:	f7e5 fa6f 	bl	8000638 <__aeabi_dmul>
 801b15a:	f06f 0235 	mvn.w	r2, #53	; 0x35
 801b15e:	4604      	mov	r4, r0
 801b160:	460d      	mov	r5, r1
 801b162:	460b      	mov	r3, r1
 801b164:	492c      	ldr	r1, [pc, #176]	; (801b218 <__ieee754_log10+0x110>)
 801b166:	428b      	cmp	r3, r1
 801b168:	dd08      	ble.n	801b17c <__ieee754_log10+0x74>
 801b16a:	4622      	mov	r2, r4
 801b16c:	462b      	mov	r3, r5
 801b16e:	4620      	mov	r0, r4
 801b170:	4629      	mov	r1, r5
 801b172:	f7e5 f8ab 	bl	80002cc <__adddf3>
 801b176:	e7d9      	b.n	801b12c <__ieee754_log10+0x24>
 801b178:	2200      	movs	r2, #0
 801b17a:	e7f3      	b.n	801b164 <__ieee754_log10+0x5c>
 801b17c:	1518      	asrs	r0, r3, #20
 801b17e:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 801b182:	4410      	add	r0, r2
 801b184:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 801b188:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 801b18c:	f3c3 0813 	ubfx	r8, r3, #0, #20
 801b190:	f7e5 f9e8 	bl	8000564 <__aeabi_i2d>
 801b194:	f5c9 737f 	rsb	r3, r9, #1020	; 0x3fc
 801b198:	3303      	adds	r3, #3
 801b19a:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 801b19e:	ec45 4b10 	vmov	d0, r4, r5
 801b1a2:	4606      	mov	r6, r0
 801b1a4:	460f      	mov	r7, r1
 801b1a6:	f000 f843 	bl	801b230 <__ieee754_log>
 801b1aa:	a313      	add	r3, pc, #76	; (adr r3, 801b1f8 <__ieee754_log10+0xf0>)
 801b1ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b1b0:	4630      	mov	r0, r6
 801b1b2:	4639      	mov	r1, r7
 801b1b4:	ec59 8b10 	vmov	r8, r9, d0
 801b1b8:	f7e5 fa3e 	bl	8000638 <__aeabi_dmul>
 801b1bc:	a310      	add	r3, pc, #64	; (adr r3, 801b200 <__ieee754_log10+0xf8>)
 801b1be:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b1c2:	4604      	mov	r4, r0
 801b1c4:	460d      	mov	r5, r1
 801b1c6:	4640      	mov	r0, r8
 801b1c8:	4649      	mov	r1, r9
 801b1ca:	f7e5 fa35 	bl	8000638 <__aeabi_dmul>
 801b1ce:	4602      	mov	r2, r0
 801b1d0:	460b      	mov	r3, r1
 801b1d2:	4620      	mov	r0, r4
 801b1d4:	4629      	mov	r1, r5
 801b1d6:	f7e5 f879 	bl	80002cc <__adddf3>
 801b1da:	a30b      	add	r3, pc, #44	; (adr r3, 801b208 <__ieee754_log10+0x100>)
 801b1dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b1e0:	4604      	mov	r4, r0
 801b1e2:	460d      	mov	r5, r1
 801b1e4:	4630      	mov	r0, r6
 801b1e6:	4639      	mov	r1, r7
 801b1e8:	f7e5 fa26 	bl	8000638 <__aeabi_dmul>
 801b1ec:	4602      	mov	r2, r0
 801b1ee:	460b      	mov	r3, r1
 801b1f0:	4620      	mov	r0, r4
 801b1f2:	4629      	mov	r1, r5
 801b1f4:	e7bd      	b.n	801b172 <__ieee754_log10+0x6a>
 801b1f6:	bf00      	nop
 801b1f8:	11f12b36 	.word	0x11f12b36
 801b1fc:	3d59fef3 	.word	0x3d59fef3
 801b200:	1526e50e 	.word	0x1526e50e
 801b204:	3fdbcb7b 	.word	0x3fdbcb7b
 801b208:	509f6000 	.word	0x509f6000
 801b20c:	3fd34413 	.word	0x3fd34413
 801b210:	c3500000 	.word	0xc3500000
 801b214:	43500000 	.word	0x43500000
 801b218:	7fefffff 	.word	0x7fefffff
 801b21c:	00000000 	.word	0x00000000

0801b220 <nan>:
 801b220:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801b228 <nan+0x8>
 801b224:	4770      	bx	lr
 801b226:	bf00      	nop
 801b228:	00000000 	.word	0x00000000
 801b22c:	7ff80000 	.word	0x7ff80000

0801b230 <__ieee754_log>:
 801b230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b234:	ec51 0b10 	vmov	r0, r1, d0
 801b238:	ed2d 8b04 	vpush	{d8-d9}
 801b23c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 801b240:	b083      	sub	sp, #12
 801b242:	460d      	mov	r5, r1
 801b244:	da29      	bge.n	801b29a <__ieee754_log+0x6a>
 801b246:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801b24a:	4303      	orrs	r3, r0
 801b24c:	ee10 2a10 	vmov	r2, s0
 801b250:	d10c      	bne.n	801b26c <__ieee754_log+0x3c>
 801b252:	49cf      	ldr	r1, [pc, #828]	; (801b590 <__ieee754_log+0x360>)
 801b254:	2200      	movs	r2, #0
 801b256:	2300      	movs	r3, #0
 801b258:	2000      	movs	r0, #0
 801b25a:	f7e5 fb17 	bl	800088c <__aeabi_ddiv>
 801b25e:	ec41 0b10 	vmov	d0, r0, r1
 801b262:	b003      	add	sp, #12
 801b264:	ecbd 8b04 	vpop	{d8-d9}
 801b268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b26c:	2900      	cmp	r1, #0
 801b26e:	da05      	bge.n	801b27c <__ieee754_log+0x4c>
 801b270:	460b      	mov	r3, r1
 801b272:	f7e5 f829 	bl	80002c8 <__aeabi_dsub>
 801b276:	2200      	movs	r2, #0
 801b278:	2300      	movs	r3, #0
 801b27a:	e7ee      	b.n	801b25a <__ieee754_log+0x2a>
 801b27c:	4bc5      	ldr	r3, [pc, #788]	; (801b594 <__ieee754_log+0x364>)
 801b27e:	2200      	movs	r2, #0
 801b280:	f7e5 f9da 	bl	8000638 <__aeabi_dmul>
 801b284:	f06f 0335 	mvn.w	r3, #53	; 0x35
 801b288:	460d      	mov	r5, r1
 801b28a:	4ac3      	ldr	r2, [pc, #780]	; (801b598 <__ieee754_log+0x368>)
 801b28c:	4295      	cmp	r5, r2
 801b28e:	dd06      	ble.n	801b29e <__ieee754_log+0x6e>
 801b290:	4602      	mov	r2, r0
 801b292:	460b      	mov	r3, r1
 801b294:	f7e5 f81a 	bl	80002cc <__adddf3>
 801b298:	e7e1      	b.n	801b25e <__ieee754_log+0x2e>
 801b29a:	2300      	movs	r3, #0
 801b29c:	e7f5      	b.n	801b28a <__ieee754_log+0x5a>
 801b29e:	152c      	asrs	r4, r5, #20
 801b2a0:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 801b2a4:	f3c5 0513 	ubfx	r5, r5, #0, #20
 801b2a8:	441c      	add	r4, r3
 801b2aa:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 801b2ae:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 801b2b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801b2b6:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 801b2ba:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 801b2be:	ea42 0105 	orr.w	r1, r2, r5
 801b2c2:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 801b2c6:	2200      	movs	r2, #0
 801b2c8:	4bb4      	ldr	r3, [pc, #720]	; (801b59c <__ieee754_log+0x36c>)
 801b2ca:	f7e4 fffd 	bl	80002c8 <__aeabi_dsub>
 801b2ce:	1cab      	adds	r3, r5, #2
 801b2d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801b2d4:	2b02      	cmp	r3, #2
 801b2d6:	4682      	mov	sl, r0
 801b2d8:	468b      	mov	fp, r1
 801b2da:	f04f 0200 	mov.w	r2, #0
 801b2de:	dc53      	bgt.n	801b388 <__ieee754_log+0x158>
 801b2e0:	2300      	movs	r3, #0
 801b2e2:	f7e5 fc11 	bl	8000b08 <__aeabi_dcmpeq>
 801b2e6:	b1d0      	cbz	r0, 801b31e <__ieee754_log+0xee>
 801b2e8:	2c00      	cmp	r4, #0
 801b2ea:	f000 8122 	beq.w	801b532 <__ieee754_log+0x302>
 801b2ee:	4620      	mov	r0, r4
 801b2f0:	f7e5 f938 	bl	8000564 <__aeabi_i2d>
 801b2f4:	a390      	add	r3, pc, #576	; (adr r3, 801b538 <__ieee754_log+0x308>)
 801b2f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b2fa:	4606      	mov	r6, r0
 801b2fc:	460f      	mov	r7, r1
 801b2fe:	f7e5 f99b 	bl	8000638 <__aeabi_dmul>
 801b302:	a38f      	add	r3, pc, #572	; (adr r3, 801b540 <__ieee754_log+0x310>)
 801b304:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b308:	4604      	mov	r4, r0
 801b30a:	460d      	mov	r5, r1
 801b30c:	4630      	mov	r0, r6
 801b30e:	4639      	mov	r1, r7
 801b310:	f7e5 f992 	bl	8000638 <__aeabi_dmul>
 801b314:	4602      	mov	r2, r0
 801b316:	460b      	mov	r3, r1
 801b318:	4620      	mov	r0, r4
 801b31a:	4629      	mov	r1, r5
 801b31c:	e7ba      	b.n	801b294 <__ieee754_log+0x64>
 801b31e:	a38a      	add	r3, pc, #552	; (adr r3, 801b548 <__ieee754_log+0x318>)
 801b320:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b324:	4650      	mov	r0, sl
 801b326:	4659      	mov	r1, fp
 801b328:	f7e5 f986 	bl	8000638 <__aeabi_dmul>
 801b32c:	4602      	mov	r2, r0
 801b32e:	460b      	mov	r3, r1
 801b330:	2000      	movs	r0, #0
 801b332:	499b      	ldr	r1, [pc, #620]	; (801b5a0 <__ieee754_log+0x370>)
 801b334:	f7e4 ffc8 	bl	80002c8 <__aeabi_dsub>
 801b338:	4652      	mov	r2, sl
 801b33a:	4606      	mov	r6, r0
 801b33c:	460f      	mov	r7, r1
 801b33e:	465b      	mov	r3, fp
 801b340:	4650      	mov	r0, sl
 801b342:	4659      	mov	r1, fp
 801b344:	f7e5 f978 	bl	8000638 <__aeabi_dmul>
 801b348:	4602      	mov	r2, r0
 801b34a:	460b      	mov	r3, r1
 801b34c:	4630      	mov	r0, r6
 801b34e:	4639      	mov	r1, r7
 801b350:	f7e5 f972 	bl	8000638 <__aeabi_dmul>
 801b354:	4606      	mov	r6, r0
 801b356:	460f      	mov	r7, r1
 801b358:	b914      	cbnz	r4, 801b360 <__ieee754_log+0x130>
 801b35a:	4632      	mov	r2, r6
 801b35c:	463b      	mov	r3, r7
 801b35e:	e0a2      	b.n	801b4a6 <__ieee754_log+0x276>
 801b360:	4620      	mov	r0, r4
 801b362:	f7e5 f8ff 	bl	8000564 <__aeabi_i2d>
 801b366:	a374      	add	r3, pc, #464	; (adr r3, 801b538 <__ieee754_log+0x308>)
 801b368:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b36c:	4680      	mov	r8, r0
 801b36e:	4689      	mov	r9, r1
 801b370:	f7e5 f962 	bl	8000638 <__aeabi_dmul>
 801b374:	a372      	add	r3, pc, #456	; (adr r3, 801b540 <__ieee754_log+0x310>)
 801b376:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b37a:	4604      	mov	r4, r0
 801b37c:	460d      	mov	r5, r1
 801b37e:	4640      	mov	r0, r8
 801b380:	4649      	mov	r1, r9
 801b382:	f7e5 f959 	bl	8000638 <__aeabi_dmul>
 801b386:	e0a7      	b.n	801b4d8 <__ieee754_log+0x2a8>
 801b388:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801b38c:	f7e4 ff9e 	bl	80002cc <__adddf3>
 801b390:	4602      	mov	r2, r0
 801b392:	460b      	mov	r3, r1
 801b394:	4650      	mov	r0, sl
 801b396:	4659      	mov	r1, fp
 801b398:	f7e5 fa78 	bl	800088c <__aeabi_ddiv>
 801b39c:	ec41 0b18 	vmov	d8, r0, r1
 801b3a0:	4620      	mov	r0, r4
 801b3a2:	f7e5 f8df 	bl	8000564 <__aeabi_i2d>
 801b3a6:	ec53 2b18 	vmov	r2, r3, d8
 801b3aa:	ec41 0b19 	vmov	d9, r0, r1
 801b3ae:	ec51 0b18 	vmov	r0, r1, d8
 801b3b2:	f7e5 f941 	bl	8000638 <__aeabi_dmul>
 801b3b6:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 801b3ba:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 801b3be:	9301      	str	r3, [sp, #4]
 801b3c0:	4602      	mov	r2, r0
 801b3c2:	460b      	mov	r3, r1
 801b3c4:	4680      	mov	r8, r0
 801b3c6:	4689      	mov	r9, r1
 801b3c8:	f7e5 f936 	bl	8000638 <__aeabi_dmul>
 801b3cc:	a360      	add	r3, pc, #384	; (adr r3, 801b550 <__ieee754_log+0x320>)
 801b3ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b3d2:	4606      	mov	r6, r0
 801b3d4:	460f      	mov	r7, r1
 801b3d6:	f7e5 f92f 	bl	8000638 <__aeabi_dmul>
 801b3da:	a35f      	add	r3, pc, #380	; (adr r3, 801b558 <__ieee754_log+0x328>)
 801b3dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b3e0:	f7e4 ff74 	bl	80002cc <__adddf3>
 801b3e4:	4632      	mov	r2, r6
 801b3e6:	463b      	mov	r3, r7
 801b3e8:	f7e5 f926 	bl	8000638 <__aeabi_dmul>
 801b3ec:	a35c      	add	r3, pc, #368	; (adr r3, 801b560 <__ieee754_log+0x330>)
 801b3ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b3f2:	f7e4 ff6b 	bl	80002cc <__adddf3>
 801b3f6:	4632      	mov	r2, r6
 801b3f8:	463b      	mov	r3, r7
 801b3fa:	f7e5 f91d 	bl	8000638 <__aeabi_dmul>
 801b3fe:	a35a      	add	r3, pc, #360	; (adr r3, 801b568 <__ieee754_log+0x338>)
 801b400:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b404:	f7e4 ff62 	bl	80002cc <__adddf3>
 801b408:	4642      	mov	r2, r8
 801b40a:	464b      	mov	r3, r9
 801b40c:	f7e5 f914 	bl	8000638 <__aeabi_dmul>
 801b410:	a357      	add	r3, pc, #348	; (adr r3, 801b570 <__ieee754_log+0x340>)
 801b412:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b416:	4680      	mov	r8, r0
 801b418:	4689      	mov	r9, r1
 801b41a:	4630      	mov	r0, r6
 801b41c:	4639      	mov	r1, r7
 801b41e:	f7e5 f90b 	bl	8000638 <__aeabi_dmul>
 801b422:	a355      	add	r3, pc, #340	; (adr r3, 801b578 <__ieee754_log+0x348>)
 801b424:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b428:	f7e4 ff50 	bl	80002cc <__adddf3>
 801b42c:	4632      	mov	r2, r6
 801b42e:	463b      	mov	r3, r7
 801b430:	f7e5 f902 	bl	8000638 <__aeabi_dmul>
 801b434:	a352      	add	r3, pc, #328	; (adr r3, 801b580 <__ieee754_log+0x350>)
 801b436:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b43a:	f7e4 ff47 	bl	80002cc <__adddf3>
 801b43e:	4632      	mov	r2, r6
 801b440:	463b      	mov	r3, r7
 801b442:	f7e5 f8f9 	bl	8000638 <__aeabi_dmul>
 801b446:	460b      	mov	r3, r1
 801b448:	4602      	mov	r2, r0
 801b44a:	4649      	mov	r1, r9
 801b44c:	4640      	mov	r0, r8
 801b44e:	f7e4 ff3d 	bl	80002cc <__adddf3>
 801b452:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 801b456:	9b01      	ldr	r3, [sp, #4]
 801b458:	3551      	adds	r5, #81	; 0x51
 801b45a:	431d      	orrs	r5, r3
 801b45c:	2d00      	cmp	r5, #0
 801b45e:	4680      	mov	r8, r0
 801b460:	4689      	mov	r9, r1
 801b462:	dd48      	ble.n	801b4f6 <__ieee754_log+0x2c6>
 801b464:	4b4e      	ldr	r3, [pc, #312]	; (801b5a0 <__ieee754_log+0x370>)
 801b466:	2200      	movs	r2, #0
 801b468:	4650      	mov	r0, sl
 801b46a:	4659      	mov	r1, fp
 801b46c:	f7e5 f8e4 	bl	8000638 <__aeabi_dmul>
 801b470:	4652      	mov	r2, sl
 801b472:	465b      	mov	r3, fp
 801b474:	f7e5 f8e0 	bl	8000638 <__aeabi_dmul>
 801b478:	4602      	mov	r2, r0
 801b47a:	460b      	mov	r3, r1
 801b47c:	4606      	mov	r6, r0
 801b47e:	460f      	mov	r7, r1
 801b480:	4640      	mov	r0, r8
 801b482:	4649      	mov	r1, r9
 801b484:	f7e4 ff22 	bl	80002cc <__adddf3>
 801b488:	ec53 2b18 	vmov	r2, r3, d8
 801b48c:	f7e5 f8d4 	bl	8000638 <__aeabi_dmul>
 801b490:	4680      	mov	r8, r0
 801b492:	4689      	mov	r9, r1
 801b494:	b964      	cbnz	r4, 801b4b0 <__ieee754_log+0x280>
 801b496:	4602      	mov	r2, r0
 801b498:	460b      	mov	r3, r1
 801b49a:	4630      	mov	r0, r6
 801b49c:	4639      	mov	r1, r7
 801b49e:	f7e4 ff13 	bl	80002c8 <__aeabi_dsub>
 801b4a2:	4602      	mov	r2, r0
 801b4a4:	460b      	mov	r3, r1
 801b4a6:	4650      	mov	r0, sl
 801b4a8:	4659      	mov	r1, fp
 801b4aa:	f7e4 ff0d 	bl	80002c8 <__aeabi_dsub>
 801b4ae:	e6d6      	b.n	801b25e <__ieee754_log+0x2e>
 801b4b0:	a321      	add	r3, pc, #132	; (adr r3, 801b538 <__ieee754_log+0x308>)
 801b4b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b4b6:	ec51 0b19 	vmov	r0, r1, d9
 801b4ba:	f7e5 f8bd 	bl	8000638 <__aeabi_dmul>
 801b4be:	a320      	add	r3, pc, #128	; (adr r3, 801b540 <__ieee754_log+0x310>)
 801b4c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b4c4:	4604      	mov	r4, r0
 801b4c6:	460d      	mov	r5, r1
 801b4c8:	ec51 0b19 	vmov	r0, r1, d9
 801b4cc:	f7e5 f8b4 	bl	8000638 <__aeabi_dmul>
 801b4d0:	4642      	mov	r2, r8
 801b4d2:	464b      	mov	r3, r9
 801b4d4:	f7e4 fefa 	bl	80002cc <__adddf3>
 801b4d8:	4602      	mov	r2, r0
 801b4da:	460b      	mov	r3, r1
 801b4dc:	4630      	mov	r0, r6
 801b4de:	4639      	mov	r1, r7
 801b4e0:	f7e4 fef2 	bl	80002c8 <__aeabi_dsub>
 801b4e4:	4652      	mov	r2, sl
 801b4e6:	465b      	mov	r3, fp
 801b4e8:	f7e4 feee 	bl	80002c8 <__aeabi_dsub>
 801b4ec:	4602      	mov	r2, r0
 801b4ee:	460b      	mov	r3, r1
 801b4f0:	4620      	mov	r0, r4
 801b4f2:	4629      	mov	r1, r5
 801b4f4:	e7d9      	b.n	801b4aa <__ieee754_log+0x27a>
 801b4f6:	4602      	mov	r2, r0
 801b4f8:	460b      	mov	r3, r1
 801b4fa:	4650      	mov	r0, sl
 801b4fc:	4659      	mov	r1, fp
 801b4fe:	f7e4 fee3 	bl	80002c8 <__aeabi_dsub>
 801b502:	ec53 2b18 	vmov	r2, r3, d8
 801b506:	f7e5 f897 	bl	8000638 <__aeabi_dmul>
 801b50a:	4606      	mov	r6, r0
 801b50c:	460f      	mov	r7, r1
 801b50e:	2c00      	cmp	r4, #0
 801b510:	f43f af23 	beq.w	801b35a <__ieee754_log+0x12a>
 801b514:	a308      	add	r3, pc, #32	; (adr r3, 801b538 <__ieee754_log+0x308>)
 801b516:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b51a:	ec51 0b19 	vmov	r0, r1, d9
 801b51e:	f7e5 f88b 	bl	8000638 <__aeabi_dmul>
 801b522:	a307      	add	r3, pc, #28	; (adr r3, 801b540 <__ieee754_log+0x310>)
 801b524:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b528:	4604      	mov	r4, r0
 801b52a:	460d      	mov	r5, r1
 801b52c:	ec51 0b19 	vmov	r0, r1, d9
 801b530:	e727      	b.n	801b382 <__ieee754_log+0x152>
 801b532:	ed9f 0b15 	vldr	d0, [pc, #84]	; 801b588 <__ieee754_log+0x358>
 801b536:	e694      	b.n	801b262 <__ieee754_log+0x32>
 801b538:	fee00000 	.word	0xfee00000
 801b53c:	3fe62e42 	.word	0x3fe62e42
 801b540:	35793c76 	.word	0x35793c76
 801b544:	3dea39ef 	.word	0x3dea39ef
 801b548:	55555555 	.word	0x55555555
 801b54c:	3fd55555 	.word	0x3fd55555
 801b550:	df3e5244 	.word	0xdf3e5244
 801b554:	3fc2f112 	.word	0x3fc2f112
 801b558:	96cb03de 	.word	0x96cb03de
 801b55c:	3fc74664 	.word	0x3fc74664
 801b560:	94229359 	.word	0x94229359
 801b564:	3fd24924 	.word	0x3fd24924
 801b568:	55555593 	.word	0x55555593
 801b56c:	3fe55555 	.word	0x3fe55555
 801b570:	d078c69f 	.word	0xd078c69f
 801b574:	3fc39a09 	.word	0x3fc39a09
 801b578:	1d8e78af 	.word	0x1d8e78af
 801b57c:	3fcc71c5 	.word	0x3fcc71c5
 801b580:	9997fa04 	.word	0x9997fa04
 801b584:	3fd99999 	.word	0x3fd99999
	...
 801b590:	c3500000 	.word	0xc3500000
 801b594:	43500000 	.word	0x43500000
 801b598:	7fefffff 	.word	0x7fefffff
 801b59c:	3ff00000 	.word	0x3ff00000
 801b5a0:	3fe00000 	.word	0x3fe00000

0801b5a4 <_init>:
 801b5a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b5a6:	bf00      	nop
 801b5a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b5aa:	bc08      	pop	{r3}
 801b5ac:	469e      	mov	lr, r3
 801b5ae:	4770      	bx	lr

0801b5b0 <_fini>:
 801b5b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b5b2:	bf00      	nop
 801b5b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b5b6:	bc08      	pop	{r3}
 801b5b8:	469e      	mov	lr, r3
 801b5ba:	4770      	bx	lr
